@file:kotlinx.cinterop.InteropStubs
@file:Suppress("UNUSED_VARIABLE", "UNUSED_EXPRESSION")
package libwebsockets

import kotlin.native.SymbolName
import kotlinx.cinterop.*
import cnames.structs.ASN1_ITEM_st
import cnames.structs.ASN1_TEMPLATE_st
import cnames.structs.ASN1_TLC_st
import cnames.structs.ASN1_VALUE_st
import cnames.structs.AUTHORITY_KEYID_st
import cnames.structs.DIST_POINT_st
import cnames.structs.DSA_SIG_st
import cnames.structs.ECDSA_SIG_st
import cnames.structs.ISSUING_DIST_POINT_st
import cnames.structs.NAME_CONSTRAINTS_st
import cnames.structs.X509_POLICY_CACHE_st
import cnames.structs.X509_POLICY_LEVEL_st
import cnames.structs.X509_POLICY_NODE_st
import cnames.structs.X509_POLICY_TREE_st
import cnames.structs.X509_VERIFY_PARAM_st
import cnames.structs.X509_crl_info_st
import cnames.structs.X509_crl_st
import cnames.structs.X509_extension_st
import cnames.structs.X509_name_entry_st
import cnames.structs.X509_name_st
import cnames.structs.X509_pubkey_st
import cnames.structs.X509_req_info_st
import cnames.structs.X509_req_st
import cnames.structs.X509_sig_st
import cnames.structs._IO_FILE_plus
import cnames.structs.__jmp_buf_tag
import cnames.structs.__locale_data
import cnames.structs._cap_struct
import cnames.structs.asn1_object_st
import cnames.structs.asn1_pctx_st
import cnames.structs.asn1_sctx_st
import cnames.structs.async_job_st
import cnames.structs.async_wait_ctx_st
import cnames.structs.bignum_ctx
import cnames.structs.bignum_st
import cnames.structs.bio_addr_st
import cnames.structs.bio_addrinfo_st
import cnames.structs.bio_method_st
import cnames.structs.bio_st
import cnames.structs.bn_blinding_st
import cnames.structs.bn_gencb_st
import cnames.structs.bn_mont_ctx_st
import cnames.structs.bn_recp_ctx_st
import cnames.structs.comp_ctx_st
import cnames.structs.comp_method_st
import cnames.structs.conf_st
import cnames.structs.ct_policy_eval_ctx_st
import cnames.structs.ctlog_st
import cnames.structs.ctlog_store_st
import cnames.structs.dh_method
import cnames.structs.dh_st
import cnames.structs.dsa_method
import cnames.structs.dsa_st
import cnames.structs.ec_group_st
import cnames.structs.ec_key_method_st
import cnames.structs.ec_key_st
import cnames.structs.ec_method_st
import cnames.structs.ec_parameters_st
import cnames.structs.ec_point_st
import cnames.structs.ecpk_parameters_st
import cnames.structs.engine_st
import cnames.structs.evp_Encode_Ctx_st
import cnames.structs.evp_cipher_ctx_st
import cnames.structs.evp_cipher_st
import cnames.structs.evp_md_ctx_st
import cnames.structs.evp_md_st
import cnames.structs.evp_pkey_asn1_method_st
import cnames.structs.evp_pkey_ctx_st
import cnames.structs.evp_pkey_method_st
import cnames.structs.evp_pkey_st
import cnames.structs.hmac_ctx_st
import cnames.structs.lhash_node_st
import cnames.structs.lhash_st
import cnames.structs.lhash_st_SSL_SESSION
import cnames.structs.lws
import cnames.structs.lws_buflist
import cnames.structs.lws_context
import cnames.structs.lws_diskcache_scan
import cnames.structs.lws_fts
import cnames.structs.lws_fts_file
import cnames.structs.lws_ring
import cnames.structs.lws_spa
import cnames.structs.lws_threadpool
import cnames.structs.lws_threadpool_task
import cnames.structs.lws_vhost
import cnames.structs.lwsac
import cnames.structs.ocsp_req_ctx_st
import cnames.structs.ocsp_responder_id_st
import cnames.structs.ocsp_response_st
import cnames.structs.openssl_ssl_test_functions
import cnames.structs.ossl_init_settings_st
import cnames.structs.pkcs8_priv_key_info_st
import cnames.structs.rand_meth_st
import cnames.structs.rsa_meth_st
import cnames.structs.rsa_st
import cnames.structs.sct_ctx_st
import cnames.structs.sct_st
import cnames.structs.sigevent
import cnames.structs.ssl_cipher_st
import cnames.structs.ssl_comp_st
import cnames.structs.ssl_conf_ctx_st
import cnames.structs.ssl_ctx_st
import cnames.structs.ssl_dane_st
import cnames.structs.ssl_method_st
import cnames.structs.ssl_session_st
import cnames.structs.ssl_st
import cnames.structs.stack_st
import cnames.structs.stack_st_ASN1_GENERALSTRING
import cnames.structs.stack_st_ASN1_INTEGER
import cnames.structs.stack_st_ASN1_OBJECT
import cnames.structs.stack_st_ASN1_STRING_TABLE
import cnames.structs.stack_st_ASN1_TYPE
import cnames.structs.stack_st_ASN1_UTF8STRING
import cnames.structs.stack_st_BIO
import cnames.structs.stack_st_CTLOG
import cnames.structs.stack_st_OPENSSL_BLOCK
import cnames.structs.stack_st_OPENSSL_CSTRING
import cnames.structs.stack_st_OPENSSL_STRING
import cnames.structs.stack_st_PKCS7
import cnames.structs.stack_st_PKCS7_RECIP_INFO
import cnames.structs.stack_st_PKCS7_SIGNER_INFO
import cnames.structs.stack_st_POLICYQUALINFO
import cnames.structs.stack_st_SCT
import cnames.structs.stack_st_SRTP_PROTECTION_PROFILE
import cnames.structs.stack_st_SSL_CIPHER
import cnames.structs.stack_st_SSL_COMP
import cnames.structs.stack_st_X509
import cnames.structs.stack_st_X509_ALGOR
import cnames.structs.stack_st_X509_ATTRIBUTE
import cnames.structs.stack_st_X509_CRL
import cnames.structs.stack_st_X509_EXTENSION
import cnames.structs.stack_st_X509_INFO
import cnames.structs.stack_st_X509_LOOKUP
import cnames.structs.stack_st_X509_NAME
import cnames.structs.stack_st_X509_NAME_ENTRY
import cnames.structs.stack_st_X509_OBJECT
import cnames.structs.stack_st_X509_POLICY_NODE
import cnames.structs.stack_st_X509_REVOKED
import cnames.structs.stack_st_X509_TRUST
import cnames.structs.stack_st_X509_VERIFY_PARAM
import cnames.structs.stack_st_void
import cnames.structs.tls_sigalgs_st
import cnames.structs.ui_method_st
import cnames.structs.ui_st
import cnames.structs.v3_ext_ctx
import cnames.structs.x509_attributes_st
import cnames.structs.x509_cert_aux_st
import cnames.structs.x509_cinf_st
import cnames.structs.x509_crl_method_st
import cnames.structs.x509_lookup_method_st
import cnames.structs.x509_lookup_st
import cnames.structs.x509_object_st
import cnames.structs.x509_revoked_st
import cnames.structs.x509_st
import cnames.structs.x509_store_ctx_st
import cnames.structs.x509_store_st
import platform.posix.__gnuc_va_list
import platform.posix.size_t
import platform.posix.size_tVar
import platform.posix.wchar_t
import platform.posix.wchar_tVar

// NOTE THIS FILE IS AUTO-GENERATED

fun memcpy(__dest: CValuesRef<*>?, __src: CValuesRef<*>?, __n: size_t): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge0(__dest?.getPointer(memScope).rawValue, __src?.getPointer(memScope).rawValue, __n))
    }
}

fun memmove(__dest: CValuesRef<*>?, __src: CValuesRef<*>?, __n: size_t): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1(__dest?.getPointer(memScope).rawValue, __src?.getPointer(memScope).rawValue, __n))
    }
}

fun memccpy(__dest: CValuesRef<*>?, __src: CValuesRef<*>?, __c: Int, __n: size_t): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2(__dest?.getPointer(memScope).rawValue, __src?.getPointer(memScope).rawValue, __c, __n))
    }
}

fun memset(__s: CValuesRef<*>?, __c: Int, __n: size_t): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3(__s?.getPointer(memScope).rawValue, __c, __n))
    }
}

fun memcmp(__s1: CValuesRef<*>?, __s2: CValuesRef<*>?, __n: size_t): Int {
    memScoped {
        return kniBridge4(__s1?.getPointer(memScope).rawValue, __s2?.getPointer(memScope).rawValue, __n)
    }
}

fun memchr(__s: CValuesRef<*>?, __c: Int, __n: size_t): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge5(__s?.getPointer(memScope).rawValue, __c, __n))
    }
}

fun strcpy(__dest: CValuesRef<ByteVar>?, __src: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge6(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue))
    }
}

fun strncpy(__dest: CValuesRef<ByteVar>?, __src: String?, __n: size_t): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge7(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue, __n))
    }
}

fun strcat(__dest: CValuesRef<ByteVar>?, __src: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge8(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue))
    }
}

fun strncat(__dest: CValuesRef<ByteVar>?, __src: String?, __n: size_t): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge9(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue, __n))
    }
}

fun strcmp(__s1: String?, __s2: String?): Int {
    memScoped {
        return kniBridge10(__s1?.cstr?.getPointer(memScope).rawValue, __s2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun strncmp(__s1: String?, __s2: String?, __n: size_t): Int {
    memScoped {
        return kniBridge11(__s1?.cstr?.getPointer(memScope).rawValue, __s2?.cstr?.getPointer(memScope).rawValue, __n)
    }
}

fun strcoll(__s1: String?, __s2: String?): Int {
    memScoped {
        return kniBridge12(__s1?.cstr?.getPointer(memScope).rawValue, __s2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun strxfrm(__dest: CValuesRef<ByteVar>?, __src: String?, __n: size_t): ULong {
    memScoped {
        return kniBridge13(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue, __n)
    }
}

fun strcoll_l(__s1: String?, __s2: String?, __l: locale_t?): Int {
    memScoped {
        return kniBridge14(__s1?.cstr?.getPointer(memScope).rawValue, __s2?.cstr?.getPointer(memScope).rawValue, __l.rawValue)
    }
}

fun strxfrm_l(__dest: CValuesRef<ByteVar>?, __src: String?, __n: size_t, __l: locale_t?): size_t {
    memScoped {
        return kniBridge15(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue, __n, __l.rawValue)
    }
}

fun strdup(__s: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge16(__s?.cstr?.getPointer(memScope).rawValue))
    }
}

fun strndup(__string: String?, __n: size_t): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge17(__string?.cstr?.getPointer(memScope).rawValue, __n))
    }
}

fun strchr(__s: String?, __c: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge18(__s?.cstr?.getPointer(memScope).rawValue, __c))
    }
}

fun strrchr(__s: String?, __c: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge19(__s?.cstr?.getPointer(memScope).rawValue, __c))
    }
}

fun strcspn(__s: String?, __reject: String?): ULong {
    memScoped {
        return kniBridge20(__s?.cstr?.getPointer(memScope).rawValue, __reject?.cstr?.getPointer(memScope).rawValue)
    }
}

fun strspn(__s: String?, __accept: String?): ULong {
    memScoped {
        return kniBridge21(__s?.cstr?.getPointer(memScope).rawValue, __accept?.cstr?.getPointer(memScope).rawValue)
    }
}

fun strpbrk(__s: String?, __accept: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge22(__s?.cstr?.getPointer(memScope).rawValue, __accept?.cstr?.getPointer(memScope).rawValue))
    }
}

fun strstr(__haystack: String?, __needle: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge23(__haystack?.cstr?.getPointer(memScope).rawValue, __needle?.cstr?.getPointer(memScope).rawValue))
    }
}

fun strtok(__s: CValuesRef<ByteVar>?, __delim: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge24(__s?.getPointer(memScope).rawValue, __delim?.cstr?.getPointer(memScope).rawValue))
    }
}

fun __strtok_r(__s: CValuesRef<ByteVar>?, __delim: String?, __save_ptr: CValuesRef<CPointerVar<ByteVar>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge25(__s?.getPointer(memScope).rawValue, __delim?.cstr?.getPointer(memScope).rawValue, __save_ptr?.getPointer(memScope).rawValue))
    }
}

fun strtok_r(__s: CValuesRef<ByteVar>?, __delim: String?, __save_ptr: CValuesRef<CPointerVar<ByteVar>>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge26(__s?.getPointer(memScope).rawValue, __delim?.cstr?.getPointer(memScope).rawValue, __save_ptr?.getPointer(memScope).rawValue))
    }
}

fun strlen(__s: String?): ULong {
    memScoped {
        return kniBridge27(__s?.cstr?.getPointer(memScope).rawValue)
    }
}

fun strnlen(__string: String?, __maxlen: size_t): size_t {
    memScoped {
        return kniBridge28(__string?.cstr?.getPointer(memScope).rawValue, __maxlen)
    }
}

fun strerror(__errnum: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge29(__errnum))
}

fun strerror_r(__errnum: Int, __buf: CValuesRef<ByteVar>?, __buflen: size_t): Int {
    memScoped {
        return kniBridge30(__errnum, __buf?.getPointer(memScope).rawValue, __buflen)
    }
}

fun strerror_l(__errnum: Int, __l: locale_t?): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge31(__errnum, __l.rawValue))
}

fun bcmp(__s1: CValuesRef<*>?, __s2: CValuesRef<*>?, __n: size_t): Int {
    memScoped {
        return kniBridge32(__s1?.getPointer(memScope).rawValue, __s2?.getPointer(memScope).rawValue, __n)
    }
}

fun bcopy(__src: CValuesRef<*>?, __dest: CValuesRef<*>?, __n: size_t): Unit {
    memScoped {
        return kniBridge33(__src?.getPointer(memScope).rawValue, __dest?.getPointer(memScope).rawValue, __n)
    }
}

fun bzero(__s: CValuesRef<*>?, __n: size_t): Unit {
    memScoped {
        return kniBridge34(__s?.getPointer(memScope).rawValue, __n)
    }
}

fun index(__s: String?, __c: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge35(__s?.cstr?.getPointer(memScope).rawValue, __c))
    }
}

fun rindex(__s: String?, __c: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge36(__s?.cstr?.getPointer(memScope).rawValue, __c))
    }
}

fun ffs(__i: Int): Int {
    return kniBridge37(__i)
}

fun ffsl(__l: Long): Int {
    return kniBridge38(__l)
}

fun ffsll(__ll: Long): Int {
    return kniBridge39(__ll)
}

fun strcasecmp(__s1: String?, __s2: String?): Int {
    memScoped {
        return kniBridge40(__s1?.cstr?.getPointer(memScope).rawValue, __s2?.cstr?.getPointer(memScope).rawValue)
    }
}

fun strncasecmp(__s1: String?, __s2: String?, __n: size_t): Int {
    memScoped {
        return kniBridge41(__s1?.cstr?.getPointer(memScope).rawValue, __s2?.cstr?.getPointer(memScope).rawValue, __n)
    }
}

fun strcasecmp_l(__s1: String?, __s2: String?, __loc: locale_t?): Int {
    memScoped {
        return kniBridge42(__s1?.cstr?.getPointer(memScope).rawValue, __s2?.cstr?.getPointer(memScope).rawValue, __loc.rawValue)
    }
}

fun strncasecmp_l(__s1: String?, __s2: String?, __n: size_t, __loc: locale_t?): Int {
    memScoped {
        return kniBridge43(__s1?.cstr?.getPointer(memScope).rawValue, __s2?.cstr?.getPointer(memScope).rawValue, __n, __loc.rawValue)
    }
}

fun explicit_bzero(__s: CValuesRef<*>?, __n: size_t): Unit {
    memScoped {
        return kniBridge44(__s?.getPointer(memScope).rawValue, __n)
    }
}

fun strsep(__stringp: CValuesRef<CPointerVar<ByteVar>>?, __delim: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge45(__stringp?.getPointer(memScope).rawValue, __delim?.cstr?.getPointer(memScope).rawValue))
    }
}

fun strsignal(__sig: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge46(__sig))
}

fun __stpcpy(__dest: CValuesRef<ByteVar>?, __src: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge47(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue))
    }
}

fun stpcpy(__dest: CValuesRef<ByteVar>?, __src: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge48(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue))
    }
}

fun __stpncpy(__dest: CValuesRef<ByteVar>?, __src: String?, __n: size_t): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge49(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue, __n))
    }
}

fun stpncpy(__dest: CValuesRef<ByteVar>?, __src: String?, __n: size_t): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge50(__dest?.getPointer(memScope).rawValue, __src?.cstr?.getPointer(memScope).rawValue, __n))
    }
}

fun __ctype_get_mb_cur_max(): size_t {
    return kniBridge51()
}

fun atof(__nptr: String?): Double {
    memScoped {
        return kniBridge52(__nptr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun atoi(__nptr: String?): Int {
    memScoped {
        return kniBridge53(__nptr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun atol(__nptr: String?): Long {
    memScoped {
        return kniBridge54(__nptr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun atoll(__nptr: String?): Long {
    memScoped {
        return kniBridge55(__nptr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun strtod(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?): Double {
    memScoped {
        return kniBridge56(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue)
    }
}

fun strtof(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?): Float {
    memScoped {
        return kniBridge57(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue)
    }
}

fun strtol(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?, __base: Int): Long {
    memScoped {
        return kniBridge58(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun strtoul(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?, __base: Int): ULong {
    memScoped {
        return kniBridge59(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun strtoq(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?, __base: Int): Long {
    memScoped {
        return kniBridge60(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun strtouq(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?, __base: Int): ULong {
    memScoped {
        return kniBridge61(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun strtoll(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?, __base: Int): Long {
    memScoped {
        return kniBridge62(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun strtoull(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?, __base: Int): ULong {
    memScoped {
        return kniBridge63(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun l64a(__n: Long): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge64(__n))
}

fun a64l(__s: String?): Long {
    memScoped {
        return kniBridge65(__s?.cstr?.getPointer(memScope).rawValue)
    }
}

fun __uint16_identity(__x: __uint16_t): __uint16_t {
    return kniBridge66(__x)
}

fun __uint32_identity(__x: __uint32_t): __uint32_t {
    return kniBridge67(__x)
}

fun __uint64_identity(__x: __uint64_t): __uint64_t {
    return kniBridge68(__x)
}

fun select(__nfds: Int, __readfds: CValuesRef<fd_set>?, __writefds: CValuesRef<fd_set>?, __exceptfds: CValuesRef<fd_set>?, __timeout: CValuesRef<timeval>?): Int {
    memScoped {
        return kniBridge69(__nfds, __readfds?.getPointer(memScope).rawValue, __writefds?.getPointer(memScope).rawValue, __exceptfds?.getPointer(memScope).rawValue, __timeout?.getPointer(memScope).rawValue)
    }
}

fun pselect(__nfds: Int, __readfds: CValuesRef<fd_set>?, __writefds: CValuesRef<fd_set>?, __exceptfds: CValuesRef<fd_set>?, __timeout: CValuesRef<timespec>?, __sigmask: CValuesRef<__sigset_t>?): Int {
    memScoped {
        return kniBridge70(__nfds, __readfds?.getPointer(memScope).rawValue, __writefds?.getPointer(memScope).rawValue, __exceptfds?.getPointer(memScope).rawValue, __timeout?.getPointer(memScope).rawValue, __sigmask?.getPointer(memScope).rawValue)
    }
}

fun gnu_dev_major(__dev: __dev_t): UInt {
    return kniBridge71(__dev)
}

fun gnu_dev_minor(__dev: __dev_t): UInt {
    return kniBridge72(__dev)
}

fun gnu_dev_makedev(__major: UInt, __minor: UInt): __dev_t {
    return kniBridge73(__major, __minor)
}

fun random(): Long {
    return kniBridge74()
}

fun srandom(__seed: UInt): Unit {
    return kniBridge75(__seed)
}

fun initstate(__seed: UInt, __statebuf: CValuesRef<ByteVar>?, __statelen: size_t): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge76(__seed, __statebuf?.getPointer(memScope).rawValue, __statelen))
    }
}

fun setstate(__statebuf: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge77(__statebuf?.getPointer(memScope).rawValue))
    }
}

fun random_r(__buf: CValuesRef<random_data>?, __result: CValuesRef<int32_tVar>?): Int {
    memScoped {
        return kniBridge78(__buf?.getPointer(memScope).rawValue, __result?.getPointer(memScope).rawValue)
    }
}

fun srandom_r(__seed: UInt, __buf: CValuesRef<random_data>?): Int {
    memScoped {
        return kniBridge79(__seed, __buf?.getPointer(memScope).rawValue)
    }
}

fun initstate_r(__seed: UInt, __statebuf: CValuesRef<ByteVar>?, __statelen: size_t, __buf: CValuesRef<random_data>?): Int {
    memScoped {
        return kniBridge80(__seed, __statebuf?.getPointer(memScope).rawValue, __statelen, __buf?.getPointer(memScope).rawValue)
    }
}

fun setstate_r(__statebuf: CValuesRef<ByteVar>?, __buf: CValuesRef<random_data>?): Int {
    memScoped {
        return kniBridge81(__statebuf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue)
    }
}

fun rand(): Int {
    return kniBridge82()
}

fun srand(__seed: UInt): Unit {
    return kniBridge83(__seed)
}

fun rand_r(__seed: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge84(__seed?.getPointer(memScope).rawValue)
    }
}

fun drand48(): Double {
    return kniBridge85()
}

fun erand48(__xsubi: CValuesRef<UShortVar>?): Double {
    memScoped {
        return kniBridge86(__xsubi?.getPointer(memScope).rawValue)
    }
}

fun lrand48(): Long {
    return kniBridge87()
}

fun nrand48(__xsubi: CValuesRef<UShortVar>?): Long {
    memScoped {
        return kniBridge88(__xsubi?.getPointer(memScope).rawValue)
    }
}

fun mrand48(): Long {
    return kniBridge89()
}

fun jrand48(__xsubi: CValuesRef<UShortVar>?): Long {
    memScoped {
        return kniBridge90(__xsubi?.getPointer(memScope).rawValue)
    }
}

fun srand48(__seedval: Long): Unit {
    return kniBridge91(__seedval)
}

fun seed48(__seed16v: CValuesRef<UShortVar>?): CPointer<UShortVar>? {
    memScoped {
        return interpretCPointer<UShortVar>(kniBridge92(__seed16v?.getPointer(memScope).rawValue))
    }
}

fun lcong48(__param: CValuesRef<UShortVar>?): Unit {
    memScoped {
        return kniBridge93(__param?.getPointer(memScope).rawValue)
    }
}

fun drand48_r(__buffer: CValuesRef<drand48_data>?, __result: CValuesRef<DoubleVar>?): Int {
    memScoped {
        return kniBridge94(__buffer?.getPointer(memScope).rawValue, __result?.getPointer(memScope).rawValue)
    }
}

fun erand48_r(__xsubi: CValuesRef<UShortVar>?, __buffer: CValuesRef<drand48_data>?, __result: CValuesRef<DoubleVar>?): Int {
    memScoped {
        return kniBridge95(__xsubi?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue, __result?.getPointer(memScope).rawValue)
    }
}

fun lrand48_r(__buffer: CValuesRef<drand48_data>?, __result: CValuesRef<LongVar>?): Int {
    memScoped {
        return kniBridge96(__buffer?.getPointer(memScope).rawValue, __result?.getPointer(memScope).rawValue)
    }
}

fun nrand48_r(__xsubi: CValuesRef<UShortVar>?, __buffer: CValuesRef<drand48_data>?, __result: CValuesRef<LongVar>?): Int {
    memScoped {
        return kniBridge97(__xsubi?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue, __result?.getPointer(memScope).rawValue)
    }
}

fun mrand48_r(__buffer: CValuesRef<drand48_data>?, __result: CValuesRef<LongVar>?): Int {
    memScoped {
        return kniBridge98(__buffer?.getPointer(memScope).rawValue, __result?.getPointer(memScope).rawValue)
    }
}

fun jrand48_r(__xsubi: CValuesRef<UShortVar>?, __buffer: CValuesRef<drand48_data>?, __result: CValuesRef<LongVar>?): Int {
    memScoped {
        return kniBridge99(__xsubi?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue, __result?.getPointer(memScope).rawValue)
    }
}

fun srand48_r(__seedval: Long, __buffer: CValuesRef<drand48_data>?): Int {
    memScoped {
        return kniBridge100(__seedval, __buffer?.getPointer(memScope).rawValue)
    }
}

fun seed48_r(__seed16v: CValuesRef<UShortVar>?, __buffer: CValuesRef<drand48_data>?): Int {
    memScoped {
        return kniBridge101(__seed16v?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue)
    }
}

fun lcong48_r(__param: CValuesRef<UShortVar>?, __buffer: CValuesRef<drand48_data>?): Int {
    memScoped {
        return kniBridge102(__param?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue)
    }
}

fun malloc(__size: size_t): COpaquePointer? {
    return interpretCPointer<COpaque>(kniBridge103(__size))
}

fun calloc(__nmemb: size_t, __size: size_t): COpaquePointer? {
    return interpretCPointer<COpaque>(kniBridge104(__nmemb, __size))
}

fun realloc(__ptr: CValuesRef<*>?, __size: size_t): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge105(__ptr?.getPointer(memScope).rawValue, __size))
    }
}

fun free(__ptr: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge106(__ptr?.getPointer(memScope).rawValue)
    }
}

fun alloca(__size: size_t): COpaquePointer? {
    return interpretCPointer<COpaque>(kniBridge107(__size))
}

fun valloc(__size: size_t): COpaquePointer? {
    return interpretCPointer<COpaque>(kniBridge108(__size))
}

fun posix_memalign(__memptr: CValuesRef<COpaquePointerVar>?, __alignment: size_t, __size: size_t): Int {
    memScoped {
        return kniBridge109(__memptr?.getPointer(memScope).rawValue, __alignment, __size)
    }
}

fun aligned_alloc(__alignment: size_t, __size: size_t): COpaquePointer? {
    return interpretCPointer<COpaque>(kniBridge110(__alignment, __size))
}

fun abort(): Unit {
    return kniBridge111()
}

fun atexit(__func: CPointer<CFunction<() -> Unit>>?): Int {
    return kniBridge112(__func.rawValue)
}

fun at_quick_exit(__func: CPointer<CFunction<() -> Unit>>?): Int {
    return kniBridge113(__func.rawValue)
}

fun on_exit(__func: CPointer<CFunction<(Int, COpaquePointer?) -> Unit>>?, __arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge114(__func.rawValue, __arg?.getPointer(memScope).rawValue)
    }
}

fun exit(__status: Int): Unit {
    return kniBridge115(__status)
}

fun quick_exit(__status: Int): Unit {
    return kniBridge116(__status)
}

fun _Exit(__status: Int): Unit {
    return kniBridge117(__status)
}

fun getenv(__name: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge118(__name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun putenv(__string: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge119(__string?.getPointer(memScope).rawValue)
    }
}

fun setenv(__name: String?, __value: String?, __replace: Int): Int {
    memScoped {
        return kniBridge120(__name?.cstr?.getPointer(memScope).rawValue, __value?.cstr?.getPointer(memScope).rawValue, __replace)
    }
}

fun unsetenv(__name: String?): Int {
    memScoped {
        return kniBridge121(__name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun clearenv(): Int {
    return kniBridge122()
}

fun mktemp(__template: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge123(__template?.getPointer(memScope).rawValue))
    }
}

fun mkstemp(__template: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge124(__template?.getPointer(memScope).rawValue)
    }
}

fun mkstemps(__template: CValuesRef<ByteVar>?, __suffixlen: Int): Int {
    memScoped {
        return kniBridge125(__template?.getPointer(memScope).rawValue, __suffixlen)
    }
}

fun mkdtemp(__template: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge126(__template?.getPointer(memScope).rawValue))
    }
}

fun system(__command: String?): Int {
    memScoped {
        return kniBridge127(__command?.cstr?.getPointer(memScope).rawValue)
    }
}

fun realpath(__name: String?, __resolved: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge128(__name?.cstr?.getPointer(memScope).rawValue, __resolved?.getPointer(memScope).rawValue))
    }
}

fun bsearch(__key: CValuesRef<*>?, __base: CValuesRef<*>?, __nmemb: size_t, __size: size_t, __compar: __compar_fn_t?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge129(__key?.getPointer(memScope).rawValue, __base?.getPointer(memScope).rawValue, __nmemb, __size, __compar.rawValue))
    }
}

fun qsort(__base: CValuesRef<*>?, __nmemb: size_t, __size: size_t, __compar: __compar_fn_t?): Unit {
    memScoped {
        return kniBridge130(__base?.getPointer(memScope).rawValue, __nmemb, __size, __compar.rawValue)
    }
}

fun abs(__x: Int): Int {
    return kniBridge131(__x)
}

fun labs(__x: Long): Long {
    return kniBridge132(__x)
}

fun llabs(__x: Long): Long {
    return kniBridge133(__x)
}

fun div(__numer: Int, __denom: Int): CValue<div_t> {
    val kniRetVal = nativeHeap.alloc<div_t>()
    try {
        kniBridge134(__numer, __denom, kniRetVal.rawPtr)
        return kniRetVal.readValue()
    } finally { nativeHeap.free(kniRetVal) }
}

fun ldiv(__numer: Long, __denom: Long): CValue<ldiv_t> {
    val kniRetVal = nativeHeap.alloc<ldiv_t>()
    try {
        kniBridge135(__numer, __denom, kniRetVal.rawPtr)
        return kniRetVal.readValue()
    } finally { nativeHeap.free(kniRetVal) }
}

fun lldiv(__numer: Long, __denom: Long): CValue<lldiv_t> {
    val kniRetVal = nativeHeap.alloc<lldiv_t>()
    try {
        kniBridge136(__numer, __denom, kniRetVal.rawPtr)
        return kniRetVal.readValue()
    } finally { nativeHeap.free(kniRetVal) }
}

fun ecvt(__value: Double, __ndigit: Int, __decpt: CValuesRef<IntVar>?, __sign: CValuesRef<IntVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge137(__value, __ndigit, __decpt?.getPointer(memScope).rawValue, __sign?.getPointer(memScope).rawValue))
    }
}

fun fcvt(__value: Double, __ndigit: Int, __decpt: CValuesRef<IntVar>?, __sign: CValuesRef<IntVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge138(__value, __ndigit, __decpt?.getPointer(memScope).rawValue, __sign?.getPointer(memScope).rawValue))
    }
}

fun gcvt(__value: Double, __ndigit: Int, __buf: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge139(__value, __ndigit, __buf?.getPointer(memScope).rawValue))
    }
}

fun ecvt_r(__value: Double, __ndigit: Int, __decpt: CValuesRef<IntVar>?, __sign: CValuesRef<IntVar>?, __buf: CValuesRef<ByteVar>?, __len: size_t): Int {
    memScoped {
        return kniBridge140(__value, __ndigit, __decpt?.getPointer(memScope).rawValue, __sign?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __len)
    }
}

fun fcvt_r(__value: Double, __ndigit: Int, __decpt: CValuesRef<IntVar>?, __sign: CValuesRef<IntVar>?, __buf: CValuesRef<ByteVar>?, __len: size_t): Int {
    memScoped {
        return kniBridge141(__value, __ndigit, __decpt?.getPointer(memScope).rawValue, __sign?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __len)
    }
}

fun mblen(__s: String?, __n: size_t): Int {
    memScoped {
        return kniBridge142(__s?.cstr?.getPointer(memScope).rawValue, __n)
    }
}

fun mbtowc(__pwc: CValuesRef<wchar_tVar>?, __s: String?, __n: size_t): Int {
    memScoped {
        return kniBridge143(__pwc?.getPointer(memScope).rawValue, __s?.cstr?.getPointer(memScope).rawValue, __n)
    }
}

fun wctomb(__s: CValuesRef<ByteVar>?, __wchar: wchar_t): Int {
    memScoped {
        return kniBridge144(__s?.getPointer(memScope).rawValue, __wchar)
    }
}

fun mbstowcs(__pwcs: CValuesRef<wchar_tVar>?, __s: String?, __n: size_t): size_t {
    memScoped {
        return kniBridge145(__pwcs?.getPointer(memScope).rawValue, __s?.cstr?.getPointer(memScope).rawValue, __n)
    }
}

fun wcstombs(__s: CValuesRef<ByteVar>?, __pwcs: CValuesRef<wchar_tVar>?, __n: size_t): size_t {
    memScoped {
        return kniBridge146(__s?.getPointer(memScope).rawValue, __pwcs?.getPointer(memScope).rawValue, __n)
    }
}

fun rpmatch(__response: String?): Int {
    memScoped {
        return kniBridge147(__response?.cstr?.getPointer(memScope).rawValue)
    }
}

fun getsubopt(__optionp: CValuesRef<CPointerVar<ByteVar>>?, __tokens: CValuesRef<CPointerVar<ByteVar>>?, __valuep: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge148(__optionp?.getPointer(memScope).rawValue, __tokens?.getPointer(memScope).rawValue, __valuep?.getPointer(memScope).rawValue)
    }
}

fun getloadavg(__loadavg: CValuesRef<DoubleVar>?, __nelem: Int): Int {
    memScoped {
        return kniBridge149(__loadavg?.getPointer(memScope).rawValue, __nelem)
    }
}

fun access(__name: String?, __type: Int): Int {
    memScoped {
        return kniBridge150(__name?.cstr?.getPointer(memScope).rawValue, __type)
    }
}

fun faccessat(__fd: Int, __file: String?, __type: Int, __flag: Int): Int {
    memScoped {
        return kniBridge151(__fd, __file?.cstr?.getPointer(memScope).rawValue, __type, __flag)
    }
}

fun lseek(__fd: Int, __offset: __off_t, __whence: Int): __off_t {
    return kniBridge152(__fd, __offset, __whence)
}

fun close(__fd: Int): Int {
    return kniBridge153(__fd)
}

fun read(__fd: Int, __buf: CValuesRef<*>?, __nbytes: size_t): ssize_t {
    memScoped {
        return kniBridge154(__fd, __buf?.getPointer(memScope).rawValue, __nbytes)
    }
}

fun write(__fd: Int, __buf: CValuesRef<*>?, __n: size_t): ssize_t {
    memScoped {
        return kniBridge155(__fd, __buf?.getPointer(memScope).rawValue, __n)
    }
}

fun pread(__fd: Int, __buf: CValuesRef<*>?, __nbytes: size_t, __offset: __off_t): ssize_t {
    memScoped {
        return kniBridge156(__fd, __buf?.getPointer(memScope).rawValue, __nbytes, __offset)
    }
}

fun pwrite(__fd: Int, __buf: CValuesRef<*>?, __n: size_t, __offset: __off_t): ssize_t {
    memScoped {
        return kniBridge157(__fd, __buf?.getPointer(memScope).rawValue, __n, __offset)
    }
}

fun pipe(__pipedes: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge158(__pipedes?.getPointer(memScope).rawValue)
    }
}

fun alarm(__seconds: UInt): UInt {
    return kniBridge159(__seconds)
}

fun sleep(__seconds: UInt): UInt {
    return kniBridge160(__seconds)
}

fun ualarm(__value: __useconds_t, __interval: __useconds_t): __useconds_t {
    return kniBridge161(__value, __interval)
}

fun usleep(__useconds: __useconds_t): Int {
    return kniBridge162(__useconds)
}

fun pause(): Int {
    return kniBridge163()
}

fun chown(__file: String?, __owner: __uid_t, __group: __gid_t): Int {
    memScoped {
        return kniBridge164(__file?.cstr?.getPointer(memScope).rawValue, __owner, __group)
    }
}

fun fchown(__fd: Int, __owner: __uid_t, __group: __gid_t): Int {
    return kniBridge165(__fd, __owner, __group)
}

fun lchown(__file: String?, __owner: __uid_t, __group: __gid_t): Int {
    memScoped {
        return kniBridge166(__file?.cstr?.getPointer(memScope).rawValue, __owner, __group)
    }
}

fun fchownat(__fd: Int, __file: String?, __owner: __uid_t, __group: __gid_t, __flag: Int): Int {
    memScoped {
        return kniBridge167(__fd, __file?.cstr?.getPointer(memScope).rawValue, __owner, __group, __flag)
    }
}

fun chdir(__path: String?): Int {
    memScoped {
        return kniBridge168(__path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun fchdir(__fd: Int): Int {
    return kniBridge169(__fd)
}

fun getcwd(__buf: CValuesRef<ByteVar>?, __size: size_t): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge170(__buf?.getPointer(memScope).rawValue, __size))
    }
}

fun getwd(__buf: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge171(__buf?.getPointer(memScope).rawValue))
    }
}

fun dup(__fd: Int): Int {
    return kniBridge172(__fd)
}

fun dup2(__fd: Int, __fd2: Int): Int {
    return kniBridge173(__fd, __fd2)
}

fun execve(__path: String?, __argv: CValuesRef<CPointerVar<ByteVar>>?, __envp: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge174(__path?.cstr?.getPointer(memScope).rawValue, __argv?.getPointer(memScope).rawValue, __envp?.getPointer(memScope).rawValue)
    }
}

fun fexecve(__fd: Int, __argv: CValuesRef<CPointerVar<ByteVar>>?, __envp: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge175(__fd, __argv?.getPointer(memScope).rawValue, __envp?.getPointer(memScope).rawValue)
    }
}

fun execv(__path: String?, __argv: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge176(__path?.cstr?.getPointer(memScope).rawValue, __argv?.getPointer(memScope).rawValue)
    }
}

fun execle(__path: String?, __arg: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge177(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__path?.cstr?.getPointer(memScope), __arg?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun execl(__path: String?, __arg: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge178(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__path?.cstr?.getPointer(memScope), __arg?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun execvp(__file: String?, __argv: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge179(__file?.cstr?.getPointer(memScope).rawValue, __argv?.getPointer(memScope).rawValue)
    }
}

fun execlp(__file: String?, __arg: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge180(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__file?.cstr?.getPointer(memScope), __arg?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun nice(__inc: Int): Int {
    return kniBridge181(__inc)
}

fun _exit(__status: Int): Unit {
    return kniBridge182(__status)
}

fun pathconf(__path: String?, __name: Int): Long {
    memScoped {
        return kniBridge183(__path?.cstr?.getPointer(memScope).rawValue, __name)
    }
}

fun fpathconf(__fd: Int, __name: Int): Long {
    return kniBridge184(__fd, __name)
}

fun sysconf(__name: Int): Long {
    return kniBridge185(__name)
}

fun confstr(__name: Int, __buf: CValuesRef<ByteVar>?, __len: size_t): size_t {
    memScoped {
        return kniBridge186(__name, __buf?.getPointer(memScope).rawValue, __len)
    }
}

fun getpid(): __pid_t {
    return kniBridge187()
}

fun getppid(): __pid_t {
    return kniBridge188()
}

fun getpgrp(): __pid_t {
    return kniBridge189()
}

fun __getpgid(__pid: __pid_t): __pid_t {
    return kniBridge190(__pid)
}

fun getpgid(__pid: __pid_t): __pid_t {
    return kniBridge191(__pid)
}

fun setpgid(__pid: __pid_t, __pgid: __pid_t): Int {
    return kniBridge192(__pid, __pgid)
}

fun setpgrp(): Int {
    return kniBridge193()
}

fun setsid(): __pid_t {
    return kniBridge194()
}

fun getsid(__pid: __pid_t): __pid_t {
    return kniBridge195(__pid)
}

fun getuid(): __uid_t {
    return kniBridge196()
}

fun geteuid(): __uid_t {
    return kniBridge197()
}

fun getgid(): __gid_t {
    return kniBridge198()
}

fun getegid(): __gid_t {
    return kniBridge199()
}

fun getgroups(__size: Int, __list: CValuesRef<__gid_tVar>?): Int {
    memScoped {
        return kniBridge200(__size, __list?.getPointer(memScope).rawValue)
    }
}

fun setuid(__uid: __uid_t): Int {
    return kniBridge201(__uid)
}

fun setreuid(__ruid: __uid_t, __euid: __uid_t): Int {
    return kniBridge202(__ruid, __euid)
}

fun seteuid(__uid: __uid_t): Int {
    return kniBridge203(__uid)
}

fun setgid(__gid: __gid_t): Int {
    return kniBridge204(__gid)
}

fun setregid(__rgid: __gid_t, __egid: __gid_t): Int {
    return kniBridge205(__rgid, __egid)
}

fun setegid(__gid: __gid_t): Int {
    return kniBridge206(__gid)
}

fun fork(): __pid_t {
    return kniBridge207()
}

fun vfork(): Int {
    return kniBridge208()
}

fun ttyname(__fd: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge209(__fd))
}

fun ttyname_r(__fd: Int, __buf: CValuesRef<ByteVar>?, __buflen: size_t): Int {
    memScoped {
        return kniBridge210(__fd, __buf?.getPointer(memScope).rawValue, __buflen)
    }
}

fun isatty(__fd: Int): Int {
    return kniBridge211(__fd)
}

fun ttyslot(): Int {
    return kniBridge212()
}

fun link(__from: String?, __to: String?): Int {
    memScoped {
        return kniBridge213(__from?.cstr?.getPointer(memScope).rawValue, __to?.cstr?.getPointer(memScope).rawValue)
    }
}

fun linkat(__fromfd: Int, __from: String?, __tofd: Int, __to: String?, __flags: Int): Int {
    memScoped {
        return kniBridge214(__fromfd, __from?.cstr?.getPointer(memScope).rawValue, __tofd, __to?.cstr?.getPointer(memScope).rawValue, __flags)
    }
}

fun symlink(__from: String?, __to: String?): Int {
    memScoped {
        return kniBridge215(__from?.cstr?.getPointer(memScope).rawValue, __to?.cstr?.getPointer(memScope).rawValue)
    }
}

fun readlink(__path: String?, __buf: CValuesRef<ByteVar>?, __len: size_t): ssize_t {
    memScoped {
        return kniBridge216(__path?.cstr?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __len)
    }
}

fun symlinkat(__from: String?, __tofd: Int, __to: String?): Int {
    memScoped {
        return kniBridge217(__from?.cstr?.getPointer(memScope).rawValue, __tofd, __to?.cstr?.getPointer(memScope).rawValue)
    }
}

fun readlinkat(__fd: Int, __path: String?, __buf: CValuesRef<ByteVar>?, __len: size_t): ssize_t {
    memScoped {
        return kniBridge218(__fd, __path?.cstr?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __len)
    }
}

fun unlink(__name: String?): Int {
    memScoped {
        return kniBridge219(__name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun unlinkat(__fd: Int, __name: String?, __flag: Int): Int {
    memScoped {
        return kniBridge220(__fd, __name?.cstr?.getPointer(memScope).rawValue, __flag)
    }
}

fun rmdir(__path: String?): Int {
    memScoped {
        return kniBridge221(__path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun tcgetpgrp(__fd: Int): __pid_t {
    return kniBridge222(__fd)
}

fun tcsetpgrp(__fd: Int, __pgrp_id: __pid_t): Int {
    return kniBridge223(__fd, __pgrp_id)
}

fun getlogin(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge224())
}

fun getlogin_r(__name: CValuesRef<ByteVar>?, __name_len: size_t): Int {
    memScoped {
        return kniBridge225(__name?.getPointer(memScope).rawValue, __name_len)
    }
}

fun setlogin(__name: String?): Int {
    memScoped {
        return kniBridge226(__name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun getopt(___argc: Int, ___argv: CValuesRef<CPointerVar<ByteVar>>?, __shortopts: String?): Int {
    memScoped {
        return kniBridge227(___argc, ___argv?.getPointer(memScope).rawValue, __shortopts?.cstr?.getPointer(memScope).rawValue)
    }
}

fun gethostname(__name: CValuesRef<ByteVar>?, __len: size_t): Int {
    memScoped {
        return kniBridge228(__name?.getPointer(memScope).rawValue, __len)
    }
}

fun sethostname(__name: String?, __len: size_t): Int {
    memScoped {
        return kniBridge229(__name?.cstr?.getPointer(memScope).rawValue, __len)
    }
}

fun sethostid(__id: Long): Int {
    return kniBridge230(__id)
}

fun getdomainname(__name: CValuesRef<ByteVar>?, __len: size_t): Int {
    memScoped {
        return kniBridge231(__name?.getPointer(memScope).rawValue, __len)
    }
}

fun setdomainname(__name: String?, __len: size_t): Int {
    memScoped {
        return kniBridge232(__name?.cstr?.getPointer(memScope).rawValue, __len)
    }
}

fun vhangup(): Int {
    return kniBridge233()
}

fun revoke(__file: String?): Int {
    memScoped {
        return kniBridge234(__file?.cstr?.getPointer(memScope).rawValue)
    }
}

fun profil(__sample_buffer: CValuesRef<UShortVar>?, __size: size_t, __offset: size_t, __scale: UInt): Int {
    memScoped {
        return kniBridge235(__sample_buffer?.getPointer(memScope).rawValue, __size, __offset, __scale)
    }
}

fun acct(__name: String?): Int {
    memScoped {
        return kniBridge236(__name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun getusershell(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge237())
}

fun endusershell(): Unit {
    return kniBridge238()
}

fun setusershell(): Unit {
    return kniBridge239()
}

fun daemon(__nochdir: Int, __noclose: Int): Int {
    return kniBridge240(__nochdir, __noclose)
}

fun chroot(__path: String?): Int {
    memScoped {
        return kniBridge241(__path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun getpass(__prompt: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge242(__prompt?.cstr?.getPointer(memScope).rawValue))
    }
}

fun fsync(__fd: Int): Int {
    return kniBridge243(__fd)
}

fun gethostid(): Long {
    return kniBridge244()
}

fun sync(): Unit {
    return kniBridge245()
}

fun getpagesize(): Int {
    return kniBridge246()
}

fun getdtablesize(): Int {
    return kniBridge247()
}

fun truncate(__file: String?, __length: __off_t): Int {
    memScoped {
        return kniBridge248(__file?.cstr?.getPointer(memScope).rawValue, __length)
    }
}

fun ftruncate(__fd: Int, __length: __off_t): Int {
    return kniBridge249(__fd, __length)
}

fun brk(__addr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge250(__addr?.getPointer(memScope).rawValue)
    }
}

fun sbrk(__delta: intptr_t): COpaquePointer? {
    return interpretCPointer<COpaque>(kniBridge251(__delta))
}

fun syscall(__sysno: Long, vararg variadicArguments: Any?): Long {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<LongVar>(typeOf<LongVar>())
        callWithVarargs(kniBridge252(), kniResult.rawPtr, FFI_TYPE_KIND_SINT64, arrayOf(__sysno), variadicArguments, memScope)
        return kniResult.value
    }
}

fun lockf(__fd: Int, __cmd: Int, __len: __off_t): Int {
    return kniBridge253(__fd, __cmd, __len)
}

fun fdatasync(__fildes: Int): Int {
    return kniBridge254(__fildes)
}

fun getentropy(__buffer: CValuesRef<*>?, __length: size_t): Int {
    memScoped {
        return kniBridge255(__buffer?.getPointer(memScope).rawValue, __length)
    }
}

fun cap_dup(arg0: cap_t?): cap_t? {
    return interpretCPointer<_cap_struct>(kniBridge256(arg0.rawValue))
}

fun cap_free(arg0: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge257(arg0?.getPointer(memScope).rawValue)
    }
}

fun cap_init(): cap_t? {
    return interpretCPointer<_cap_struct>(kniBridge258())
}

fun cap_get_flag(arg0: cap_t?, arg1: cap_value_t, arg2: cap_flag_t, arg3: CValuesRef<cap_flag_value_tVar>?): Int {
    memScoped {
        return kniBridge259(arg0.rawValue, arg1, arg2, arg3?.getPointer(memScope).rawValue)
    }
}

fun cap_set_flag(arg0: cap_t?, arg1: cap_flag_t, arg2: Int, arg3: CValuesRef<cap_value_tVar>?, arg4: cap_flag_value_t): Int {
    memScoped {
        return kniBridge260(arg0.rawValue, arg1, arg2, arg3?.getPointer(memScope).rawValue, arg4)
    }
}

fun cap_clear(arg0: cap_t?): Int {
    return kniBridge261(arg0.rawValue)
}

fun cap_clear_flag(arg0: cap_t?, arg1: cap_flag_t): Int {
    return kniBridge262(arg0.rawValue, arg1)
}

fun cap_get_fd(arg0: Int): cap_t? {
    return interpretCPointer<_cap_struct>(kniBridge263(arg0))
}

fun cap_get_file(arg0: String?): cap_t? {
    memScoped {
        return interpretCPointer<_cap_struct>(kniBridge264(arg0?.cstr?.getPointer(memScope).rawValue))
    }
}

fun cap_set_fd(arg0: Int, arg1: cap_t?): Int {
    return kniBridge265(arg0, arg1.rawValue)
}

fun cap_set_file(arg0: String?, arg1: cap_t?): Int {
    memScoped {
        return kniBridge266(arg0?.cstr?.getPointer(memScope).rawValue, arg1.rawValue)
    }
}

fun cap_get_proc(): cap_t? {
    return interpretCPointer<_cap_struct>(kniBridge267())
}

fun cap_get_pid(arg0: pid_t): cap_t? {
    return interpretCPointer<_cap_struct>(kniBridge268(arg0))
}

fun cap_set_proc(arg0: cap_t?): Int {
    return kniBridge269(arg0.rawValue)
}

fun cap_get_bound(arg0: cap_value_t): Int {
    return kniBridge270(arg0)
}

fun cap_drop_bound(arg0: cap_value_t): Int {
    return kniBridge271(arg0)
}

fun cap_size(arg0: cap_t?): ssize_t {
    return kniBridge272(arg0.rawValue)
}

fun cap_copy_ext(arg0: CValuesRef<*>?, arg1: cap_t?, arg2: ssize_t): ssize_t {
    memScoped {
        return kniBridge273(arg0?.getPointer(memScope).rawValue, arg1.rawValue, arg2)
    }
}

fun cap_copy_int(arg0: CValuesRef<*>?): cap_t? {
    memScoped {
        return interpretCPointer<_cap_struct>(kniBridge274(arg0?.getPointer(memScope).rawValue))
    }
}

fun cap_from_text(arg0: String?): cap_t? {
    memScoped {
        return interpretCPointer<_cap_struct>(kniBridge275(arg0?.cstr?.getPointer(memScope).rawValue))
    }
}

fun cap_to_text(arg0: cap_t?, arg1: CValuesRef<ssize_tVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge276(arg0.rawValue, arg1?.getPointer(memScope).rawValue))
    }
}

fun cap_from_name(arg0: String?, arg1: CValuesRef<cap_value_tVar>?): Int {
    memScoped {
        return kniBridge277(arg0?.cstr?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue)
    }
}

fun cap_to_name(arg0: cap_value_t): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge278(arg0))
}

fun cap_compare(arg0: cap_t?, arg1: cap_t?): Int {
    return kniBridge279(arg0.rawValue, arg1.rawValue)
}

fun capset(header: cap_user_header_t?, data: cap_user_data_t?): Int {
    return kniBridge280(header.rawValue, data.rawValue)
}

fun capget(header: cap_user_header_t?, data: cap_user_data_t?): Int {
    return kniBridge281(header.rawValue, data.rawValue)
}

fun capgetp(pid: pid_t, cap_d: cap_t?): Int {
    return kniBridge282(pid, cap_d.rawValue)
}

fun capsetp(pid: pid_t, cap_d: cap_t?): Int {
    return kniBridge283(pid, cap_d.rawValue)
}

fun poll(__fds: CValuesRef<pollfd>?, __nfds: nfds_t, __timeout: Int): Int {
    memScoped {
        return kniBridge284(__fds?.getPointer(memScope).rawValue, __nfds, __timeout)
    }
}

fun __cmsg_nxthdr(__mhdr: CValuesRef<msghdr>?, __cmsg: CValuesRef<cmsghdr>?): CPointer<cmsghdr>? {
    memScoped {
        return interpretCPointer<cmsghdr>(kniBridge285(__mhdr?.getPointer(memScope).rawValue, __cmsg?.getPointer(memScope).rawValue))
    }
}

fun socket(__domain: Int, __type: Int, __protocol: Int): Int {
    return kniBridge286(__domain, __type, __protocol)
}

fun socketpair(__domain: Int, __type: Int, __protocol: Int, __fds: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge287(__domain, __type, __protocol, __fds?.getPointer(memScope).rawValue)
    }
}

fun bind(__fd: Int, __addr: CValuesRef<sockaddr>?, __len: socklen_t): Int {
    memScoped {
        return kniBridge288(__fd, __addr?.getPointer(memScope).rawValue, __len)
    }
}

fun getsockname(__fd: Int, __addr: CValuesRef<sockaddr>?, __len: CValuesRef<socklen_tVar>?): Int {
    memScoped {
        return kniBridge289(__fd, __addr?.getPointer(memScope).rawValue, __len?.getPointer(memScope).rawValue)
    }
}

fun connect(__fd: Int, __addr: CValuesRef<sockaddr>?, __len: socklen_t): Int {
    memScoped {
        return kniBridge290(__fd, __addr?.getPointer(memScope).rawValue, __len)
    }
}

fun getpeername(__fd: Int, __addr: CValuesRef<sockaddr>?, __len: CValuesRef<socklen_tVar>?): Int {
    memScoped {
        return kniBridge291(__fd, __addr?.getPointer(memScope).rawValue, __len?.getPointer(memScope).rawValue)
    }
}

fun send(__fd: Int, __buf: CValuesRef<*>?, __n: size_t, __flags: Int): ssize_t {
    memScoped {
        return kniBridge292(__fd, __buf?.getPointer(memScope).rawValue, __n, __flags)
    }
}

fun recv(__fd: Int, __buf: CValuesRef<*>?, __n: size_t, __flags: Int): ssize_t {
    memScoped {
        return kniBridge293(__fd, __buf?.getPointer(memScope).rawValue, __n, __flags)
    }
}

fun sendto(__fd: Int, __buf: CValuesRef<*>?, __n: size_t, __flags: Int, __addr: CValuesRef<sockaddr>?, __addr_len: socklen_t): ssize_t {
    memScoped {
        return kniBridge294(__fd, __buf?.getPointer(memScope).rawValue, __n, __flags, __addr?.getPointer(memScope).rawValue, __addr_len)
    }
}

fun recvfrom(__fd: Int, __buf: CValuesRef<*>?, __n: size_t, __flags: Int, __addr: CValuesRef<sockaddr>?, __addr_len: CValuesRef<socklen_tVar>?): ssize_t {
    memScoped {
        return kniBridge295(__fd, __buf?.getPointer(memScope).rawValue, __n, __flags, __addr?.getPointer(memScope).rawValue, __addr_len?.getPointer(memScope).rawValue)
    }
}

fun sendmsg(__fd: Int, __message: CValuesRef<msghdr>?, __flags: Int): ssize_t {
    memScoped {
        return kniBridge296(__fd, __message?.getPointer(memScope).rawValue, __flags)
    }
}

fun recvmsg(__fd: Int, __message: CValuesRef<msghdr>?, __flags: Int): ssize_t {
    memScoped {
        return kniBridge297(__fd, __message?.getPointer(memScope).rawValue, __flags)
    }
}

fun getsockopt(__fd: Int, __level: Int, __optname: Int, __optval: CValuesRef<*>?, __optlen: CValuesRef<socklen_tVar>?): Int {
    memScoped {
        return kniBridge298(__fd, __level, __optname, __optval?.getPointer(memScope).rawValue, __optlen?.getPointer(memScope).rawValue)
    }
}

fun setsockopt(__fd: Int, __level: Int, __optname: Int, __optval: CValuesRef<*>?, __optlen: socklen_t): Int {
    memScoped {
        return kniBridge299(__fd, __level, __optname, __optval?.getPointer(memScope).rawValue, __optlen)
    }
}

fun listen(__fd: Int, __n: Int): Int {
    return kniBridge300(__fd, __n)
}

fun accept(__fd: Int, __addr: CValuesRef<sockaddr>?, __addr_len: CValuesRef<socklen_tVar>?): Int {
    memScoped {
        return kniBridge301(__fd, __addr?.getPointer(memScope).rawValue, __addr_len?.getPointer(memScope).rawValue)
    }
}

fun shutdown(__fd: Int, __how: Int): Int {
    return kniBridge302(__fd, __how)
}

fun sockatmark(__fd: Int): Int {
    return kniBridge303(__fd)
}

fun isfdtype(__fd: Int, __fdtype: Int): Int {
    return kniBridge304(__fd, __fdtype)
}

fun ntohl(__netlong: uint32_t): uint32_t {
    return kniBridge305(__netlong)
}

fun ntohs(__netshort: uint16_t): uint16_t {
    return kniBridge306(__netshort)
}

fun htonl(__hostlong: uint32_t): uint32_t {
    return kniBridge307(__hostlong)
}

fun htons(__hostshort: uint16_t): uint16_t {
    return kniBridge308(__hostshort)
}

fun bindresvport(__sockfd: Int, __sock_in: CValuesRef<sockaddr_in>?): Int {
    memScoped {
        return kniBridge309(__sockfd, __sock_in?.getPointer(memScope).rawValue)
    }
}

fun bindresvport6(__sockfd: Int, __sock_in: CValuesRef<sockaddr_in6>?): Int {
    memScoped {
        return kniBridge310(__sockfd, __sock_in?.getPointer(memScope).rawValue)
    }
}

fun setrpcent(__stayopen: Int): Unit {
    return kniBridge311(__stayopen)
}

fun endrpcent(): Unit {
    return kniBridge312()
}

fun getrpcbyname(__name: String?): CPointer<rpcent>? {
    memScoped {
        return interpretCPointer<rpcent>(kniBridge313(__name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun getrpcbynumber(__number: Int): CPointer<rpcent>? {
    return interpretCPointer<rpcent>(kniBridge314(__number))
}

fun getrpcent(): CPointer<rpcent>? {
    return interpretCPointer<rpcent>(kniBridge315())
}

fun getrpcbyname_r(__name: String?, __result_buf: CValuesRef<rpcent>?, __buffer: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<rpcent>>?): Int {
    memScoped {
        return kniBridge316(__name?.cstr?.getPointer(memScope).rawValue, __result_buf?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun getrpcbynumber_r(__number: Int, __result_buf: CValuesRef<rpcent>?, __buffer: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<rpcent>>?): Int {
    memScoped {
        return kniBridge317(__number, __result_buf?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun getrpcent_r(__result_buf: CValuesRef<rpcent>?, __buffer: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<rpcent>>?): Int {
    memScoped {
        return kniBridge318(__result_buf?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun __h_errno_location(): CPointer<IntVar>? {
    return interpretCPointer<IntVar>(kniBridge319())
}

fun herror(__str: String?): Unit {
    memScoped {
        return kniBridge320(__str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun hstrerror(__err_num: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge321(__err_num))
}

fun sethostent(__stay_open: Int): Unit {
    return kniBridge322(__stay_open)
}

fun endhostent(): Unit {
    return kniBridge323()
}

fun gethostent(): CPointer<hostent>? {
    return interpretCPointer<hostent>(kniBridge324())
}

fun gethostbyaddr(__addr: CValuesRef<*>?, __len: __socklen_t, __type: Int): CPointer<hostent>? {
    memScoped {
        return interpretCPointer<hostent>(kniBridge325(__addr?.getPointer(memScope).rawValue, __len, __type))
    }
}

fun gethostbyname(__name: String?): CPointer<hostent>? {
    memScoped {
        return interpretCPointer<hostent>(kniBridge326(__name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun gethostbyname2(__name: String?, __af: Int): CPointer<hostent>? {
    memScoped {
        return interpretCPointer<hostent>(kniBridge327(__name?.cstr?.getPointer(memScope).rawValue, __af))
    }
}

fun gethostent_r(__result_buf: CValuesRef<hostent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<hostent>>?, __h_errnop: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge328(__result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue, __h_errnop?.getPointer(memScope).rawValue)
    }
}

fun gethostbyaddr_r(__addr: CValuesRef<*>?, __len: __socklen_t, __type: Int, __result_buf: CValuesRef<hostent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<hostent>>?, __h_errnop: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge329(__addr?.getPointer(memScope).rawValue, __len, __type, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue, __h_errnop?.getPointer(memScope).rawValue)
    }
}

fun gethostbyname_r(__name: String?, __result_buf: CValuesRef<hostent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<hostent>>?, __h_errnop: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge330(__name?.cstr?.getPointer(memScope).rawValue, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue, __h_errnop?.getPointer(memScope).rawValue)
    }
}

fun gethostbyname2_r(__name: String?, __af: Int, __result_buf: CValuesRef<hostent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<hostent>>?, __h_errnop: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge331(__name?.cstr?.getPointer(memScope).rawValue, __af, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue, __h_errnop?.getPointer(memScope).rawValue)
    }
}

fun setnetent(__stay_open: Int): Unit {
    return kniBridge332(__stay_open)
}

fun endnetent(): Unit {
    return kniBridge333()
}

fun getnetent(): CPointer<netent>? {
    return interpretCPointer<netent>(kniBridge334())
}

fun getnetbyaddr(__net: uint32_t, __type: Int): CPointer<netent>? {
    return interpretCPointer<netent>(kniBridge335(__net, __type))
}

fun getnetbyname(__name: String?): CPointer<netent>? {
    memScoped {
        return interpretCPointer<netent>(kniBridge336(__name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun getnetent_r(__result_buf: CValuesRef<netent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<netent>>?, __h_errnop: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge337(__result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue, __h_errnop?.getPointer(memScope).rawValue)
    }
}

fun getnetbyaddr_r(__net: uint32_t, __type: Int, __result_buf: CValuesRef<netent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<netent>>?, __h_errnop: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge338(__net, __type, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue, __h_errnop?.getPointer(memScope).rawValue)
    }
}

fun getnetbyname_r(__name: String?, __result_buf: CValuesRef<netent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<netent>>?, __h_errnop: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge339(__name?.cstr?.getPointer(memScope).rawValue, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue, __h_errnop?.getPointer(memScope).rawValue)
    }
}

fun setservent(__stay_open: Int): Unit {
    return kniBridge340(__stay_open)
}

fun endservent(): Unit {
    return kniBridge341()
}

fun getservent(): CPointer<servent>? {
    return interpretCPointer<servent>(kniBridge342())
}

fun getservbyname(__name: String?, __proto: String?): CPointer<servent>? {
    memScoped {
        return interpretCPointer<servent>(kniBridge343(__name?.cstr?.getPointer(memScope).rawValue, __proto?.cstr?.getPointer(memScope).rawValue))
    }
}

fun getservbyport(__port: Int, __proto: String?): CPointer<servent>? {
    memScoped {
        return interpretCPointer<servent>(kniBridge344(__port, __proto?.cstr?.getPointer(memScope).rawValue))
    }
}

fun getservent_r(__result_buf: CValuesRef<servent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<servent>>?): Int {
    memScoped {
        return kniBridge345(__result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun getservbyname_r(__name: String?, __proto: String?, __result_buf: CValuesRef<servent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<servent>>?): Int {
    memScoped {
        return kniBridge346(__name?.cstr?.getPointer(memScope).rawValue, __proto?.cstr?.getPointer(memScope).rawValue, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun getservbyport_r(__port: Int, __proto: String?, __result_buf: CValuesRef<servent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<servent>>?): Int {
    memScoped {
        return kniBridge347(__port, __proto?.cstr?.getPointer(memScope).rawValue, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun setprotoent(__stay_open: Int): Unit {
    return kniBridge348(__stay_open)
}

fun endprotoent(): Unit {
    return kniBridge349()
}

fun getprotoent(): CPointer<protoent>? {
    return interpretCPointer<protoent>(kniBridge350())
}

fun getprotobyname(__name: String?): CPointer<protoent>? {
    memScoped {
        return interpretCPointer<protoent>(kniBridge351(__name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun getprotobynumber(__proto: Int): CPointer<protoent>? {
    return interpretCPointer<protoent>(kniBridge352(__proto))
}

fun getprotoent_r(__result_buf: CValuesRef<protoent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<protoent>>?): Int {
    memScoped {
        return kniBridge353(__result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun getprotobyname_r(__name: String?, __result_buf: CValuesRef<protoent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<protoent>>?): Int {
    memScoped {
        return kniBridge354(__name?.cstr?.getPointer(memScope).rawValue, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun getprotobynumber_r(__proto: Int, __result_buf: CValuesRef<protoent>?, __buf: CValuesRef<ByteVar>?, __buflen: size_t, __result: CValuesRef<CPointerVar<protoent>>?): Int {
    memScoped {
        return kniBridge355(__proto, __result_buf?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __buflen, __result?.getPointer(memScope).rawValue)
    }
}

fun setnetgrent(__netgroup: String?): Int {
    memScoped {
        return kniBridge356(__netgroup?.cstr?.getPointer(memScope).rawValue)
    }
}

fun endnetgrent(): Unit {
    return kniBridge357()
}

fun getnetgrent(__hostp: CValuesRef<CPointerVar<ByteVar>>?, __userp: CValuesRef<CPointerVar<ByteVar>>?, __domainp: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge358(__hostp?.getPointer(memScope).rawValue, __userp?.getPointer(memScope).rawValue, __domainp?.getPointer(memScope).rawValue)
    }
}

fun innetgr(__netgroup: String?, __host: String?, arg2: String?, __domain: String?): Int {
    memScoped {
        return kniBridge359(__netgroup?.cstr?.getPointer(memScope).rawValue, __host?.cstr?.getPointer(memScope).rawValue, arg2?.cstr?.getPointer(memScope).rawValue, __domain?.cstr?.getPointer(memScope).rawValue)
    }
}

fun getnetgrent_r(__hostp: CValuesRef<CPointerVar<ByteVar>>?, __userp: CValuesRef<CPointerVar<ByteVar>>?, __domainp: CValuesRef<CPointerVar<ByteVar>>?, __buffer: CValuesRef<ByteVar>?, __buflen: size_t): Int {
    memScoped {
        return kniBridge360(__hostp?.getPointer(memScope).rawValue, __userp?.getPointer(memScope).rawValue, __domainp?.getPointer(memScope).rawValue, __buffer?.getPointer(memScope).rawValue, __buflen)
    }
}

fun rcmd(__ahost: CValuesRef<CPointerVar<ByteVar>>?, __rport: UShort, __locuser: String?, __remuser: String?, __cmd: String?, __fd2p: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge361(__ahost?.getPointer(memScope).rawValue, __rport, __locuser?.cstr?.getPointer(memScope).rawValue, __remuser?.cstr?.getPointer(memScope).rawValue, __cmd?.cstr?.getPointer(memScope).rawValue, __fd2p?.getPointer(memScope).rawValue)
    }
}

fun rcmd_af(__ahost: CValuesRef<CPointerVar<ByteVar>>?, __rport: UShort, __locuser: String?, __remuser: String?, __cmd: String?, __fd2p: CValuesRef<IntVar>?, __af: sa_family_t): Int {
    memScoped {
        return kniBridge362(__ahost?.getPointer(memScope).rawValue, __rport, __locuser?.cstr?.getPointer(memScope).rawValue, __remuser?.cstr?.getPointer(memScope).rawValue, __cmd?.cstr?.getPointer(memScope).rawValue, __fd2p?.getPointer(memScope).rawValue, __af)
    }
}

fun rexec(__ahost: CValuesRef<CPointerVar<ByteVar>>?, __rport: Int, __name: String?, __pass: String?, __cmd: String?, __fd2p: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge363(__ahost?.getPointer(memScope).rawValue, __rport, __name?.cstr?.getPointer(memScope).rawValue, __pass?.cstr?.getPointer(memScope).rawValue, __cmd?.cstr?.getPointer(memScope).rawValue, __fd2p?.getPointer(memScope).rawValue)
    }
}

fun rexec_af(__ahost: CValuesRef<CPointerVar<ByteVar>>?, __rport: Int, __name: String?, __pass: String?, __cmd: String?, __fd2p: CValuesRef<IntVar>?, __af: sa_family_t): Int {
    memScoped {
        return kniBridge364(__ahost?.getPointer(memScope).rawValue, __rport, __name?.cstr?.getPointer(memScope).rawValue, __pass?.cstr?.getPointer(memScope).rawValue, __cmd?.cstr?.getPointer(memScope).rawValue, __fd2p?.getPointer(memScope).rawValue, __af)
    }
}

fun ruserok(__rhost: String?, __suser: Int, __remuser: String?, __locuser: String?): Int {
    memScoped {
        return kniBridge365(__rhost?.cstr?.getPointer(memScope).rawValue, __suser, __remuser?.cstr?.getPointer(memScope).rawValue, __locuser?.cstr?.getPointer(memScope).rawValue)
    }
}

fun ruserok_af(__rhost: String?, __suser: Int, __remuser: String?, __locuser: String?, __af: sa_family_t): Int {
    memScoped {
        return kniBridge366(__rhost?.cstr?.getPointer(memScope).rawValue, __suser, __remuser?.cstr?.getPointer(memScope).rawValue, __locuser?.cstr?.getPointer(memScope).rawValue, __af)
    }
}

fun iruserok(__raddr: uint32_t, __suser: Int, __remuser: String?, __locuser: String?): Int {
    memScoped {
        return kniBridge367(__raddr, __suser, __remuser?.cstr?.getPointer(memScope).rawValue, __locuser?.cstr?.getPointer(memScope).rawValue)
    }
}

fun iruserok_af(__raddr: CValuesRef<*>?, __suser: Int, __remuser: String?, __locuser: String?, __af: sa_family_t): Int {
    memScoped {
        return kniBridge368(__raddr?.getPointer(memScope).rawValue, __suser, __remuser?.cstr?.getPointer(memScope).rawValue, __locuser?.cstr?.getPointer(memScope).rawValue, __af)
    }
}

fun rresvport(__alport: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge369(__alport?.getPointer(memScope).rawValue)
    }
}

fun rresvport_af(__alport: CValuesRef<IntVar>?, __af: sa_family_t): Int {
    memScoped {
        return kniBridge370(__alport?.getPointer(memScope).rawValue, __af)
    }
}

fun getaddrinfo(__name: String?, __service: String?, __req: CValuesRef<addrinfo>?, __pai: CValuesRef<CPointerVar<addrinfo>>?): Int {
    memScoped {
        return kniBridge371(__name?.cstr?.getPointer(memScope).rawValue, __service?.cstr?.getPointer(memScope).rawValue, __req?.getPointer(memScope).rawValue, __pai?.getPointer(memScope).rawValue)
    }
}

fun freeaddrinfo(__ai: CValuesRef<addrinfo>?): Unit {
    memScoped {
        return kniBridge372(__ai?.getPointer(memScope).rawValue)
    }
}

fun gai_strerror(__ecode: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge373(__ecode))
}

fun getnameinfo(__sa: CValuesRef<sockaddr>?, __salen: socklen_t, __host: CValuesRef<ByteVar>?, __hostlen: socklen_t, __serv: CValuesRef<ByteVar>?, __servlen: socklen_t, __flags: Int): Int {
    memScoped {
        return kniBridge374(__sa?.getPointer(memScope).rawValue, __salen, __host?.getPointer(memScope).rawValue, __hostlen, __serv?.getPointer(memScope).rawValue, __servlen, __flags)
    }
}

fun gettimeofday(__tv: CValuesRef<timeval>?, __tz: __timezone_ptr_t?): Int {
    memScoped {
        return kniBridge375(__tv?.getPointer(memScope).rawValue, __tz.rawValue)
    }
}

fun settimeofday(__tv: CValuesRef<timeval>?, __tz: CValuesRef<timezone>?): Int {
    memScoped {
        return kniBridge376(__tv?.getPointer(memScope).rawValue, __tz?.getPointer(memScope).rawValue)
    }
}

fun adjtime(__delta: CValuesRef<timeval>?, __olddelta: CValuesRef<timeval>?): Int {
    memScoped {
        return kniBridge377(__delta?.getPointer(memScope).rawValue, __olddelta?.getPointer(memScope).rawValue)
    }
}

fun getitimer(__which: __itimer_which_t, __value: CValuesRef<itimerval>?): Int {
    memScoped {
        return kniBridge378(__which, __value?.getPointer(memScope).rawValue)
    }
}

fun setitimer(__which: __itimer_which_t, __new: CValuesRef<itimerval>?, __old: CValuesRef<itimerval>?): Int {
    memScoped {
        return kniBridge379(__which, __new?.getPointer(memScope).rawValue, __old?.getPointer(memScope).rawValue)
    }
}

fun utimes(__file: String?, __tvp: CValuesRef<timeval>?): Int {
    memScoped {
        return kniBridge380(__file?.cstr?.getPointer(memScope).rawValue, __tvp?.getPointer(memScope).rawValue)
    }
}

fun lutimes(__file: String?, __tvp: CValuesRef<timeval>?): Int {
    memScoped {
        return kniBridge381(__file?.cstr?.getPointer(memScope).rawValue, __tvp?.getPointer(memScope).rawValue)
    }
}

fun futimes(__fd: Int, __tvp: CValuesRef<timeval>?): Int {
    memScoped {
        return kniBridge382(__fd, __tvp?.getPointer(memScope).rawValue)
    }
}

fun imaxabs(__n: intmax_t): intmax_t {
    return kniBridge383(__n)
}

fun imaxdiv(__numer: intmax_t, __denom: intmax_t): CValue<imaxdiv_t> {
    val kniRetVal = nativeHeap.alloc<imaxdiv_t>()
    try {
        kniBridge384(__numer, __denom, kniRetVal.rawPtr)
        return kniRetVal.readValue()
    } finally { nativeHeap.free(kniRetVal) }
}

fun strtoimax(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?, __base: Int): intmax_t {
    memScoped {
        return kniBridge385(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun strtoumax(__nptr: String?, __endptr: CValuesRef<CPointerVar<ByteVar>>?, __base: Int): uintmax_t {
    memScoped {
        return kniBridge386(__nptr?.cstr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun wcstoimax(__nptr: CValuesRef<__gwchar_tVar>?, __endptr: CValuesRef<CPointerVar<__gwchar_tVar>>?, __base: Int): intmax_t {
    memScoped {
        return kniBridge387(__nptr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun wcstoumax(__nptr: CValuesRef<__gwchar_tVar>?, __endptr: CValuesRef<CPointerVar<__gwchar_tVar>>?, __base: Int): uintmax_t {
    memScoped {
        return kniBridge388(__nptr?.getPointer(memScope).rawValue, __endptr?.getPointer(memScope).rawValue, __base)
    }
}

fun clock(): clock_t {
    return kniBridge389()
}

fun time(__timer: CValuesRef<time_tVar>?): time_t {
    memScoped {
        return kniBridge390(__timer?.getPointer(memScope).rawValue)
    }
}

fun difftime(__time1: time_t, __time0: time_t): Double {
    return kniBridge391(__time1, __time0)
}

fun mktime(__tp: CValuesRef<tm>?): time_t {
    memScoped {
        return kniBridge392(__tp?.getPointer(memScope).rawValue)
    }
}

fun strftime(__s: CValuesRef<ByteVar>?, __maxsize: size_t, __format: String?, __tp: CValuesRef<tm>?): size_t {
    memScoped {
        return kniBridge393(__s?.getPointer(memScope).rawValue, __maxsize, __format?.cstr?.getPointer(memScope).rawValue, __tp?.getPointer(memScope).rawValue)
    }
}

fun strftime_l(__s: CValuesRef<ByteVar>?, __maxsize: size_t, __format: String?, __tp: CValuesRef<tm>?, __loc: locale_t?): size_t {
    memScoped {
        return kniBridge394(__s?.getPointer(memScope).rawValue, __maxsize, __format?.cstr?.getPointer(memScope).rawValue, __tp?.getPointer(memScope).rawValue, __loc.rawValue)
    }
}

fun gmtime(__timer: CValuesRef<time_tVar>?): CPointer<tm>? {
    memScoped {
        return interpretCPointer<tm>(kniBridge395(__timer?.getPointer(memScope).rawValue))
    }
}

fun localtime(__timer: CValuesRef<time_tVar>?): CPointer<tm>? {
    memScoped {
        return interpretCPointer<tm>(kniBridge396(__timer?.getPointer(memScope).rawValue))
    }
}

fun gmtime_r(__timer: CValuesRef<time_tVar>?, __tp: CValuesRef<tm>?): CPointer<tm>? {
    memScoped {
        return interpretCPointer<tm>(kniBridge397(__timer?.getPointer(memScope).rawValue, __tp?.getPointer(memScope).rawValue))
    }
}

fun localtime_r(__timer: CValuesRef<time_tVar>?, __tp: CValuesRef<tm>?): CPointer<tm>? {
    memScoped {
        return interpretCPointer<tm>(kniBridge398(__timer?.getPointer(memScope).rawValue, __tp?.getPointer(memScope).rawValue))
    }
}

fun asctime(__tp: CValuesRef<tm>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge399(__tp?.getPointer(memScope).rawValue))
    }
}

fun ctime(__timer: CValuesRef<time_tVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge400(__timer?.getPointer(memScope).rawValue))
    }
}

fun asctime_r(__tp: CValuesRef<tm>?, __buf: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge401(__tp?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue))
    }
}

fun ctime_r(__timer: CValuesRef<time_tVar>?, __buf: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge402(__timer?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue))
    }
}

fun tzset(): Unit {
    return kniBridge403()
}

fun stime(__when: CValuesRef<time_tVar>?): Int {
    memScoped {
        return kniBridge404(__when?.getPointer(memScope).rawValue)
    }
}

fun timegm(__tp: CValuesRef<tm>?): time_t {
    memScoped {
        return kniBridge405(__tp?.getPointer(memScope).rawValue)
    }
}

fun timelocal(__tp: CValuesRef<tm>?): time_t {
    memScoped {
        return kniBridge406(__tp?.getPointer(memScope).rawValue)
    }
}

fun dysize(__year: Int): Int {
    return kniBridge407(__year)
}

fun nanosleep(__requested_time: CValuesRef<timespec>?, __remaining: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge408(__requested_time?.getPointer(memScope).rawValue, __remaining?.getPointer(memScope).rawValue)
    }
}

fun clock_getres(__clock_id: clockid_t, __res: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge409(__clock_id, __res?.getPointer(memScope).rawValue)
    }
}

fun clock_gettime(__clock_id: clockid_t, __tp: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge410(__clock_id, __tp?.getPointer(memScope).rawValue)
    }
}

fun clock_settime(__clock_id: clockid_t, __tp: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge411(__clock_id, __tp?.getPointer(memScope).rawValue)
    }
}

fun clock_nanosleep(__clock_id: clockid_t, __flags: Int, __req: CValuesRef<timespec>?, __rem: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge412(__clock_id, __flags, __req?.getPointer(memScope).rawValue, __rem?.getPointer(memScope).rawValue)
    }
}

fun clock_getcpuclockid(__pid: pid_t, __clock_id: CValuesRef<clockid_tVar>?): Int {
    memScoped {
        return kniBridge413(__pid, __clock_id?.getPointer(memScope).rawValue)
    }
}

fun timer_create(__clock_id: clockid_t, __evp: CValuesRef<sigevent>?, __timerid: CValuesRef<timer_tVar>?): Int {
    memScoped {
        return kniBridge414(__clock_id, __evp?.getPointer(memScope).rawValue, __timerid?.getPointer(memScope).rawValue)
    }
}

fun timer_delete(__timerid: timer_t?): Int {
    return kniBridge415(__timerid.rawValue)
}

fun timer_settime(__timerid: timer_t?, __flags: Int, __value: CValuesRef<itimerspec>?, __ovalue: CValuesRef<itimerspec>?): Int {
    memScoped {
        return kniBridge416(__timerid.rawValue, __flags, __value?.getPointer(memScope).rawValue, __ovalue?.getPointer(memScope).rawValue)
    }
}

fun timer_gettime(__timerid: timer_t?, __value: CValuesRef<itimerspec>?): Int {
    memScoped {
        return kniBridge417(__timerid.rawValue, __value?.getPointer(memScope).rawValue)
    }
}

fun timer_getoverrun(__timerid: timer_t?): Int {
    return kniBridge418(__timerid.rawValue)
}

fun timespec_get(__ts: CValuesRef<timespec>?, __base: Int): Int {
    memScoped {
        return kniBridge419(__ts?.getPointer(memScope).rawValue, __base)
    }
}

fun __underflow(arg0: CValuesRef<_IO_FILE>?): Int {
    memScoped {
        return kniBridge420(arg0?.getPointer(memScope).rawValue)
    }
}

fun __uflow(arg0: CValuesRef<_IO_FILE>?): Int {
    memScoped {
        return kniBridge421(arg0?.getPointer(memScope).rawValue)
    }
}

fun __overflow(arg0: CValuesRef<_IO_FILE>?, arg1: Int): Int {
    memScoped {
        return kniBridge422(arg0?.getPointer(memScope).rawValue, arg1)
    }
}

fun _IO_getc(__fp: CValuesRef<_IO_FILE>?): Int {
    memScoped {
        return kniBridge423(__fp?.getPointer(memScope).rawValue)
    }
}

fun _IO_putc(__c: Int, __fp: CValuesRef<_IO_FILE>?): Int {
    memScoped {
        return kniBridge424(__c, __fp?.getPointer(memScope).rawValue)
    }
}

fun _IO_feof(__fp: CValuesRef<_IO_FILE>?): Int {
    memScoped {
        return kniBridge425(__fp?.getPointer(memScope).rawValue)
    }
}

fun _IO_ferror(__fp: CValuesRef<_IO_FILE>?): Int {
    memScoped {
        return kniBridge426(__fp?.getPointer(memScope).rawValue)
    }
}

fun _IO_peekc_locked(__fp: CValuesRef<_IO_FILE>?): Int {
    memScoped {
        return kniBridge427(__fp?.getPointer(memScope).rawValue)
    }
}

fun _IO_flockfile(arg0: CValuesRef<_IO_FILE>?): Unit {
    memScoped {
        return kniBridge428(arg0?.getPointer(memScope).rawValue)
    }
}

fun _IO_funlockfile(arg0: CValuesRef<_IO_FILE>?): Unit {
    memScoped {
        return kniBridge429(arg0?.getPointer(memScope).rawValue)
    }
}

@Deprecated("Unable to import this declaration", level = DeprecationLevel.ERROR)
external fun _IO_ftrylockfile(arg0: CValuesRef<_IO_FILE>?): Int

fun _IO_vfscanf(arg0: CValuesRef<_IO_FILE>?, arg1: String?, arg2: __gnuc_va_list?, arg3: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge431(arg0?.getPointer(memScope).rawValue, arg1?.cstr?.getPointer(memScope).rawValue, arg2.rawValue, arg3?.getPointer(memScope).rawValue)
    }
}

fun _IO_vfprintf(arg0: CValuesRef<_IO_FILE>?, arg1: String?, arg2: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge432(arg0?.getPointer(memScope).rawValue, arg1?.cstr?.getPointer(memScope).rawValue, arg2.rawValue)
    }
}

fun _IO_padn(arg0: CValuesRef<_IO_FILE>?, arg1: Int, arg2: __ssize_t): __ssize_t {
    memScoped {
        return kniBridge433(arg0?.getPointer(memScope).rawValue, arg1, arg2)
    }
}

fun _IO_sgetn(arg0: CValuesRef<_IO_FILE>?, arg1: CValuesRef<*>?, arg2: size_t): size_t {
    memScoped {
        return kniBridge434(arg0?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue, arg2)
    }
}

fun _IO_seekoff(arg0: CValuesRef<_IO_FILE>?, arg1: __off64_t, arg2: Int, arg3: Int): __off64_t {
    memScoped {
        return kniBridge435(arg0?.getPointer(memScope).rawValue, arg1, arg2, arg3)
    }
}

fun _IO_seekpos(arg0: CValuesRef<_IO_FILE>?, arg1: __off64_t, arg2: Int): __off64_t {
    memScoped {
        return kniBridge436(arg0?.getPointer(memScope).rawValue, arg1, arg2)
    }
}

fun _IO_free_backup_area(arg0: CValuesRef<_IO_FILE>?): Unit {
    memScoped {
        return kniBridge437(arg0?.getPointer(memScope).rawValue)
    }
}

fun remove(__filename: String?): Int {
    memScoped {
        return kniBridge438(__filename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun rename(__old: String?, __new: String?): Int {
    memScoped {
        return kniBridge439(__old?.cstr?.getPointer(memScope).rawValue, __new?.cstr?.getPointer(memScope).rawValue)
    }
}

fun renameat(__oldfd: Int, __old: String?, __newfd: Int, __new: String?): Int {
    memScoped {
        return kniBridge440(__oldfd, __old?.cstr?.getPointer(memScope).rawValue, __newfd, __new?.cstr?.getPointer(memScope).rawValue)
    }
}

fun tmpfile(): CPointer<FILE>? {
    return interpretCPointer<FILE>(kniBridge441())
}

fun tmpnam(__s: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge442(__s?.getPointer(memScope).rawValue))
    }
}

fun tmpnam_r(__s: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge443(__s?.getPointer(memScope).rawValue))
    }
}

fun tempnam(__dir: String?, __pfx: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge444(__dir?.cstr?.getPointer(memScope).rawValue, __pfx?.cstr?.getPointer(memScope).rawValue))
    }
}

fun fclose(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge445(__stream?.getPointer(memScope).rawValue)
    }
}

fun fflush(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge446(__stream?.getPointer(memScope).rawValue)
    }
}

fun fflush_unlocked(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge447(__stream?.getPointer(memScope).rawValue)
    }
}

fun fopen(__filename: String?, __modes: String?): CPointer<FILE>? {
    memScoped {
        return interpretCPointer<FILE>(kniBridge448(__filename?.cstr?.getPointer(memScope).rawValue, __modes?.cstr?.getPointer(memScope).rawValue))
    }
}

fun freopen(__filename: String?, __modes: String?, __stream: CValuesRef<FILE>?): CPointer<FILE>? {
    memScoped {
        return interpretCPointer<FILE>(kniBridge449(__filename?.cstr?.getPointer(memScope).rawValue, __modes?.cstr?.getPointer(memScope).rawValue, __stream?.getPointer(memScope).rawValue))
    }
}

fun fdopen(__fd: Int, __modes: String?): CPointer<FILE>? {
    memScoped {
        return interpretCPointer<FILE>(kniBridge450(__fd, __modes?.cstr?.getPointer(memScope).rawValue))
    }
}

fun fmemopen(__s: CValuesRef<*>?, __len: size_t, __modes: String?): CPointer<FILE>? {
    memScoped {
        return interpretCPointer<FILE>(kniBridge451(__s?.getPointer(memScope).rawValue, __len, __modes?.cstr?.getPointer(memScope).rawValue))
    }
}

fun open_memstream(__bufloc: CValuesRef<CPointerVar<ByteVar>>?, __sizeloc: CValuesRef<size_tVar>?): CPointer<FILE>? {
    memScoped {
        return interpretCPointer<FILE>(kniBridge452(__bufloc?.getPointer(memScope).rawValue, __sizeloc?.getPointer(memScope).rawValue))
    }
}

fun setbuf(__stream: CValuesRef<FILE>?, __buf: CValuesRef<ByteVar>?): Unit {
    memScoped {
        return kniBridge453(__stream?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue)
    }
}

fun setvbuf(__stream: CValuesRef<FILE>?, __buf: CValuesRef<ByteVar>?, __modes: Int, __n: size_t): Int {
    memScoped {
        return kniBridge454(__stream?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __modes, __n)
    }
}

fun setbuffer(__stream: CValuesRef<FILE>?, __buf: CValuesRef<ByteVar>?, __size: size_t): Unit {
    memScoped {
        return kniBridge455(__stream?.getPointer(memScope).rawValue, __buf?.getPointer(memScope).rawValue, __size)
    }
}

fun setlinebuf(__stream: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge456(__stream?.getPointer(memScope).rawValue)
    }
}

fun fprintf(__stream: CValuesRef<FILE>?, __format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge457(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__stream?.getPointer(memScope), __format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun printf(__format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge458(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun sprintf(__s: CValuesRef<ByteVar>?, __format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge459(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__s?.getPointer(memScope), __format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun vfprintf(__s: CValuesRef<FILE>?, __format: String?, __arg: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge460(__s?.getPointer(memScope).rawValue, __format?.cstr?.getPointer(memScope).rawValue, __arg.rawValue)
    }
}

fun vprintf(__format: String?, __arg: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge461(__format?.cstr?.getPointer(memScope).rawValue, __arg.rawValue)
    }
}

fun vsprintf(__s: CValuesRef<ByteVar>?, __format: String?, __arg: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge462(__s?.getPointer(memScope).rawValue, __format?.cstr?.getPointer(memScope).rawValue, __arg.rawValue)
    }
}

fun snprintf(__s: CValuesRef<ByteVar>?, __maxlen: size_t, __format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge463(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__s?.getPointer(memScope), __maxlen, __format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun vsnprintf(__s: CValuesRef<ByteVar>?, __maxlen: size_t, __format: String?, __arg: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge464(__s?.getPointer(memScope).rawValue, __maxlen, __format?.cstr?.getPointer(memScope).rawValue, __arg.rawValue)
    }
}

fun vdprintf(__fd: Int, __fmt: String?, __arg: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge465(__fd, __fmt?.cstr?.getPointer(memScope).rawValue, __arg.rawValue)
    }
}

fun dprintf(__fd: Int, __fmt: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge466(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__fd, __fmt?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun fscanf(__stream: CValuesRef<FILE>?, __format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge467(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__stream?.getPointer(memScope), __format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun scanf(__format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge468(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun sscanf(__s: String?, __format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge469(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__s?.cstr?.getPointer(memScope), __format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun vfscanf(__s: CValuesRef<FILE>?, __format: String?, __arg: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge470(__s?.getPointer(memScope).rawValue, __format?.cstr?.getPointer(memScope).rawValue, __arg.rawValue)
    }
}

fun vscanf(__format: String?, __arg: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge471(__format?.cstr?.getPointer(memScope).rawValue, __arg.rawValue)
    }
}

fun vsscanf(__s: String?, __format: String?, __arg: __gnuc_va_list?): Int {
    memScoped {
        return kniBridge472(__s?.cstr?.getPointer(memScope).rawValue, __format?.cstr?.getPointer(memScope).rawValue, __arg.rawValue)
    }
}

fun fgetc(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge473(__stream?.getPointer(memScope).rawValue)
    }
}

fun getc(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge474(__stream?.getPointer(memScope).rawValue)
    }
}

fun getchar(): Int {
    return kniBridge475()
}

fun getc_unlocked(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge476(__stream?.getPointer(memScope).rawValue)
    }
}

fun getchar_unlocked(): Int {
    return kniBridge477()
}

fun fgetc_unlocked(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge478(__stream?.getPointer(memScope).rawValue)
    }
}

fun fputc(__c: Int, __stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge479(__c, __stream?.getPointer(memScope).rawValue)
    }
}

fun putc(__c: Int, __stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge480(__c, __stream?.getPointer(memScope).rawValue)
    }
}

fun putchar(__c: Int): Int {
    return kniBridge481(__c)
}

fun fputc_unlocked(__c: Int, __stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge482(__c, __stream?.getPointer(memScope).rawValue)
    }
}

fun putc_unlocked(__c: Int, __stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge483(__c, __stream?.getPointer(memScope).rawValue)
    }
}

fun putchar_unlocked(__c: Int): Int {
    return kniBridge484(__c)
}

fun getw(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge485(__stream?.getPointer(memScope).rawValue)
    }
}

fun putw(__w: Int, __stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge486(__w, __stream?.getPointer(memScope).rawValue)
    }
}

fun fgets(__s: CValuesRef<ByteVar>?, __n: Int, __stream: CValuesRef<FILE>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge487(__s?.getPointer(memScope).rawValue, __n, __stream?.getPointer(memScope).rawValue))
    }
}

fun __getdelim(__lineptr: CValuesRef<CPointerVar<ByteVar>>?, __n: CValuesRef<size_tVar>?, __delimiter: Int, __stream: CValuesRef<FILE>?): __ssize_t {
    memScoped {
        return kniBridge488(__lineptr?.getPointer(memScope).rawValue, __n?.getPointer(memScope).rawValue, __delimiter, __stream?.getPointer(memScope).rawValue)
    }
}

fun getdelim(__lineptr: CValuesRef<CPointerVar<ByteVar>>?, __n: CValuesRef<size_tVar>?, __delimiter: Int, __stream: CValuesRef<FILE>?): __ssize_t {
    memScoped {
        return kniBridge489(__lineptr?.getPointer(memScope).rawValue, __n?.getPointer(memScope).rawValue, __delimiter, __stream?.getPointer(memScope).rawValue)
    }
}

fun getline(__lineptr: CValuesRef<CPointerVar<ByteVar>>?, __n: CValuesRef<size_tVar>?, __stream: CValuesRef<FILE>?): __ssize_t {
    memScoped {
        return kniBridge490(__lineptr?.getPointer(memScope).rawValue, __n?.getPointer(memScope).rawValue, __stream?.getPointer(memScope).rawValue)
    }
}

fun fputs(__s: String?, __stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge491(__s?.cstr?.getPointer(memScope).rawValue, __stream?.getPointer(memScope).rawValue)
    }
}

fun puts(__s: String?): Int {
    memScoped {
        return kniBridge492(__s?.cstr?.getPointer(memScope).rawValue)
    }
}

fun ungetc(__c: Int, __stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge493(__c, __stream?.getPointer(memScope).rawValue)
    }
}

fun fread(__ptr: CValuesRef<*>?, __size: size_t, __n: size_t, __stream: CValuesRef<FILE>?): size_t {
    memScoped {
        return kniBridge494(__ptr?.getPointer(memScope).rawValue, __size, __n, __stream?.getPointer(memScope).rawValue)
    }
}

fun fwrite(__ptr: CValuesRef<*>?, __size: size_t, __n: size_t, __s: CValuesRef<FILE>?): size_t {
    memScoped {
        return kniBridge495(__ptr?.getPointer(memScope).rawValue, __size, __n, __s?.getPointer(memScope).rawValue)
    }
}

fun fread_unlocked(__ptr: CValuesRef<*>?, __size: size_t, __n: size_t, __stream: CValuesRef<FILE>?): size_t {
    memScoped {
        return kniBridge496(__ptr?.getPointer(memScope).rawValue, __size, __n, __stream?.getPointer(memScope).rawValue)
    }
}

fun fwrite_unlocked(__ptr: CValuesRef<*>?, __size: size_t, __n: size_t, __stream: CValuesRef<FILE>?): size_t {
    memScoped {
        return kniBridge497(__ptr?.getPointer(memScope).rawValue, __size, __n, __stream?.getPointer(memScope).rawValue)
    }
}

fun fseek(__stream: CValuesRef<FILE>?, __off: Long, __whence: Int): Int {
    memScoped {
        return kniBridge498(__stream?.getPointer(memScope).rawValue, __off, __whence)
    }
}

fun ftell(__stream: CValuesRef<FILE>?): Long {
    memScoped {
        return kniBridge499(__stream?.getPointer(memScope).rawValue)
    }
}

fun rewind(__stream: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge500(__stream?.getPointer(memScope).rawValue)
    }
}

fun fseeko(__stream: CValuesRef<FILE>?, __off: __off_t, __whence: Int): Int {
    memScoped {
        return kniBridge501(__stream?.getPointer(memScope).rawValue, __off, __whence)
    }
}

fun ftello(__stream: CValuesRef<FILE>?): __off_t {
    memScoped {
        return kniBridge502(__stream?.getPointer(memScope).rawValue)
    }
}

fun fgetpos(__stream: CValuesRef<FILE>?, __pos: CValuesRef<fpos_t>?): Int {
    memScoped {
        return kniBridge503(__stream?.getPointer(memScope).rawValue, __pos?.getPointer(memScope).rawValue)
    }
}

fun fsetpos(__stream: CValuesRef<FILE>?, __pos: CValuesRef<fpos_t>?): Int {
    memScoped {
        return kniBridge504(__stream?.getPointer(memScope).rawValue, __pos?.getPointer(memScope).rawValue)
    }
}

fun clearerr(__stream: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge505(__stream?.getPointer(memScope).rawValue)
    }
}

fun feof(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge506(__stream?.getPointer(memScope).rawValue)
    }
}

fun ferror(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge507(__stream?.getPointer(memScope).rawValue)
    }
}

fun clearerr_unlocked(__stream: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge508(__stream?.getPointer(memScope).rawValue)
    }
}

fun feof_unlocked(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge509(__stream?.getPointer(memScope).rawValue)
    }
}

fun ferror_unlocked(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge510(__stream?.getPointer(memScope).rawValue)
    }
}

fun perror(__s: String?): Unit {
    memScoped {
        return kniBridge511(__s?.cstr?.getPointer(memScope).rawValue)
    }
}

fun fileno(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge512(__stream?.getPointer(memScope).rawValue)
    }
}

fun fileno_unlocked(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge513(__stream?.getPointer(memScope).rawValue)
    }
}

fun popen(__command: String?, __modes: String?): CPointer<FILE>? {
    memScoped {
        return interpretCPointer<FILE>(kniBridge514(__command?.cstr?.getPointer(memScope).rawValue, __modes?.cstr?.getPointer(memScope).rawValue))
    }
}

fun pclose(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge515(__stream?.getPointer(memScope).rawValue)
    }
}

fun ctermid(__s: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge516(__s?.getPointer(memScope).rawValue))
    }
}

fun flockfile(__stream: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge517(__stream?.getPointer(memScope).rawValue)
    }
}

fun ftrylockfile(__stream: CValuesRef<FILE>?): Int {
    memScoped {
        return kniBridge518(__stream?.getPointer(memScope).rawValue)
    }
}

fun funlockfile(__stream: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge519(__stream?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_num(arg0: CValuesRef<OPENSSL_STACK>?): Int {
    memScoped {
        return kniBridge520(arg0?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_value(arg0: CValuesRef<OPENSSL_STACK>?, arg1: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge521(arg0?.getPointer(memScope).rawValue, arg1))
    }
}

fun OPENSSL_sk_set(st: CValuesRef<OPENSSL_STACK>?, i: Int, data: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge522(st?.getPointer(memScope).rawValue, i, data?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_sk_new(cmp: OPENSSL_sk_compfunc?): CPointer<OPENSSL_STACK>? {
    return interpretCPointer<OPENSSL_STACK>(kniBridge523(cmp.rawValue))
}

fun OPENSSL_sk_new_null(): CPointer<OPENSSL_STACK>? {
    return interpretCPointer<OPENSSL_STACK>(kniBridge524())
}

fun OPENSSL_sk_free(arg0: CValuesRef<OPENSSL_STACK>?): Unit {
    memScoped {
        return kniBridge525(arg0?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_pop_free(st: CValuesRef<OPENSSL_STACK>?, func: CPointer<CFunction<(COpaquePointer?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge526(st?.getPointer(memScope).rawValue, func.rawValue)
    }
}

fun OPENSSL_sk_deep_copy(arg0: CValuesRef<OPENSSL_STACK>?, c: OPENSSL_sk_copyfunc?, f: OPENSSL_sk_freefunc?): CPointer<OPENSSL_STACK>? {
    memScoped {
        return interpretCPointer<OPENSSL_STACK>(kniBridge527(arg0?.getPointer(memScope).rawValue, c.rawValue, f.rawValue))
    }
}

fun OPENSSL_sk_insert(sk: CValuesRef<OPENSSL_STACK>?, data: CValuesRef<*>?, where: Int): Int {
    memScoped {
        return kniBridge528(sk?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, where)
    }
}

fun OPENSSL_sk_delete(st: CValuesRef<OPENSSL_STACK>?, loc: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge529(st?.getPointer(memScope).rawValue, loc))
    }
}

fun OPENSSL_sk_delete_ptr(st: CValuesRef<OPENSSL_STACK>?, p: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge530(st?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_sk_find(st: CValuesRef<OPENSSL_STACK>?, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge531(st?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_find_ex(st: CValuesRef<OPENSSL_STACK>?, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge532(st?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_push(st: CValuesRef<OPENSSL_STACK>?, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge533(st?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_unshift(st: CValuesRef<OPENSSL_STACK>?, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge534(st?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_shift(st: CValuesRef<OPENSSL_STACK>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge535(st?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_sk_pop(st: CValuesRef<OPENSSL_STACK>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge536(st?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_sk_zero(st: CValuesRef<OPENSSL_STACK>?): Unit {
    memScoped {
        return kniBridge537(st?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_set_cmp_func(sk: CValuesRef<OPENSSL_STACK>?, cmp: OPENSSL_sk_compfunc?): OPENSSL_sk_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(COpaquePointer?, COpaquePointer?) -> Int>>(kniBridge538(sk?.getPointer(memScope).rawValue, cmp.rawValue))
    }
}

fun OPENSSL_sk_dup(st: CValuesRef<OPENSSL_STACK>?): CPointer<OPENSSL_STACK>? {
    memScoped {
        return interpretCPointer<OPENSSL_STACK>(kniBridge539(st?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_sk_sort(st: CValuesRef<OPENSSL_STACK>?): Unit {
    memScoped {
        return kniBridge540(st?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_sk_is_sorted(st: CValuesRef<OPENSSL_STACK>?): Int {
    memScoped {
        return kniBridge541(st?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_num(sk: CValuesRef<stack_st_OPENSSL_STRING>?): Int {
    memScoped {
        return kniBridge542(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_value(sk: CValuesRef<stack_st_OPENSSL_STRING>?, idx: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge543(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_OPENSSL_STRING_new(compare: sk_OPENSSL_STRING_compfunc?): CPointer<stack_st_OPENSSL_STRING>? {
    return interpretCPointer<stack_st_OPENSSL_STRING>(kniBridge544(compare.rawValue))
}

fun sk_OPENSSL_STRING_new_null(): CPointer<stack_st_OPENSSL_STRING>? {
    return interpretCPointer<stack_st_OPENSSL_STRING>(kniBridge545())
}

fun sk_OPENSSL_STRING_free(sk: CValuesRef<stack_st_OPENSSL_STRING>?): Unit {
    memScoped {
        return kniBridge546(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_zero(sk: CValuesRef<stack_st_OPENSSL_STRING>?): Unit {
    memScoped {
        return kniBridge547(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_delete(sk: CValuesRef<stack_st_OPENSSL_STRING>?, i: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge548(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_OPENSSL_STRING_delete_ptr(sk: CValuesRef<stack_st_OPENSSL_STRING>?, ptr: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge549(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_STRING_push(sk: CValuesRef<stack_st_OPENSSL_STRING>?, ptr: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge550(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_unshift(sk: CValuesRef<stack_st_OPENSSL_STRING>?, ptr: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge551(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_pop(sk: CValuesRef<stack_st_OPENSSL_STRING>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge552(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_STRING_shift(sk: CValuesRef<stack_st_OPENSSL_STRING>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge553(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_STRING_pop_free(sk: CValuesRef<stack_st_OPENSSL_STRING>?, freefunc: sk_OPENSSL_STRING_freefunc?): Unit {
    memScoped {
        return kniBridge554(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_OPENSSL_STRING_insert(sk: CValuesRef<stack_st_OPENSSL_STRING>?, ptr: CValuesRef<ByteVar>?, idx: Int): Int {
    memScoped {
        return kniBridge555(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_OPENSSL_STRING_set(sk: CValuesRef<stack_st_OPENSSL_STRING>?, idx: Int, ptr: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge556(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_STRING_find(sk: CValuesRef<stack_st_OPENSSL_STRING>?, ptr: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge557(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_find_ex(sk: CValuesRef<stack_st_OPENSSL_STRING>?, ptr: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge558(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_sort(sk: CValuesRef<stack_st_OPENSSL_STRING>?): Unit {
    memScoped {
        return kniBridge559(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_is_sorted(sk: CValuesRef<stack_st_OPENSSL_STRING>?): Int {
    memScoped {
        return kniBridge560(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_STRING_dup(sk: CValuesRef<stack_st_OPENSSL_STRING>?): CPointer<stack_st_OPENSSL_STRING>? {
    memScoped {
        return interpretCPointer<stack_st_OPENSSL_STRING>(kniBridge561(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_STRING_deep_copy(sk: CValuesRef<stack_st_OPENSSL_STRING>?, copyfunc: sk_OPENSSL_STRING_copyfunc?, freefunc: sk_OPENSSL_STRING_freefunc?): CPointer<stack_st_OPENSSL_STRING>? {
    memScoped {
        return interpretCPointer<stack_st_OPENSSL_STRING>(kniBridge562(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_OPENSSL_STRING_set_cmp_func(sk: CValuesRef<stack_st_OPENSSL_STRING>?, compare: sk_OPENSSL_STRING_compfunc?): sk_OPENSSL_STRING_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<ByteVar>>?) -> Int>>(kniBridge563(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_OPENSSL_CSTRING_num(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?): Int {
    memScoped {
        return kniBridge564(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_value(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, idx: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge565(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_OPENSSL_CSTRING_new(compare: sk_OPENSSL_CSTRING_compfunc?): CPointer<stack_st_OPENSSL_CSTRING>? {
    return interpretCPointer<stack_st_OPENSSL_CSTRING>(kniBridge566(compare.rawValue))
}

fun sk_OPENSSL_CSTRING_new_null(): CPointer<stack_st_OPENSSL_CSTRING>? {
    return interpretCPointer<stack_st_OPENSSL_CSTRING>(kniBridge567())
}

fun sk_OPENSSL_CSTRING_free(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?): Unit {
    memScoped {
        return kniBridge568(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_zero(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?): Unit {
    memScoped {
        return kniBridge569(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_delete(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, i: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge570(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_OPENSSL_CSTRING_delete_ptr(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, ptr: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge571(sk?.getPointer(memScope).rawValue, ptr?.cstr?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_CSTRING_push(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, ptr: String?): Int {
    memScoped {
        return kniBridge572(sk?.getPointer(memScope).rawValue, ptr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_unshift(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, ptr: String?): Int {
    memScoped {
        return kniBridge573(sk?.getPointer(memScope).rawValue, ptr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_pop(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge574(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_CSTRING_shift(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge575(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_CSTRING_pop_free(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, freefunc: sk_OPENSSL_CSTRING_freefunc?): Unit {
    memScoped {
        return kniBridge576(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_OPENSSL_CSTRING_insert(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, ptr: String?, idx: Int): Int {
    memScoped {
        return kniBridge577(sk?.getPointer(memScope).rawValue, ptr?.cstr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_OPENSSL_CSTRING_set(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, idx: Int, ptr: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge578(sk?.getPointer(memScope).rawValue, idx, ptr?.cstr?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_CSTRING_find(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, ptr: String?): Int {
    memScoped {
        return kniBridge579(sk?.getPointer(memScope).rawValue, ptr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_find_ex(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, ptr: String?): Int {
    memScoped {
        return kniBridge580(sk?.getPointer(memScope).rawValue, ptr?.cstr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_sort(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?): Unit {
    memScoped {
        return kniBridge581(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_is_sorted(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?): Int {
    memScoped {
        return kniBridge582(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_CSTRING_dup(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?): CPointer<stack_st_OPENSSL_CSTRING>? {
    memScoped {
        return interpretCPointer<stack_st_OPENSSL_CSTRING>(kniBridge583(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_CSTRING_deep_copy(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, copyfunc: sk_OPENSSL_CSTRING_copyfunc?, freefunc: sk_OPENSSL_CSTRING_freefunc?): CPointer<stack_st_OPENSSL_CSTRING>? {
    memScoped {
        return interpretCPointer<stack_st_OPENSSL_CSTRING>(kniBridge584(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_OPENSSL_CSTRING_set_cmp_func(sk: CValuesRef<stack_st_OPENSSL_CSTRING>?, compare: sk_OPENSSL_CSTRING_compfunc?): sk_OPENSSL_CSTRING_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<ByteVar>>?) -> Int>>(kniBridge585(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_OPENSSL_BLOCK_num(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?): Int {
    memScoped {
        return kniBridge586(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_value(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge587(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_OPENSSL_BLOCK_new(compare: sk_OPENSSL_BLOCK_compfunc?): CPointer<stack_st_OPENSSL_BLOCK>? {
    return interpretCPointer<stack_st_OPENSSL_BLOCK>(kniBridge588(compare.rawValue))
}

fun sk_OPENSSL_BLOCK_new_null(): CPointer<stack_st_OPENSSL_BLOCK>? {
    return interpretCPointer<stack_st_OPENSSL_BLOCK>(kniBridge589())
}

fun sk_OPENSSL_BLOCK_free(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?): Unit {
    memScoped {
        return kniBridge590(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_zero(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?): Unit {
    memScoped {
        return kniBridge591(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_delete(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, i: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge592(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_OPENSSL_BLOCK_delete_ptr(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, ptr: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge593(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_BLOCK_push(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge594(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_unshift(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge595(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_pop(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge596(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_BLOCK_shift(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge597(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_BLOCK_pop_free(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, freefunc: sk_OPENSSL_BLOCK_freefunc?): Unit {
    memScoped {
        return kniBridge598(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_OPENSSL_BLOCK_insert(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, ptr: CValuesRef<*>?, idx: Int): Int {
    memScoped {
        return kniBridge599(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_OPENSSL_BLOCK_set(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, idx: Int, ptr: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge600(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_BLOCK_find(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge601(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_find_ex(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge602(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_sort(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?): Unit {
    memScoped {
        return kniBridge603(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_is_sorted(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?): Int {
    memScoped {
        return kniBridge604(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_OPENSSL_BLOCK_dup(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?): CPointer<stack_st_OPENSSL_BLOCK>? {
    memScoped {
        return interpretCPointer<stack_st_OPENSSL_BLOCK>(kniBridge605(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_OPENSSL_BLOCK_deep_copy(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, copyfunc: sk_OPENSSL_BLOCK_copyfunc?, freefunc: sk_OPENSSL_BLOCK_freefunc?): CPointer<stack_st_OPENSSL_BLOCK>? {
    memScoped {
        return interpretCPointer<stack_st_OPENSSL_BLOCK>(kniBridge606(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_OPENSSL_BLOCK_set_cmp_func(sk: CValuesRef<stack_st_OPENSSL_BLOCK>?, compare: sk_OPENSSL_BLOCK_compfunc?): sk_OPENSSL_BLOCK_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<COpaquePointerVar>?, CPointer<COpaquePointerVar>?) -> Int>>(kniBridge607(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun CRYPTO_THREAD_lock_new(): COpaquePointer? {
    return interpretCPointer<COpaque>(kniBridge608())
}

fun CRYPTO_THREAD_read_lock(lock: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge609(lock?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_THREAD_write_lock(lock: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge610(lock?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_THREAD_unlock(lock: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge611(lock?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_THREAD_lock_free(lock: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge612(lock?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_atomic_add(`val`: CValuesRef<IntVar>?, amount: Int, ret: CValuesRef<IntVar>?, lock: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge613(`val`?.getPointer(memScope).rawValue, amount, ret?.getPointer(memScope).rawValue, lock?.getPointer(memScope).rawValue)
    }
}

fun sk_void_num(sk: CValuesRef<stack_st_void>?): Int {
    memScoped {
        return kniBridge614(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_void_value(sk: CValuesRef<stack_st_void>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge615(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_void_new(compare: sk_void_compfunc?): CPointer<stack_st_void>? {
    return interpretCPointer<stack_st_void>(kniBridge616(compare.rawValue))
}

fun sk_void_new_null(): CPointer<stack_st_void>? {
    return interpretCPointer<stack_st_void>(kniBridge617())
}

fun sk_void_free(sk: CValuesRef<stack_st_void>?): Unit {
    memScoped {
        return kniBridge618(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_void_zero(sk: CValuesRef<stack_st_void>?): Unit {
    memScoped {
        return kniBridge619(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_void_delete(sk: CValuesRef<stack_st_void>?, i: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge620(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_void_delete_ptr(sk: CValuesRef<stack_st_void>?, ptr: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge621(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_void_push(sk: CValuesRef<stack_st_void>?, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge622(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_void_unshift(sk: CValuesRef<stack_st_void>?, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge623(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_void_pop(sk: CValuesRef<stack_st_void>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge624(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_void_shift(sk: CValuesRef<stack_st_void>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge625(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_void_pop_free(sk: CValuesRef<stack_st_void>?, freefunc: sk_void_freefunc?): Unit {
    memScoped {
        return kniBridge626(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_void_insert(sk: CValuesRef<stack_st_void>?, ptr: CValuesRef<*>?, idx: Int): Int {
    memScoped {
        return kniBridge627(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_void_set(sk: CValuesRef<stack_st_void>?, idx: Int, ptr: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge628(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_void_find(sk: CValuesRef<stack_st_void>?, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge629(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_void_find_ex(sk: CValuesRef<stack_st_void>?, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge630(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_void_sort(sk: CValuesRef<stack_st_void>?): Unit {
    memScoped {
        return kniBridge631(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_void_is_sorted(sk: CValuesRef<stack_st_void>?): Int {
    memScoped {
        return kniBridge632(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_void_dup(sk: CValuesRef<stack_st_void>?): CPointer<stack_st_void>? {
    memScoped {
        return interpretCPointer<stack_st_void>(kniBridge633(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_void_deep_copy(sk: CValuesRef<stack_st_void>?, copyfunc: sk_void_copyfunc?, freefunc: sk_void_freefunc?): CPointer<stack_st_void>? {
    memScoped {
        return interpretCPointer<stack_st_void>(kniBridge634(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_void_set_cmp_func(sk: CValuesRef<stack_st_void>?, compare: sk_void_compfunc?): sk_void_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<COpaquePointerVar>?, CPointer<COpaquePointerVar>?) -> Int>>(kniBridge635(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun CRYPTO_mem_ctrl(mode: Int): Int {
    return kniBridge636(mode)
}

fun OPENSSL_strlcpy(dst: CValuesRef<ByteVar>?, src: String?, siz: size_t): size_t {
    memScoped {
        return kniBridge637(dst?.getPointer(memScope).rawValue, src?.cstr?.getPointer(memScope).rawValue, siz)
    }
}

fun OPENSSL_strlcat(dst: CValuesRef<ByteVar>?, src: String?, siz: size_t): size_t {
    memScoped {
        return kniBridge638(dst?.getPointer(memScope).rawValue, src?.cstr?.getPointer(memScope).rawValue, siz)
    }
}

fun OPENSSL_strnlen(str: String?, maxlen: size_t): size_t {
    memScoped {
        return kniBridge639(str?.cstr?.getPointer(memScope).rawValue, maxlen)
    }
}

fun OPENSSL_buf2hexstr(buffer: CValuesRef<UByteVar>?, len: Long): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge640(buffer?.getPointer(memScope).rawValue, len))
    }
}

fun OPENSSL_hexstr2buf(str: String?, len: CValuesRef<LongVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge641(str?.cstr?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_hexchar2int(c: UByte): Int {
    return kniBridge642(c)
}

fun OpenSSL_version_num(): ULong {
    return kniBridge643()
}

fun OpenSSL_version(type: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge644(type))
}

fun OPENSSL_issetugid(): Int {
    return kniBridge645()
}

fun CRYPTO_get_ex_new_index(class_index: Int, argl: Long, argp: CValuesRef<*>?, new_func: CPointer<CRYPTO_EX_new>?, dup_func: CPointer<CRYPTO_EX_dup>?, free_func: CPointer<CRYPTO_EX_free>?): Int {
    memScoped {
        return kniBridge646(class_index, argl, argp?.getPointer(memScope).rawValue, new_func.rawValue, dup_func.rawValue, free_func.rawValue)
    }
}

fun CRYPTO_free_ex_index(class_index: Int, idx: Int): Int {
    return kniBridge647(class_index, idx)
}

fun CRYPTO_new_ex_data(class_index: Int, obj: CValuesRef<*>?, ad: CValuesRef<CRYPTO_EX_DATA>?): Int {
    memScoped {
        return kniBridge648(class_index, obj?.getPointer(memScope).rawValue, ad?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_dup_ex_data(class_index: Int, to: CValuesRef<CRYPTO_EX_DATA>?, from: CValuesRef<CRYPTO_EX_DATA>?): Int {
    memScoped {
        return kniBridge649(class_index, to?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_free_ex_data(class_index: Int, obj: CValuesRef<*>?, ad: CValuesRef<CRYPTO_EX_DATA>?): Unit {
    memScoped {
        return kniBridge650(class_index, obj?.getPointer(memScope).rawValue, ad?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_set_ex_data(ad: CValuesRef<CRYPTO_EX_DATA>?, idx: Int, `val`: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge651(ad?.getPointer(memScope).rawValue, idx, `val`?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_get_ex_data(ad: CValuesRef<CRYPTO_EX_DATA>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge652(ad?.getPointer(memScope).rawValue, idx))
    }
}

fun CRYPTO_set_mem_functions(m: CPointer<CFunction<(size_t, CPointer<ByteVar>?, Int) -> COpaquePointer?>>?, r: CPointer<CFunction<(COpaquePointer?, size_t, CPointer<ByteVar>?, Int) -> COpaquePointer?>>?, f: CPointer<CFunction<(COpaquePointer?, CPointer<ByteVar>?, Int) -> Unit>>?): Int {
    return kniBridge653(m.rawValue, r.rawValue, f.rawValue)
}

fun CRYPTO_set_mem_debug(flag: Int): Int {
    return kniBridge654(flag)
}

fun CRYPTO_get_mem_functions(m: CValuesRef<CPointerVar<CFunction<(size_t, CPointer<ByteVar>?, Int) -> COpaquePointer?>>>?, r: CValuesRef<CPointerVar<CFunction<(COpaquePointer?, size_t, CPointer<ByteVar>?, Int) -> COpaquePointer?>>>?, f: CValuesRef<CPointerVar<CFunction<(COpaquePointer?, CPointer<ByteVar>?, Int) -> Unit>>>?): Unit {
    memScoped {
        return kniBridge655(m?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, f?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_malloc(num: size_t, file: String?, line: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge656(num, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_zalloc(num: size_t, file: String?, line: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge657(num, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_memdup(str: CValuesRef<*>?, siz: size_t, file: String?, line: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge658(str?.getPointer(memScope).rawValue, siz, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_strdup(str: String?, file: String?, line: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge659(str?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_strndup(str: String?, s: size_t, file: String?, line: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge660(str?.cstr?.getPointer(memScope).rawValue, s, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_free(ptr: CValuesRef<*>?, file: String?, line: Int): Unit {
    memScoped {
        return kniBridge661(ptr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line)
    }
}

fun CRYPTO_clear_free(ptr: CValuesRef<*>?, num: size_t, file: String?, line: Int): Unit {
    memScoped {
        return kniBridge662(ptr?.getPointer(memScope).rawValue, num, file?.cstr?.getPointer(memScope).rawValue, line)
    }
}

fun CRYPTO_realloc(addr: CValuesRef<*>?, num: size_t, file: String?, line: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge663(addr?.getPointer(memScope).rawValue, num, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_clear_realloc(addr: CValuesRef<*>?, old_num: size_t, num: size_t, file: String?, line: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge664(addr?.getPointer(memScope).rawValue, old_num, num, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_secure_malloc_init(sz: size_t, minsize: Int): Int {
    return kniBridge665(sz, minsize)
}

fun CRYPTO_secure_malloc_done(): Int {
    return kniBridge666()
}

fun CRYPTO_secure_malloc(num: size_t, file: String?, line: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge667(num, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_secure_zalloc(num: size_t, file: String?, line: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge668(num, file?.cstr?.getPointer(memScope).rawValue, line))
    }
}

fun CRYPTO_secure_free(ptr: CValuesRef<*>?, file: String?, line: Int): Unit {
    memScoped {
        return kniBridge669(ptr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line)
    }
}

fun CRYPTO_secure_clear_free(ptr: CValuesRef<*>?, num: size_t, file: String?, line: Int): Unit {
    memScoped {
        return kniBridge670(ptr?.getPointer(memScope).rawValue, num, file?.cstr?.getPointer(memScope).rawValue, line)
    }
}

fun CRYPTO_secure_allocated(ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge671(ptr?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_secure_malloc_initialized(): Int {
    return kniBridge672()
}

fun CRYPTO_secure_actual_size(ptr: CValuesRef<*>?): size_t {
    memScoped {
        return kniBridge673(ptr?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_secure_used(): size_t {
    return kniBridge674()
}

fun OPENSSL_cleanse(ptr: CValuesRef<*>?, len: size_t): Unit {
    memScoped {
        return kniBridge675(ptr?.getPointer(memScope).rawValue, len)
    }
}

fun OPENSSL_die(assertion: String?, file: String?, line: Int): Unit {
    memScoped {
        return kniBridge676(assertion?.cstr?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, line)
    }
}

fun OPENSSL_isservice(): Int {
    return kniBridge677()
}

fun FIPS_mode(): Int {
    return kniBridge678()
}

fun FIPS_mode_set(r: Int): Int {
    return kniBridge679(r)
}

fun OPENSSL_init(): Unit {
    return kniBridge680()
}

fun OPENSSL_gmtime(timer: CValuesRef<time_tVar>?, result: CValuesRef<tm>?): CPointer<tm>? {
    memScoped {
        return interpretCPointer<tm>(kniBridge681(timer?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_gmtime_adj(tm: CValuesRef<tm>?, offset_day: Int, offset_sec: Long): Int {
    memScoped {
        return kniBridge682(tm?.getPointer(memScope).rawValue, offset_day, offset_sec)
    }
}

fun OPENSSL_gmtime_diff(pday: CValuesRef<IntVar>?, psec: CValuesRef<IntVar>?, from: CValuesRef<tm>?, to: CValuesRef<tm>?): Int {
    memScoped {
        return kniBridge683(pday?.getPointer(memScope).rawValue, psec?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_memcmp(in_a: CValuesRef<*>?, in_b: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge684(in_a?.getPointer(memScope).rawValue, in_b?.getPointer(memScope).rawValue, len)
    }
}

fun OPENSSL_cleanup(): Unit {
    return kniBridge685()
}

fun OPENSSL_init_crypto(opts: uint64_t, settings: CValuesRef<OPENSSL_INIT_SETTINGS>?): Int {
    memScoped {
        return kniBridge686(opts, settings?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_atexit(handler: CPointer<CFunction<() -> Unit>>?): Int {
    return kniBridge687(handler.rawValue)
}

fun OPENSSL_thread_stop(): Unit {
    return kniBridge688()
}

fun OPENSSL_INIT_new(): CPointer<OPENSSL_INIT_SETTINGS>? {
    return interpretCPointer<OPENSSL_INIT_SETTINGS>(kniBridge689())
}

fun OPENSSL_INIT_set_config_appname(settings: CValuesRef<OPENSSL_INIT_SETTINGS>?, config_file: String?): Int {
    memScoped {
        return kniBridge690(settings?.getPointer(memScope).rawValue, config_file?.cstr?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_INIT_free(settings: CValuesRef<OPENSSL_INIT_SETTINGS>?): Unit {
    memScoped {
        return kniBridge691(settings?.getPointer(memScope).rawValue)
    }
}

fun __sched_cpucount(__setsize: size_t, __setp: CValuesRef<cpu_set_t>?): Int {
    memScoped {
        return kniBridge692(__setsize, __setp?.getPointer(memScope).rawValue)
    }
}

fun __sched_cpualloc(__count: size_t): CPointer<cpu_set_t>? {
    return interpretCPointer<cpu_set_t>(kniBridge693(__count))
}

fun __sched_cpufree(__set: CValuesRef<cpu_set_t>?): Unit {
    memScoped {
        return kniBridge694(__set?.getPointer(memScope).rawValue)
    }
}

fun sched_setparam(__pid: __pid_t, __param: CValuesRef<sched_param>?): Int {
    memScoped {
        return kniBridge695(__pid, __param?.getPointer(memScope).rawValue)
    }
}

fun sched_getparam(__pid: __pid_t, __param: CValuesRef<sched_param>?): Int {
    memScoped {
        return kniBridge696(__pid, __param?.getPointer(memScope).rawValue)
    }
}

fun sched_setscheduler(__pid: __pid_t, __policy: Int, __param: CValuesRef<sched_param>?): Int {
    memScoped {
        return kniBridge697(__pid, __policy, __param?.getPointer(memScope).rawValue)
    }
}

fun sched_getscheduler(__pid: __pid_t): Int {
    return kniBridge698(__pid)
}

fun sched_yield(): Int {
    return kniBridge699()
}

fun sched_get_priority_max(__algorithm: Int): Int {
    return kniBridge700(__algorithm)
}

fun sched_get_priority_min(__algorithm: Int): Int {
    return kniBridge701(__algorithm)
}

fun sched_rr_get_interval(__pid: __pid_t, __t: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge702(__pid, __t?.getPointer(memScope).rawValue)
    }
}

fun pthread_create(__newthread: CValuesRef<pthread_tVar>?, __attr: CValuesRef<pthread_attr_t>?, __start_routine: CPointer<CFunction<(COpaquePointer?) -> COpaquePointer?>>?, __arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge703(__newthread?.getPointer(memScope).rawValue, __attr?.getPointer(memScope).rawValue, __start_routine.rawValue, __arg?.getPointer(memScope).rawValue)
    }
}

fun pthread_exit(__retval: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge704(__retval?.getPointer(memScope).rawValue)
    }
}

fun pthread_join(__th: pthread_t, __thread_return: CValuesRef<COpaquePointerVar>?): Int {
    memScoped {
        return kniBridge705(__th, __thread_return?.getPointer(memScope).rawValue)
    }
}

fun pthread_detach(__th: pthread_t): Int {
    return kniBridge706(__th)
}

fun pthread_self(): pthread_t {
    return kniBridge707()
}

fun pthread_equal(__thread1: pthread_t, __thread2: pthread_t): Int {
    return kniBridge708(__thread1, __thread2)
}

fun pthread_attr_init(__attr: CValuesRef<pthread_attr_t>?): Int {
    memScoped {
        return kniBridge709(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_destroy(__attr: CValuesRef<pthread_attr_t>?): Int {
    memScoped {
        return kniBridge710(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_getdetachstate(__attr: CValuesRef<pthread_attr_t>?, __detachstate: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge711(__attr?.getPointer(memScope).rawValue, __detachstate?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setdetachstate(__attr: CValuesRef<pthread_attr_t>?, __detachstate: Int): Int {
    memScoped {
        return kniBridge712(__attr?.getPointer(memScope).rawValue, __detachstate)
    }
}

fun pthread_attr_getguardsize(__attr: CValuesRef<pthread_attr_t>?, __guardsize: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge713(__attr?.getPointer(memScope).rawValue, __guardsize?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setguardsize(__attr: CValuesRef<pthread_attr_t>?, __guardsize: size_t): Int {
    memScoped {
        return kniBridge714(__attr?.getPointer(memScope).rawValue, __guardsize)
    }
}

fun pthread_attr_getschedparam(__attr: CValuesRef<pthread_attr_t>?, __param: CValuesRef<sched_param>?): Int {
    memScoped {
        return kniBridge715(__attr?.getPointer(memScope).rawValue, __param?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setschedparam(__attr: CValuesRef<pthread_attr_t>?, __param: CValuesRef<sched_param>?): Int {
    memScoped {
        return kniBridge716(__attr?.getPointer(memScope).rawValue, __param?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_getschedpolicy(__attr: CValuesRef<pthread_attr_t>?, __policy: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge717(__attr?.getPointer(memScope).rawValue, __policy?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setschedpolicy(__attr: CValuesRef<pthread_attr_t>?, __policy: Int): Int {
    memScoped {
        return kniBridge718(__attr?.getPointer(memScope).rawValue, __policy)
    }
}

fun pthread_attr_getinheritsched(__attr: CValuesRef<pthread_attr_t>?, __inherit: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge719(__attr?.getPointer(memScope).rawValue, __inherit?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setinheritsched(__attr: CValuesRef<pthread_attr_t>?, __inherit: Int): Int {
    memScoped {
        return kniBridge720(__attr?.getPointer(memScope).rawValue, __inherit)
    }
}

fun pthread_attr_getscope(__attr: CValuesRef<pthread_attr_t>?, __scope: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge721(__attr?.getPointer(memScope).rawValue, __scope?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setscope(__attr: CValuesRef<pthread_attr_t>?, __scope: Int): Int {
    memScoped {
        return kniBridge722(__attr?.getPointer(memScope).rawValue, __scope)
    }
}

fun pthread_attr_getstackaddr(__attr: CValuesRef<pthread_attr_t>?, __stackaddr: CValuesRef<COpaquePointerVar>?): Int {
    memScoped {
        return kniBridge723(__attr?.getPointer(memScope).rawValue, __stackaddr?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setstackaddr(__attr: CValuesRef<pthread_attr_t>?, __stackaddr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge724(__attr?.getPointer(memScope).rawValue, __stackaddr?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_getstacksize(__attr: CValuesRef<pthread_attr_t>?, __stacksize: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge725(__attr?.getPointer(memScope).rawValue, __stacksize?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setstacksize(__attr: CValuesRef<pthread_attr_t>?, __stacksize: size_t): Int {
    memScoped {
        return kniBridge726(__attr?.getPointer(memScope).rawValue, __stacksize)
    }
}

fun pthread_attr_getstack(__attr: CValuesRef<pthread_attr_t>?, __stackaddr: CValuesRef<COpaquePointerVar>?, __stacksize: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge727(__attr?.getPointer(memScope).rawValue, __stackaddr?.getPointer(memScope).rawValue, __stacksize?.getPointer(memScope).rawValue)
    }
}

fun pthread_attr_setstack(__attr: CValuesRef<pthread_attr_t>?, __stackaddr: CValuesRef<*>?, __stacksize: size_t): Int {
    memScoped {
        return kniBridge728(__attr?.getPointer(memScope).rawValue, __stackaddr?.getPointer(memScope).rawValue, __stacksize)
    }
}

fun pthread_setschedparam(__target_thread: pthread_t, __policy: Int, __param: CValuesRef<sched_param>?): Int {
    memScoped {
        return kniBridge729(__target_thread, __policy, __param?.getPointer(memScope).rawValue)
    }
}

fun pthread_getschedparam(__target_thread: pthread_t, __policy: CValuesRef<IntVar>?, __param: CValuesRef<sched_param>?): Int {
    memScoped {
        return kniBridge730(__target_thread, __policy?.getPointer(memScope).rawValue, __param?.getPointer(memScope).rawValue)
    }
}

fun pthread_setschedprio(__target_thread: pthread_t, __prio: Int): Int {
    return kniBridge731(__target_thread, __prio)
}

fun pthread_once(__once_control: CValuesRef<pthread_once_tVar>?, __init_routine: CPointer<CFunction<() -> Unit>>?): Int {
    memScoped {
        return kniBridge732(__once_control?.getPointer(memScope).rawValue, __init_routine.rawValue)
    }
}

fun pthread_setcancelstate(__state: Int, __oldstate: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge733(__state, __oldstate?.getPointer(memScope).rawValue)
    }
}

fun pthread_setcanceltype(__type: Int, __oldtype: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge734(__type, __oldtype?.getPointer(memScope).rawValue)
    }
}

fun pthread_cancel(__th: pthread_t): Int {
    return kniBridge735(__th)
}

fun pthread_testcancel(): Unit {
    return kniBridge736()
}

fun __pthread_register_cancel(__buf: CValuesRef<__pthread_unwind_buf_t>?): Unit {
    memScoped {
        return kniBridge737(__buf?.getPointer(memScope).rawValue)
    }
}

fun __pthread_unregister_cancel(__buf: CValuesRef<__pthread_unwind_buf_t>?): Unit {
    memScoped {
        return kniBridge738(__buf?.getPointer(memScope).rawValue)
    }
}

fun __pthread_unwind_next(__buf: CValuesRef<__pthread_unwind_buf_t>?): Unit {
    memScoped {
        return kniBridge739(__buf?.getPointer(memScope).rawValue)
    }
}

fun __sigsetjmp(__env: CValuesRef<__jmp_buf_tag>?, __savemask: Int): Int {
    memScoped {
        return kniBridge740(__env?.getPointer(memScope).rawValue, __savemask)
    }
}

fun pthread_mutex_init(__mutex: CValuesRef<pthread_mutex_t>?, __mutexattr: CValuesRef<pthread_mutexattr_t>?): Int {
    memScoped {
        return kniBridge741(__mutex?.getPointer(memScope).rawValue, __mutexattr?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutex_destroy(__mutex: CValuesRef<pthread_mutex_t>?): Int {
    memScoped {
        return kniBridge742(__mutex?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutex_trylock(__mutex: CValuesRef<pthread_mutex_t>?): Int {
    memScoped {
        return kniBridge743(__mutex?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutex_lock(__mutex: CValuesRef<pthread_mutex_t>?): Int {
    memScoped {
        return kniBridge744(__mutex?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutex_timedlock(__mutex: CValuesRef<pthread_mutex_t>?, __abstime: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge745(__mutex?.getPointer(memScope).rawValue, __abstime?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutex_unlock(__mutex: CValuesRef<pthread_mutex_t>?): Int {
    memScoped {
        return kniBridge746(__mutex?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutex_getprioceiling(__mutex: CValuesRef<pthread_mutex_t>?, __prioceiling: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge747(__mutex?.getPointer(memScope).rawValue, __prioceiling?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutex_setprioceiling(__mutex: CValuesRef<pthread_mutex_t>?, __prioceiling: Int, __old_ceiling: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge748(__mutex?.getPointer(memScope).rawValue, __prioceiling, __old_ceiling?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutex_consistent(__mutex: CValuesRef<pthread_mutex_t>?): Int {
    memScoped {
        return kniBridge749(__mutex?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutexattr_init(__attr: CValuesRef<pthread_mutexattr_t>?): Int {
    memScoped {
        return kniBridge750(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutexattr_destroy(__attr: CValuesRef<pthread_mutexattr_t>?): Int {
    memScoped {
        return kniBridge751(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutexattr_getpshared(__attr: CValuesRef<pthread_mutexattr_t>?, __pshared: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge752(__attr?.getPointer(memScope).rawValue, __pshared?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutexattr_setpshared(__attr: CValuesRef<pthread_mutexattr_t>?, __pshared: Int): Int {
    memScoped {
        return kniBridge753(__attr?.getPointer(memScope).rawValue, __pshared)
    }
}

fun pthread_mutexattr_gettype(__attr: CValuesRef<pthread_mutexattr_t>?, __kind: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge754(__attr?.getPointer(memScope).rawValue, __kind?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutexattr_settype(__attr: CValuesRef<pthread_mutexattr_t>?, __kind: Int): Int {
    memScoped {
        return kniBridge755(__attr?.getPointer(memScope).rawValue, __kind)
    }
}

fun pthread_mutexattr_getprotocol(__attr: CValuesRef<pthread_mutexattr_t>?, __protocol: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge756(__attr?.getPointer(memScope).rawValue, __protocol?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutexattr_setprotocol(__attr: CValuesRef<pthread_mutexattr_t>?, __protocol: Int): Int {
    memScoped {
        return kniBridge757(__attr?.getPointer(memScope).rawValue, __protocol)
    }
}

fun pthread_mutexattr_getprioceiling(__attr: CValuesRef<pthread_mutexattr_t>?, __prioceiling: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge758(__attr?.getPointer(memScope).rawValue, __prioceiling?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutexattr_setprioceiling(__attr: CValuesRef<pthread_mutexattr_t>?, __prioceiling: Int): Int {
    memScoped {
        return kniBridge759(__attr?.getPointer(memScope).rawValue, __prioceiling)
    }
}

fun pthread_mutexattr_getrobust(__attr: CValuesRef<pthread_mutexattr_t>?, __robustness: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge760(__attr?.getPointer(memScope).rawValue, __robustness?.getPointer(memScope).rawValue)
    }
}

fun pthread_mutexattr_setrobust(__attr: CValuesRef<pthread_mutexattr_t>?, __robustness: Int): Int {
    memScoped {
        return kniBridge761(__attr?.getPointer(memScope).rawValue, __robustness)
    }
}

fun pthread_rwlock_init(__rwlock: CValuesRef<pthread_rwlock_t>?, __attr: CValuesRef<pthread_rwlockattr_t>?): Int {
    memScoped {
        return kniBridge762(__rwlock?.getPointer(memScope).rawValue, __attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlock_destroy(__rwlock: CValuesRef<pthread_rwlock_t>?): Int {
    memScoped {
        return kniBridge763(__rwlock?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlock_rdlock(__rwlock: CValuesRef<pthread_rwlock_t>?): Int {
    memScoped {
        return kniBridge764(__rwlock?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlock_tryrdlock(__rwlock: CValuesRef<pthread_rwlock_t>?): Int {
    memScoped {
        return kniBridge765(__rwlock?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlock_timedrdlock(__rwlock: CValuesRef<pthread_rwlock_t>?, __abstime: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge766(__rwlock?.getPointer(memScope).rawValue, __abstime?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlock_wrlock(__rwlock: CValuesRef<pthread_rwlock_t>?): Int {
    memScoped {
        return kniBridge767(__rwlock?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlock_trywrlock(__rwlock: CValuesRef<pthread_rwlock_t>?): Int {
    memScoped {
        return kniBridge768(__rwlock?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlock_timedwrlock(__rwlock: CValuesRef<pthread_rwlock_t>?, __abstime: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge769(__rwlock?.getPointer(memScope).rawValue, __abstime?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlock_unlock(__rwlock: CValuesRef<pthread_rwlock_t>?): Int {
    memScoped {
        return kniBridge770(__rwlock?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlockattr_init(__attr: CValuesRef<pthread_rwlockattr_t>?): Int {
    memScoped {
        return kniBridge771(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlockattr_destroy(__attr: CValuesRef<pthread_rwlockattr_t>?): Int {
    memScoped {
        return kniBridge772(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlockattr_getpshared(__attr: CValuesRef<pthread_rwlockattr_t>?, __pshared: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge773(__attr?.getPointer(memScope).rawValue, __pshared?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlockattr_setpshared(__attr: CValuesRef<pthread_rwlockattr_t>?, __pshared: Int): Int {
    memScoped {
        return kniBridge774(__attr?.getPointer(memScope).rawValue, __pshared)
    }
}

fun pthread_rwlockattr_getkind_np(__attr: CValuesRef<pthread_rwlockattr_t>?, __pref: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge775(__attr?.getPointer(memScope).rawValue, __pref?.getPointer(memScope).rawValue)
    }
}

fun pthread_rwlockattr_setkind_np(__attr: CValuesRef<pthread_rwlockattr_t>?, __pref: Int): Int {
    memScoped {
        return kniBridge776(__attr?.getPointer(memScope).rawValue, __pref)
    }
}

fun pthread_cond_init(__cond: CValuesRef<pthread_cond_t>?, __cond_attr: CValuesRef<pthread_condattr_t>?): Int {
    memScoped {
        return kniBridge777(__cond?.getPointer(memScope).rawValue, __cond_attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_cond_destroy(__cond: CValuesRef<pthread_cond_t>?): Int {
    memScoped {
        return kniBridge778(__cond?.getPointer(memScope).rawValue)
    }
}

fun pthread_cond_signal(__cond: CValuesRef<pthread_cond_t>?): Int {
    memScoped {
        return kniBridge779(__cond?.getPointer(memScope).rawValue)
    }
}

fun pthread_cond_broadcast(__cond: CValuesRef<pthread_cond_t>?): Int {
    memScoped {
        return kniBridge780(__cond?.getPointer(memScope).rawValue)
    }
}

fun pthread_cond_wait(__cond: CValuesRef<pthread_cond_t>?, __mutex: CValuesRef<pthread_mutex_t>?): Int {
    memScoped {
        return kniBridge781(__cond?.getPointer(memScope).rawValue, __mutex?.getPointer(memScope).rawValue)
    }
}

fun pthread_cond_timedwait(__cond: CValuesRef<pthread_cond_t>?, __mutex: CValuesRef<pthread_mutex_t>?, __abstime: CValuesRef<timespec>?): Int {
    memScoped {
        return kniBridge782(__cond?.getPointer(memScope).rawValue, __mutex?.getPointer(memScope).rawValue, __abstime?.getPointer(memScope).rawValue)
    }
}

fun pthread_condattr_init(__attr: CValuesRef<pthread_condattr_t>?): Int {
    memScoped {
        return kniBridge783(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_condattr_destroy(__attr: CValuesRef<pthread_condattr_t>?): Int {
    memScoped {
        return kniBridge784(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_condattr_getpshared(__attr: CValuesRef<pthread_condattr_t>?, __pshared: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge785(__attr?.getPointer(memScope).rawValue, __pshared?.getPointer(memScope).rawValue)
    }
}

fun pthread_condattr_setpshared(__attr: CValuesRef<pthread_condattr_t>?, __pshared: Int): Int {
    memScoped {
        return kniBridge786(__attr?.getPointer(memScope).rawValue, __pshared)
    }
}

fun pthread_condattr_getclock(__attr: CValuesRef<pthread_condattr_t>?, __clock_id: CValuesRef<__clockid_tVar>?): Int {
    memScoped {
        return kniBridge787(__attr?.getPointer(memScope).rawValue, __clock_id?.getPointer(memScope).rawValue)
    }
}

fun pthread_condattr_setclock(__attr: CValuesRef<pthread_condattr_t>?, __clock_id: __clockid_t): Int {
    memScoped {
        return kniBridge788(__attr?.getPointer(memScope).rawValue, __clock_id)
    }
}

fun pthread_spin_init(__lock: CValuesRef<pthread_spinlock_tVar>?, __pshared: Int): Int {
    memScoped {
        return kniBridge789(__lock?.getPointer(memScope).rawValue, __pshared)
    }
}

fun pthread_spin_destroy(__lock: CValuesRef<pthread_spinlock_tVar>?): Int {
    memScoped {
        return kniBridge790(__lock?.getPointer(memScope).rawValue)
    }
}

fun pthread_spin_lock(__lock: CValuesRef<pthread_spinlock_tVar>?): Int {
    memScoped {
        return kniBridge791(__lock?.getPointer(memScope).rawValue)
    }
}

fun pthread_spin_trylock(__lock: CValuesRef<pthread_spinlock_tVar>?): Int {
    memScoped {
        return kniBridge792(__lock?.getPointer(memScope).rawValue)
    }
}

fun pthread_spin_unlock(__lock: CValuesRef<pthread_spinlock_tVar>?): Int {
    memScoped {
        return kniBridge793(__lock?.getPointer(memScope).rawValue)
    }
}

fun pthread_barrier_init(__barrier: CValuesRef<pthread_barrier_t>?, __attr: CValuesRef<pthread_barrierattr_t>?, __count: UInt): Int {
    memScoped {
        return kniBridge794(__barrier?.getPointer(memScope).rawValue, __attr?.getPointer(memScope).rawValue, __count)
    }
}

fun pthread_barrier_destroy(__barrier: CValuesRef<pthread_barrier_t>?): Int {
    memScoped {
        return kniBridge795(__barrier?.getPointer(memScope).rawValue)
    }
}

fun pthread_barrier_wait(__barrier: CValuesRef<pthread_barrier_t>?): Int {
    memScoped {
        return kniBridge796(__barrier?.getPointer(memScope).rawValue)
    }
}

fun pthread_barrierattr_init(__attr: CValuesRef<pthread_barrierattr_t>?): Int {
    memScoped {
        return kniBridge797(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_barrierattr_destroy(__attr: CValuesRef<pthread_barrierattr_t>?): Int {
    memScoped {
        return kniBridge798(__attr?.getPointer(memScope).rawValue)
    }
}

fun pthread_barrierattr_getpshared(__attr: CValuesRef<pthread_barrierattr_t>?, __pshared: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge799(__attr?.getPointer(memScope).rawValue, __pshared?.getPointer(memScope).rawValue)
    }
}

fun pthread_barrierattr_setpshared(__attr: CValuesRef<pthread_barrierattr_t>?, __pshared: Int): Int {
    memScoped {
        return kniBridge800(__attr?.getPointer(memScope).rawValue, __pshared)
    }
}

fun pthread_key_create(__key: CValuesRef<pthread_key_tVar>?, __destr_function: CPointer<CFunction<(COpaquePointer?) -> Unit>>?): Int {
    memScoped {
        return kniBridge801(__key?.getPointer(memScope).rawValue, __destr_function.rawValue)
    }
}

fun pthread_key_delete(__key: pthread_key_t): Int {
    return kniBridge802(__key)
}

fun pthread_getspecific(__key: pthread_key_t): COpaquePointer? {
    return interpretCPointer<COpaque>(kniBridge803(__key))
}

fun pthread_setspecific(__key: pthread_key_t, __pointer: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge804(__key, __pointer?.getPointer(memScope).rawValue)
    }
}

fun pthread_getcpuclockid(__thread_id: pthread_t, __clock_id: CValuesRef<__clockid_tVar>?): Int {
    memScoped {
        return kniBridge805(__thread_id, __clock_id?.getPointer(memScope).rawValue)
    }
}

fun pthread_atfork(__prepare: CPointer<CFunction<() -> Unit>>?, __parent: CPointer<CFunction<() -> Unit>>?, __child: CPointer<CFunction<() -> Unit>>?): Int {
    return kniBridge806(__prepare.rawValue, __parent.rawValue, __child.rawValue)
}

fun CRYPTO_THREAD_run_once(once: CValuesRef<CRYPTO_ONCEVar>?, init: CPointer<CFunction<() -> Unit>>?): Int {
    memScoped {
        return kniBridge807(once?.getPointer(memScope).rawValue, init.rawValue)
    }
}

fun CRYPTO_THREAD_init_local(key: CValuesRef<CRYPTO_THREAD_LOCALVar>?, cleanup: CPointer<CFunction<(COpaquePointer?) -> Unit>>?): Int {
    memScoped {
        return kniBridge808(key?.getPointer(memScope).rawValue, cleanup.rawValue)
    }
}

fun CRYPTO_THREAD_get_local(key: CValuesRef<CRYPTO_THREAD_LOCALVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge809(key?.getPointer(memScope).rawValue))
    }
}

fun CRYPTO_THREAD_set_local(key: CValuesRef<CRYPTO_THREAD_LOCALVar>?, `val`: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge810(key?.getPointer(memScope).rawValue, `val`?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_THREAD_cleanup_local(key: CValuesRef<CRYPTO_THREAD_LOCALVar>?): Int {
    memScoped {
        return kniBridge811(key?.getPointer(memScope).rawValue)
    }
}

fun CRYPTO_THREAD_get_current_id(): CRYPTO_THREAD_ID {
    return kniBridge812()
}

fun CRYPTO_THREAD_compare_id(a: CRYPTO_THREAD_ID, b: CRYPTO_THREAD_ID): Int {
    return kniBridge813(a, b)
}

fun ERR_load_CRYPTO_strings(): Int {
    return kniBridge814()
}

fun COMP_CTX_new(meth: CValuesRef<COMP_METHOD>?): CPointer<COMP_CTX>? {
    memScoped {
        return interpretCPointer<COMP_CTX>(kniBridge815(meth?.getPointer(memScope).rawValue))
    }
}

fun COMP_CTX_get_method(ctx: CValuesRef<COMP_CTX>?): CPointer<COMP_METHOD>? {
    memScoped {
        return interpretCPointer<COMP_METHOD>(kniBridge816(ctx?.getPointer(memScope).rawValue))
    }
}

fun COMP_CTX_get_type(comp: CValuesRef<COMP_CTX>?): Int {
    memScoped {
        return kniBridge817(comp?.getPointer(memScope).rawValue)
    }
}

fun COMP_get_type(meth: CValuesRef<COMP_METHOD>?): Int {
    memScoped {
        return kniBridge818(meth?.getPointer(memScope).rawValue)
    }
}

fun COMP_get_name(meth: CValuesRef<COMP_METHOD>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge819(meth?.getPointer(memScope).rawValue))
    }
}

fun COMP_CTX_free(ctx: CValuesRef<COMP_CTX>?): Unit {
    memScoped {
        return kniBridge820(ctx?.getPointer(memScope).rawValue)
    }
}

fun COMP_compress_block(ctx: CValuesRef<COMP_CTX>?, out: CValuesRef<UByteVar>?, olen: Int, `in`: CValuesRef<UByteVar>?, ilen: Int): Int {
    memScoped {
        return kniBridge821(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, olen, `in`?.getPointer(memScope).rawValue, ilen)
    }
}

fun COMP_expand_block(ctx: CValuesRef<COMP_CTX>?, out: CValuesRef<UByteVar>?, olen: Int, `in`: CValuesRef<UByteVar>?, ilen: Int): Int {
    memScoped {
        return kniBridge822(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, olen, `in`?.getPointer(memScope).rawValue, ilen)
    }
}

fun COMP_zlib(): CPointer<COMP_METHOD>? {
    return interpretCPointer<COMP_METHOD>(kniBridge823())
}

fun ERR_load_COMP_strings(): Int {
    return kniBridge824()
}

fun BIO_get_new_index(): Int {
    return kniBridge825()
}

fun BIO_set_flags(b: CValuesRef<BIO>?, flags: Int): Unit {
    memScoped {
        return kniBridge826(b?.getPointer(memScope).rawValue, flags)
    }
}

fun BIO_test_flags(b: CValuesRef<BIO>?, flags: Int): Int {
    memScoped {
        return kniBridge827(b?.getPointer(memScope).rawValue, flags)
    }
}

fun BIO_clear_flags(b: CValuesRef<BIO>?, flags: Int): Unit {
    memScoped {
        return kniBridge828(b?.getPointer(memScope).rawValue, flags)
    }
}

fun BIO_get_callback(b: CValuesRef<BIO>?): BIO_callback_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?, Int, CPointer<ByteVar>?, Int, Long, Long) -> Long>>(kniBridge829(b?.getPointer(memScope).rawValue))
    }
}

fun BIO_set_callback(b: CValuesRef<BIO>?, callback: BIO_callback_fn?): Unit {
    memScoped {
        return kniBridge830(b?.getPointer(memScope).rawValue, callback.rawValue)
    }
}

fun BIO_get_callback_arg(b: CValuesRef<BIO>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge831(b?.getPointer(memScope).rawValue))
    }
}

fun BIO_set_callback_arg(b: CValuesRef<BIO>?, arg: CValuesRef<ByteVar>?): Unit {
    memScoped {
        return kniBridge832(b?.getPointer(memScope).rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun BIO_method_name(b: CValuesRef<BIO>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge833(b?.getPointer(memScope).rawValue))
    }
}

fun BIO_method_type(b: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge834(b?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_num(sk: CValuesRef<stack_st_BIO>?): Int {
    memScoped {
        return kniBridge835(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_value(sk: CValuesRef<stack_st_BIO>?, idx: Int): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge836(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_BIO_new(compare: sk_BIO_compfunc?): CPointer<stack_st_BIO>? {
    return interpretCPointer<stack_st_BIO>(kniBridge837(compare.rawValue))
}

fun sk_BIO_new_null(): CPointer<stack_st_BIO>? {
    return interpretCPointer<stack_st_BIO>(kniBridge838())
}

fun sk_BIO_free(sk: CValuesRef<stack_st_BIO>?): Unit {
    memScoped {
        return kniBridge839(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_zero(sk: CValuesRef<stack_st_BIO>?): Unit {
    memScoped {
        return kniBridge840(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_delete(sk: CValuesRef<stack_st_BIO>?, i: Int): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge841(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_BIO_delete_ptr(sk: CValuesRef<stack_st_BIO>?, ptr: CValuesRef<BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge842(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_BIO_push(sk: CValuesRef<stack_st_BIO>?, ptr: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge843(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_unshift(sk: CValuesRef<stack_st_BIO>?, ptr: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge844(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_pop(sk: CValuesRef<stack_st_BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge845(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_BIO_shift(sk: CValuesRef<stack_st_BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge846(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_BIO_pop_free(sk: CValuesRef<stack_st_BIO>?, freefunc: sk_BIO_freefunc?): Unit {
    memScoped {
        return kniBridge847(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_BIO_insert(sk: CValuesRef<stack_st_BIO>?, ptr: CValuesRef<BIO>?, idx: Int): Int {
    memScoped {
        return kniBridge848(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_BIO_set(sk: CValuesRef<stack_st_BIO>?, idx: Int, ptr: CValuesRef<BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge849(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_BIO_find(sk: CValuesRef<stack_st_BIO>?, ptr: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge850(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_find_ex(sk: CValuesRef<stack_st_BIO>?, ptr: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge851(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_sort(sk: CValuesRef<stack_st_BIO>?): Unit {
    memScoped {
        return kniBridge852(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_is_sorted(sk: CValuesRef<stack_st_BIO>?): Int {
    memScoped {
        return kniBridge853(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_BIO_dup(sk: CValuesRef<stack_st_BIO>?): CPointer<stack_st_BIO>? {
    memScoped {
        return interpretCPointer<stack_st_BIO>(kniBridge854(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_BIO_deep_copy(sk: CValuesRef<stack_st_BIO>?, copyfunc: sk_BIO_copyfunc?, freefunc: sk_BIO_freefunc?): CPointer<stack_st_BIO>? {
    memScoped {
        return interpretCPointer<stack_st_BIO>(kniBridge855(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_BIO_set_cmp_func(sk: CValuesRef<stack_st_BIO>?, compare: sk_BIO_compfunc?): sk_BIO_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<BIO>>?, CPointer<CPointerVar<BIO>>?) -> Int>>(kniBridge856(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun BIO_ctrl_pending(b: CValuesRef<BIO>?): size_t {
    memScoped {
        return kniBridge857(b?.getPointer(memScope).rawValue)
    }
}

fun BIO_ctrl_wpending(b: CValuesRef<BIO>?): size_t {
    memScoped {
        return kniBridge858(b?.getPointer(memScope).rawValue)
    }
}

fun BIO_ctrl_get_write_guarantee(b: CValuesRef<BIO>?): size_t {
    memScoped {
        return kniBridge859(b?.getPointer(memScope).rawValue)
    }
}

fun BIO_ctrl_get_read_request(b: CValuesRef<BIO>?): size_t {
    memScoped {
        return kniBridge860(b?.getPointer(memScope).rawValue)
    }
}

fun BIO_ctrl_reset_read_request(b: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge861(b?.getPointer(memScope).rawValue)
    }
}

fun BIO_set_ex_data(bio: CValuesRef<BIO>?, idx: Int, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge862(bio?.getPointer(memScope).rawValue, idx, data?.getPointer(memScope).rawValue)
    }
}

fun BIO_get_ex_data(bio: CValuesRef<BIO>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge863(bio?.getPointer(memScope).rawValue, idx))
    }
}

fun BIO_number_read(bio: CValuesRef<BIO>?): uint64_t {
    memScoped {
        return kniBridge864(bio?.getPointer(memScope).rawValue)
    }
}

fun BIO_number_written(bio: CValuesRef<BIO>?): uint64_t {
    memScoped {
        return kniBridge865(bio?.getPointer(memScope).rawValue)
    }
}

fun BIO_asn1_set_prefix(b: CValuesRef<BIO>?, prefix: CPointer<asn1_ps_func>?, prefix_free: CPointer<asn1_ps_func>?): Int {
    memScoped {
        return kniBridge866(b?.getPointer(memScope).rawValue, prefix.rawValue, prefix_free.rawValue)
    }
}

fun BIO_asn1_get_prefix(b: CValuesRef<BIO>?, pprefix: CValuesRef<CPointerVar<asn1_ps_func>>?, pprefix_free: CValuesRef<CPointerVar<asn1_ps_func>>?): Int {
    memScoped {
        return kniBridge867(b?.getPointer(memScope).rawValue, pprefix?.getPointer(memScope).rawValue, pprefix_free?.getPointer(memScope).rawValue)
    }
}

fun BIO_asn1_set_suffix(b: CValuesRef<BIO>?, suffix: CPointer<asn1_ps_func>?, suffix_free: CPointer<asn1_ps_func>?): Int {
    memScoped {
        return kniBridge868(b?.getPointer(memScope).rawValue, suffix.rawValue, suffix_free.rawValue)
    }
}

fun BIO_asn1_get_suffix(b: CValuesRef<BIO>?, psuffix: CValuesRef<CPointerVar<asn1_ps_func>>?, psuffix_free: CValuesRef<CPointerVar<asn1_ps_func>>?): Int {
    memScoped {
        return kniBridge869(b?.getPointer(memScope).rawValue, psuffix?.getPointer(memScope).rawValue, psuffix_free?.getPointer(memScope).rawValue)
    }
}

fun BIO_s_file(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge870())
}

fun BIO_new_file(filename: String?, mode: String?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge871(filename?.cstr?.getPointer(memScope).rawValue, mode?.cstr?.getPointer(memScope).rawValue))
    }
}

fun BIO_new_fp(stream: CValuesRef<FILE>?, close_flag: Int): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge872(stream?.getPointer(memScope).rawValue, close_flag))
    }
}

fun BIO_new(type: CValuesRef<BIO_METHOD>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge873(type?.getPointer(memScope).rawValue))
    }
}

fun BIO_free(a: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge874(a?.getPointer(memScope).rawValue)
    }
}

fun BIO_set_data(a: CValuesRef<BIO>?, ptr: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge875(a?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun BIO_get_data(a: CValuesRef<BIO>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge876(a?.getPointer(memScope).rawValue))
    }
}

fun BIO_set_init(a: CValuesRef<BIO>?, init: Int): Unit {
    memScoped {
        return kniBridge877(a?.getPointer(memScope).rawValue, init)
    }
}

fun BIO_get_init(a: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge878(a?.getPointer(memScope).rawValue)
    }
}

fun BIO_set_shutdown(a: CValuesRef<BIO>?, shut: Int): Unit {
    memScoped {
        return kniBridge879(a?.getPointer(memScope).rawValue, shut)
    }
}

fun BIO_get_shutdown(a: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge880(a?.getPointer(memScope).rawValue)
    }
}

fun BIO_vfree(a: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge881(a?.getPointer(memScope).rawValue)
    }
}

fun BIO_up_ref(a: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge882(a?.getPointer(memScope).rawValue)
    }
}

fun BIO_read(b: CValuesRef<BIO>?, data: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge883(b?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun BIO_gets(bp: CValuesRef<BIO>?, buf: CValuesRef<ByteVar>?, size: Int): Int {
    memScoped {
        return kniBridge884(bp?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, size)
    }
}

fun BIO_write(b: CValuesRef<BIO>?, data: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge885(b?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun BIO_puts(bp: CValuesRef<BIO>?, buf: String?): Int {
    memScoped {
        return kniBridge886(bp?.getPointer(memScope).rawValue, buf?.cstr?.getPointer(memScope).rawValue)
    }
}

fun BIO_indent(b: CValuesRef<BIO>?, indent: Int, max: Int): Int {
    memScoped {
        return kniBridge887(b?.getPointer(memScope).rawValue, indent, max)
    }
}

fun BIO_ctrl(bp: CValuesRef<BIO>?, cmd: Int, larg: Long, parg: CValuesRef<*>?): Long {
    memScoped {
        return kniBridge888(bp?.getPointer(memScope).rawValue, cmd, larg, parg?.getPointer(memScope).rawValue)
    }
}

fun BIO_callback_ctrl(b: CValuesRef<BIO>?, cmd: Int, fp: CPointer<CFunction<(CPointer<BIO>?, Int, CPointer<ByteVar>?, Int, Long, Long) -> Unit>>?): Long {
    memScoped {
        return kniBridge889(b?.getPointer(memScope).rawValue, cmd, fp.rawValue)
    }
}

fun BIO_ptr_ctrl(bp: CValuesRef<BIO>?, cmd: Int, larg: Long): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge890(bp?.getPointer(memScope).rawValue, cmd, larg))
    }
}

fun BIO_int_ctrl(bp: CValuesRef<BIO>?, cmd: Int, larg: Long, iarg: Int): Long {
    memScoped {
        return kniBridge891(bp?.getPointer(memScope).rawValue, cmd, larg, iarg)
    }
}

fun BIO_push(b: CValuesRef<BIO>?, append: CValuesRef<BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge892(b?.getPointer(memScope).rawValue, append?.getPointer(memScope).rawValue))
    }
}

fun BIO_pop(b: CValuesRef<BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge893(b?.getPointer(memScope).rawValue))
    }
}

fun BIO_free_all(a: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge894(a?.getPointer(memScope).rawValue)
    }
}

fun BIO_find_type(b: CValuesRef<BIO>?, bio_type: Int): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge895(b?.getPointer(memScope).rawValue, bio_type))
    }
}

fun BIO_next(b: CValuesRef<BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge896(b?.getPointer(memScope).rawValue))
    }
}

fun BIO_set_next(b: CValuesRef<BIO>?, next: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge897(b?.getPointer(memScope).rawValue, next?.getPointer(memScope).rawValue)
    }
}

fun BIO_get_retry_BIO(bio: CValuesRef<BIO>?, reason: CValuesRef<IntVar>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge898(bio?.getPointer(memScope).rawValue, reason?.getPointer(memScope).rawValue))
    }
}

fun BIO_get_retry_reason(bio: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge899(bio?.getPointer(memScope).rawValue)
    }
}

fun BIO_set_retry_reason(bio: CValuesRef<BIO>?, reason: Int): Unit {
    memScoped {
        return kniBridge900(bio?.getPointer(memScope).rawValue, reason)
    }
}

fun BIO_dup_chain(`in`: CValuesRef<BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge901(`in`?.getPointer(memScope).rawValue))
    }
}

fun BIO_nread0(bio: CValuesRef<BIO>?, buf: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge902(bio?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue)
    }
}

fun BIO_nread(bio: CValuesRef<BIO>?, buf: CValuesRef<CPointerVar<ByteVar>>?, num: Int): Int {
    memScoped {
        return kniBridge903(bio?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, num)
    }
}

fun BIO_nwrite0(bio: CValuesRef<BIO>?, buf: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge904(bio?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue)
    }
}

fun BIO_nwrite(bio: CValuesRef<BIO>?, buf: CValuesRef<CPointerVar<ByteVar>>?, num: Int): Int {
    memScoped {
        return kniBridge905(bio?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, num)
    }
}

fun BIO_debug_callback(bio: CValuesRef<BIO>?, cmd: Int, argp: String?, argi: Int, argl: Long, ret: Long): Long {
    memScoped {
        return kniBridge906(bio?.getPointer(memScope).rawValue, cmd, argp?.cstr?.getPointer(memScope).rawValue, argi, argl, ret)
    }
}

fun BIO_s_mem(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge907())
}

fun BIO_s_secmem(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge908())
}

fun BIO_new_mem_buf(buf: CValuesRef<*>?, len: Int): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge909(buf?.getPointer(memScope).rawValue, len))
    }
}

fun BIO_s_socket(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge910())
}

fun BIO_s_connect(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge911())
}

fun BIO_s_accept(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge912())
}

fun BIO_s_fd(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge913())
}

fun BIO_s_log(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge914())
}

fun BIO_s_bio(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge915())
}

fun BIO_s_null(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge916())
}

fun BIO_f_null(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge917())
}

fun BIO_f_buffer(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge918())
}

fun BIO_f_linebuffer(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge919())
}

fun BIO_f_nbio_test(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge920())
}

fun BIO_s_datagram(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge921())
}

fun BIO_dgram_non_fatal_error(error: Int): Int {
    return kniBridge922(error)
}

fun BIO_new_dgram(fd: Int, close_flag: Int): CPointer<BIO>? {
    return interpretCPointer<BIO>(kniBridge923(fd, close_flag))
}

fun BIO_sock_should_retry(i: Int): Int {
    return kniBridge924(i)
}

fun BIO_sock_non_fatal_error(error: Int): Int {
    return kniBridge925(error)
}

fun BIO_fd_should_retry(i: Int): Int {
    return kniBridge926(i)
}

fun BIO_fd_non_fatal_error(error: Int): Int {
    return kniBridge927(error)
}

fun BIO_dump_cb(cb: CPointer<CFunction<(COpaquePointer?, size_t, COpaquePointer?) -> Int>>?, u: CValuesRef<*>?, s: String?, len: Int): Int {
    memScoped {
        return kniBridge928(cb.rawValue, u?.getPointer(memScope).rawValue, s?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun BIO_dump_indent_cb(cb: CPointer<CFunction<(COpaquePointer?, size_t, COpaquePointer?) -> Int>>?, u: CValuesRef<*>?, s: String?, len: Int, indent: Int): Int {
    memScoped {
        return kniBridge929(cb.rawValue, u?.getPointer(memScope).rawValue, s?.cstr?.getPointer(memScope).rawValue, len, indent)
    }
}

fun BIO_dump(b: CValuesRef<BIO>?, bytes: String?, len: Int): Int {
    memScoped {
        return kniBridge930(b?.getPointer(memScope).rawValue, bytes?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun BIO_dump_indent(b: CValuesRef<BIO>?, bytes: String?, len: Int, indent: Int): Int {
    memScoped {
        return kniBridge931(b?.getPointer(memScope).rawValue, bytes?.cstr?.getPointer(memScope).rawValue, len, indent)
    }
}

fun BIO_dump_fp(fp: CValuesRef<FILE>?, s: String?, len: Int): Int {
    memScoped {
        return kniBridge932(fp?.getPointer(memScope).rawValue, s?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun BIO_dump_indent_fp(fp: CValuesRef<FILE>?, s: String?, len: Int, indent: Int): Int {
    memScoped {
        return kniBridge933(fp?.getPointer(memScope).rawValue, s?.cstr?.getPointer(memScope).rawValue, len, indent)
    }
}

fun BIO_hex_string(out: CValuesRef<BIO>?, indent: Int, width: Int, data: CValuesRef<UByteVar>?, datalen: Int): Int {
    memScoped {
        return kniBridge934(out?.getPointer(memScope).rawValue, indent, width, data?.getPointer(memScope).rawValue, datalen)
    }
}

fun BIO_ADDR_new(): CPointer<BIO_ADDR>? {
    return interpretCPointer<BIO_ADDR>(kniBridge935())
}

fun BIO_ADDR_rawmake(ap: CValuesRef<BIO_ADDR>?, family: Int, where: CValuesRef<*>?, wherelen: size_t, port: UShort): Int {
    memScoped {
        return kniBridge936(ap?.getPointer(memScope).rawValue, family, where?.getPointer(memScope).rawValue, wherelen, port)
    }
}

fun BIO_ADDR_free(arg0: CValuesRef<BIO_ADDR>?): Unit {
    memScoped {
        return kniBridge937(arg0?.getPointer(memScope).rawValue)
    }
}

fun BIO_ADDR_clear(ap: CValuesRef<BIO_ADDR>?): Unit {
    memScoped {
        return kniBridge938(ap?.getPointer(memScope).rawValue)
    }
}

fun BIO_ADDR_family(ap: CValuesRef<BIO_ADDR>?): Int {
    memScoped {
        return kniBridge939(ap?.getPointer(memScope).rawValue)
    }
}

fun BIO_ADDR_rawaddress(ap: CValuesRef<BIO_ADDR>?, p: CValuesRef<*>?, l: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge940(ap?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, l?.getPointer(memScope).rawValue)
    }
}

fun BIO_ADDR_rawport(ap: CValuesRef<BIO_ADDR>?): UShort {
    memScoped {
        return kniBridge941(ap?.getPointer(memScope).rawValue)
    }
}

fun BIO_ADDR_hostname_string(ap: CValuesRef<BIO_ADDR>?, numeric: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge942(ap?.getPointer(memScope).rawValue, numeric))
    }
}

fun BIO_ADDR_service_string(ap: CValuesRef<BIO_ADDR>?, numeric: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge943(ap?.getPointer(memScope).rawValue, numeric))
    }
}

fun BIO_ADDR_path_string(ap: CValuesRef<BIO_ADDR>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge944(ap?.getPointer(memScope).rawValue))
    }
}

fun BIO_ADDRINFO_next(bai: CValuesRef<BIO_ADDRINFO>?): CPointer<BIO_ADDRINFO>? {
    memScoped {
        return interpretCPointer<BIO_ADDRINFO>(kniBridge945(bai?.getPointer(memScope).rawValue))
    }
}

fun BIO_ADDRINFO_family(bai: CValuesRef<BIO_ADDRINFO>?): Int {
    memScoped {
        return kniBridge946(bai?.getPointer(memScope).rawValue)
    }
}

fun BIO_ADDRINFO_socktype(bai: CValuesRef<BIO_ADDRINFO>?): Int {
    memScoped {
        return kniBridge947(bai?.getPointer(memScope).rawValue)
    }
}

fun BIO_ADDRINFO_protocol(bai: CValuesRef<BIO_ADDRINFO>?): Int {
    memScoped {
        return kniBridge948(bai?.getPointer(memScope).rawValue)
    }
}

fun BIO_ADDRINFO_address(bai: CValuesRef<BIO_ADDRINFO>?): CPointer<BIO_ADDR>? {
    memScoped {
        return interpretCPointer<BIO_ADDR>(kniBridge949(bai?.getPointer(memScope).rawValue))
    }
}

fun BIO_ADDRINFO_free(bai: CValuesRef<BIO_ADDRINFO>?): Unit {
    memScoped {
        return kniBridge950(bai?.getPointer(memScope).rawValue)
    }
}

fun BIO_parse_hostserv(hostserv: String?, host: CValuesRef<CPointerVar<ByteVar>>?, service: CValuesRef<CPointerVar<ByteVar>>?, hostserv_prio: BIO_hostserv_priorities): Int {
    memScoped {
        return kniBridge951(hostserv?.cstr?.getPointer(memScope).rawValue, host?.getPointer(memScope).rawValue, service?.getPointer(memScope).rawValue, hostserv_prio.value)
    }
}

fun BIO_lookup(host: String?, service: String?, lookup_type: BIO_lookup_type, family: Int, socktype: Int, res: CValuesRef<CPointerVar<BIO_ADDRINFO>>?): Int {
    memScoped {
        return kniBridge952(host?.cstr?.getPointer(memScope).rawValue, service?.cstr?.getPointer(memScope).rawValue, lookup_type.value, family, socktype, res?.getPointer(memScope).rawValue)
    }
}

fun BIO_sock_error(sock: Int): Int {
    return kniBridge953(sock)
}

fun BIO_socket_ioctl(fd: Int, type: Long, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge954(fd, type, arg?.getPointer(memScope).rawValue)
    }
}

fun BIO_socket_nbio(fd: Int, mode: Int): Int {
    return kniBridge955(fd, mode)
}

fun BIO_sock_init(): Int {
    return kniBridge956()
}

fun BIO_set_tcp_ndelay(sock: Int, turn_on: Int): Int {
    return kniBridge957(sock, turn_on)
}

fun BIO_gethostbyname(name: String?): CPointer<hostent>? {
    memScoped {
        return interpretCPointer<hostent>(kniBridge958(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun BIO_get_port(str: String?, port_ptr: CValuesRef<UShortVar>?): Int {
    memScoped {
        return kniBridge959(str?.cstr?.getPointer(memScope).rawValue, port_ptr?.getPointer(memScope).rawValue)
    }
}

fun BIO_get_host_ip(str: String?, ip: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge960(str?.cstr?.getPointer(memScope).rawValue, ip?.getPointer(memScope).rawValue)
    }
}

fun BIO_get_accept_socket(host_port: CValuesRef<ByteVar>?, mode: Int): Int {
    memScoped {
        return kniBridge961(host_port?.getPointer(memScope).rawValue, mode)
    }
}

fun BIO_accept(sock: Int, ip_port: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge962(sock, ip_port?.getPointer(memScope).rawValue)
    }
}

fun BIO_sock_info(sock: Int, type: BIO_sock_info_type, info: CValuesRef<BIO_sock_info_u>?): Int {
    memScoped {
        return kniBridge963(sock, type.value, info?.getPointer(memScope).rawValue)
    }
}

fun BIO_socket(domain: Int, socktype: Int, protocol: Int, options: Int): Int {
    return kniBridge964(domain, socktype, protocol, options)
}

fun BIO_connect(sock: Int, addr: CValuesRef<BIO_ADDR>?, options: Int): Int {
    memScoped {
        return kniBridge965(sock, addr?.getPointer(memScope).rawValue, options)
    }
}

fun BIO_listen(sock: Int, addr: CValuesRef<BIO_ADDR>?, options: Int): Int {
    memScoped {
        return kniBridge966(sock, addr?.getPointer(memScope).rawValue, options)
    }
}

fun BIO_accept_ex(accept_sock: Int, addr: CValuesRef<BIO_ADDR>?, options: Int): Int {
    memScoped {
        return kniBridge967(accept_sock, addr?.getPointer(memScope).rawValue, options)
    }
}

fun BIO_closesocket(sock: Int): Int {
    return kniBridge968(sock)
}

fun BIO_new_socket(sock: Int, close_flag: Int): CPointer<BIO>? {
    return interpretCPointer<BIO>(kniBridge969(sock, close_flag))
}

fun BIO_new_connect(host_port: String?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge970(host_port?.cstr?.getPointer(memScope).rawValue))
    }
}

fun BIO_new_accept(host_port: String?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge971(host_port?.cstr?.getPointer(memScope).rawValue))
    }
}

fun BIO_new_fd(fd: Int, close_flag: Int): CPointer<BIO>? {
    return interpretCPointer<BIO>(kniBridge972(fd, close_flag))
}

fun BIO_new_bio_pair(bio1: CValuesRef<CPointerVar<BIO>>?, writebuf1: size_t, bio2: CValuesRef<CPointerVar<BIO>>?, writebuf2: size_t): Int {
    memScoped {
        return kniBridge973(bio1?.getPointer(memScope).rawValue, writebuf1, bio2?.getPointer(memScope).rawValue, writebuf2)
    }
}

fun BIO_copy_next_retry(b: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge974(b?.getPointer(memScope).rawValue)
    }
}

fun BIO_printf(bio: CValuesRef<BIO>?, format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge975(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(bio?.getPointer(memScope), format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun BIO_vprintf(bio: CValuesRef<BIO>?, format: String?, args: va_list?): Int {
    memScoped {
        return kniBridge976(bio?.getPointer(memScope).rawValue, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun BIO_snprintf(buf: CValuesRef<ByteVar>?, n: size_t, format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge977(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(buf?.getPointer(memScope), n, format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun BIO_vsnprintf(buf: CValuesRef<ByteVar>?, n: size_t, format: String?, args: va_list?): Int {
    memScoped {
        return kniBridge978(buf?.getPointer(memScope).rawValue, n, format?.cstr?.getPointer(memScope).rawValue, args.rawValue)
    }
}

fun BIO_meth_new(type: Int, name: String?): CPointer<BIO_METHOD>? {
    memScoped {
        return interpretCPointer<BIO_METHOD>(kniBridge979(type, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_free(biom: CValuesRef<BIO_METHOD>?): Unit {
    memScoped {
        return kniBridge980(biom?.getPointer(memScope).rawValue)
    }
}

fun BIO_meth_get_write(biom: CValuesRef<BIO_METHOD>?): CPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>(kniBridge981(biom?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_set_write(biom: CValuesRef<BIO_METHOD>?, write: CPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>?): Int {
    memScoped {
        return kniBridge982(biom?.getPointer(memScope).rawValue, write.rawValue)
    }
}

fun BIO_meth_get_read(biom: CValuesRef<BIO_METHOD>?): CPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>(kniBridge983(biom?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_set_read(biom: CValuesRef<BIO_METHOD>?, read: CPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>?): Int {
    memScoped {
        return kniBridge984(biom?.getPointer(memScope).rawValue, read.rawValue)
    }
}

fun BIO_meth_get_puts(biom: CValuesRef<BIO_METHOD>?): CPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?) -> Int>>(kniBridge985(biom?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_set_puts(biom: CValuesRef<BIO_METHOD>?, puts: CPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?) -> Int>>?): Int {
    memScoped {
        return kniBridge986(biom?.getPointer(memScope).rawValue, puts.rawValue)
    }
}

fun BIO_meth_get_gets(biom: CValuesRef<BIO_METHOD>?): CPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>(kniBridge987(biom?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_set_gets(biom: CValuesRef<BIO_METHOD>?, gets: CPointer<CFunction<(CPointer<BIO>?, CPointer<ByteVar>?, Int) -> Int>>?): Int {
    memScoped {
        return kniBridge988(biom?.getPointer(memScope).rawValue, gets.rawValue)
    }
}

fun BIO_meth_get_ctrl(biom: CValuesRef<BIO_METHOD>?): CPointer<CFunction<(CPointer<BIO>?, Int, Long, COpaquePointer?) -> Long>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?, Int, Long, COpaquePointer?) -> Long>>(kniBridge989(biom?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_set_ctrl(biom: CValuesRef<BIO_METHOD>?, ctrl: CPointer<CFunction<(CPointer<BIO>?, Int, Long, COpaquePointer?) -> Long>>?): Int {
    memScoped {
        return kniBridge990(biom?.getPointer(memScope).rawValue, ctrl.rawValue)
    }
}

fun BIO_meth_get_create(bion: CValuesRef<BIO_METHOD>?): CPointer<CFunction<(CPointer<BIO>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?) -> Int>>(kniBridge991(bion?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_set_create(biom: CValuesRef<BIO_METHOD>?, create: CPointer<CFunction<(CPointer<BIO>?) -> Int>>?): Int {
    memScoped {
        return kniBridge992(biom?.getPointer(memScope).rawValue, create.rawValue)
    }
}

fun BIO_meth_get_destroy(biom: CValuesRef<BIO_METHOD>?): CPointer<CFunction<(CPointer<BIO>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?) -> Int>>(kniBridge993(biom?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_set_destroy(biom: CValuesRef<BIO_METHOD>?, destroy: CPointer<CFunction<(CPointer<BIO>?) -> Int>>?): Int {
    memScoped {
        return kniBridge994(biom?.getPointer(memScope).rawValue, destroy.rawValue)
    }
}

fun BIO_meth_get_callback_ctrl(biom: CValuesRef<BIO_METHOD>?): CPointer<CFunction<(CPointer<BIO>?, Int, CPointer<bio_info_cb>?) -> Long>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIO>?, Int, CPointer<bio_info_cb>?) -> Long>>(kniBridge995(biom?.getPointer(memScope).rawValue))
    }
}

fun BIO_meth_set_callback_ctrl(biom: CValuesRef<BIO_METHOD>?, callback_ctrl: CPointer<CFunction<(CPointer<BIO>?, Int, CPointer<bio_info_cb>?) -> Long>>?): Int {
    memScoped {
        return kniBridge996(biom?.getPointer(memScope).rawValue, callback_ctrl.rawValue)
    }
}

fun ERR_load_BIO_strings(): Int {
    return kniBridge997()
}

fun BUF_MEM_new(): CPointer<BUF_MEM>? {
    return interpretCPointer<BUF_MEM>(kniBridge998())
}

fun BUF_MEM_new_ex(flags: ULong): CPointer<BUF_MEM>? {
    return interpretCPointer<BUF_MEM>(kniBridge999(flags))
}

fun BUF_MEM_free(a: CValuesRef<BUF_MEM>?): Unit {
    memScoped {
        return kniBridge1000(a?.getPointer(memScope).rawValue)
    }
}

fun BUF_MEM_grow(str: CValuesRef<BUF_MEM>?, len: size_t): size_t {
    memScoped {
        return kniBridge1001(str?.getPointer(memScope).rawValue, len)
    }
}

fun BUF_MEM_grow_clean(str: CValuesRef<BUF_MEM>?, len: size_t): size_t {
    memScoped {
        return kniBridge1002(str?.getPointer(memScope).rawValue, len)
    }
}

fun BUF_reverse(out: CValuesRef<UByteVar>?, `in`: CValuesRef<UByteVar>?, siz: size_t): Unit {
    memScoped {
        return kniBridge1003(out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, siz)
    }
}

fun ERR_load_BUF_strings(): Int {
    return kniBridge1004()
}

fun BN_set_flags(b: CValuesRef<BIGNUM>?, n: Int): Unit {
    memScoped {
        return kniBridge1005(b?.getPointer(memScope).rawValue, n)
    }
}

fun BN_get_flags(b: CValuesRef<BIGNUM>?, n: Int): Int {
    memScoped {
        return kniBridge1006(b?.getPointer(memScope).rawValue, n)
    }
}

fun BN_with_flags(dest: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, flags: Int): Unit {
    memScoped {
        return kniBridge1007(dest?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, flags)
    }
}

fun BN_GENCB_call(cb: CValuesRef<BN_GENCB>?, a: Int, b: Int): Int {
    memScoped {
        return kniBridge1008(cb?.getPointer(memScope).rawValue, a, b)
    }
}

fun BN_GENCB_new(): CPointer<BN_GENCB>? {
    return interpretCPointer<BN_GENCB>(kniBridge1009())
}

fun BN_GENCB_free(cb: CValuesRef<BN_GENCB>?): Unit {
    memScoped {
        return kniBridge1010(cb?.getPointer(memScope).rawValue)
    }
}

fun BN_GENCB_set_old(gencb: CValuesRef<BN_GENCB>?, callback: CPointer<CFunction<(Int, Int, COpaquePointer?) -> Unit>>?, cb_arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1011(gencb?.getPointer(memScope).rawValue, callback.rawValue, cb_arg?.getPointer(memScope).rawValue)
    }
}

fun BN_GENCB_set(gencb: CValuesRef<BN_GENCB>?, callback: CPointer<CFunction<(Int, Int, CPointer<BN_GENCB>?) -> Int>>?, cb_arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1012(gencb?.getPointer(memScope).rawValue, callback.rawValue, cb_arg?.getPointer(memScope).rawValue)
    }
}

fun BN_GENCB_get_arg(cb: CValuesRef<BN_GENCB>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1013(cb?.getPointer(memScope).rawValue))
    }
}

fun BN_abs_is_word(a: CValuesRef<BIGNUM>?, w: ULong): Int {
    memScoped {
        return kniBridge1014(a?.getPointer(memScope).rawValue, w)
    }
}

fun BN_is_zero(a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1015(a?.getPointer(memScope).rawValue)
    }
}

fun BN_is_one(a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1016(a?.getPointer(memScope).rawValue)
    }
}

fun BN_is_word(a: CValuesRef<BIGNUM>?, w: ULong): Int {
    memScoped {
        return kniBridge1017(a?.getPointer(memScope).rawValue, w)
    }
}

fun BN_is_odd(a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1018(a?.getPointer(memScope).rawValue)
    }
}

fun BN_zero_ex(a: CValuesRef<BIGNUM>?): Unit {
    memScoped {
        return kniBridge1019(a?.getPointer(memScope).rawValue)
    }
}

fun BN_value_one(): CPointer<BIGNUM>? {
    return interpretCPointer<BIGNUM>(kniBridge1020())
}

fun BN_options(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge1021())
}

fun BN_CTX_new(): CPointer<BN_CTX>? {
    return interpretCPointer<BN_CTX>(kniBridge1022())
}

fun BN_CTX_secure_new(): CPointer<BN_CTX>? {
    return interpretCPointer<BN_CTX>(kniBridge1023())
}

fun BN_CTX_free(c: CValuesRef<BN_CTX>?): Unit {
    memScoped {
        return kniBridge1024(c?.getPointer(memScope).rawValue)
    }
}

fun BN_CTX_start(ctx: CValuesRef<BN_CTX>?): Unit {
    memScoped {
        return kniBridge1025(ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_CTX_get(ctx: CValuesRef<BN_CTX>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1026(ctx?.getPointer(memScope).rawValue))
    }
}

fun BN_CTX_end(ctx: CValuesRef<BN_CTX>?): Unit {
    memScoped {
        return kniBridge1027(ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_rand(rnd: CValuesRef<BIGNUM>?, bits: Int, top: Int, bottom: Int): Int {
    memScoped {
        return kniBridge1028(rnd?.getPointer(memScope).rawValue, bits, top, bottom)
    }
}

fun BN_pseudo_rand(rnd: CValuesRef<BIGNUM>?, bits: Int, top: Int, bottom: Int): Int {
    memScoped {
        return kniBridge1029(rnd?.getPointer(memScope).rawValue, bits, top, bottom)
    }
}

fun BN_rand_range(rnd: CValuesRef<BIGNUM>?, range: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1030(rnd?.getPointer(memScope).rawValue, range?.getPointer(memScope).rawValue)
    }
}

fun BN_pseudo_rand_range(rnd: CValuesRef<BIGNUM>?, range: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1031(rnd?.getPointer(memScope).rawValue, range?.getPointer(memScope).rawValue)
    }
}

fun BN_num_bits(a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1032(a?.getPointer(memScope).rawValue)
    }
}

fun BN_num_bits_word(l: ULong): Int {
    return kniBridge1033(l)
}

fun BN_security_bits(L: Int, N: Int): Int {
    return kniBridge1034(L, N)
}

fun BN_new(): CPointer<BIGNUM>? {
    return interpretCPointer<BIGNUM>(kniBridge1035())
}

fun BN_secure_new(): CPointer<BIGNUM>? {
    return interpretCPointer<BIGNUM>(kniBridge1036())
}

fun BN_clear_free(a: CValuesRef<BIGNUM>?): Unit {
    memScoped {
        return kniBridge1037(a?.getPointer(memScope).rawValue)
    }
}

fun BN_copy(a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1038(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue))
    }
}

fun BN_swap(a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): Unit {
    memScoped {
        return kniBridge1039(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun BN_bin2bn(s: CValuesRef<UByteVar>?, len: Int, ret: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1040(s?.getPointer(memScope).rawValue, len, ret?.getPointer(memScope).rawValue))
    }
}

fun BN_bn2bin(a: CValuesRef<BIGNUM>?, to: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1041(a?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue)
    }
}

fun BN_bn2binpad(a: CValuesRef<BIGNUM>?, to: CValuesRef<UByteVar>?, tolen: Int): Int {
    memScoped {
        return kniBridge1042(a?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue, tolen)
    }
}

fun BN_lebin2bn(s: CValuesRef<UByteVar>?, len: Int, ret: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1043(s?.getPointer(memScope).rawValue, len, ret?.getPointer(memScope).rawValue))
    }
}

fun BN_bn2lebinpad(a: CValuesRef<BIGNUM>?, to: CValuesRef<UByteVar>?, tolen: Int): Int {
    memScoped {
        return kniBridge1044(a?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue, tolen)
    }
}

fun BN_mpi2bn(s: CValuesRef<UByteVar>?, len: Int, ret: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1045(s?.getPointer(memScope).rawValue, len, ret?.getPointer(memScope).rawValue))
    }
}

fun BN_bn2mpi(a: CValuesRef<BIGNUM>?, to: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1046(a?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue)
    }
}

fun BN_sub(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1047(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun BN_usub(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1048(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun BN_uadd(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1049(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun BN_add(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1050(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun BN_mul(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1051(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_sqr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1052(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_set_negative(b: CValuesRef<BIGNUM>?, n: Int): Unit {
    memScoped {
        return kniBridge1053(b?.getPointer(memScope).rawValue, n)
    }
}

fun BN_is_negative(b: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1054(b?.getPointer(memScope).rawValue)
    }
}

fun BN_div(dv: CValuesRef<BIGNUM>?, rem: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, d: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1055(dv?.getPointer(memScope).rawValue, rem?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_nnmod(r: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, d: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1056(r?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_add(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1057(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_add_quick(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1058(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_sub(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1059(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_sub_quick(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1060(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_mul(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1061(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_sqr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1062(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_lshift1(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1063(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_lshift1_quick(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1064(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_lshift(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, n: Int, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1065(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, n, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_lshift_quick(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, n: Int, m: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1066(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, n, m?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_word(a: CValuesRef<BIGNUM>?, w: ULong): ULong {
    memScoped {
        return kniBridge1067(a?.getPointer(memScope).rawValue, w)
    }
}

fun BN_div_word(a: CValuesRef<BIGNUM>?, w: ULong): ULong {
    memScoped {
        return kniBridge1068(a?.getPointer(memScope).rawValue, w)
    }
}

fun BN_mul_word(a: CValuesRef<BIGNUM>?, w: ULong): Int {
    memScoped {
        return kniBridge1069(a?.getPointer(memScope).rawValue, w)
    }
}

fun BN_add_word(a: CValuesRef<BIGNUM>?, w: ULong): Int {
    memScoped {
        return kniBridge1070(a?.getPointer(memScope).rawValue, w)
    }
}

fun BN_sub_word(a: CValuesRef<BIGNUM>?, w: ULong): Int {
    memScoped {
        return kniBridge1071(a?.getPointer(memScope).rawValue, w)
    }
}

fun BN_set_word(a: CValuesRef<BIGNUM>?, w: ULong): Int {
    memScoped {
        return kniBridge1072(a?.getPointer(memScope).rawValue, w)
    }
}

fun BN_get_word(a: CValuesRef<BIGNUM>?): ULong {
    memScoped {
        return kniBridge1073(a?.getPointer(memScope).rawValue)
    }
}

fun BN_cmp(a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1074(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun BN_free(a: CValuesRef<BIGNUM>?): Unit {
    memScoped {
        return kniBridge1075(a?.getPointer(memScope).rawValue)
    }
}

fun BN_is_bit_set(a: CValuesRef<BIGNUM>?, n: Int): Int {
    memScoped {
        return kniBridge1076(a?.getPointer(memScope).rawValue, n)
    }
}

fun BN_lshift(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, n: Int): Int {
    memScoped {
        return kniBridge1077(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, n)
    }
}

fun BN_lshift1(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1078(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun BN_exp(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1079(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_exp(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1080(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_exp_mont(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?, m_ctx: CValuesRef<BN_MONT_CTX>?): Int {
    memScoped {
        return kniBridge1081(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, m_ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_exp_mont_consttime(rr: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?, in_mont: CValuesRef<BN_MONT_CTX>?): Int {
    memScoped {
        return kniBridge1082(rr?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, in_mont?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_exp_mont_word(r: CValuesRef<BIGNUM>?, a: ULong, p: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?, m_ctx: CValuesRef<BN_MONT_CTX>?): Int {
    memScoped {
        return kniBridge1083(r?.getPointer(memScope).rawValue, a, p?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, m_ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_exp2_mont(r: CValuesRef<BIGNUM>?, a1: CValuesRef<BIGNUM>?, p1: CValuesRef<BIGNUM>?, a2: CValuesRef<BIGNUM>?, p2: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?, m_ctx: CValuesRef<BN_MONT_CTX>?): Int {
    memScoped {
        return kniBridge1084(r?.getPointer(memScope).rawValue, a1?.getPointer(memScope).rawValue, p1?.getPointer(memScope).rawValue, a2?.getPointer(memScope).rawValue, p2?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, m_ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_exp_simple(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1085(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mask_bits(a: CValuesRef<BIGNUM>?, n: Int): Int {
    memScoped {
        return kniBridge1086(a?.getPointer(memScope).rawValue, n)
    }
}

fun BN_print_fp(fp: CValuesRef<FILE>?, a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1087(fp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun BN_print(bio: CValuesRef<BIO>?, a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1088(bio?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun BN_reciprocal(r: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, len: Int, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1089(r?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, len, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_rshift(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, n: Int): Int {
    memScoped {
        return kniBridge1090(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, n)
    }
}

fun BN_rshift1(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1091(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun BN_clear(a: CValuesRef<BIGNUM>?): Unit {
    memScoped {
        return kniBridge1092(a?.getPointer(memScope).rawValue)
    }
}

fun BN_dup(a: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1093(a?.getPointer(memScope).rawValue))
    }
}

fun BN_ucmp(a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1094(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun BN_set_bit(a: CValuesRef<BIGNUM>?, n: Int): Int {
    memScoped {
        return kniBridge1095(a?.getPointer(memScope).rawValue, n)
    }
}

fun BN_clear_bit(a: CValuesRef<BIGNUM>?, n: Int): Int {
    memScoped {
        return kniBridge1096(a?.getPointer(memScope).rawValue, n)
    }
}

fun BN_bn2hex(a: CValuesRef<BIGNUM>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1097(a?.getPointer(memScope).rawValue))
    }
}

fun BN_bn2dec(a: CValuesRef<BIGNUM>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1098(a?.getPointer(memScope).rawValue))
    }
}

fun BN_hex2bn(a: CValuesRef<CPointerVar<BIGNUM>>?, str: String?): Int {
    memScoped {
        return kniBridge1099(a?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun BN_dec2bn(a: CValuesRef<CPointerVar<BIGNUM>>?, str: String?): Int {
    memScoped {
        return kniBridge1100(a?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun BN_asc2bn(a: CValuesRef<CPointerVar<BIGNUM>>?, str: String?): Int {
    memScoped {
        return kniBridge1101(a?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun BN_gcd(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1102(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_kronecker(a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1103(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_inverse(ret: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, n: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1104(ret?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, n?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue))
    }
}

fun BN_mod_sqrt(ret: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, n: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1105(ret?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, n?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue))
    }
}

fun BN_consttime_swap(swap: ULong, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, nwords: Int): Unit {
    memScoped {
        return kniBridge1106(swap, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, nwords)
    }
}

fun BN_generate_prime(ret: CValuesRef<BIGNUM>?, bits: Int, safe: Int, add: CValuesRef<BIGNUM>?, rem: CValuesRef<BIGNUM>?, callback: CPointer<CFunction<(Int, Int, COpaquePointer?) -> Unit>>?, cb_arg: CValuesRef<*>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1107(ret?.getPointer(memScope).rawValue, bits, safe, add?.getPointer(memScope).rawValue, rem?.getPointer(memScope).rawValue, callback.rawValue, cb_arg?.getPointer(memScope).rawValue))
    }
}

fun BN_is_prime(p: CValuesRef<BIGNUM>?, nchecks: Int, callback: CPointer<CFunction<(Int, Int, COpaquePointer?) -> Unit>>?, ctx: CValuesRef<BN_CTX>?, cb_arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1108(p?.getPointer(memScope).rawValue, nchecks, callback.rawValue, ctx?.getPointer(memScope).rawValue, cb_arg?.getPointer(memScope).rawValue)
    }
}

fun BN_is_prime_fasttest(p: CValuesRef<BIGNUM>?, nchecks: Int, callback: CPointer<CFunction<(Int, Int, COpaquePointer?) -> Unit>>?, ctx: CValuesRef<BN_CTX>?, cb_arg: CValuesRef<*>?, do_trial_division: Int): Int {
    memScoped {
        return kniBridge1109(p?.getPointer(memScope).rawValue, nchecks, callback.rawValue, ctx?.getPointer(memScope).rawValue, cb_arg?.getPointer(memScope).rawValue, do_trial_division)
    }
}

fun BN_generate_prime_ex(ret: CValuesRef<BIGNUM>?, bits: Int, safe: Int, add: CValuesRef<BIGNUM>?, rem: CValuesRef<BIGNUM>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge1110(ret?.getPointer(memScope).rawValue, bits, safe, add?.getPointer(memScope).rawValue, rem?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun BN_is_prime_ex(p: CValuesRef<BIGNUM>?, nchecks: Int, ctx: CValuesRef<BN_CTX>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge1111(p?.getPointer(memScope).rawValue, nchecks, ctx?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun BN_is_prime_fasttest_ex(p: CValuesRef<BIGNUM>?, nchecks: Int, ctx: CValuesRef<BN_CTX>?, do_trial_division: Int, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge1112(p?.getPointer(memScope).rawValue, nchecks, ctx?.getPointer(memScope).rawValue, do_trial_division, cb?.getPointer(memScope).rawValue)
    }
}

fun BN_X931_generate_Xpq(Xp: CValuesRef<BIGNUM>?, Xq: CValuesRef<BIGNUM>?, nbits: Int, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1113(Xp?.getPointer(memScope).rawValue, Xq?.getPointer(memScope).rawValue, nbits, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_X931_derive_prime_ex(p: CValuesRef<BIGNUM>?, p1: CValuesRef<BIGNUM>?, p2: CValuesRef<BIGNUM>?, Xp: CValuesRef<BIGNUM>?, Xp1: CValuesRef<BIGNUM>?, Xp2: CValuesRef<BIGNUM>?, e: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge1114(p?.getPointer(memScope).rawValue, p1?.getPointer(memScope).rawValue, p2?.getPointer(memScope).rawValue, Xp?.getPointer(memScope).rawValue, Xp1?.getPointer(memScope).rawValue, Xp2?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun BN_X931_generate_prime_ex(p: CValuesRef<BIGNUM>?, p1: CValuesRef<BIGNUM>?, p2: CValuesRef<BIGNUM>?, Xp1: CValuesRef<BIGNUM>?, Xp2: CValuesRef<BIGNUM>?, Xp: CValuesRef<BIGNUM>?, e: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge1115(p?.getPointer(memScope).rawValue, p1?.getPointer(memScope).rawValue, p2?.getPointer(memScope).rawValue, Xp1?.getPointer(memScope).rawValue, Xp2?.getPointer(memScope).rawValue, Xp?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun BN_MONT_CTX_new(): CPointer<BN_MONT_CTX>? {
    return interpretCPointer<BN_MONT_CTX>(kniBridge1116())
}

fun BN_mod_mul_montgomery(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, mont: CValuesRef<BN_MONT_CTX>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1117(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, mont?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_to_montgomery(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, mont: CValuesRef<BN_MONT_CTX>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1118(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, mont?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_from_montgomery(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, mont: CValuesRef<BN_MONT_CTX>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1119(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, mont?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_MONT_CTX_free(mont: CValuesRef<BN_MONT_CTX>?): Unit {
    memScoped {
        return kniBridge1120(mont?.getPointer(memScope).rawValue)
    }
}

fun BN_MONT_CTX_set(mont: CValuesRef<BN_MONT_CTX>?, mod: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1121(mont?.getPointer(memScope).rawValue, mod?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_MONT_CTX_copy(to: CValuesRef<BN_MONT_CTX>?, from: CValuesRef<BN_MONT_CTX>?): CPointer<BN_MONT_CTX>? {
    memScoped {
        return interpretCPointer<BN_MONT_CTX>(kniBridge1122(to?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue))
    }
}

fun BN_MONT_CTX_set_locked(pmont: CValuesRef<CPointerVar<BN_MONT_CTX>>?, lock: CValuesRef<*>?, mod: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): CPointer<BN_MONT_CTX>? {
    memScoped {
        return interpretCPointer<BN_MONT_CTX>(kniBridge1123(pmont?.getPointer(memScope).rawValue, lock?.getPointer(memScope).rawValue, mod?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue))
    }
}

fun BN_BLINDING_new(A: CValuesRef<BIGNUM>?, Ai: CValuesRef<BIGNUM>?, mod: CValuesRef<BIGNUM>?): CPointer<BN_BLINDING>? {
    memScoped {
        return interpretCPointer<BN_BLINDING>(kniBridge1124(A?.getPointer(memScope).rawValue, Ai?.getPointer(memScope).rawValue, mod?.getPointer(memScope).rawValue))
    }
}

fun BN_BLINDING_free(b: CValuesRef<BN_BLINDING>?): Unit {
    memScoped {
        return kniBridge1125(b?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_update(b: CValuesRef<BN_BLINDING>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1126(b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_convert(n: CValuesRef<BIGNUM>?, b: CValuesRef<BN_BLINDING>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1127(n?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_invert(n: CValuesRef<BIGNUM>?, b: CValuesRef<BN_BLINDING>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1128(n?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_convert_ex(n: CValuesRef<BIGNUM>?, r: CValuesRef<BIGNUM>?, b: CValuesRef<BN_BLINDING>?, arg3: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1129(n?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, arg3?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_invert_ex(n: CValuesRef<BIGNUM>?, r: CValuesRef<BIGNUM>?, b: CValuesRef<BN_BLINDING>?, arg3: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1130(n?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, arg3?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_is_current_thread(b: CValuesRef<BN_BLINDING>?): Int {
    memScoped {
        return kniBridge1131(b?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_set_current_thread(b: CValuesRef<BN_BLINDING>?): Unit {
    memScoped {
        return kniBridge1132(b?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_lock(b: CValuesRef<BN_BLINDING>?): Int {
    memScoped {
        return kniBridge1133(b?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_unlock(b: CValuesRef<BN_BLINDING>?): Int {
    memScoped {
        return kniBridge1134(b?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_get_flags(arg0: CValuesRef<BN_BLINDING>?): ULong {
    memScoped {
        return kniBridge1135(arg0?.getPointer(memScope).rawValue)
    }
}

fun BN_BLINDING_set_flags(arg0: CValuesRef<BN_BLINDING>?, arg1: ULong): Unit {
    memScoped {
        return kniBridge1136(arg0?.getPointer(memScope).rawValue, arg1)
    }
}

fun BN_BLINDING_create_param(b: CValuesRef<BN_BLINDING>?, e: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?, bn_mod_exp: CPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>?, m_ctx: CValuesRef<BN_MONT_CTX>?): CPointer<BN_BLINDING>? {
    memScoped {
        return interpretCPointer<BN_BLINDING>(kniBridge1137(b?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, bn_mod_exp.rawValue, m_ctx?.getPointer(memScope).rawValue))
    }
}

fun BN_set_params(mul: Int, high: Int, low: Int, mont: Int): Unit {
    return kniBridge1138(mul, high, low, mont)
}

fun BN_get_params(which: Int): Int {
    return kniBridge1139(which)
}

fun BN_RECP_CTX_new(): CPointer<BN_RECP_CTX>? {
    return interpretCPointer<BN_RECP_CTX>(kniBridge1140())
}

fun BN_RECP_CTX_free(recp: CValuesRef<BN_RECP_CTX>?): Unit {
    memScoped {
        return kniBridge1141(recp?.getPointer(memScope).rawValue)
    }
}

fun BN_RECP_CTX_set(recp: CValuesRef<BN_RECP_CTX>?, rdiv: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1142(recp?.getPointer(memScope).rawValue, rdiv?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_mul_reciprocal(r: CValuesRef<BIGNUM>?, x: CValuesRef<BIGNUM>?, y: CValuesRef<BIGNUM>?, recp: CValuesRef<BN_RECP_CTX>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1143(r?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, recp?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_mod_exp_recp(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1144(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_div_recp(dv: CValuesRef<BIGNUM>?, rem: CValuesRef<BIGNUM>?, m: CValuesRef<BIGNUM>?, recp: CValuesRef<BN_RECP_CTX>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1145(dv?.getPointer(memScope).rawValue, rem?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, recp?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_add(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1146(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1147(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_mul(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1148(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_sqr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1149(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_inv(r: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1150(r?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_div(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1151(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_exp(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1152(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_sqrt(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1153(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_solve_quad(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1154(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_arr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1155(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_mul_arr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1156(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_sqr_arr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1157(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_inv_arr(r: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1158(r?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_div_arr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1159(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_exp_arr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1160(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_sqrt_arr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1161(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_mod_solve_quad_arr(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1162(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_GF2m_poly2arr(a: CValuesRef<BIGNUM>?, p: CValuesRef<IntVar>?, max: Int): Int {
    memScoped {
        return kniBridge1163(a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, max)
    }
}

fun BN_GF2m_arr2poly(p: CValuesRef<IntVar>?, a: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge1164(p?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun BN_nist_mod_192(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1165(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_nist_mod_224(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1166(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_nist_mod_256(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1167(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_nist_mod_384(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1168(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_nist_mod_521(r: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, p: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1169(r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_get0_nist_prime_192(): CPointer<BIGNUM>? {
    return interpretCPointer<BIGNUM>(kniBridge1170())
}

fun BN_get0_nist_prime_224(): CPointer<BIGNUM>? {
    return interpretCPointer<BIGNUM>(kniBridge1171())
}

fun BN_get0_nist_prime_256(): CPointer<BIGNUM>? {
    return interpretCPointer<BIGNUM>(kniBridge1172())
}

fun BN_get0_nist_prime_384(): CPointer<BIGNUM>? {
    return interpretCPointer<BIGNUM>(kniBridge1173())
}

fun BN_get0_nist_prime_521(): CPointer<BIGNUM>? {
    return interpretCPointer<BIGNUM>(kniBridge1174())
}

fun BN_nist_mod_func(p: CValuesRef<BIGNUM>?): CPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?) -> Int>>(kniBridge1175(p?.getPointer(memScope).rawValue))
    }
}

fun BN_generate_dsa_nonce(out: CValuesRef<BIGNUM>?, range: CValuesRef<BIGNUM>?, priv: CValuesRef<BIGNUM>?, message: CValuesRef<UByteVar>?, message_len: size_t, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge1176(out?.getPointer(memScope).rawValue, range?.getPointer(memScope).rawValue, priv?.getPointer(memScope).rawValue, message?.getPointer(memScope).rawValue, message_len, ctx?.getPointer(memScope).rawValue)
    }
}

fun BN_get_rfc2409_prime_768(bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1177(bn?.getPointer(memScope).rawValue))
    }
}

fun BN_get_rfc2409_prime_1024(bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1178(bn?.getPointer(memScope).rawValue))
    }
}

fun BN_get_rfc3526_prime_1536(bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1179(bn?.getPointer(memScope).rawValue))
    }
}

fun BN_get_rfc3526_prime_2048(bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1180(bn?.getPointer(memScope).rawValue))
    }
}

fun BN_get_rfc3526_prime_3072(bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1181(bn?.getPointer(memScope).rawValue))
    }
}

fun BN_get_rfc3526_prime_4096(bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1182(bn?.getPointer(memScope).rawValue))
    }
}

fun BN_get_rfc3526_prime_6144(bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1183(bn?.getPointer(memScope).rawValue))
    }
}

fun BN_get_rfc3526_prime_8192(bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1184(bn?.getPointer(memScope).rawValue))
    }
}

fun BN_bntest_rand(rnd: CValuesRef<BIGNUM>?, bits: Int, top: Int, bottom: Int): Int {
    memScoped {
        return kniBridge1185(rnd?.getPointer(memScope).rawValue, bits, top, bottom)
    }
}

fun ERR_load_BN_strings(): Int {
    return kniBridge1186()
}

fun sk_X509_ALGOR_num(sk: CValuesRef<stack_st_X509_ALGOR>?): Int {
    memScoped {
        return kniBridge1187(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_value(sk: CValuesRef<stack_st_X509_ALGOR>?, idx: Int): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge1188(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_ALGOR_new(compare: sk_X509_ALGOR_compfunc?): CPointer<stack_st_X509_ALGOR>? {
    return interpretCPointer<stack_st_X509_ALGOR>(kniBridge1189(compare.rawValue))
}

fun sk_X509_ALGOR_new_null(): CPointer<stack_st_X509_ALGOR>? {
    return interpretCPointer<stack_st_X509_ALGOR>(kniBridge1190())
}

fun sk_X509_ALGOR_free(sk: CValuesRef<stack_st_X509_ALGOR>?): Unit {
    memScoped {
        return kniBridge1191(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_zero(sk: CValuesRef<stack_st_X509_ALGOR>?): Unit {
    memScoped {
        return kniBridge1192(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_delete(sk: CValuesRef<stack_st_X509_ALGOR>?, i: Int): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge1193(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_ALGOR_delete_ptr(sk: CValuesRef<stack_st_X509_ALGOR>?, ptr: CValuesRef<X509_ALGOR>?): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge1194(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ALGOR_push(sk: CValuesRef<stack_st_X509_ALGOR>?, ptr: CValuesRef<X509_ALGOR>?): Int {
    memScoped {
        return kniBridge1195(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_unshift(sk: CValuesRef<stack_st_X509_ALGOR>?, ptr: CValuesRef<X509_ALGOR>?): Int {
    memScoped {
        return kniBridge1196(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_pop(sk: CValuesRef<stack_st_X509_ALGOR>?): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge1197(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ALGOR_shift(sk: CValuesRef<stack_st_X509_ALGOR>?): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge1198(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ALGOR_pop_free(sk: CValuesRef<stack_st_X509_ALGOR>?, freefunc: sk_X509_ALGOR_freefunc?): Unit {
    memScoped {
        return kniBridge1199(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_ALGOR_insert(sk: CValuesRef<stack_st_X509_ALGOR>?, ptr: CValuesRef<X509_ALGOR>?, idx: Int): Int {
    memScoped {
        return kniBridge1200(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_ALGOR_set(sk: CValuesRef<stack_st_X509_ALGOR>?, idx: Int, ptr: CValuesRef<X509_ALGOR>?): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge1201(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ALGOR_find(sk: CValuesRef<stack_st_X509_ALGOR>?, ptr: CValuesRef<X509_ALGOR>?): Int {
    memScoped {
        return kniBridge1202(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_find_ex(sk: CValuesRef<stack_st_X509_ALGOR>?, ptr: CValuesRef<X509_ALGOR>?): Int {
    memScoped {
        return kniBridge1203(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_sort(sk: CValuesRef<stack_st_X509_ALGOR>?): Unit {
    memScoped {
        return kniBridge1204(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_is_sorted(sk: CValuesRef<stack_st_X509_ALGOR>?): Int {
    memScoped {
        return kniBridge1205(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ALGOR_dup(sk: CValuesRef<stack_st_X509_ALGOR>?): CPointer<stack_st_X509_ALGOR>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ALGOR>(kniBridge1206(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ALGOR_deep_copy(sk: CValuesRef<stack_st_X509_ALGOR>?, copyfunc: sk_X509_ALGOR_copyfunc?, freefunc: sk_X509_ALGOR_freefunc?): CPointer<stack_st_X509_ALGOR>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ALGOR>(kniBridge1207(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_ALGOR_set_cmp_func(sk: CValuesRef<stack_st_X509_ALGOR>?, compare: sk_X509_ALGOR_compfunc?): sk_X509_ALGOR_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_ALGOR>>?, CPointer<CPointerVar<X509_ALGOR>>?) -> Int>>(kniBridge1208(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_ASN1_STRING_TABLE_num(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?): Int {
    memScoped {
        return kniBridge1209(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_value(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, idx: Int): CPointer<ASN1_STRING_TABLE>? {
    memScoped {
        return interpretCPointer<ASN1_STRING_TABLE>(kniBridge1210(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_ASN1_STRING_TABLE_new(compare: sk_ASN1_STRING_TABLE_compfunc?): CPointer<stack_st_ASN1_STRING_TABLE>? {
    return interpretCPointer<stack_st_ASN1_STRING_TABLE>(kniBridge1211(compare.rawValue))
}

fun sk_ASN1_STRING_TABLE_new_null(): CPointer<stack_st_ASN1_STRING_TABLE>? {
    return interpretCPointer<stack_st_ASN1_STRING_TABLE>(kniBridge1212())
}

fun sk_ASN1_STRING_TABLE_free(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?): Unit {
    memScoped {
        return kniBridge1213(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_zero(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?): Unit {
    memScoped {
        return kniBridge1214(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_delete(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, i: Int): CPointer<ASN1_STRING_TABLE>? {
    memScoped {
        return interpretCPointer<ASN1_STRING_TABLE>(kniBridge1215(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_ASN1_STRING_TABLE_delete_ptr(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, ptr: CValuesRef<ASN1_STRING_TABLE>?): CPointer<ASN1_STRING_TABLE>? {
    memScoped {
        return interpretCPointer<ASN1_STRING_TABLE>(kniBridge1216(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_STRING_TABLE_push(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, ptr: CValuesRef<ASN1_STRING_TABLE>?): Int {
    memScoped {
        return kniBridge1217(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_unshift(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, ptr: CValuesRef<ASN1_STRING_TABLE>?): Int {
    memScoped {
        return kniBridge1218(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_pop(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?): CPointer<ASN1_STRING_TABLE>? {
    memScoped {
        return interpretCPointer<ASN1_STRING_TABLE>(kniBridge1219(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_STRING_TABLE_shift(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?): CPointer<ASN1_STRING_TABLE>? {
    memScoped {
        return interpretCPointer<ASN1_STRING_TABLE>(kniBridge1220(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_STRING_TABLE_pop_free(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, freefunc: sk_ASN1_STRING_TABLE_freefunc?): Unit {
    memScoped {
        return kniBridge1221(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_insert(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, ptr: CValuesRef<ASN1_STRING_TABLE>?, idx: Int): Int {
    memScoped {
        return kniBridge1222(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_ASN1_STRING_TABLE_set(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, idx: Int, ptr: CValuesRef<ASN1_STRING_TABLE>?): CPointer<ASN1_STRING_TABLE>? {
    memScoped {
        return interpretCPointer<ASN1_STRING_TABLE>(kniBridge1223(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_STRING_TABLE_find(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, ptr: CValuesRef<ASN1_STRING_TABLE>?): Int {
    memScoped {
        return kniBridge1224(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_find_ex(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, ptr: CValuesRef<ASN1_STRING_TABLE>?): Int {
    memScoped {
        return kniBridge1225(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_sort(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?): Unit {
    memScoped {
        return kniBridge1226(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_is_sorted(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?): Int {
    memScoped {
        return kniBridge1227(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_STRING_TABLE_dup(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?): CPointer<stack_st_ASN1_STRING_TABLE>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_STRING_TABLE>(kniBridge1228(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_STRING_TABLE_deep_copy(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, copyfunc: sk_ASN1_STRING_TABLE_copyfunc?, freefunc: sk_ASN1_STRING_TABLE_freefunc?): CPointer<stack_st_ASN1_STRING_TABLE>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_STRING_TABLE>(kniBridge1229(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_ASN1_STRING_TABLE_set_cmp_func(sk: CValuesRef<stack_st_ASN1_STRING_TABLE>?, compare: sk_ASN1_STRING_TABLE_compfunc?): sk_ASN1_STRING_TABLE_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<ASN1_STRING_TABLE>>?, CPointer<CPointerVar<ASN1_STRING_TABLE>>?) -> Int>>(kniBridge1230(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_ASN1_INTEGER_num(sk: CValuesRef<stack_st_ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1231(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_value(sk: CValuesRef<stack_st_ASN1_INTEGER>?, idx: Int): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1232(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_ASN1_INTEGER_new(compare: sk_ASN1_INTEGER_compfunc?): CPointer<stack_st_ASN1_INTEGER>? {
    return interpretCPointer<stack_st_ASN1_INTEGER>(kniBridge1233(compare.rawValue))
}

fun sk_ASN1_INTEGER_new_null(): CPointer<stack_st_ASN1_INTEGER>? {
    return interpretCPointer<stack_st_ASN1_INTEGER>(kniBridge1234())
}

fun sk_ASN1_INTEGER_free(sk: CValuesRef<stack_st_ASN1_INTEGER>?): Unit {
    memScoped {
        return kniBridge1235(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_zero(sk: CValuesRef<stack_st_ASN1_INTEGER>?): Unit {
    memScoped {
        return kniBridge1236(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_delete(sk: CValuesRef<stack_st_ASN1_INTEGER>?, i: Int): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1237(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_ASN1_INTEGER_delete_ptr(sk: CValuesRef<stack_st_ASN1_INTEGER>?, ptr: CValuesRef<ASN1_INTEGER>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1238(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_INTEGER_push(sk: CValuesRef<stack_st_ASN1_INTEGER>?, ptr: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1239(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_unshift(sk: CValuesRef<stack_st_ASN1_INTEGER>?, ptr: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1240(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_pop(sk: CValuesRef<stack_st_ASN1_INTEGER>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1241(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_INTEGER_shift(sk: CValuesRef<stack_st_ASN1_INTEGER>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1242(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_INTEGER_pop_free(sk: CValuesRef<stack_st_ASN1_INTEGER>?, freefunc: sk_ASN1_INTEGER_freefunc?): Unit {
    memScoped {
        return kniBridge1243(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_ASN1_INTEGER_insert(sk: CValuesRef<stack_st_ASN1_INTEGER>?, ptr: CValuesRef<ASN1_INTEGER>?, idx: Int): Int {
    memScoped {
        return kniBridge1244(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_ASN1_INTEGER_set(sk: CValuesRef<stack_st_ASN1_INTEGER>?, idx: Int, ptr: CValuesRef<ASN1_INTEGER>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1245(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_INTEGER_find(sk: CValuesRef<stack_st_ASN1_INTEGER>?, ptr: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1246(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_find_ex(sk: CValuesRef<stack_st_ASN1_INTEGER>?, ptr: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1247(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_sort(sk: CValuesRef<stack_st_ASN1_INTEGER>?): Unit {
    memScoped {
        return kniBridge1248(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_is_sorted(sk: CValuesRef<stack_st_ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1249(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_INTEGER_dup(sk: CValuesRef<stack_st_ASN1_INTEGER>?): CPointer<stack_st_ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_INTEGER>(kniBridge1250(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_INTEGER_deep_copy(sk: CValuesRef<stack_st_ASN1_INTEGER>?, copyfunc: sk_ASN1_INTEGER_copyfunc?, freefunc: sk_ASN1_INTEGER_freefunc?): CPointer<stack_st_ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_INTEGER>(kniBridge1251(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_ASN1_INTEGER_set_cmp_func(sk: CValuesRef<stack_st_ASN1_INTEGER>?, compare: sk_ASN1_INTEGER_compfunc?): sk_ASN1_INTEGER_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<ASN1_INTEGER>>?, CPointer<CPointerVar<ASN1_INTEGER>>?) -> Int>>(kniBridge1252(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_ASN1_GENERALSTRING_num(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?): Int {
    memScoped {
        return kniBridge1253(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_value(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, idx: Int): CPointer<ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALSTRING>(kniBridge1254(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_ASN1_GENERALSTRING_new(compare: sk_ASN1_GENERALSTRING_compfunc?): CPointer<stack_st_ASN1_GENERALSTRING>? {
    return interpretCPointer<stack_st_ASN1_GENERALSTRING>(kniBridge1255(compare.rawValue))
}

fun sk_ASN1_GENERALSTRING_new_null(): CPointer<stack_st_ASN1_GENERALSTRING>? {
    return interpretCPointer<stack_st_ASN1_GENERALSTRING>(kniBridge1256())
}

fun sk_ASN1_GENERALSTRING_free(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?): Unit {
    memScoped {
        return kniBridge1257(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_zero(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?): Unit {
    memScoped {
        return kniBridge1258(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_delete(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, i: Int): CPointer<ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALSTRING>(kniBridge1259(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_ASN1_GENERALSTRING_delete_ptr(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, ptr: CValuesRef<ASN1_GENERALSTRING>?): CPointer<ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALSTRING>(kniBridge1260(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_GENERALSTRING_push(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, ptr: CValuesRef<ASN1_GENERALSTRING>?): Int {
    memScoped {
        return kniBridge1261(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_unshift(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, ptr: CValuesRef<ASN1_GENERALSTRING>?): Int {
    memScoped {
        return kniBridge1262(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_pop(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?): CPointer<ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALSTRING>(kniBridge1263(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_GENERALSTRING_shift(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?): CPointer<ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALSTRING>(kniBridge1264(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_GENERALSTRING_pop_free(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, freefunc: sk_ASN1_GENERALSTRING_freefunc?): Unit {
    memScoped {
        return kniBridge1265(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_insert(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, ptr: CValuesRef<ASN1_GENERALSTRING>?, idx: Int): Int {
    memScoped {
        return kniBridge1266(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_ASN1_GENERALSTRING_set(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, idx: Int, ptr: CValuesRef<ASN1_GENERALSTRING>?): CPointer<ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALSTRING>(kniBridge1267(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_GENERALSTRING_find(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, ptr: CValuesRef<ASN1_GENERALSTRING>?): Int {
    memScoped {
        return kniBridge1268(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_find_ex(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, ptr: CValuesRef<ASN1_GENERALSTRING>?): Int {
    memScoped {
        return kniBridge1269(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_sort(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?): Unit {
    memScoped {
        return kniBridge1270(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_is_sorted(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?): Int {
    memScoped {
        return kniBridge1271(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_GENERALSTRING_dup(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?): CPointer<stack_st_ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_GENERALSTRING>(kniBridge1272(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_GENERALSTRING_deep_copy(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, copyfunc: sk_ASN1_GENERALSTRING_copyfunc?, freefunc: sk_ASN1_GENERALSTRING_freefunc?): CPointer<stack_st_ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_GENERALSTRING>(kniBridge1273(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_ASN1_GENERALSTRING_set_cmp_func(sk: CValuesRef<stack_st_ASN1_GENERALSTRING>?, compare: sk_ASN1_GENERALSTRING_compfunc?): sk_ASN1_GENERALSTRING_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<ASN1_GENERALSTRING>>?, CPointer<CPointerVar<ASN1_GENERALSTRING>>?) -> Int>>(kniBridge1274(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_ASN1_UTF8STRING_num(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?): Int {
    memScoped {
        return kniBridge1275(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_value(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, idx: Int): CPointer<ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<ASN1_UTF8STRING>(kniBridge1276(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_ASN1_UTF8STRING_new(compare: sk_ASN1_UTF8STRING_compfunc?): CPointer<stack_st_ASN1_UTF8STRING>? {
    return interpretCPointer<stack_st_ASN1_UTF8STRING>(kniBridge1277(compare.rawValue))
}

fun sk_ASN1_UTF8STRING_new_null(): CPointer<stack_st_ASN1_UTF8STRING>? {
    return interpretCPointer<stack_st_ASN1_UTF8STRING>(kniBridge1278())
}

fun sk_ASN1_UTF8STRING_free(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?): Unit {
    memScoped {
        return kniBridge1279(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_zero(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?): Unit {
    memScoped {
        return kniBridge1280(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_delete(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, i: Int): CPointer<ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<ASN1_UTF8STRING>(kniBridge1281(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_ASN1_UTF8STRING_delete_ptr(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, ptr: CValuesRef<ASN1_UTF8STRING>?): CPointer<ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<ASN1_UTF8STRING>(kniBridge1282(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_UTF8STRING_push(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, ptr: CValuesRef<ASN1_UTF8STRING>?): Int {
    memScoped {
        return kniBridge1283(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_unshift(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, ptr: CValuesRef<ASN1_UTF8STRING>?): Int {
    memScoped {
        return kniBridge1284(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_pop(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?): CPointer<ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<ASN1_UTF8STRING>(kniBridge1285(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_UTF8STRING_shift(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?): CPointer<ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<ASN1_UTF8STRING>(kniBridge1286(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_UTF8STRING_pop_free(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, freefunc: sk_ASN1_UTF8STRING_freefunc?): Unit {
    memScoped {
        return kniBridge1287(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_ASN1_UTF8STRING_insert(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, ptr: CValuesRef<ASN1_UTF8STRING>?, idx: Int): Int {
    memScoped {
        return kniBridge1288(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_ASN1_UTF8STRING_set(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, idx: Int, ptr: CValuesRef<ASN1_UTF8STRING>?): CPointer<ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<ASN1_UTF8STRING>(kniBridge1289(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_UTF8STRING_find(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, ptr: CValuesRef<ASN1_UTF8STRING>?): Int {
    memScoped {
        return kniBridge1290(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_find_ex(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, ptr: CValuesRef<ASN1_UTF8STRING>?): Int {
    memScoped {
        return kniBridge1291(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_sort(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?): Unit {
    memScoped {
        return kniBridge1292(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_is_sorted(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?): Int {
    memScoped {
        return kniBridge1293(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_UTF8STRING_dup(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?): CPointer<stack_st_ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_UTF8STRING>(kniBridge1294(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_UTF8STRING_deep_copy(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, copyfunc: sk_ASN1_UTF8STRING_copyfunc?, freefunc: sk_ASN1_UTF8STRING_freefunc?): CPointer<stack_st_ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_UTF8STRING>(kniBridge1295(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_ASN1_UTF8STRING_set_cmp_func(sk: CValuesRef<stack_st_ASN1_UTF8STRING>?, compare: sk_ASN1_UTF8STRING_compfunc?): sk_ASN1_UTF8STRING_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<ASN1_UTF8STRING>>?, CPointer<CPointerVar<ASN1_UTF8STRING>>?) -> Int>>(kniBridge1296(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_ASN1_TYPE_num(sk: CValuesRef<stack_st_ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1297(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_value(sk: CValuesRef<stack_st_ASN1_TYPE>?, idx: Int): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1298(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_ASN1_TYPE_new(compare: sk_ASN1_TYPE_compfunc?): CPointer<stack_st_ASN1_TYPE>? {
    return interpretCPointer<stack_st_ASN1_TYPE>(kniBridge1299(compare.rawValue))
}

fun sk_ASN1_TYPE_new_null(): CPointer<stack_st_ASN1_TYPE>? {
    return interpretCPointer<stack_st_ASN1_TYPE>(kniBridge1300())
}

fun sk_ASN1_TYPE_free(sk: CValuesRef<stack_st_ASN1_TYPE>?): Unit {
    memScoped {
        return kniBridge1301(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_zero(sk: CValuesRef<stack_st_ASN1_TYPE>?): Unit {
    memScoped {
        return kniBridge1302(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_delete(sk: CValuesRef<stack_st_ASN1_TYPE>?, i: Int): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1303(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_ASN1_TYPE_delete_ptr(sk: CValuesRef<stack_st_ASN1_TYPE>?, ptr: CValuesRef<ASN1_TYPE>?): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1304(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_TYPE_push(sk: CValuesRef<stack_st_ASN1_TYPE>?, ptr: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1305(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_unshift(sk: CValuesRef<stack_st_ASN1_TYPE>?, ptr: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1306(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_pop(sk: CValuesRef<stack_st_ASN1_TYPE>?): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1307(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_TYPE_shift(sk: CValuesRef<stack_st_ASN1_TYPE>?): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1308(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_TYPE_pop_free(sk: CValuesRef<stack_st_ASN1_TYPE>?, freefunc: sk_ASN1_TYPE_freefunc?): Unit {
    memScoped {
        return kniBridge1309(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_ASN1_TYPE_insert(sk: CValuesRef<stack_st_ASN1_TYPE>?, ptr: CValuesRef<ASN1_TYPE>?, idx: Int): Int {
    memScoped {
        return kniBridge1310(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_ASN1_TYPE_set(sk: CValuesRef<stack_st_ASN1_TYPE>?, idx: Int, ptr: CValuesRef<ASN1_TYPE>?): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1311(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_TYPE_find(sk: CValuesRef<stack_st_ASN1_TYPE>?, ptr: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1312(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_find_ex(sk: CValuesRef<stack_st_ASN1_TYPE>?, ptr: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1313(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_sort(sk: CValuesRef<stack_st_ASN1_TYPE>?): Unit {
    memScoped {
        return kniBridge1314(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_is_sorted(sk: CValuesRef<stack_st_ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1315(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_TYPE_dup(sk: CValuesRef<stack_st_ASN1_TYPE>?): CPointer<stack_st_ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_TYPE>(kniBridge1316(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_TYPE_deep_copy(sk: CValuesRef<stack_st_ASN1_TYPE>?, copyfunc: sk_ASN1_TYPE_copyfunc?, freefunc: sk_ASN1_TYPE_freefunc?): CPointer<stack_st_ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_TYPE>(kniBridge1317(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_ASN1_TYPE_set_cmp_func(sk: CValuesRef<stack_st_ASN1_TYPE>?, compare: sk_ASN1_TYPE_compfunc?): sk_ASN1_TYPE_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<ASN1_TYPE>>?, CPointer<CPointerVar<ASN1_TYPE>>?) -> Int>>(kniBridge1318(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun d2i_ASN1_SEQUENCE_ANY(a: CValuesRef<CPointerVar<ASN1_SEQUENCE_ANY>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_SEQUENCE_ANY>? {
    memScoped {
        return interpretCPointer<ASN1_SEQUENCE_ANY>(kniBridge1319(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_SEQUENCE_ANY(a: CValuesRef<ASN1_SEQUENCE_ANY>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1320(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_SET_ANY(a: CValuesRef<CPointerVar<ASN1_SEQUENCE_ANY>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_SEQUENCE_ANY>? {
    memScoped {
        return interpretCPointer<ASN1_SEQUENCE_ANY>(kniBridge1321(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_SET_ANY(a: CValuesRef<ASN1_SEQUENCE_ANY>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1322(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TYPE_new(): CPointer<ASN1_TYPE>? {
    return interpretCPointer<ASN1_TYPE>(kniBridge1323())
}

fun ASN1_TYPE_free(a: CValuesRef<ASN1_TYPE>?): Unit {
    memScoped {
        return kniBridge1324(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_TYPE(a: CValuesRef<CPointerVar<ASN1_TYPE>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1325(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_TYPE(a: CValuesRef<ASN1_TYPE>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1326(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TYPE_get(a: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1327(a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TYPE_set(a: CValuesRef<ASN1_TYPE>?, type: Int, value: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1328(a?.getPointer(memScope).rawValue, type, value?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TYPE_set1(a: CValuesRef<ASN1_TYPE>?, type: Int, value: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1329(a?.getPointer(memScope).rawValue, type, value?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TYPE_cmp(a: CValuesRef<ASN1_TYPE>?, b: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1330(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TYPE_pack_sequence(it: CValuesRef<ASN1_ITEM>?, s: CValuesRef<*>?, t: CValuesRef<CPointerVar<ASN1_TYPE>>?): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1331(it?.getPointer(memScope).rawValue, s?.getPointer(memScope).rawValue, t?.getPointer(memScope).rawValue))
    }
}

fun ASN1_TYPE_unpack_sequence(it: CValuesRef<ASN1_ITEM>?, t: CValuesRef<ASN1_TYPE>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1332(it?.getPointer(memScope).rawValue, t?.getPointer(memScope).rawValue))
    }
}

fun ASN1_OBJECT_new(): CPointer<ASN1_OBJECT>? {
    return interpretCPointer<ASN1_OBJECT>(kniBridge1333())
}

fun ASN1_OBJECT_free(a: CValuesRef<ASN1_OBJECT>?): Unit {
    memScoped {
        return kniBridge1334(a?.getPointer(memScope).rawValue)
    }
}

fun i2d_ASN1_OBJECT(a: CValuesRef<ASN1_OBJECT>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1335(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_OBJECT(a: CValuesRef<CPointerVar<ASN1_OBJECT>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1336(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun sk_ASN1_OBJECT_num(sk: CValuesRef<stack_st_ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1337(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_value(sk: CValuesRef<stack_st_ASN1_OBJECT>?, idx: Int): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1338(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_ASN1_OBJECT_new(compare: sk_ASN1_OBJECT_compfunc?): CPointer<stack_st_ASN1_OBJECT>? {
    return interpretCPointer<stack_st_ASN1_OBJECT>(kniBridge1339(compare.rawValue))
}

fun sk_ASN1_OBJECT_new_null(): CPointer<stack_st_ASN1_OBJECT>? {
    return interpretCPointer<stack_st_ASN1_OBJECT>(kniBridge1340())
}

fun sk_ASN1_OBJECT_free(sk: CValuesRef<stack_st_ASN1_OBJECT>?): Unit {
    memScoped {
        return kniBridge1341(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_zero(sk: CValuesRef<stack_st_ASN1_OBJECT>?): Unit {
    memScoped {
        return kniBridge1342(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_delete(sk: CValuesRef<stack_st_ASN1_OBJECT>?, i: Int): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1343(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_ASN1_OBJECT_delete_ptr(sk: CValuesRef<stack_st_ASN1_OBJECT>?, ptr: CValuesRef<ASN1_OBJECT>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1344(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_OBJECT_push(sk: CValuesRef<stack_st_ASN1_OBJECT>?, ptr: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1345(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_unshift(sk: CValuesRef<stack_st_ASN1_OBJECT>?, ptr: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1346(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_pop(sk: CValuesRef<stack_st_ASN1_OBJECT>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1347(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_OBJECT_shift(sk: CValuesRef<stack_st_ASN1_OBJECT>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1348(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_OBJECT_pop_free(sk: CValuesRef<stack_st_ASN1_OBJECT>?, freefunc: sk_ASN1_OBJECT_freefunc?): Unit {
    memScoped {
        return kniBridge1349(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_ASN1_OBJECT_insert(sk: CValuesRef<stack_st_ASN1_OBJECT>?, ptr: CValuesRef<ASN1_OBJECT>?, idx: Int): Int {
    memScoped {
        return kniBridge1350(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_ASN1_OBJECT_set(sk: CValuesRef<stack_st_ASN1_OBJECT>?, idx: Int, ptr: CValuesRef<ASN1_OBJECT>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1351(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_OBJECT_find(sk: CValuesRef<stack_st_ASN1_OBJECT>?, ptr: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1352(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_find_ex(sk: CValuesRef<stack_st_ASN1_OBJECT>?, ptr: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1353(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_sort(sk: CValuesRef<stack_st_ASN1_OBJECT>?): Unit {
    memScoped {
        return kniBridge1354(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_is_sorted(sk: CValuesRef<stack_st_ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1355(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_ASN1_OBJECT_dup(sk: CValuesRef<stack_st_ASN1_OBJECT>?): CPointer<stack_st_ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_OBJECT>(kniBridge1356(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_ASN1_OBJECT_deep_copy(sk: CValuesRef<stack_st_ASN1_OBJECT>?, copyfunc: sk_ASN1_OBJECT_copyfunc?, freefunc: sk_ASN1_OBJECT_freefunc?): CPointer<stack_st_ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_OBJECT>(kniBridge1357(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_ASN1_OBJECT_set_cmp_func(sk: CValuesRef<stack_st_ASN1_OBJECT>?, compare: sk_ASN1_OBJECT_compfunc?): sk_ASN1_OBJECT_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<ASN1_OBJECT>>?, CPointer<CPointerVar<ASN1_OBJECT>>?) -> Int>>(kniBridge1358(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun ASN1_STRING_new(): CPointer<ASN1_STRING>? {
    return interpretCPointer<ASN1_STRING>(kniBridge1359())
}

fun ASN1_STRING_free(a: CValuesRef<ASN1_STRING>?): Unit {
    memScoped {
        return kniBridge1360(a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_clear_free(a: CValuesRef<ASN1_STRING>?): Unit {
    memScoped {
        return kniBridge1361(a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_copy(dst: CValuesRef<ASN1_STRING>?, str: CValuesRef<ASN1_STRING>?): Int {
    memScoped {
        return kniBridge1362(dst?.getPointer(memScope).rawValue, str?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_dup(a: CValuesRef<ASN1_STRING>?): CPointer<ASN1_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_STRING>(kniBridge1363(a?.getPointer(memScope).rawValue))
    }
}

fun ASN1_STRING_type_new(type: Int): CPointer<ASN1_STRING>? {
    return interpretCPointer<ASN1_STRING>(kniBridge1364(type))
}

fun ASN1_STRING_cmp(a: CValuesRef<ASN1_STRING>?, b: CValuesRef<ASN1_STRING>?): Int {
    memScoped {
        return kniBridge1365(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_set(str: CValuesRef<ASN1_STRING>?, data: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge1366(str?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun ASN1_STRING_set0(str: CValuesRef<ASN1_STRING>?, data: CValuesRef<*>?, len: Int): Unit {
    memScoped {
        return kniBridge1367(str?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun ASN1_STRING_length(x: CValuesRef<ASN1_STRING>?): Int {
    memScoped {
        return kniBridge1368(x?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_length_set(x: CValuesRef<ASN1_STRING>?, n: Int): Unit {
    memScoped {
        return kniBridge1369(x?.getPointer(memScope).rawValue, n)
    }
}

fun ASN1_STRING_type(x: CValuesRef<ASN1_STRING>?): Int {
    memScoped {
        return kniBridge1370(x?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_data(x: CValuesRef<ASN1_STRING>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge1371(x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_STRING_get0_data(x: CValuesRef<ASN1_STRING>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge1372(x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_BIT_STRING_new(): CPointer<ASN1_BIT_STRING>? {
    return interpretCPointer<ASN1_BIT_STRING>(kniBridge1373())
}

fun ASN1_BIT_STRING_free(a: CValuesRef<ASN1_BIT_STRING>?): Unit {
    memScoped {
        return kniBridge1374(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_BIT_STRING(a: CValuesRef<CPointerVar<ASN1_BIT_STRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_BIT_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_BIT_STRING>(kniBridge1375(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_BIT_STRING(a: CValuesRef<ASN1_BIT_STRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1376(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_BIT_STRING_set(a: CValuesRef<ASN1_BIT_STRING>?, d: CValuesRef<UByteVar>?, length: Int): Int {
    memScoped {
        return kniBridge1377(a?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, length)
    }
}

fun ASN1_BIT_STRING_set_bit(a: CValuesRef<ASN1_BIT_STRING>?, n: Int, value: Int): Int {
    memScoped {
        return kniBridge1378(a?.getPointer(memScope).rawValue, n, value)
    }
}

fun ASN1_BIT_STRING_get_bit(a: CValuesRef<ASN1_BIT_STRING>?, n: Int): Int {
    memScoped {
        return kniBridge1379(a?.getPointer(memScope).rawValue, n)
    }
}

fun ASN1_BIT_STRING_check(a: CValuesRef<ASN1_BIT_STRING>?, flags: CValuesRef<UByteVar>?, flags_len: Int): Int {
    memScoped {
        return kniBridge1380(a?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue, flags_len)
    }
}

fun ASN1_BIT_STRING_name_print(out: CValuesRef<BIO>?, bs: CValuesRef<ASN1_BIT_STRING>?, tbl: CValuesRef<BIT_STRING_BITNAME>?, indent: Int): Int {
    memScoped {
        return kniBridge1381(out?.getPointer(memScope).rawValue, bs?.getPointer(memScope).rawValue, tbl?.getPointer(memScope).rawValue, indent)
    }
}

fun ASN1_BIT_STRING_num_asc(name: String?, tbl: CValuesRef<BIT_STRING_BITNAME>?): Int {
    memScoped {
        return kniBridge1382(name?.cstr?.getPointer(memScope).rawValue, tbl?.getPointer(memScope).rawValue)
    }
}

fun ASN1_BIT_STRING_set_asc(bs: CValuesRef<ASN1_BIT_STRING>?, name: String?, value: Int, tbl: CValuesRef<BIT_STRING_BITNAME>?): Int {
    memScoped {
        return kniBridge1383(bs?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, value, tbl?.getPointer(memScope).rawValue)
    }
}

fun ASN1_INTEGER_new(): CPointer<ASN1_INTEGER>? {
    return interpretCPointer<ASN1_INTEGER>(kniBridge1384())
}

fun ASN1_INTEGER_free(a: CValuesRef<ASN1_INTEGER>?): Unit {
    memScoped {
        return kniBridge1385(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_INTEGER(a: CValuesRef<CPointerVar<ASN1_INTEGER>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1386(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_INTEGER(a: CValuesRef<ASN1_INTEGER>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1387(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_UINTEGER(a: CValuesRef<CPointerVar<ASN1_INTEGER>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1388(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun ASN1_INTEGER_dup(x: CValuesRef<ASN1_INTEGER>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1389(x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_INTEGER_cmp(x: CValuesRef<ASN1_INTEGER>?, y: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1390(x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun ASN1_ENUMERATED_new(): CPointer<ASN1_ENUMERATED>? {
    return interpretCPointer<ASN1_ENUMERATED>(kniBridge1391())
}

fun ASN1_ENUMERATED_free(a: CValuesRef<ASN1_ENUMERATED>?): Unit {
    memScoped {
        return kniBridge1392(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_ENUMERATED(a: CValuesRef<CPointerVar<ASN1_ENUMERATED>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_ENUMERATED>? {
    memScoped {
        return interpretCPointer<ASN1_ENUMERATED>(kniBridge1393(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_ENUMERATED(a: CValuesRef<ASN1_ENUMERATED>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1394(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_UTCTIME_check(a: CValuesRef<ASN1_UTCTIME>?): Int {
    memScoped {
        return kniBridge1395(a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_UTCTIME_set(s: CValuesRef<ASN1_UTCTIME>?, t: time_t): CPointer<ASN1_UTCTIME>? {
    memScoped {
        return interpretCPointer<ASN1_UTCTIME>(kniBridge1396(s?.getPointer(memScope).rawValue, t))
    }
}

fun ASN1_UTCTIME_adj(s: CValuesRef<ASN1_UTCTIME>?, t: time_t, offset_day: Int, offset_sec: Long): CPointer<ASN1_UTCTIME>? {
    memScoped {
        return interpretCPointer<ASN1_UTCTIME>(kniBridge1397(s?.getPointer(memScope).rawValue, t, offset_day, offset_sec))
    }
}

fun ASN1_UTCTIME_set_string(s: CValuesRef<ASN1_UTCTIME>?, str: String?): Int {
    memScoped {
        return kniBridge1398(s?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun ASN1_UTCTIME_cmp_time_t(s: CValuesRef<ASN1_UTCTIME>?, t: time_t): Int {
    memScoped {
        return kniBridge1399(s?.getPointer(memScope).rawValue, t)
    }
}

fun ASN1_GENERALIZEDTIME_check(a: CValuesRef<ASN1_GENERALIZEDTIME>?): Int {
    memScoped {
        return kniBridge1400(a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_GENERALIZEDTIME_set(s: CValuesRef<ASN1_GENERALIZEDTIME>?, t: time_t): CPointer<ASN1_GENERALIZEDTIME>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALIZEDTIME>(kniBridge1401(s?.getPointer(memScope).rawValue, t))
    }
}

fun ASN1_GENERALIZEDTIME_adj(s: CValuesRef<ASN1_GENERALIZEDTIME>?, t: time_t, offset_day: Int, offset_sec: Long): CPointer<ASN1_GENERALIZEDTIME>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALIZEDTIME>(kniBridge1402(s?.getPointer(memScope).rawValue, t, offset_day, offset_sec))
    }
}

fun ASN1_GENERALIZEDTIME_set_string(s: CValuesRef<ASN1_GENERALIZEDTIME>?, str: String?): Int {
    memScoped {
        return kniBridge1403(s?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TIME_diff(pday: CValuesRef<IntVar>?, psec: CValuesRef<IntVar>?, from: CValuesRef<ASN1_TIME>?, to: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge1404(pday?.getPointer(memScope).rawValue, psec?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue)
    }
}

fun ASN1_OCTET_STRING_new(): CPointer<ASN1_OCTET_STRING>? {
    return interpretCPointer<ASN1_OCTET_STRING>(kniBridge1405())
}

fun ASN1_OCTET_STRING_free(a: CValuesRef<ASN1_OCTET_STRING>?): Unit {
    memScoped {
        return kniBridge1406(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_OCTET_STRING(a: CValuesRef<CPointerVar<ASN1_OCTET_STRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_OCTET_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_OCTET_STRING>(kniBridge1407(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_OCTET_STRING(a: CValuesRef<ASN1_OCTET_STRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1408(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_OCTET_STRING_dup(a: CValuesRef<ASN1_OCTET_STRING>?): CPointer<ASN1_OCTET_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_OCTET_STRING>(kniBridge1409(a?.getPointer(memScope).rawValue))
    }
}

fun ASN1_OCTET_STRING_cmp(a: CValuesRef<ASN1_OCTET_STRING>?, b: CValuesRef<ASN1_OCTET_STRING>?): Int {
    memScoped {
        return kniBridge1410(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun ASN1_OCTET_STRING_set(str: CValuesRef<ASN1_OCTET_STRING>?, data: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge1411(str?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun ASN1_VISIBLESTRING_new(): CPointer<ASN1_VISIBLESTRING>? {
    return interpretCPointer<ASN1_VISIBLESTRING>(kniBridge1412())
}

fun ASN1_VISIBLESTRING_free(a: CValuesRef<ASN1_VISIBLESTRING>?): Unit {
    memScoped {
        return kniBridge1413(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_VISIBLESTRING(a: CValuesRef<CPointerVar<ASN1_VISIBLESTRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_VISIBLESTRING>? {
    memScoped {
        return interpretCPointer<ASN1_VISIBLESTRING>(kniBridge1414(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_VISIBLESTRING(a: CValuesRef<ASN1_VISIBLESTRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1415(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_UNIVERSALSTRING_new(): CPointer<ASN1_UNIVERSALSTRING>? {
    return interpretCPointer<ASN1_UNIVERSALSTRING>(kniBridge1416())
}

fun ASN1_UNIVERSALSTRING_free(a: CValuesRef<ASN1_UNIVERSALSTRING>?): Unit {
    memScoped {
        return kniBridge1417(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_UNIVERSALSTRING(a: CValuesRef<CPointerVar<ASN1_UNIVERSALSTRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_UNIVERSALSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_UNIVERSALSTRING>(kniBridge1418(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_UNIVERSALSTRING(a: CValuesRef<ASN1_UNIVERSALSTRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1419(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_UTF8STRING_new(): CPointer<ASN1_UTF8STRING>? {
    return interpretCPointer<ASN1_UTF8STRING>(kniBridge1420())
}

fun ASN1_UTF8STRING_free(a: CValuesRef<ASN1_UTF8STRING>?): Unit {
    memScoped {
        return kniBridge1421(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_UTF8STRING(a: CValuesRef<CPointerVar<ASN1_UTF8STRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_UTF8STRING>? {
    memScoped {
        return interpretCPointer<ASN1_UTF8STRING>(kniBridge1422(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_UTF8STRING(a: CValuesRef<ASN1_UTF8STRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1423(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_NULL_new(): CPointer<ASN1_NULLVar>? {
    return interpretCPointer<ASN1_NULLVar>(kniBridge1424())
}

fun ASN1_NULL_free(a: CValuesRef<ASN1_NULLVar>?): Unit {
    memScoped {
        return kniBridge1425(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_NULL(a: CValuesRef<CPointerVar<ASN1_NULLVar>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_NULLVar>? {
    memScoped {
        return interpretCPointer<ASN1_NULLVar>(kniBridge1426(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_NULL(a: CValuesRef<ASN1_NULLVar>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1427(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_BMPSTRING_new(): CPointer<ASN1_BMPSTRING>? {
    return interpretCPointer<ASN1_BMPSTRING>(kniBridge1428())
}

fun ASN1_BMPSTRING_free(a: CValuesRef<ASN1_BMPSTRING>?): Unit {
    memScoped {
        return kniBridge1429(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_BMPSTRING(a: CValuesRef<CPointerVar<ASN1_BMPSTRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_BMPSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_BMPSTRING>(kniBridge1430(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_BMPSTRING(a: CValuesRef<ASN1_BMPSTRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1431(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun UTF8_getc(str: CValuesRef<UByteVar>?, len: Int, `val`: CValuesRef<ULongVar>?): Int {
    memScoped {
        return kniBridge1432(str?.getPointer(memScope).rawValue, len, `val`?.getPointer(memScope).rawValue)
    }
}

fun UTF8_putc(str: CValuesRef<UByteVar>?, len: Int, value: ULong): Int {
    memScoped {
        return kniBridge1433(str?.getPointer(memScope).rawValue, len, value)
    }
}

fun ASN1_PRINTABLE_new(): CPointer<ASN1_STRING>? {
    return interpretCPointer<ASN1_STRING>(kniBridge1434())
}

fun ASN1_PRINTABLE_free(a: CValuesRef<ASN1_STRING>?): Unit {
    memScoped {
        return kniBridge1435(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_PRINTABLE(a: CValuesRef<CPointerVar<ASN1_STRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_STRING>(kniBridge1436(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_PRINTABLE(a: CValuesRef<ASN1_STRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1437(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun DIRECTORYSTRING_new(): CPointer<ASN1_STRING>? {
    return interpretCPointer<ASN1_STRING>(kniBridge1438())
}

fun DIRECTORYSTRING_free(a: CValuesRef<ASN1_STRING>?): Unit {
    memScoped {
        return kniBridge1439(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_DIRECTORYSTRING(a: CValuesRef<CPointerVar<ASN1_STRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_STRING>(kniBridge1440(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_DIRECTORYSTRING(a: CValuesRef<ASN1_STRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1441(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun DISPLAYTEXT_new(): CPointer<ASN1_STRING>? {
    return interpretCPointer<ASN1_STRING>(kniBridge1442())
}

fun DISPLAYTEXT_free(a: CValuesRef<ASN1_STRING>?): Unit {
    memScoped {
        return kniBridge1443(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_DISPLAYTEXT(a: CValuesRef<CPointerVar<ASN1_STRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_STRING>(kniBridge1444(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_DISPLAYTEXT(a: CValuesRef<ASN1_STRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1445(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_PRINTABLESTRING_new(): CPointer<ASN1_PRINTABLESTRING>? {
    return interpretCPointer<ASN1_PRINTABLESTRING>(kniBridge1446())
}

fun ASN1_PRINTABLESTRING_free(a: CValuesRef<ASN1_PRINTABLESTRING>?): Unit {
    memScoped {
        return kniBridge1447(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_PRINTABLESTRING(a: CValuesRef<CPointerVar<ASN1_PRINTABLESTRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_PRINTABLESTRING>? {
    memScoped {
        return interpretCPointer<ASN1_PRINTABLESTRING>(kniBridge1448(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_PRINTABLESTRING(a: CValuesRef<ASN1_PRINTABLESTRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1449(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_T61STRING_new(): CPointer<ASN1_T61STRING>? {
    return interpretCPointer<ASN1_T61STRING>(kniBridge1450())
}

fun ASN1_T61STRING_free(a: CValuesRef<ASN1_T61STRING>?): Unit {
    memScoped {
        return kniBridge1451(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_T61STRING(a: CValuesRef<CPointerVar<ASN1_T61STRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_T61STRING>? {
    memScoped {
        return interpretCPointer<ASN1_T61STRING>(kniBridge1452(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_T61STRING(a: CValuesRef<ASN1_T61STRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1453(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_IA5STRING_new(): CPointer<ASN1_IA5STRING>? {
    return interpretCPointer<ASN1_IA5STRING>(kniBridge1454())
}

fun ASN1_IA5STRING_free(a: CValuesRef<ASN1_IA5STRING>?): Unit {
    memScoped {
        return kniBridge1455(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_IA5STRING(a: CValuesRef<CPointerVar<ASN1_IA5STRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_IA5STRING>? {
    memScoped {
        return interpretCPointer<ASN1_IA5STRING>(kniBridge1456(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_IA5STRING(a: CValuesRef<ASN1_IA5STRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1457(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_GENERALSTRING_new(): CPointer<ASN1_GENERALSTRING>? {
    return interpretCPointer<ASN1_GENERALSTRING>(kniBridge1458())
}

fun ASN1_GENERALSTRING_free(a: CValuesRef<ASN1_GENERALSTRING>?): Unit {
    memScoped {
        return kniBridge1459(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_GENERALSTRING(a: CValuesRef<CPointerVar<ASN1_GENERALSTRING>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_GENERALSTRING>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALSTRING>(kniBridge1460(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_GENERALSTRING(a: CValuesRef<ASN1_GENERALSTRING>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1461(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_UTCTIME_new(): CPointer<ASN1_UTCTIME>? {
    return interpretCPointer<ASN1_UTCTIME>(kniBridge1462())
}

fun ASN1_UTCTIME_free(a: CValuesRef<ASN1_UTCTIME>?): Unit {
    memScoped {
        return kniBridge1463(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_UTCTIME(a: CValuesRef<CPointerVar<ASN1_UTCTIME>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_UTCTIME>? {
    memScoped {
        return interpretCPointer<ASN1_UTCTIME>(kniBridge1464(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_UTCTIME(a: CValuesRef<ASN1_UTCTIME>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1465(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_GENERALIZEDTIME_new(): CPointer<ASN1_GENERALIZEDTIME>? {
    return interpretCPointer<ASN1_GENERALIZEDTIME>(kniBridge1466())
}

fun ASN1_GENERALIZEDTIME_free(a: CValuesRef<ASN1_GENERALIZEDTIME>?): Unit {
    memScoped {
        return kniBridge1467(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_GENERALIZEDTIME(a: CValuesRef<CPointerVar<ASN1_GENERALIZEDTIME>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_GENERALIZEDTIME>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALIZEDTIME>(kniBridge1468(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_GENERALIZEDTIME(a: CValuesRef<ASN1_GENERALIZEDTIME>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1469(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TIME_new(): CPointer<ASN1_TIME>? {
    return interpretCPointer<ASN1_TIME>(kniBridge1470())
}

fun ASN1_TIME_free(a: CValuesRef<ASN1_TIME>?): Unit {
    memScoped {
        return kniBridge1471(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_ASN1_TIME(a: CValuesRef<CPointerVar<ASN1_TIME>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge1472(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ASN1_TIME(a: CValuesRef<ASN1_TIME>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1473(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TIME_set(s: CValuesRef<ASN1_TIME>?, t: time_t): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge1474(s?.getPointer(memScope).rawValue, t))
    }
}

fun ASN1_TIME_adj(s: CValuesRef<ASN1_TIME>?, t: time_t, offset_day: Int, offset_sec: Long): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge1475(s?.getPointer(memScope).rawValue, t, offset_day, offset_sec))
    }
}

fun ASN1_TIME_check(t: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge1476(t?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TIME_to_generalizedtime(t: CValuesRef<ASN1_TIME>?, out: CValuesRef<CPointerVar<ASN1_GENERALIZEDTIME>>?): CPointer<ASN1_GENERALIZEDTIME>? {
    memScoped {
        return interpretCPointer<ASN1_GENERALIZEDTIME>(kniBridge1477(t?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue))
    }
}

fun ASN1_TIME_set_string(s: CValuesRef<ASN1_TIME>?, str: String?): Int {
    memScoped {
        return kniBridge1478(s?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun i2a_ASN1_INTEGER(bp: CValuesRef<BIO>?, a: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1479(bp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun a2i_ASN1_INTEGER(bp: CValuesRef<BIO>?, bs: CValuesRef<ASN1_INTEGER>?, buf: CValuesRef<ByteVar>?, size: Int): Int {
    memScoped {
        return kniBridge1480(bp?.getPointer(memScope).rawValue, bs?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, size)
    }
}

fun i2a_ASN1_ENUMERATED(bp: CValuesRef<BIO>?, a: CValuesRef<ASN1_ENUMERATED>?): Int {
    memScoped {
        return kniBridge1481(bp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun a2i_ASN1_ENUMERATED(bp: CValuesRef<BIO>?, bs: CValuesRef<ASN1_ENUMERATED>?, buf: CValuesRef<ByteVar>?, size: Int): Int {
    memScoped {
        return kniBridge1482(bp?.getPointer(memScope).rawValue, bs?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, size)
    }
}

fun i2a_ASN1_OBJECT(bp: CValuesRef<BIO>?, a: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1483(bp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun a2i_ASN1_STRING(bp: CValuesRef<BIO>?, bs: CValuesRef<ASN1_STRING>?, buf: CValuesRef<ByteVar>?, size: Int): Int {
    memScoped {
        return kniBridge1484(bp?.getPointer(memScope).rawValue, bs?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, size)
    }
}

fun i2a_ASN1_STRING(bp: CValuesRef<BIO>?, a: CValuesRef<ASN1_STRING>?, type: Int): Int {
    memScoped {
        return kniBridge1485(bp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, type)
    }
}

fun i2t_ASN1_OBJECT(buf: CValuesRef<ByteVar>?, buf_len: Int, a: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1486(buf?.getPointer(memScope).rawValue, buf_len, a?.getPointer(memScope).rawValue)
    }
}

fun a2d_ASN1_OBJECT(out: CValuesRef<UByteVar>?, olen: Int, buf: String?, num: Int): Int {
    memScoped {
        return kniBridge1487(out?.getPointer(memScope).rawValue, olen, buf?.cstr?.getPointer(memScope).rawValue, num)
    }
}

fun ASN1_OBJECT_create(nid: Int, data: CValuesRef<UByteVar>?, len: Int, sn: String?, ln: String?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1488(nid, data?.getPointer(memScope).rawValue, len, sn?.cstr?.getPointer(memScope).rawValue, ln?.cstr?.getPointer(memScope).rawValue))
    }
}

fun ASN1_INTEGER_get_int64(pr: CValuesRef<int64_tVar>?, a: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1489(pr?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_INTEGER_set_int64(a: CValuesRef<ASN1_INTEGER>?, r: int64_t): Int {
    memScoped {
        return kniBridge1490(a?.getPointer(memScope).rawValue, r)
    }
}

fun ASN1_INTEGER_get_uint64(pr: CValuesRef<uint64_tVar>?, a: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge1491(pr?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_INTEGER_set_uint64(a: CValuesRef<ASN1_INTEGER>?, r: uint64_t): Int {
    memScoped {
        return kniBridge1492(a?.getPointer(memScope).rawValue, r)
    }
}

fun ASN1_INTEGER_set(a: CValuesRef<ASN1_INTEGER>?, v: Long): Int {
    memScoped {
        return kniBridge1493(a?.getPointer(memScope).rawValue, v)
    }
}

fun ASN1_INTEGER_get(a: CValuesRef<ASN1_INTEGER>?): Long {
    memScoped {
        return kniBridge1494(a?.getPointer(memScope).rawValue)
    }
}

fun BN_to_ASN1_INTEGER(bn: CValuesRef<BIGNUM>?, ai: CValuesRef<ASN1_INTEGER>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge1495(bn?.getPointer(memScope).rawValue, ai?.getPointer(memScope).rawValue))
    }
}

fun ASN1_INTEGER_to_BN(ai: CValuesRef<ASN1_INTEGER>?, bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1496(ai?.getPointer(memScope).rawValue, bn?.getPointer(memScope).rawValue))
    }
}

fun ASN1_ENUMERATED_get_int64(pr: CValuesRef<int64_tVar>?, a: CValuesRef<ASN1_ENUMERATED>?): Int {
    memScoped {
        return kniBridge1497(pr?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_ENUMERATED_set_int64(a: CValuesRef<ASN1_ENUMERATED>?, r: int64_t): Int {
    memScoped {
        return kniBridge1498(a?.getPointer(memScope).rawValue, r)
    }
}

fun ASN1_ENUMERATED_set(a: CValuesRef<ASN1_ENUMERATED>?, v: Long): Int {
    memScoped {
        return kniBridge1499(a?.getPointer(memScope).rawValue, v)
    }
}

fun ASN1_ENUMERATED_get(a: CValuesRef<ASN1_ENUMERATED>?): Long {
    memScoped {
        return kniBridge1500(a?.getPointer(memScope).rawValue)
    }
}

fun BN_to_ASN1_ENUMERATED(bn: CValuesRef<BIGNUM>?, ai: CValuesRef<ASN1_ENUMERATED>?): CPointer<ASN1_ENUMERATED>? {
    memScoped {
        return interpretCPointer<ASN1_ENUMERATED>(kniBridge1501(bn?.getPointer(memScope).rawValue, ai?.getPointer(memScope).rawValue))
    }
}

fun ASN1_ENUMERATED_to_BN(ai: CValuesRef<ASN1_ENUMERATED>?, bn: CValuesRef<BIGNUM>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge1502(ai?.getPointer(memScope).rawValue, bn?.getPointer(memScope).rawValue))
    }
}

fun ASN1_PRINTABLE_type(s: CValuesRef<UByteVar>?, max: Int): Int {
    memScoped {
        return kniBridge1503(s?.getPointer(memScope).rawValue, max)
    }
}

fun ASN1_tag2bit(tag: Int): ULong {
    return kniBridge1504(tag)
}

fun ASN1_get_object(pp: CValuesRef<CPointerVar<UByteVar>>?, plength: CValuesRef<LongVar>?, ptag: CValuesRef<IntVar>?, pclass: CValuesRef<IntVar>?, omax: Long): Int {
    memScoped {
        return kniBridge1505(pp?.getPointer(memScope).rawValue, plength?.getPointer(memScope).rawValue, ptag?.getPointer(memScope).rawValue, pclass?.getPointer(memScope).rawValue, omax)
    }
}

fun ASN1_check_infinite_end(p: CValuesRef<CPointerVar<UByteVar>>?, len: Long): Int {
    memScoped {
        return kniBridge1506(p?.getPointer(memScope).rawValue, len)
    }
}

fun ASN1_const_check_infinite_end(p: CValuesRef<CPointerVar<UByteVar>>?, len: Long): Int {
    memScoped {
        return kniBridge1507(p?.getPointer(memScope).rawValue, len)
    }
}

fun ASN1_put_object(pp: CValuesRef<CPointerVar<UByteVar>>?, constructed: Int, length: Int, tag: Int, xclass: Int): Unit {
    memScoped {
        return kniBridge1508(pp?.getPointer(memScope).rawValue, constructed, length, tag, xclass)
    }
}

fun ASN1_put_eoc(pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1509(pp?.getPointer(memScope).rawValue)
    }
}

fun ASN1_object_size(constructed: Int, length: Int, tag: Int): Int {
    return kniBridge1510(constructed, length, tag)
}

fun ASN1_dup(i2d: CPointer<i2d_of_void>?, d2i: CPointer<d2i_of_void>?, x: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1511(i2d.rawValue, d2i.rawValue, x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_item_dup(it: CValuesRef<ASN1_ITEM>?, x: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1512(it?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_d2i_fp(xnew: CPointer<CFunction<() -> COpaquePointer?>>?, d2i: CPointer<d2i_of_void>?, `in`: CValuesRef<FILE>?, x: CValuesRef<COpaquePointerVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1513(xnew.rawValue, d2i.rawValue, `in`?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_item_d2i_fp(it: CValuesRef<ASN1_ITEM>?, `in`: CValuesRef<FILE>?, x: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1514(it?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_i2d_fp(i2d: CPointer<i2d_of_void>?, out: CValuesRef<FILE>?, x: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1515(i2d.rawValue, out?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_i2d_fp(it: CValuesRef<ASN1_ITEM>?, out: CValuesRef<FILE>?, x: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1516(it?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_print_ex_fp(fp: CValuesRef<FILE>?, str: CValuesRef<ASN1_STRING>?, flags: ULong): Int {
    memScoped {
        return kniBridge1517(fp?.getPointer(memScope).rawValue, str?.getPointer(memScope).rawValue, flags)
    }
}

fun ASN1_STRING_to_UTF8(out: CValuesRef<CPointerVar<UByteVar>>?, `in`: CValuesRef<ASN1_STRING>?): Int {
    memScoped {
        return kniBridge1518(out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue)
    }
}

fun ASN1_d2i_bio(xnew: CPointer<CFunction<() -> COpaquePointer?>>?, d2i: CPointer<d2i_of_void>?, `in`: CValuesRef<BIO>?, x: CValuesRef<COpaquePointerVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1519(xnew.rawValue, d2i.rawValue, `in`?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_item_d2i_bio(it: CValuesRef<ASN1_ITEM>?, `in`: CValuesRef<BIO>?, x: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1520(it?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue))
    }
}

fun ASN1_i2d_bio(i2d: CPointer<i2d_of_void>?, out: CValuesRef<BIO>?, x: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1521(i2d.rawValue, out?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_i2d_bio(it: CValuesRef<ASN1_ITEM>?, out: CValuesRef<BIO>?, x: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1522(it?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun ASN1_UTCTIME_print(fp: CValuesRef<BIO>?, a: CValuesRef<ASN1_UTCTIME>?): Int {
    memScoped {
        return kniBridge1523(fp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_GENERALIZEDTIME_print(fp: CValuesRef<BIO>?, a: CValuesRef<ASN1_GENERALIZEDTIME>?): Int {
    memScoped {
        return kniBridge1524(fp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TIME_print(fp: CValuesRef<BIO>?, a: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge1525(fp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_print(bp: CValuesRef<BIO>?, v: CValuesRef<ASN1_STRING>?): Int {
    memScoped {
        return kniBridge1526(bp?.getPointer(memScope).rawValue, v?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_print_ex(out: CValuesRef<BIO>?, str: CValuesRef<ASN1_STRING>?, flags: ULong): Int {
    memScoped {
        return kniBridge1527(out?.getPointer(memScope).rawValue, str?.getPointer(memScope).rawValue, flags)
    }
}

fun ASN1_buf_print(bp: CValuesRef<BIO>?, buf: CValuesRef<UByteVar>?, buflen: size_t, off: Int): Int {
    memScoped {
        return kniBridge1528(bp?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, buflen, off)
    }
}

fun ASN1_bn_print(bp: CValuesRef<BIO>?, number: String?, num: CValuesRef<BIGNUM>?, buf: CValuesRef<UByteVar>?, off: Int): Int {
    memScoped {
        return kniBridge1529(bp?.getPointer(memScope).rawValue, number?.cstr?.getPointer(memScope).rawValue, num?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, off)
    }
}

fun ASN1_parse(bp: CValuesRef<BIO>?, pp: CValuesRef<UByteVar>?, len: Long, indent: Int): Int {
    memScoped {
        return kniBridge1530(bp?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, len, indent)
    }
}

fun ASN1_parse_dump(bp: CValuesRef<BIO>?, pp: CValuesRef<UByteVar>?, len: Long, indent: Int, dump: Int): Int {
    memScoped {
        return kniBridge1531(bp?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, len, indent, dump)
    }
}

fun ASN1_tag2str(tag: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge1532(tag))
}

fun ASN1_UNIVERSALSTRING_to_string(s: CValuesRef<ASN1_UNIVERSALSTRING>?): Int {
    memScoped {
        return kniBridge1533(s?.getPointer(memScope).rawValue)
    }
}

fun ASN1_TYPE_set_octetstring(a: CValuesRef<ASN1_TYPE>?, data: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge1534(a?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun ASN1_TYPE_get_octetstring(a: CValuesRef<ASN1_TYPE>?, data: CValuesRef<UByteVar>?, max_len: Int): Int {
    memScoped {
        return kniBridge1535(a?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, max_len)
    }
}

fun ASN1_TYPE_set_int_octetstring(a: CValuesRef<ASN1_TYPE>?, num: Long, data: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge1536(a?.getPointer(memScope).rawValue, num, data?.getPointer(memScope).rawValue, len)
    }
}

fun ASN1_TYPE_get_int_octetstring(a: CValuesRef<ASN1_TYPE>?, num: CValuesRef<LongVar>?, data: CValuesRef<UByteVar>?, max_len: Int): Int {
    memScoped {
        return kniBridge1537(a?.getPointer(memScope).rawValue, num?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, max_len)
    }
}

fun ASN1_item_unpack(oct: CValuesRef<ASN1_STRING>?, it: CValuesRef<ASN1_ITEM>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1538(oct?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue))
    }
}

fun ASN1_item_pack(obj: CValuesRef<*>?, it: CValuesRef<ASN1_ITEM>?, oct: CValuesRef<CPointerVar<ASN1_OCTET_STRING>>?): CPointer<ASN1_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_STRING>(kniBridge1539(obj?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue, oct?.getPointer(memScope).rawValue))
    }
}

fun ASN1_STRING_set_default_mask(mask: ULong): Unit {
    return kniBridge1540(mask)
}

fun ASN1_STRING_set_default_mask_asc(p: String?): Int {
    memScoped {
        return kniBridge1541(p?.cstr?.getPointer(memScope).rawValue)
    }
}

fun ASN1_STRING_get_default_mask(): ULong {
    return kniBridge1542()
}

fun ASN1_mbstring_copy(out: CValuesRef<CPointerVar<ASN1_STRING>>?, `in`: CValuesRef<UByteVar>?, len: Int, inform: Int, mask: ULong): Int {
    memScoped {
        return kniBridge1543(out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len, inform, mask)
    }
}

fun ASN1_mbstring_ncopy(out: CValuesRef<CPointerVar<ASN1_STRING>>?, `in`: CValuesRef<UByteVar>?, len: Int, inform: Int, mask: ULong, minsize: Long, maxsize: Long): Int {
    memScoped {
        return kniBridge1544(out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len, inform, mask, minsize, maxsize)
    }
}

fun ASN1_STRING_set_by_NID(out: CValuesRef<CPointerVar<ASN1_STRING>>?, `in`: CValuesRef<UByteVar>?, inlen: Int, inform: Int, nid: Int): CPointer<ASN1_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_STRING>(kniBridge1545(out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inlen, inform, nid))
    }
}

fun ASN1_STRING_TABLE_get(nid: Int): CPointer<ASN1_STRING_TABLE>? {
    return interpretCPointer<ASN1_STRING_TABLE>(kniBridge1546(nid))
}

fun ASN1_STRING_TABLE_add(arg0: Int, arg1: Long, arg2: Long, arg3: ULong, arg4: ULong): Int {
    return kniBridge1547(arg0, arg1, arg2, arg3, arg4)
}

fun ASN1_STRING_TABLE_cleanup(): Unit {
    return kniBridge1548()
}

fun ASN1_item_new(it: CValuesRef<ASN1_ITEM>?): CPointer<ASN1_VALUE>? {
    memScoped {
        return interpretCPointer<ASN1_VALUE>(kniBridge1549(it?.getPointer(memScope).rawValue))
    }
}

fun ASN1_item_free(`val`: CValuesRef<ASN1_VALUE>?, it: CValuesRef<ASN1_ITEM>?): Unit {
    memScoped {
        return kniBridge1550(`val`?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_d2i(`val`: CValuesRef<CPointerVar<ASN1_VALUE>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long, it: CValuesRef<ASN1_ITEM>?): CPointer<ASN1_VALUE>? {
    memScoped {
        return interpretCPointer<ASN1_VALUE>(kniBridge1551(`val`?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len, it?.getPointer(memScope).rawValue))
    }
}

fun ASN1_item_i2d(`val`: CValuesRef<ASN1_VALUE>?, out: CValuesRef<CPointerVar<UByteVar>>?, it: CValuesRef<ASN1_ITEM>?): Int {
    memScoped {
        return kniBridge1552(`val`?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_ndef_i2d(`val`: CValuesRef<ASN1_VALUE>?, out: CValuesRef<CPointerVar<UByteVar>>?, it: CValuesRef<ASN1_ITEM>?): Int {
    memScoped {
        return kniBridge1553(`val`?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue)
    }
}

fun ASN1_add_oid_module(): Unit {
    return kniBridge1554()
}

fun ASN1_add_stable_module(): Unit {
    return kniBridge1555()
}

fun ASN1_generate_nconf(str: String?, nconf: CValuesRef<CONF>?): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1556(str?.cstr?.getPointer(memScope).rawValue, nconf?.getPointer(memScope).rawValue))
    }
}

fun ASN1_generate_v3(str: String?, cnf: CValuesRef<X509V3_CTX>?): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge1557(str?.cstr?.getPointer(memScope).rawValue, cnf?.getPointer(memScope).rawValue))
    }
}

fun ASN1_str2mask(str: String?, pmask: CValuesRef<ULongVar>?): Int {
    memScoped {
        return kniBridge1558(str?.cstr?.getPointer(memScope).rawValue, pmask?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_print(out: CValuesRef<BIO>?, ifld: CValuesRef<ASN1_VALUE>?, indent: Int, it: CValuesRef<ASN1_ITEM>?, pctx: CValuesRef<ASN1_PCTX>?): Int {
    memScoped {
        return kniBridge1559(out?.getPointer(memScope).rawValue, ifld?.getPointer(memScope).rawValue, indent, it?.getPointer(memScope).rawValue, pctx?.getPointer(memScope).rawValue)
    }
}

fun ASN1_PCTX_new(): CPointer<ASN1_PCTX>? {
    return interpretCPointer<ASN1_PCTX>(kniBridge1560())
}

fun ASN1_PCTX_free(p: CValuesRef<ASN1_PCTX>?): Unit {
    memScoped {
        return kniBridge1561(p?.getPointer(memScope).rawValue)
    }
}

fun ASN1_PCTX_get_flags(p: CValuesRef<ASN1_PCTX>?): ULong {
    memScoped {
        return kniBridge1562(p?.getPointer(memScope).rawValue)
    }
}

fun ASN1_PCTX_set_flags(p: CValuesRef<ASN1_PCTX>?, flags: ULong): Unit {
    memScoped {
        return kniBridge1563(p?.getPointer(memScope).rawValue, flags)
    }
}

fun ASN1_PCTX_get_nm_flags(p: CValuesRef<ASN1_PCTX>?): ULong {
    memScoped {
        return kniBridge1564(p?.getPointer(memScope).rawValue)
    }
}

fun ASN1_PCTX_set_nm_flags(p: CValuesRef<ASN1_PCTX>?, flags: ULong): Unit {
    memScoped {
        return kniBridge1565(p?.getPointer(memScope).rawValue, flags)
    }
}

fun ASN1_PCTX_get_cert_flags(p: CValuesRef<ASN1_PCTX>?): ULong {
    memScoped {
        return kniBridge1566(p?.getPointer(memScope).rawValue)
    }
}

fun ASN1_PCTX_set_cert_flags(p: CValuesRef<ASN1_PCTX>?, flags: ULong): Unit {
    memScoped {
        return kniBridge1567(p?.getPointer(memScope).rawValue, flags)
    }
}

fun ASN1_PCTX_get_oid_flags(p: CValuesRef<ASN1_PCTX>?): ULong {
    memScoped {
        return kniBridge1568(p?.getPointer(memScope).rawValue)
    }
}

fun ASN1_PCTX_set_oid_flags(p: CValuesRef<ASN1_PCTX>?, flags: ULong): Unit {
    memScoped {
        return kniBridge1569(p?.getPointer(memScope).rawValue, flags)
    }
}

fun ASN1_PCTX_get_str_flags(p: CValuesRef<ASN1_PCTX>?): ULong {
    memScoped {
        return kniBridge1570(p?.getPointer(memScope).rawValue)
    }
}

fun ASN1_PCTX_set_str_flags(p: CValuesRef<ASN1_PCTX>?, flags: ULong): Unit {
    memScoped {
        return kniBridge1571(p?.getPointer(memScope).rawValue, flags)
    }
}

fun ASN1_SCTX_new(scan_cb: CPointer<CFunction<(CPointer<ASN1_SCTX>?) -> Int>>?): CPointer<ASN1_SCTX>? {
    return interpretCPointer<ASN1_SCTX>(kniBridge1572(scan_cb.rawValue))
}

fun ASN1_SCTX_free(p: CValuesRef<ASN1_SCTX>?): Unit {
    memScoped {
        return kniBridge1573(p?.getPointer(memScope).rawValue)
    }
}

fun ASN1_SCTX_get_item(p: CValuesRef<ASN1_SCTX>?): CPointer<ASN1_ITEM>? {
    memScoped {
        return interpretCPointer<ASN1_ITEM>(kniBridge1574(p?.getPointer(memScope).rawValue))
    }
}

fun ASN1_SCTX_get_template(p: CValuesRef<ASN1_SCTX>?): CPointer<ASN1_TEMPLATE>? {
    memScoped {
        return interpretCPointer<ASN1_TEMPLATE>(kniBridge1575(p?.getPointer(memScope).rawValue))
    }
}

fun ASN1_SCTX_get_flags(p: CValuesRef<ASN1_SCTX>?): ULong {
    memScoped {
        return kniBridge1576(p?.getPointer(memScope).rawValue)
    }
}

fun ASN1_SCTX_set_app_data(p: CValuesRef<ASN1_SCTX>?, data: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1577(p?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun ASN1_SCTX_get_app_data(p: CValuesRef<ASN1_SCTX>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1578(p?.getPointer(memScope).rawValue))
    }
}

fun BIO_f_asn1(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge1579())
}

fun BIO_new_NDEF(out: CValuesRef<BIO>?, `val`: CValuesRef<ASN1_VALUE>?, it: CValuesRef<ASN1_ITEM>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge1580(out?.getPointer(memScope).rawValue, `val`?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue))
    }
}

fun i2d_ASN1_bio_stream(out: CValuesRef<BIO>?, `val`: CValuesRef<ASN1_VALUE>?, `in`: CValuesRef<BIO>?, flags: Int, it: CValuesRef<ASN1_ITEM>?): Int {
    memScoped {
        return kniBridge1581(out?.getPointer(memScope).rawValue, `val`?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, flags, it?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_bio_ASN1_stream(out: CValuesRef<BIO>?, `val`: CValuesRef<ASN1_VALUE>?, `in`: CValuesRef<BIO>?, flags: Int, hdr: String?, it: CValuesRef<ASN1_ITEM>?): Int {
    memScoped {
        return kniBridge1582(out?.getPointer(memScope).rawValue, `val`?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, flags, hdr?.cstr?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue)
    }
}

fun SMIME_write_ASN1(bio: CValuesRef<BIO>?, `val`: CValuesRef<ASN1_VALUE>?, data: CValuesRef<BIO>?, flags: Int, ctype_nid: Int, econt_nid: Int, mdalgs: CValuesRef<stack_st_X509_ALGOR>?, it: CValuesRef<ASN1_ITEM>?): Int {
    memScoped {
        return kniBridge1583(bio?.getPointer(memScope).rawValue, `val`?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, flags, ctype_nid, econt_nid, mdalgs?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue)
    }
}

fun SMIME_read_ASN1(bio: CValuesRef<BIO>?, bcont: CValuesRef<CPointerVar<BIO>>?, it: CValuesRef<ASN1_ITEM>?): CPointer<ASN1_VALUE>? {
    memScoped {
        return interpretCPointer<ASN1_VALUE>(kniBridge1584(bio?.getPointer(memScope).rawValue, bcont?.getPointer(memScope).rawValue, it?.getPointer(memScope).rawValue))
    }
}

fun SMIME_crlf_copy(`in`: CValuesRef<BIO>?, out: CValuesRef<BIO>?, flags: Int): Int {
    memScoped {
        return kniBridge1585(`in`?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, flags)
    }
}

fun SMIME_text(`in`: CValuesRef<BIO>?, out: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge1586(`in`?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ERR_load_ASN1_strings(): Int {
    return kniBridge1587()
}

fun OBJ_NAME_init(): Int {
    return kniBridge1588()
}

fun OBJ_NAME_new_index(hash_func: CPointer<CFunction<(CPointer<ByteVar>?) -> ULong>>?, cmp_func: CPointer<CFunction<(CPointer<ByteVar>?, CPointer<ByteVar>?) -> Int>>?, free_func: CPointer<CFunction<(CPointer<ByteVar>?, Int, CPointer<ByteVar>?) -> Unit>>?): Int {
    return kniBridge1589(hash_func.rawValue, cmp_func.rawValue, free_func.rawValue)
}

fun OBJ_NAME_get(name: String?, type: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge1590(name?.cstr?.getPointer(memScope).rawValue, type))
    }
}

fun OBJ_NAME_add(name: String?, type: Int, data: String?): Int {
    memScoped {
        return kniBridge1591(name?.cstr?.getPointer(memScope).rawValue, type, data?.cstr?.getPointer(memScope).rawValue)
    }
}

fun OBJ_NAME_remove(name: String?, type: Int): Int {
    memScoped {
        return kniBridge1592(name?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun OBJ_NAME_cleanup(type: Int): Unit {
    return kniBridge1593(type)
}

fun OBJ_NAME_do_all(type: Int, fn: CPointer<CFunction<(CPointer<OBJ_NAME>?, COpaquePointer?) -> Unit>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1594(type, fn.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun OBJ_NAME_do_all_sorted(type: Int, fn: CPointer<CFunction<(CPointer<OBJ_NAME>?, COpaquePointer?) -> Unit>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1595(type, fn.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun OBJ_dup(o: CValuesRef<ASN1_OBJECT>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1596(o?.getPointer(memScope).rawValue))
    }
}

fun OBJ_nid2obj(n: Int): CPointer<ASN1_OBJECT>? {
    return interpretCPointer<ASN1_OBJECT>(kniBridge1597(n))
}

fun OBJ_nid2ln(n: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge1598(n))
}

fun OBJ_nid2sn(n: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge1599(n))
}

fun OBJ_obj2nid(o: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1600(o?.getPointer(memScope).rawValue)
    }
}

fun OBJ_txt2obj(s: String?, no_name: Int): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge1601(s?.cstr?.getPointer(memScope).rawValue, no_name))
    }
}

fun OBJ_obj2txt(buf: CValuesRef<ByteVar>?, buf_len: Int, a: CValuesRef<ASN1_OBJECT>?, no_name: Int): Int {
    memScoped {
        return kniBridge1602(buf?.getPointer(memScope).rawValue, buf_len, a?.getPointer(memScope).rawValue, no_name)
    }
}

fun OBJ_txt2nid(s: String?): Int {
    memScoped {
        return kniBridge1603(s?.cstr?.getPointer(memScope).rawValue)
    }
}

fun OBJ_ln2nid(s: String?): Int {
    memScoped {
        return kniBridge1604(s?.cstr?.getPointer(memScope).rawValue)
    }
}

fun OBJ_sn2nid(s: String?): Int {
    memScoped {
        return kniBridge1605(s?.cstr?.getPointer(memScope).rawValue)
    }
}

fun OBJ_cmp(a: CValuesRef<ASN1_OBJECT>?, b: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1606(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun OBJ_bsearch_(key: CValuesRef<*>?, base: CValuesRef<*>?, num: Int, size: Int, cmp: CPointer<CFunction<(COpaquePointer?, COpaquePointer?) -> Int>>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1607(key?.getPointer(memScope).rawValue, base?.getPointer(memScope).rawValue, num, size, cmp.rawValue))
    }
}

fun OBJ_bsearch_ex_(key: CValuesRef<*>?, base: CValuesRef<*>?, num: Int, size: Int, cmp: CPointer<CFunction<(COpaquePointer?, COpaquePointer?) -> Int>>?, flags: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1608(key?.getPointer(memScope).rawValue, base?.getPointer(memScope).rawValue, num, size, cmp.rawValue, flags))
    }
}

fun OBJ_new_nid(num: Int): Int {
    return kniBridge1609(num)
}

fun OBJ_add_object(obj: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge1610(obj?.getPointer(memScope).rawValue)
    }
}

fun OBJ_create(oid: String?, sn: String?, ln: String?): Int {
    memScoped {
        return kniBridge1611(oid?.cstr?.getPointer(memScope).rawValue, sn?.cstr?.getPointer(memScope).rawValue, ln?.cstr?.getPointer(memScope).rawValue)
    }
}

fun OBJ_create_objects(`in`: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge1612(`in`?.getPointer(memScope).rawValue)
    }
}

fun OBJ_length(obj: CValuesRef<ASN1_OBJECT>?): size_t {
    memScoped {
        return kniBridge1613(obj?.getPointer(memScope).rawValue)
    }
}

fun OBJ_get0_data(obj: CValuesRef<ASN1_OBJECT>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge1614(obj?.getPointer(memScope).rawValue))
    }
}

fun OBJ_find_sigid_algs(signid: Int, pdig_nid: CValuesRef<IntVar>?, ppkey_nid: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1615(signid, pdig_nid?.getPointer(memScope).rawValue, ppkey_nid?.getPointer(memScope).rawValue)
    }
}

fun OBJ_find_sigid_by_algs(psignid: CValuesRef<IntVar>?, dig_nid: Int, pkey_nid: Int): Int {
    memScoped {
        return kniBridge1616(psignid?.getPointer(memScope).rawValue, dig_nid, pkey_nid)
    }
}

fun OBJ_add_sigid(signid: Int, dig_id: Int, pkey_id: Int): Int {
    return kniBridge1617(signid, dig_id, pkey_id)
}

fun OBJ_sigid_free(): Unit {
    return kniBridge1618()
}

fun ERR_load_OBJ_strings(): Int {
    return kniBridge1619()
}

fun EVP_MD_meth_new(md_type: Int, pkey_type: Int): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1620(md_type, pkey_type))
}

fun EVP_MD_meth_dup(md: CValuesRef<EVP_MD>?): CPointer<EVP_MD>? {
    memScoped {
        return interpretCPointer<EVP_MD>(kniBridge1621(md?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_meth_free(md: CValuesRef<EVP_MD>?): Unit {
    memScoped {
        return kniBridge1622(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_meth_set_input_blocksize(md: CValuesRef<EVP_MD>?, blocksize: Int): Int {
    memScoped {
        return kniBridge1623(md?.getPointer(memScope).rawValue, blocksize)
    }
}

fun EVP_MD_meth_set_result_size(md: CValuesRef<EVP_MD>?, resultsize: Int): Int {
    memScoped {
        return kniBridge1624(md?.getPointer(memScope).rawValue, resultsize)
    }
}

fun EVP_MD_meth_set_app_datasize(md: CValuesRef<EVP_MD>?, datasize: Int): Int {
    memScoped {
        return kniBridge1625(md?.getPointer(memScope).rawValue, datasize)
    }
}

fun EVP_MD_meth_set_flags(md: CValuesRef<EVP_MD>?, flags: ULong): Int {
    memScoped {
        return kniBridge1626(md?.getPointer(memScope).rawValue, flags)
    }
}

fun EVP_MD_meth_set_init(md: CValuesRef<EVP_MD>?, init: CPointer<CFunction<(CPointer<EVP_MD_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge1627(md?.getPointer(memScope).rawValue, init.rawValue)
    }
}

fun EVP_MD_meth_set_update(md: CValuesRef<EVP_MD>?, update: CPointer<CFunction<(CPointer<EVP_MD_CTX>?, COpaquePointer?, size_t) -> Int>>?): Int {
    memScoped {
        return kniBridge1628(md?.getPointer(memScope).rawValue, update.rawValue)
    }
}

fun EVP_MD_meth_set_final(md: CValuesRef<EVP_MD>?, final: CPointer<CFunction<(CPointer<EVP_MD_CTX>?, CPointer<UByteVar>?) -> Int>>?): Int {
    memScoped {
        return kniBridge1629(md?.getPointer(memScope).rawValue, final.rawValue)
    }
}

fun EVP_MD_meth_set_copy(md: CValuesRef<EVP_MD>?, copy: CPointer<CFunction<(CPointer<EVP_MD_CTX>?, CPointer<EVP_MD_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge1630(md?.getPointer(memScope).rawValue, copy.rawValue)
    }
}

fun EVP_MD_meth_set_cleanup(md: CValuesRef<EVP_MD>?, cleanup: CPointer<CFunction<(CPointer<EVP_MD_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge1631(md?.getPointer(memScope).rawValue, cleanup.rawValue)
    }
}

fun EVP_MD_meth_set_ctrl(md: CValuesRef<EVP_MD>?, ctrl: CPointer<CFunction<(CPointer<EVP_MD_CTX>?, Int, Int, COpaquePointer?) -> Int>>?): Int {
    memScoped {
        return kniBridge1632(md?.getPointer(memScope).rawValue, ctrl.rawValue)
    }
}

fun EVP_MD_meth_get_input_blocksize(md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1633(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_meth_get_result_size(md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1634(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_meth_get_app_datasize(md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1635(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_meth_get_flags(md: CValuesRef<EVP_MD>?): ULong {
    memScoped {
        return kniBridge1636(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_meth_get_init(md: CValuesRef<EVP_MD>?): CPointer<CFunction<(CPointer<EVP_MD_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_MD_CTX>?) -> Int>>(kniBridge1637(md?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_meth_get_update(md: CValuesRef<EVP_MD>?): CPointer<CFunction<(CPointer<EVP_MD_CTX>?, COpaquePointer?, size_t) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_MD_CTX>?, COpaquePointer?, size_t) -> Int>>(kniBridge1638(md?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_meth_get_final(md: CValuesRef<EVP_MD>?): CPointer<CFunction<(CPointer<EVP_MD_CTX>?, CPointer<UByteVar>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_MD_CTX>?, CPointer<UByteVar>?) -> Int>>(kniBridge1639(md?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_meth_get_copy(md: CValuesRef<EVP_MD>?): CPointer<CFunction<(CPointer<EVP_MD_CTX>?, CPointer<EVP_MD_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_MD_CTX>?, CPointer<EVP_MD_CTX>?) -> Int>>(kniBridge1640(md?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_meth_get_cleanup(md: CValuesRef<EVP_MD>?): CPointer<CFunction<(CPointer<EVP_MD_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_MD_CTX>?) -> Int>>(kniBridge1641(md?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_meth_get_ctrl(md: CValuesRef<EVP_MD>?): CPointer<CFunction<(CPointer<EVP_MD_CTX>?, Int, Int, COpaquePointer?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_MD_CTX>?, Int, Int, COpaquePointer?) -> Int>>(kniBridge1642(md?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_meth_new(cipher_type: Int, block_size: Int, key_len: Int): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1643(cipher_type, block_size, key_len))
}

fun EVP_CIPHER_meth_dup(cipher: CValuesRef<EVP_CIPHER>?): CPointer<EVP_CIPHER>? {
    memScoped {
        return interpretCPointer<EVP_CIPHER>(kniBridge1644(cipher?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_meth_free(cipher: CValuesRef<EVP_CIPHER>?): Unit {
    memScoped {
        return kniBridge1645(cipher?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_meth_set_iv_length(cipher: CValuesRef<EVP_CIPHER>?, iv_len: Int): Int {
    memScoped {
        return kniBridge1646(cipher?.getPointer(memScope).rawValue, iv_len)
    }
}

fun EVP_CIPHER_meth_set_flags(cipher: CValuesRef<EVP_CIPHER>?, flags: ULong): Int {
    memScoped {
        return kniBridge1647(cipher?.getPointer(memScope).rawValue, flags)
    }
}

fun EVP_CIPHER_meth_set_impl_ctx_size(cipher: CValuesRef<EVP_CIPHER>?, ctx_size: Int): Int {
    memScoped {
        return kniBridge1648(cipher?.getPointer(memScope).rawValue, ctx_size)
    }
}

fun EVP_CIPHER_meth_set_init(cipher: CValuesRef<EVP_CIPHER>?, init: CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<UByteVar>?, CPointer<UByteVar>?, Int) -> Int>>?): Int {
    memScoped {
        return kniBridge1649(cipher?.getPointer(memScope).rawValue, init.rawValue)
    }
}

fun EVP_CIPHER_meth_set_do_cipher(cipher: CValuesRef<EVP_CIPHER>?, do_cipher: CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<UByteVar>?, CPointer<UByteVar>?, size_t) -> Int>>?): Int {
    memScoped {
        return kniBridge1650(cipher?.getPointer(memScope).rawValue, do_cipher.rawValue)
    }
}

fun EVP_CIPHER_meth_set_cleanup(cipher: CValuesRef<EVP_CIPHER>?, cleanup: CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge1651(cipher?.getPointer(memScope).rawValue, cleanup.rawValue)
    }
}

fun EVP_CIPHER_meth_set_set_asn1_params(cipher: CValuesRef<EVP_CIPHER>?, set_asn1_parameters: CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<ASN1_TYPE>?) -> Int>>?): Int {
    memScoped {
        return kniBridge1652(cipher?.getPointer(memScope).rawValue, set_asn1_parameters.rawValue)
    }
}

fun EVP_CIPHER_meth_set_get_asn1_params(cipher: CValuesRef<EVP_CIPHER>?, get_asn1_parameters: CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<ASN1_TYPE>?) -> Int>>?): Int {
    memScoped {
        return kniBridge1653(cipher?.getPointer(memScope).rawValue, get_asn1_parameters.rawValue)
    }
}

fun EVP_CIPHER_meth_set_ctrl(cipher: CValuesRef<EVP_CIPHER>?, ctrl: CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, Int, Int, COpaquePointer?) -> Int>>?): Int {
    memScoped {
        return kniBridge1654(cipher?.getPointer(memScope).rawValue, ctrl.rawValue)
    }
}

fun EVP_CIPHER_meth_get_init(cipher: CValuesRef<EVP_CIPHER>?): CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<UByteVar>?, CPointer<UByteVar>?, Int) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<UByteVar>?, CPointer<UByteVar>?, Int) -> Int>>(kniBridge1655(cipher?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_meth_get_do_cipher(cipher: CValuesRef<EVP_CIPHER>?): CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<UByteVar>?, CPointer<UByteVar>?, size_t) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<UByteVar>?, CPointer<UByteVar>?, size_t) -> Int>>(kniBridge1656(cipher?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_meth_get_cleanup(cipher: CValuesRef<EVP_CIPHER>?): CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?) -> Int>>(kniBridge1657(cipher?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_meth_get_set_asn1_params(cipher: CValuesRef<EVP_CIPHER>?): CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<ASN1_TYPE>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<ASN1_TYPE>?) -> Int>>(kniBridge1658(cipher?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_meth_get_get_asn1_params(cipher: CValuesRef<EVP_CIPHER>?): CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<ASN1_TYPE>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<ASN1_TYPE>?) -> Int>>(kniBridge1659(cipher?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_meth_get_ctrl(cipher: CValuesRef<EVP_CIPHER>?): CPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, Int, Int, COpaquePointer?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_CIPHER_CTX>?, Int, Int, COpaquePointer?) -> Int>>(kniBridge1660(cipher?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_type(md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1661(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_pkey_type(md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1662(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_size(md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1663(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_block_size(md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1664(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_flags(md: CValuesRef<EVP_MD>?): ULong {
    memScoped {
        return kniBridge1665(md?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_CTX_md(ctx: CValuesRef<EVP_MD_CTX>?): CPointer<EVP_MD>? {
    memScoped {
        return interpretCPointer<EVP_MD>(kniBridge1666(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_CTX_update_fn(ctx: CValuesRef<EVP_MD_CTX>?): CPointer<CFunction<(CPointer<EVP_MD_CTX>?, COpaquePointer?, size_t) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<EVP_MD_CTX>?, COpaquePointer?, size_t) -> Int>>(kniBridge1667(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_CTX_set_update_fn(ctx: CValuesRef<EVP_MD_CTX>?, update: CPointer<CFunction<(CPointer<EVP_MD_CTX>?, COpaquePointer?, size_t) -> Int>>?): Unit {
    memScoped {
        return kniBridge1668(ctx?.getPointer(memScope).rawValue, update.rawValue)
    }
}

fun EVP_MD_CTX_pkey_ctx(ctx: CValuesRef<EVP_MD_CTX>?): CPointer<EVP_PKEY_CTX>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_CTX>(kniBridge1669(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_MD_CTX_md_data(ctx: CValuesRef<EVP_MD_CTX>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1670(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_nid(cipher: CValuesRef<EVP_CIPHER>?): Int {
    memScoped {
        return kniBridge1671(cipher?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_block_size(cipher: CValuesRef<EVP_CIPHER>?): Int {
    memScoped {
        return kniBridge1672(cipher?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_impl_ctx_size(cipher: CValuesRef<EVP_CIPHER>?): Int {
    memScoped {
        return kniBridge1673(cipher?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_key_length(cipher: CValuesRef<EVP_CIPHER>?): Int {
    memScoped {
        return kniBridge1674(cipher?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_iv_length(cipher: CValuesRef<EVP_CIPHER>?): Int {
    memScoped {
        return kniBridge1675(cipher?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_flags(cipher: CValuesRef<EVP_CIPHER>?): ULong {
    memScoped {
        return kniBridge1676(cipher?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_cipher(ctx: CValuesRef<EVP_CIPHER_CTX>?): CPointer<EVP_CIPHER>? {
    memScoped {
        return interpretCPointer<EVP_CIPHER>(kniBridge1677(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_CTX_encrypting(ctx: CValuesRef<EVP_CIPHER_CTX>?): Int {
    memScoped {
        return kniBridge1678(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_nid(ctx: CValuesRef<EVP_CIPHER_CTX>?): Int {
    memScoped {
        return kniBridge1679(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_block_size(ctx: CValuesRef<EVP_CIPHER_CTX>?): Int {
    memScoped {
        return kniBridge1680(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_key_length(ctx: CValuesRef<EVP_CIPHER_CTX>?): Int {
    memScoped {
        return kniBridge1681(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_iv_length(ctx: CValuesRef<EVP_CIPHER_CTX>?): Int {
    memScoped {
        return kniBridge1682(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_iv(ctx: CValuesRef<EVP_CIPHER_CTX>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge1683(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_CTX_original_iv(ctx: CValuesRef<EVP_CIPHER_CTX>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge1684(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_CTX_iv_noconst(ctx: CValuesRef<EVP_CIPHER_CTX>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge1685(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_CTX_buf_noconst(ctx: CValuesRef<EVP_CIPHER_CTX>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge1686(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_CTX_num(ctx: CValuesRef<EVP_CIPHER_CTX>?): Int {
    memScoped {
        return kniBridge1687(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_set_num(ctx: CValuesRef<EVP_CIPHER_CTX>?, num: Int): Unit {
    memScoped {
        return kniBridge1688(ctx?.getPointer(memScope).rawValue, num)
    }
}

fun EVP_CIPHER_CTX_copy(out: CValuesRef<EVP_CIPHER_CTX>?, `in`: CValuesRef<EVP_CIPHER_CTX>?): Int {
    memScoped {
        return kniBridge1689(out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_get_app_data(ctx: CValuesRef<EVP_CIPHER_CTX>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1690(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_CTX_set_app_data(ctx: CValuesRef<EVP_CIPHER_CTX>?, data: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1691(ctx?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_get_cipher_data(ctx: CValuesRef<EVP_CIPHER_CTX>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1692(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_CTX_set_cipher_data(ctx: CValuesRef<EVP_CIPHER_CTX>?, cipher_data: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1693(ctx?.getPointer(memScope).rawValue, cipher_data?.getPointer(memScope).rawValue))
    }
}

fun EVP_Cipher(c: CValuesRef<EVP_CIPHER_CTX>?, out: CValuesRef<UByteVar>?, `in`: CValuesRef<UByteVar>?, inl: UInt): Int {
    memScoped {
        return kniBridge1694(c?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inl)
    }
}

fun EVP_MD_CTX_ctrl(ctx: CValuesRef<EVP_MD_CTX>?, cmd: Int, p1: Int, p2: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1695(ctx?.getPointer(memScope).rawValue, cmd, p1, p2?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_CTX_new(): CPointer<EVP_MD_CTX>? {
    return interpretCPointer<EVP_MD_CTX>(kniBridge1696())
}

fun EVP_MD_CTX_reset(ctx: CValuesRef<EVP_MD_CTX>?): Int {
    memScoped {
        return kniBridge1697(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_CTX_free(ctx: CValuesRef<EVP_MD_CTX>?): Unit {
    memScoped {
        return kniBridge1698(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_CTX_copy_ex(out: CValuesRef<EVP_MD_CTX>?, `in`: CValuesRef<EVP_MD_CTX>?): Int {
    memScoped {
        return kniBridge1699(out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_CTX_set_flags(ctx: CValuesRef<EVP_MD_CTX>?, flags: Int): Unit {
    memScoped {
        return kniBridge1700(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun EVP_MD_CTX_clear_flags(ctx: CValuesRef<EVP_MD_CTX>?, flags: Int): Unit {
    memScoped {
        return kniBridge1701(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun EVP_MD_CTX_test_flags(ctx: CValuesRef<EVP_MD_CTX>?, flags: Int): Int {
    memScoped {
        return kniBridge1702(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun EVP_DigestInit_ex(ctx: CValuesRef<EVP_MD_CTX>?, type: CValuesRef<EVP_MD>?, impl: CValuesRef<ENGINE>?): Int {
    memScoped {
        return kniBridge1703(ctx?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, impl?.getPointer(memScope).rawValue)
    }
}

fun EVP_DigestUpdate(ctx: CValuesRef<EVP_MD_CTX>?, d: CValuesRef<*>?, cnt: size_t): Int {
    memScoped {
        return kniBridge1704(ctx?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, cnt)
    }
}

fun EVP_DigestFinal_ex(ctx: CValuesRef<EVP_MD_CTX>?, md: CValuesRef<UByteVar>?, s: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge1705(ctx?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, s?.getPointer(memScope).rawValue)
    }
}

fun EVP_Digest(data: CValuesRef<*>?, count: size_t, md: CValuesRef<UByteVar>?, size: CValuesRef<UIntVar>?, type: CValuesRef<EVP_MD>?, impl: CValuesRef<ENGINE>?): Int {
    memScoped {
        return kniBridge1706(data?.getPointer(memScope).rawValue, count, md?.getPointer(memScope).rawValue, size?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, impl?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_CTX_copy(out: CValuesRef<EVP_MD_CTX>?, `in`: CValuesRef<EVP_MD_CTX>?): Int {
    memScoped {
        return kniBridge1707(out?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue)
    }
}

fun EVP_DigestInit(ctx: CValuesRef<EVP_MD_CTX>?, type: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1708(ctx?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun EVP_DigestFinal(ctx: CValuesRef<EVP_MD_CTX>?, md: CValuesRef<UByteVar>?, s: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge1709(ctx?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, s?.getPointer(memScope).rawValue)
    }
}

fun EVP_read_pw_string(buf: CValuesRef<ByteVar>?, length: Int, prompt: String?, verify: Int): Int {
    memScoped {
        return kniBridge1710(buf?.getPointer(memScope).rawValue, length, prompt?.cstr?.getPointer(memScope).rawValue, verify)
    }
}

fun EVP_read_pw_string_min(buf: CValuesRef<ByteVar>?, minlen: Int, maxlen: Int, prompt: String?, verify: Int): Int {
    memScoped {
        return kniBridge1711(buf?.getPointer(memScope).rawValue, minlen, maxlen, prompt?.cstr?.getPointer(memScope).rawValue, verify)
    }
}

fun EVP_set_pw_prompt(prompt: String?): Unit {
    memScoped {
        return kniBridge1712(prompt?.cstr?.getPointer(memScope).rawValue)
    }
}

fun EVP_get_pw_prompt(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge1713())
}

fun EVP_BytesToKey(type: CValuesRef<EVP_CIPHER>?, md: CValuesRef<EVP_MD>?, salt: CValuesRef<UByteVar>?, data: CValuesRef<UByteVar>?, datal: Int, count: Int, key: CValuesRef<UByteVar>?, iv: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1714(type?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, salt?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, datal, count, key?.getPointer(memScope).rawValue, iv?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_set_flags(ctx: CValuesRef<EVP_CIPHER_CTX>?, flags: Int): Unit {
    memScoped {
        return kniBridge1715(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun EVP_CIPHER_CTX_clear_flags(ctx: CValuesRef<EVP_CIPHER_CTX>?, flags: Int): Unit {
    memScoped {
        return kniBridge1716(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun EVP_CIPHER_CTX_test_flags(ctx: CValuesRef<EVP_CIPHER_CTX>?, flags: Int): Int {
    memScoped {
        return kniBridge1717(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun EVP_EncryptInit(ctx: CValuesRef<EVP_CIPHER_CTX>?, cipher: CValuesRef<EVP_CIPHER>?, key: CValuesRef<UByteVar>?, iv: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1718(ctx?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, iv?.getPointer(memScope).rawValue)
    }
}

fun EVP_EncryptInit_ex(ctx: CValuesRef<EVP_CIPHER_CTX>?, cipher: CValuesRef<EVP_CIPHER>?, impl: CValuesRef<ENGINE>?, key: CValuesRef<UByteVar>?, iv: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1719(ctx?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, impl?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, iv?.getPointer(memScope).rawValue)
    }
}

fun EVP_EncryptUpdate(ctx: CValuesRef<EVP_CIPHER_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?, `in`: CValuesRef<UByteVar>?, inl: Int): Int {
    memScoped {
        return kniBridge1720(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inl)
    }
}

fun EVP_EncryptFinal_ex(ctx: CValuesRef<EVP_CIPHER_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1721(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_EncryptFinal(ctx: CValuesRef<EVP_CIPHER_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1722(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_DecryptInit(ctx: CValuesRef<EVP_CIPHER_CTX>?, cipher: CValuesRef<EVP_CIPHER>?, key: CValuesRef<UByteVar>?, iv: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1723(ctx?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, iv?.getPointer(memScope).rawValue)
    }
}

fun EVP_DecryptInit_ex(ctx: CValuesRef<EVP_CIPHER_CTX>?, cipher: CValuesRef<EVP_CIPHER>?, impl: CValuesRef<ENGINE>?, key: CValuesRef<UByteVar>?, iv: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1724(ctx?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, impl?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, iv?.getPointer(memScope).rawValue)
    }
}

fun EVP_DecryptUpdate(ctx: CValuesRef<EVP_CIPHER_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?, `in`: CValuesRef<UByteVar>?, inl: Int): Int {
    memScoped {
        return kniBridge1725(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inl)
    }
}

fun EVP_DecryptFinal(ctx: CValuesRef<EVP_CIPHER_CTX>?, outm: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1726(ctx?.getPointer(memScope).rawValue, outm?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_DecryptFinal_ex(ctx: CValuesRef<EVP_CIPHER_CTX>?, outm: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1727(ctx?.getPointer(memScope).rawValue, outm?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_CipherInit(ctx: CValuesRef<EVP_CIPHER_CTX>?, cipher: CValuesRef<EVP_CIPHER>?, key: CValuesRef<UByteVar>?, iv: CValuesRef<UByteVar>?, enc: Int): Int {
    memScoped {
        return kniBridge1728(ctx?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, iv?.getPointer(memScope).rawValue, enc)
    }
}

fun EVP_CipherInit_ex(ctx: CValuesRef<EVP_CIPHER_CTX>?, cipher: CValuesRef<EVP_CIPHER>?, impl: CValuesRef<ENGINE>?, key: CValuesRef<UByteVar>?, iv: CValuesRef<UByteVar>?, enc: Int): Int {
    memScoped {
        return kniBridge1729(ctx?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, impl?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, iv?.getPointer(memScope).rawValue, enc)
    }
}

fun EVP_CipherUpdate(ctx: CValuesRef<EVP_CIPHER_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?, `in`: CValuesRef<UByteVar>?, inl: Int): Int {
    memScoped {
        return kniBridge1730(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inl)
    }
}

fun EVP_CipherFinal(ctx: CValuesRef<EVP_CIPHER_CTX>?, outm: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1731(ctx?.getPointer(memScope).rawValue, outm?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_CipherFinal_ex(ctx: CValuesRef<EVP_CIPHER_CTX>?, outm: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1732(ctx?.getPointer(memScope).rawValue, outm?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_SignFinal(ctx: CValuesRef<EVP_MD_CTX>?, md: CValuesRef<UByteVar>?, s: CValuesRef<UIntVar>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1733(ctx?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, s?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_VerifyFinal(ctx: CValuesRef<EVP_MD_CTX>?, sigbuf: CValuesRef<UByteVar>?, siglen: UInt, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1734(ctx?.getPointer(memScope).rawValue, sigbuf?.getPointer(memScope).rawValue, siglen, pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_DigestSignInit(ctx: CValuesRef<EVP_MD_CTX>?, pctx: CValuesRef<CPointerVar<EVP_PKEY_CTX>>?, type: CValuesRef<EVP_MD>?, e: CValuesRef<ENGINE>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1735(ctx?.getPointer(memScope).rawValue, pctx?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_DigestSignFinal(ctx: CValuesRef<EVP_MD_CTX>?, sigret: CValuesRef<UByteVar>?, siglen: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge1736(ctx?.getPointer(memScope).rawValue, sigret?.getPointer(memScope).rawValue, siglen?.getPointer(memScope).rawValue)
    }
}

fun EVP_DigestVerifyInit(ctx: CValuesRef<EVP_MD_CTX>?, pctx: CValuesRef<CPointerVar<EVP_PKEY_CTX>>?, type: CValuesRef<EVP_MD>?, e: CValuesRef<ENGINE>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1737(ctx?.getPointer(memScope).rawValue, pctx?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_DigestVerifyFinal(ctx: CValuesRef<EVP_MD_CTX>?, sig: CValuesRef<UByteVar>?, siglen: size_t): Int {
    memScoped {
        return kniBridge1738(ctx?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue, siglen)
    }
}

fun EVP_OpenInit(ctx: CValuesRef<EVP_CIPHER_CTX>?, type: CValuesRef<EVP_CIPHER>?, ek: CValuesRef<UByteVar>?, ekl: Int, iv: CValuesRef<UByteVar>?, priv: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1739(ctx?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, ek?.getPointer(memScope).rawValue, ekl, iv?.getPointer(memScope).rawValue, priv?.getPointer(memScope).rawValue)
    }
}

fun EVP_OpenFinal(ctx: CValuesRef<EVP_CIPHER_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1740(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_SealInit(ctx: CValuesRef<EVP_CIPHER_CTX>?, type: CValuesRef<EVP_CIPHER>?, ek: CValuesRef<CPointerVar<UByteVar>>?, ekl: CValuesRef<IntVar>?, iv: CValuesRef<UByteVar>?, pubk: CValuesRef<CPointerVar<EVP_PKEY>>?, npubk: Int): Int {
    memScoped {
        return kniBridge1741(ctx?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, ek?.getPointer(memScope).rawValue, ekl?.getPointer(memScope).rawValue, iv?.getPointer(memScope).rawValue, pubk?.getPointer(memScope).rawValue, npubk)
    }
}

fun EVP_SealFinal(ctx: CValuesRef<EVP_CIPHER_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1742(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_ENCODE_CTX_new(): CPointer<EVP_ENCODE_CTX>? {
    return interpretCPointer<EVP_ENCODE_CTX>(kniBridge1743())
}

fun EVP_ENCODE_CTX_free(ctx: CValuesRef<EVP_ENCODE_CTX>?): Unit {
    memScoped {
        return kniBridge1744(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_ENCODE_CTX_copy(dctx: CValuesRef<EVP_ENCODE_CTX>?, sctx: CValuesRef<EVP_ENCODE_CTX>?): Int {
    memScoped {
        return kniBridge1745(dctx?.getPointer(memScope).rawValue, sctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_ENCODE_CTX_num(ctx: CValuesRef<EVP_ENCODE_CTX>?): Int {
    memScoped {
        return kniBridge1746(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_EncodeInit(ctx: CValuesRef<EVP_ENCODE_CTX>?): Unit {
    memScoped {
        return kniBridge1747(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_EncodeUpdate(ctx: CValuesRef<EVP_ENCODE_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?, `in`: CValuesRef<UByteVar>?, inl: Int): Int {
    memScoped {
        return kniBridge1748(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inl)
    }
}

fun EVP_EncodeFinal(ctx: CValuesRef<EVP_ENCODE_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Unit {
    memScoped {
        return kniBridge1749(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_EncodeBlock(t: CValuesRef<UByteVar>?, f: CValuesRef<UByteVar>?, n: Int): Int {
    memScoped {
        return kniBridge1750(t?.getPointer(memScope).rawValue, f?.getPointer(memScope).rawValue, n)
    }
}

fun EVP_DecodeInit(ctx: CValuesRef<EVP_ENCODE_CTX>?): Unit {
    memScoped {
        return kniBridge1751(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_DecodeUpdate(ctx: CValuesRef<EVP_ENCODE_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?, `in`: CValuesRef<UByteVar>?, inl: Int): Int {
    memScoped {
        return kniBridge1752(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inl)
    }
}

fun EVP_DecodeFinal(ctx: CValuesRef<EVP_ENCODE_CTX>?, out: CValuesRef<UByteVar>?, outl: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1753(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outl?.getPointer(memScope).rawValue)
    }
}

fun EVP_DecodeBlock(t: CValuesRef<UByteVar>?, f: CValuesRef<UByteVar>?, n: Int): Int {
    memScoped {
        return kniBridge1754(t?.getPointer(memScope).rawValue, f?.getPointer(memScope).rawValue, n)
    }
}

fun EVP_CIPHER_CTX_new(): CPointer<EVP_CIPHER_CTX>? {
    return interpretCPointer<EVP_CIPHER_CTX>(kniBridge1755())
}

fun EVP_CIPHER_CTX_reset(c: CValuesRef<EVP_CIPHER_CTX>?): Int {
    memScoped {
        return kniBridge1756(c?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_free(c: CValuesRef<EVP_CIPHER_CTX>?): Unit {
    memScoped {
        return kniBridge1757(c?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_set_key_length(x: CValuesRef<EVP_CIPHER_CTX>?, keylen: Int): Int {
    memScoped {
        return kniBridge1758(x?.getPointer(memScope).rawValue, keylen)
    }
}

fun EVP_CIPHER_CTX_set_padding(c: CValuesRef<EVP_CIPHER_CTX>?, pad: Int): Int {
    memScoped {
        return kniBridge1759(c?.getPointer(memScope).rawValue, pad)
    }
}

fun EVP_CIPHER_CTX_ctrl(ctx: CValuesRef<EVP_CIPHER_CTX>?, type: Int, arg: Int, ptr: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1760(ctx?.getPointer(memScope).rawValue, type, arg, ptr?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_CTX_rand_key(ctx: CValuesRef<EVP_CIPHER_CTX>?, key: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1761(ctx?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun BIO_f_md(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge1762())
}

fun BIO_f_base64(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge1763())
}

fun BIO_f_cipher(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge1764())
}

fun BIO_f_reliable(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge1765())
}

fun BIO_set_cipher(b: CValuesRef<BIO>?, c: CValuesRef<EVP_CIPHER>?, k: CValuesRef<UByteVar>?, i: CValuesRef<UByteVar>?, enc: Int): Int {
    memScoped {
        return kniBridge1766(b?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue, k?.getPointer(memScope).rawValue, i?.getPointer(memScope).rawValue, enc)
    }
}

fun EVP_md_null(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1767())
}

fun EVP_md4(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1768())
}

fun EVP_md5(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1769())
}

fun EVP_md5_sha1(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1770())
}

fun EVP_blake2b512(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1771())
}

fun EVP_blake2s256(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1772())
}

fun EVP_sha1(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1773())
}

fun EVP_sha224(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1774())
}

fun EVP_sha256(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1775())
}

fun EVP_sha384(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1776())
}

fun EVP_sha512(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1777())
}

fun EVP_ripemd160(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1778())
}

fun EVP_whirlpool(): CPointer<EVP_MD>? {
    return interpretCPointer<EVP_MD>(kniBridge1779())
}

fun EVP_enc_null(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1780())
}

fun EVP_des_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1781())
}

fun EVP_des_ede(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1782())
}

fun EVP_des_ede3(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1783())
}

fun EVP_des_ede_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1784())
}

fun EVP_des_ede3_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1785())
}

fun EVP_des_cfb64(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1786())
}

fun EVP_des_cfb1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1787())
}

fun EVP_des_cfb8(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1788())
}

fun EVP_des_ede_cfb64(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1789())
}

fun EVP_des_ede3_cfb64(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1790())
}

fun EVP_des_ede3_cfb1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1791())
}

fun EVP_des_ede3_cfb8(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1792())
}

fun EVP_des_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1793())
}

fun EVP_des_ede_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1794())
}

fun EVP_des_ede3_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1795())
}

fun EVP_des_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1796())
}

fun EVP_des_ede_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1797())
}

fun EVP_des_ede3_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1798())
}

fun EVP_desx_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1799())
}

fun EVP_des_ede3_wrap(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1800())
}

fun EVP_rc4(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1801())
}

fun EVP_rc4_40(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1802())
}

fun EVP_rc4_hmac_md5(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1803())
}

fun EVP_rc2_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1804())
}

fun EVP_rc2_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1805())
}

fun EVP_rc2_40_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1806())
}

fun EVP_rc2_64_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1807())
}

fun EVP_rc2_cfb64(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1808())
}

fun EVP_rc2_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1809())
}

fun EVP_bf_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1810())
}

fun EVP_bf_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1811())
}

fun EVP_bf_cfb64(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1812())
}

fun EVP_bf_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1813())
}

fun EVP_cast5_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1814())
}

fun EVP_cast5_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1815())
}

fun EVP_cast5_cfb64(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1816())
}

fun EVP_cast5_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1817())
}

fun EVP_aes_128_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1818())
}

fun EVP_aes_128_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1819())
}

fun EVP_aes_128_cfb1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1820())
}

fun EVP_aes_128_cfb8(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1821())
}

fun EVP_aes_128_cfb128(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1822())
}

fun EVP_aes_128_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1823())
}

fun EVP_aes_128_ctr(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1824())
}

fun EVP_aes_128_ccm(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1825())
}

fun EVP_aes_128_gcm(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1826())
}

fun EVP_aes_128_xts(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1827())
}

fun EVP_aes_128_wrap(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1828())
}

fun EVP_aes_128_wrap_pad(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1829())
}

fun EVP_aes_128_ocb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1830())
}

fun EVP_aes_192_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1831())
}

fun EVP_aes_192_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1832())
}

fun EVP_aes_192_cfb1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1833())
}

fun EVP_aes_192_cfb8(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1834())
}

fun EVP_aes_192_cfb128(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1835())
}

fun EVP_aes_192_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1836())
}

fun EVP_aes_192_ctr(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1837())
}

fun EVP_aes_192_ccm(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1838())
}

fun EVP_aes_192_gcm(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1839())
}

fun EVP_aes_192_wrap(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1840())
}

fun EVP_aes_192_wrap_pad(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1841())
}

fun EVP_aes_192_ocb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1842())
}

fun EVP_aes_256_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1843())
}

fun EVP_aes_256_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1844())
}

fun EVP_aes_256_cfb1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1845())
}

fun EVP_aes_256_cfb8(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1846())
}

fun EVP_aes_256_cfb128(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1847())
}

fun EVP_aes_256_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1848())
}

fun EVP_aes_256_ctr(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1849())
}

fun EVP_aes_256_ccm(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1850())
}

fun EVP_aes_256_gcm(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1851())
}

fun EVP_aes_256_xts(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1852())
}

fun EVP_aes_256_wrap(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1853())
}

fun EVP_aes_256_wrap_pad(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1854())
}

fun EVP_aes_256_ocb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1855())
}

fun EVP_aes_128_cbc_hmac_sha1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1856())
}

fun EVP_aes_256_cbc_hmac_sha1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1857())
}

fun EVP_aes_128_cbc_hmac_sha256(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1858())
}

fun EVP_aes_256_cbc_hmac_sha256(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1859())
}

fun EVP_camellia_128_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1860())
}

fun EVP_camellia_128_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1861())
}

fun EVP_camellia_128_cfb1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1862())
}

fun EVP_camellia_128_cfb8(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1863())
}

fun EVP_camellia_128_cfb128(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1864())
}

fun EVP_camellia_128_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1865())
}

fun EVP_camellia_128_ctr(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1866())
}

fun EVP_camellia_192_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1867())
}

fun EVP_camellia_192_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1868())
}

fun EVP_camellia_192_cfb1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1869())
}

fun EVP_camellia_192_cfb8(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1870())
}

fun EVP_camellia_192_cfb128(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1871())
}

fun EVP_camellia_192_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1872())
}

fun EVP_camellia_192_ctr(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1873())
}

fun EVP_camellia_256_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1874())
}

fun EVP_camellia_256_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1875())
}

fun EVP_camellia_256_cfb1(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1876())
}

fun EVP_camellia_256_cfb8(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1877())
}

fun EVP_camellia_256_cfb128(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1878())
}

fun EVP_camellia_256_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1879())
}

fun EVP_camellia_256_ctr(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1880())
}

fun EVP_chacha20(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1881())
}

fun EVP_chacha20_poly1305(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1882())
}

fun EVP_seed_ecb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1883())
}

fun EVP_seed_cbc(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1884())
}

fun EVP_seed_cfb128(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1885())
}

fun EVP_seed_ofb(): CPointer<EVP_CIPHER>? {
    return interpretCPointer<EVP_CIPHER>(kniBridge1886())
}

fun EVP_add_cipher(cipher: CValuesRef<EVP_CIPHER>?): Int {
    memScoped {
        return kniBridge1887(cipher?.getPointer(memScope).rawValue)
    }
}

fun EVP_add_digest(digest: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge1888(digest?.getPointer(memScope).rawValue)
    }
}

fun EVP_get_cipherbyname(name: String?): CPointer<EVP_CIPHER>? {
    memScoped {
        return interpretCPointer<EVP_CIPHER>(kniBridge1889(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun EVP_get_digestbyname(name: String?): CPointer<EVP_MD>? {
    memScoped {
        return interpretCPointer<EVP_MD>(kniBridge1890(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun EVP_CIPHER_do_all(fn: CPointer<CFunction<(CPointer<EVP_CIPHER>?, CPointer<ByteVar>?, CPointer<ByteVar>?, COpaquePointer?) -> Unit>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1891(fn.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_do_all_sorted(fn: CPointer<CFunction<(CPointer<EVP_CIPHER>?, CPointer<ByteVar>?, CPointer<ByteVar>?, COpaquePointer?) -> Unit>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1892(fn.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_do_all(fn: CPointer<CFunction<(CPointer<EVP_MD>?, CPointer<ByteVar>?, CPointer<ByteVar>?, COpaquePointer?) -> Unit>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1893(fn.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun EVP_MD_do_all_sorted(fn: CPointer<CFunction<(CPointer<EVP_MD>?, CPointer<ByteVar>?, CPointer<ByteVar>?, COpaquePointer?) -> Unit>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1894(fn.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_decrypt_old(dec_key: CValuesRef<UByteVar>?, enc_key: CValuesRef<UByteVar>?, enc_key_len: Int, private_key: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1895(dec_key?.getPointer(memScope).rawValue, enc_key?.getPointer(memScope).rawValue, enc_key_len, private_key?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_encrypt_old(enc_key: CValuesRef<UByteVar>?, key: CValuesRef<UByteVar>?, key_len: Int, pub_key: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1896(enc_key?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, key_len, pub_key?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_type(type: Int): Int {
    return kniBridge1897(type)
}

fun EVP_PKEY_id(pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1898(pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_base_id(pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1899(pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_bits(pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1900(pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_security_bits(pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1901(pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_size(pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1902(pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_set_type(pkey: CValuesRef<EVP_PKEY>?, type: Int): Int {
    memScoped {
        return kniBridge1903(pkey?.getPointer(memScope).rawValue, type)
    }
}

fun EVP_PKEY_set_type_str(pkey: CValuesRef<EVP_PKEY>?, str: String?, len: Int): Int {
    memScoped {
        return kniBridge1904(pkey?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun EVP_PKEY_set1_engine(pkey: CValuesRef<EVP_PKEY>?, e: CValuesRef<ENGINE>?): Int {
    memScoped {
        return kniBridge1905(pkey?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_assign(pkey: CValuesRef<EVP_PKEY>?, type: Int, key: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1906(pkey?.getPointer(memScope).rawValue, type, key?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_get0(pkey: CValuesRef<EVP_PKEY>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1907(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_get0_hmac(pkey: CValuesRef<EVP_PKEY>?, len: CValuesRef<size_tVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge1908(pkey?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_set1_RSA(pkey: CValuesRef<EVP_PKEY>?, key: CValuesRef<rsa_st>?): Int {
    memScoped {
        return kniBridge1909(pkey?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_get0_RSA(pkey: CValuesRef<EVP_PKEY>?): CPointer<rsa_st>? {
    memScoped {
        return interpretCPointer<rsa_st>(kniBridge1910(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_get1_RSA(pkey: CValuesRef<EVP_PKEY>?): CPointer<rsa_st>? {
    memScoped {
        return interpretCPointer<rsa_st>(kniBridge1911(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_set1_DSA(pkey: CValuesRef<EVP_PKEY>?, key: CValuesRef<dsa_st>?): Int {
    memScoped {
        return kniBridge1912(pkey?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_get0_DSA(pkey: CValuesRef<EVP_PKEY>?): CPointer<dsa_st>? {
    memScoped {
        return interpretCPointer<dsa_st>(kniBridge1913(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_get1_DSA(pkey: CValuesRef<EVP_PKEY>?): CPointer<dsa_st>? {
    memScoped {
        return interpretCPointer<dsa_st>(kniBridge1914(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_set1_DH(pkey: CValuesRef<EVP_PKEY>?, key: CValuesRef<dh_st>?): Int {
    memScoped {
        return kniBridge1915(pkey?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_get0_DH(pkey: CValuesRef<EVP_PKEY>?): CPointer<dh_st>? {
    memScoped {
        return interpretCPointer<dh_st>(kniBridge1916(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_get1_DH(pkey: CValuesRef<EVP_PKEY>?): CPointer<dh_st>? {
    memScoped {
        return interpretCPointer<dh_st>(kniBridge1917(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_set1_EC_KEY(pkey: CValuesRef<EVP_PKEY>?, key: CValuesRef<ec_key_st>?): Int {
    memScoped {
        return kniBridge1918(pkey?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_get0_EC_KEY(pkey: CValuesRef<EVP_PKEY>?): CPointer<ec_key_st>? {
    memScoped {
        return interpretCPointer<ec_key_st>(kniBridge1919(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_get1_EC_KEY(pkey: CValuesRef<EVP_PKEY>?): CPointer<ec_key_st>? {
    memScoped {
        return interpretCPointer<ec_key_st>(kniBridge1920(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_new(): CPointer<EVP_PKEY>? {
    return interpretCPointer<EVP_PKEY>(kniBridge1921())
}

fun EVP_PKEY_up_ref(pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1922(pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_free(pkey: CValuesRef<EVP_PKEY>?): Unit {
    memScoped {
        return kniBridge1923(pkey?.getPointer(memScope).rawValue)
    }
}

fun d2i_PublicKey(type: Int, a: CValuesRef<CPointerVar<EVP_PKEY>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge1924(type, a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun i2d_PublicKey(a: CValuesRef<EVP_PKEY>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1925(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_PrivateKey(type: Int, a: CValuesRef<CPointerVar<EVP_PKEY>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge1926(type, a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun d2i_AutoPrivateKey(a: CValuesRef<CPointerVar<EVP_PKEY>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge1927(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun i2d_PrivateKey(a: CValuesRef<EVP_PKEY>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge1928(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_copy_parameters(to: CValuesRef<EVP_PKEY>?, from: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1929(to?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_missing_parameters(pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1930(pkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_save_parameters(pkey: CValuesRef<EVP_PKEY>?, mode: Int): Int {
    memScoped {
        return kniBridge1931(pkey?.getPointer(memScope).rawValue, mode)
    }
}

fun EVP_PKEY_cmp_parameters(a: CValuesRef<EVP_PKEY>?, b: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1932(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_cmp(a: CValuesRef<EVP_PKEY>?, b: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge1933(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_print_public(out: CValuesRef<BIO>?, pkey: CValuesRef<EVP_PKEY>?, indent: Int, pctx: CValuesRef<ASN1_PCTX>?): Int {
    memScoped {
        return kniBridge1934(out?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, indent, pctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_print_private(out: CValuesRef<BIO>?, pkey: CValuesRef<EVP_PKEY>?, indent: Int, pctx: CValuesRef<ASN1_PCTX>?): Int {
    memScoped {
        return kniBridge1935(out?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, indent, pctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_print_params(out: CValuesRef<BIO>?, pkey: CValuesRef<EVP_PKEY>?, indent: Int, pctx: CValuesRef<ASN1_PCTX>?): Int {
    memScoped {
        return kniBridge1936(out?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, indent, pctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_get_default_digest_nid(pkey: CValuesRef<EVP_PKEY>?, pnid: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge1937(pkey?.getPointer(memScope).rawValue, pnid?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_set1_tls_encodedpoint(pkey: CValuesRef<EVP_PKEY>?, pt: CValuesRef<UByteVar>?, ptlen: size_t): Int {
    memScoped {
        return kniBridge1938(pkey?.getPointer(memScope).rawValue, pt?.getPointer(memScope).rawValue, ptlen)
    }
}

fun EVP_PKEY_get1_tls_encodedpoint(pkey: CValuesRef<EVP_PKEY>?, ppt: CValuesRef<CPointerVar<UByteVar>>?): size_t {
    memScoped {
        return kniBridge1939(pkey?.getPointer(memScope).rawValue, ppt?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_type(ctx: CValuesRef<EVP_CIPHER>?): Int {
    memScoped {
        return kniBridge1940(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_param_to_asn1(c: CValuesRef<EVP_CIPHER_CTX>?, type: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1941(c?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_asn1_to_param(c: CValuesRef<EVP_CIPHER_CTX>?, type: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1942(c?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_set_asn1_iv(c: CValuesRef<EVP_CIPHER_CTX>?, type: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1943(c?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun EVP_CIPHER_get_asn1_iv(c: CValuesRef<EVP_CIPHER_CTX>?, type: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge1944(c?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun PKCS5_PBE_keyivgen(ctx: CValuesRef<EVP_CIPHER_CTX>?, pass: String?, passlen: Int, param: CValuesRef<ASN1_TYPE>?, cipher: CValuesRef<EVP_CIPHER>?, md: CValuesRef<EVP_MD>?, en_de: Int): Int {
    memScoped {
        return kniBridge1945(ctx?.getPointer(memScope).rawValue, pass?.cstr?.getPointer(memScope).rawValue, passlen, param?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, en_de)
    }
}

fun PKCS5_PBKDF2_HMAC_SHA1(pass: String?, passlen: Int, salt: CValuesRef<UByteVar>?, saltlen: Int, iter: Int, keylen: Int, out: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1946(pass?.cstr?.getPointer(memScope).rawValue, passlen, salt?.getPointer(memScope).rawValue, saltlen, iter, keylen, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS5_PBKDF2_HMAC(pass: String?, passlen: Int, salt: CValuesRef<UByteVar>?, saltlen: Int, iter: Int, digest: CValuesRef<EVP_MD>?, keylen: Int, out: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge1947(pass?.cstr?.getPointer(memScope).rawValue, passlen, salt?.getPointer(memScope).rawValue, saltlen, iter, digest?.getPointer(memScope).rawValue, keylen, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS5_v2_PBE_keyivgen(ctx: CValuesRef<EVP_CIPHER_CTX>?, pass: String?, passlen: Int, param: CValuesRef<ASN1_TYPE>?, cipher: CValuesRef<EVP_CIPHER>?, md: CValuesRef<EVP_MD>?, en_de: Int): Int {
    memScoped {
        return kniBridge1948(ctx?.getPointer(memScope).rawValue, pass?.cstr?.getPointer(memScope).rawValue, passlen, param?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, en_de)
    }
}

fun EVP_PBE_scrypt(pass: String?, passlen: size_t, salt: CValuesRef<UByteVar>?, saltlen: size_t, N: uint64_t, r: uint64_t, p: uint64_t, maxmem: uint64_t, key: CValuesRef<UByteVar>?, keylen: size_t): Int {
    memScoped {
        return kniBridge1949(pass?.cstr?.getPointer(memScope).rawValue, passlen, salt?.getPointer(memScope).rawValue, saltlen, N, r, p, maxmem, key?.getPointer(memScope).rawValue, keylen)
    }
}

fun PKCS5_v2_scrypt_keyivgen(ctx: CValuesRef<EVP_CIPHER_CTX>?, pass: String?, passlen: Int, param: CValuesRef<ASN1_TYPE>?, c: CValuesRef<EVP_CIPHER>?, md: CValuesRef<EVP_MD>?, en_de: Int): Int {
    memScoped {
        return kniBridge1950(ctx?.getPointer(memScope).rawValue, pass?.cstr?.getPointer(memScope).rawValue, passlen, param?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, en_de)
    }
}

fun PKCS5_PBE_add(): Unit {
    return kniBridge1951()
}

fun EVP_PBE_CipherInit(pbe_obj: CValuesRef<ASN1_OBJECT>?, pass: String?, passlen: Int, param: CValuesRef<ASN1_TYPE>?, ctx: CValuesRef<EVP_CIPHER_CTX>?, en_de: Int): Int {
    memScoped {
        return kniBridge1952(pbe_obj?.getPointer(memScope).rawValue, pass?.cstr?.getPointer(memScope).rawValue, passlen, param?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, en_de)
    }
}

fun EVP_PBE_alg_add_type(pbe_type: Int, pbe_nid: Int, cipher_nid: Int, md_nid: Int, keygen: CPointer<EVP_PBE_KEYGEN>?): Int {
    return kniBridge1953(pbe_type, pbe_nid, cipher_nid, md_nid, keygen.rawValue)
}

fun EVP_PBE_alg_add(nid: Int, cipher: CValuesRef<EVP_CIPHER>?, md: CValuesRef<EVP_MD>?, keygen: CPointer<EVP_PBE_KEYGEN>?): Int {
    memScoped {
        return kniBridge1954(nid, cipher?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, keygen.rawValue)
    }
}

fun EVP_PBE_find(type: Int, pbe_nid: Int, pcnid: CValuesRef<IntVar>?, pmnid: CValuesRef<IntVar>?, pkeygen: CValuesRef<CPointerVar<EVP_PBE_KEYGEN>>?): Int {
    memScoped {
        return kniBridge1955(type, pbe_nid, pcnid?.getPointer(memScope).rawValue, pmnid?.getPointer(memScope).rawValue, pkeygen?.getPointer(memScope).rawValue)
    }
}

fun EVP_PBE_cleanup(): Unit {
    return kniBridge1956()
}

fun EVP_PBE_get(ptype: CValuesRef<IntVar>?, ppbe_nid: CValuesRef<IntVar>?, num: size_t): Int {
    memScoped {
        return kniBridge1957(ptype?.getPointer(memScope).rawValue, ppbe_nid?.getPointer(memScope).rawValue, num)
    }
}

fun EVP_PKEY_asn1_get_count(): Int {
    return kniBridge1958()
}

fun EVP_PKEY_asn1_get0(idx: Int): CPointer<EVP_PKEY_ASN1_METHOD>? {
    return interpretCPointer<EVP_PKEY_ASN1_METHOD>(kniBridge1959(idx))
}

fun EVP_PKEY_asn1_find(pe: CValuesRef<CPointerVar<ENGINE>>?, type: Int): CPointer<EVP_PKEY_ASN1_METHOD>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_ASN1_METHOD>(kniBridge1960(pe?.getPointer(memScope).rawValue, type))
    }
}

fun EVP_PKEY_asn1_find_str(pe: CValuesRef<CPointerVar<ENGINE>>?, str: String?, len: Int): CPointer<EVP_PKEY_ASN1_METHOD>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_ASN1_METHOD>(kniBridge1961(pe?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun EVP_PKEY_asn1_add0(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?): Int {
    memScoped {
        return kniBridge1962(ameth?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_asn1_add_alias(to: Int, from: Int): Int {
    return kniBridge1963(to, from)
}

fun EVP_PKEY_asn1_get0_info(ppkey_id: CValuesRef<IntVar>?, pkey_base_id: CValuesRef<IntVar>?, ppkey_flags: CValuesRef<IntVar>?, pinfo: CValuesRef<CPointerVar<ByteVar>>?, ppem_str: CValuesRef<CPointerVar<ByteVar>>?, ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?): Int {
    memScoped {
        return kniBridge1964(ppkey_id?.getPointer(memScope).rawValue, pkey_base_id?.getPointer(memScope).rawValue, ppkey_flags?.getPointer(memScope).rawValue, pinfo?.getPointer(memScope).rawValue, ppem_str?.getPointer(memScope).rawValue, ameth?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_get0_asn1(pkey: CValuesRef<EVP_PKEY>?): CPointer<EVP_PKEY_ASN1_METHOD>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_ASN1_METHOD>(kniBridge1965(pkey?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_asn1_new(id: Int, flags: Int, pem_str: String?, info: String?): CPointer<EVP_PKEY_ASN1_METHOD>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_ASN1_METHOD>(kniBridge1966(id, flags, pem_str?.cstr?.getPointer(memScope).rawValue, info?.cstr?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_asn1_copy(dst: CValuesRef<EVP_PKEY_ASN1_METHOD>?, src: CValuesRef<EVP_PKEY_ASN1_METHOD>?): Unit {
    memScoped {
        return kniBridge1967(dst?.getPointer(memScope).rawValue, src?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_asn1_free(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?): Unit {
    memScoped {
        return kniBridge1968(ameth?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_asn1_set_public(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?, pub_decode: CPointer<CFunction<(CPointer<EVP_PKEY>?, CPointer<X509_PUBKEY>?) -> Int>>?, pub_encode: CPointer<CFunction<(CPointer<X509_PUBKEY>?, CPointer<EVP_PKEY>?) -> Int>>?, pub_cmp: CPointer<CFunction<(CPointer<EVP_PKEY>?, CPointer<EVP_PKEY>?) -> Int>>?, pub_print: CPointer<CFunction<(CPointer<BIO>?, CPointer<EVP_PKEY>?, Int, CPointer<ASN1_PCTX>?) -> Int>>?, pkey_size: CPointer<CFunction<(CPointer<EVP_PKEY>?) -> Int>>?, pkey_bits: CPointer<CFunction<(CPointer<EVP_PKEY>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge1969(ameth?.getPointer(memScope).rawValue, pub_decode.rawValue, pub_encode.rawValue, pub_cmp.rawValue, pub_print.rawValue, pkey_size.rawValue, pkey_bits.rawValue)
    }
}

fun EVP_PKEY_asn1_set_private(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?, priv_decode: CPointer<CFunction<(CPointer<EVP_PKEY>?, CPointer<PKCS8_PRIV_KEY_INFO>?) -> Int>>?, priv_encode: CPointer<CFunction<(CPointer<PKCS8_PRIV_KEY_INFO>?, CPointer<EVP_PKEY>?) -> Int>>?, priv_print: CPointer<CFunction<(CPointer<BIO>?, CPointer<EVP_PKEY>?, Int, CPointer<ASN1_PCTX>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge1970(ameth?.getPointer(memScope).rawValue, priv_decode.rawValue, priv_encode.rawValue, priv_print.rawValue)
    }
}

fun EVP_PKEY_asn1_set_param(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?, param_decode: CPointer<CFunction<(CPointer<EVP_PKEY>?, CPointer<CPointerVar<UByteVar>>?, Int) -> Int>>?, param_encode: CPointer<CFunction<(CPointer<EVP_PKEY>?, CPointer<CPointerVar<UByteVar>>?) -> Int>>?, param_missing: CPointer<CFunction<(CPointer<EVP_PKEY>?) -> Int>>?, param_copy: CPointer<CFunction<(CPointer<EVP_PKEY>?, CPointer<EVP_PKEY>?) -> Int>>?, param_cmp: CPointer<CFunction<(CPointer<EVP_PKEY>?, CPointer<EVP_PKEY>?) -> Int>>?, param_print: CPointer<CFunction<(CPointer<BIO>?, CPointer<EVP_PKEY>?, Int, CPointer<ASN1_PCTX>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge1971(ameth?.getPointer(memScope).rawValue, param_decode.rawValue, param_encode.rawValue, param_missing.rawValue, param_copy.rawValue, param_cmp.rawValue, param_print.rawValue)
    }
}

fun EVP_PKEY_asn1_set_free(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?, pkey_free: CPointer<CFunction<(CPointer<EVP_PKEY>?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge1972(ameth?.getPointer(memScope).rawValue, pkey_free.rawValue)
    }
}

fun EVP_PKEY_asn1_set_ctrl(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?, pkey_ctrl: CPointer<CFunction<(CPointer<EVP_PKEY>?, Int, Long, COpaquePointer?) -> Int>>?): Unit {
    memScoped {
        return kniBridge1973(ameth?.getPointer(memScope).rawValue, pkey_ctrl.rawValue)
    }
}

fun EVP_PKEY_asn1_set_item(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?, item_verify: CPointer<CFunction<(CPointer<EVP_MD_CTX>?, CPointer<ASN1_ITEM>?, COpaquePointer?, CPointer<X509_ALGOR>?, CPointer<ASN1_BIT_STRING>?, CPointer<EVP_PKEY>?) -> Int>>?, item_sign: CPointer<CFunction<(CPointer<EVP_MD_CTX>?, CPointer<ASN1_ITEM>?, COpaquePointer?, CPointer<X509_ALGOR>?, CPointer<X509_ALGOR>?, CPointer<ASN1_BIT_STRING>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge1974(ameth?.getPointer(memScope).rawValue, item_verify.rawValue, item_sign.rawValue)
    }
}

fun EVP_PKEY_asn1_set_security_bits(ameth: CValuesRef<EVP_PKEY_ASN1_METHOD>?, pkey_security_bits: CPointer<CFunction<(CPointer<EVP_PKEY>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge1975(ameth?.getPointer(memScope).rawValue, pkey_security_bits.rawValue)
    }
}

fun EVP_PKEY_meth_find(type: Int): CPointer<EVP_PKEY_METHOD>? {
    return interpretCPointer<EVP_PKEY_METHOD>(kniBridge1976(type))
}

fun EVP_PKEY_meth_new(id: Int, flags: Int): CPointer<EVP_PKEY_METHOD>? {
    return interpretCPointer<EVP_PKEY_METHOD>(kniBridge1977(id, flags))
}

fun EVP_PKEY_meth_get0_info(ppkey_id: CValuesRef<IntVar>?, pflags: CValuesRef<IntVar>?, meth: CValuesRef<EVP_PKEY_METHOD>?): Unit {
    memScoped {
        return kniBridge1978(ppkey_id?.getPointer(memScope).rawValue, pflags?.getPointer(memScope).rawValue, meth?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_copy(dst: CValuesRef<EVP_PKEY_METHOD>?, src: CValuesRef<EVP_PKEY_METHOD>?): Unit {
    memScoped {
        return kniBridge1979(dst?.getPointer(memScope).rawValue, src?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_free(pmeth: CValuesRef<EVP_PKEY_METHOD>?): Unit {
    memScoped {
        return kniBridge1980(pmeth?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_add0(pmeth: CValuesRef<EVP_PKEY_METHOD>?): Int {
    memScoped {
        return kniBridge1981(pmeth?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_new(pkey: CValuesRef<EVP_PKEY>?, e: CValuesRef<ENGINE>?): CPointer<EVP_PKEY_CTX>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_CTX>(kniBridge1982(pkey?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_CTX_new_id(id: Int, e: CValuesRef<ENGINE>?): CPointer<EVP_PKEY_CTX>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_CTX>(kniBridge1983(id, e?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_CTX_dup(ctx: CValuesRef<EVP_PKEY_CTX>?): CPointer<EVP_PKEY_CTX>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_CTX>(kniBridge1984(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_CTX_free(ctx: CValuesRef<EVP_PKEY_CTX>?): Unit {
    memScoped {
        return kniBridge1985(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_ctrl(ctx: CValuesRef<EVP_PKEY_CTX>?, keytype: Int, optype: Int, cmd: Int, p1: Int, p2: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge1986(ctx?.getPointer(memScope).rawValue, keytype, optype, cmd, p1, p2?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_ctrl_str(ctx: CValuesRef<EVP_PKEY_CTX>?, type: String?, value: String?): Int {
    memScoped {
        return kniBridge1987(ctx?.getPointer(memScope).rawValue, type?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_str2ctrl(ctx: CValuesRef<EVP_PKEY_CTX>?, cmd: Int, str: String?): Int {
    memScoped {
        return kniBridge1988(ctx?.getPointer(memScope).rawValue, cmd, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_hex2ctrl(ctx: CValuesRef<EVP_PKEY_CTX>?, cmd: Int, hex: String?): Int {
    memScoped {
        return kniBridge1989(ctx?.getPointer(memScope).rawValue, cmd, hex?.cstr?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_get_operation(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge1990(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_set0_keygen_info(ctx: CValuesRef<EVP_PKEY_CTX>?, dat: CValuesRef<IntVar>?, datlen: Int): Unit {
    memScoped {
        return kniBridge1991(ctx?.getPointer(memScope).rawValue, dat?.getPointer(memScope).rawValue, datlen)
    }
}

fun EVP_PKEY_new_mac_key(type: Int, e: CValuesRef<ENGINE>?, key: CValuesRef<UByteVar>?, keylen: Int): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge1992(type, e?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, keylen))
    }
}

fun EVP_PKEY_CTX_set_data(ctx: CValuesRef<EVP_PKEY_CTX>?, data: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1993(ctx?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_get_data(ctx: CValuesRef<EVP_PKEY_CTX>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1994(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_CTX_get0_pkey(ctx: CValuesRef<EVP_PKEY_CTX>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge1995(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_CTX_get0_peerkey(ctx: CValuesRef<EVP_PKEY_CTX>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge1996(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_CTX_set_app_data(ctx: CValuesRef<EVP_PKEY_CTX>?, data: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge1997(ctx?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_get_app_data(ctx: CValuesRef<EVP_PKEY_CTX>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge1998(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_sign_init(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge1999(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_sign(ctx: CValuesRef<EVP_PKEY_CTX>?, sig: CValuesRef<UByteVar>?, siglen: CValuesRef<size_tVar>?, tbs: CValuesRef<UByteVar>?, tbslen: size_t): Int {
    memScoped {
        return kniBridge2000(ctx?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue, siglen?.getPointer(memScope).rawValue, tbs?.getPointer(memScope).rawValue, tbslen)
    }
}

fun EVP_PKEY_verify_init(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge2001(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_verify(ctx: CValuesRef<EVP_PKEY_CTX>?, sig: CValuesRef<UByteVar>?, siglen: size_t, tbs: CValuesRef<UByteVar>?, tbslen: size_t): Int {
    memScoped {
        return kniBridge2002(ctx?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue, siglen, tbs?.getPointer(memScope).rawValue, tbslen)
    }
}

fun EVP_PKEY_verify_recover_init(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge2003(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_verify_recover(ctx: CValuesRef<EVP_PKEY_CTX>?, rout: CValuesRef<UByteVar>?, routlen: CValuesRef<size_tVar>?, sig: CValuesRef<UByteVar>?, siglen: size_t): Int {
    memScoped {
        return kniBridge2004(ctx?.getPointer(memScope).rawValue, rout?.getPointer(memScope).rawValue, routlen?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue, siglen)
    }
}

fun EVP_PKEY_encrypt_init(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge2005(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_encrypt(ctx: CValuesRef<EVP_PKEY_CTX>?, out: CValuesRef<UByteVar>?, outlen: CValuesRef<size_tVar>?, `in`: CValuesRef<UByteVar>?, inlen: size_t): Int {
    memScoped {
        return kniBridge2006(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outlen?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inlen)
    }
}

fun EVP_PKEY_decrypt_init(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge2007(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_decrypt(ctx: CValuesRef<EVP_PKEY_CTX>?, out: CValuesRef<UByteVar>?, outlen: CValuesRef<size_tVar>?, `in`: CValuesRef<UByteVar>?, inlen: size_t): Int {
    memScoped {
        return kniBridge2008(ctx?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outlen?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inlen)
    }
}

fun EVP_PKEY_derive_init(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge2009(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_derive_set_peer(ctx: CValuesRef<EVP_PKEY_CTX>?, peer: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge2010(ctx?.getPointer(memScope).rawValue, peer?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_derive(ctx: CValuesRef<EVP_PKEY_CTX>?, key: CValuesRef<UByteVar>?, keylen: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge2011(ctx?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, keylen?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_paramgen_init(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge2012(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_paramgen(ctx: CValuesRef<EVP_PKEY_CTX>?, ppkey: CValuesRef<CPointerVar<EVP_PKEY>>?): Int {
    memScoped {
        return kniBridge2013(ctx?.getPointer(memScope).rawValue, ppkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_keygen_init(ctx: CValuesRef<EVP_PKEY_CTX>?): Int {
    memScoped {
        return kniBridge2014(ctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_keygen(ctx: CValuesRef<EVP_PKEY_CTX>?, ppkey: CValuesRef<CPointerVar<EVP_PKEY>>?): Int {
    memScoped {
        return kniBridge2015(ctx?.getPointer(memScope).rawValue, ppkey?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_CTX_set_cb(ctx: CValuesRef<EVP_PKEY_CTX>?, cb: CPointer<EVP_PKEY_gen_cb>?): Unit {
    memScoped {
        return kniBridge2016(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun EVP_PKEY_CTX_get_cb(ctx: CValuesRef<EVP_PKEY_CTX>?): CPointer<EVP_PKEY_gen_cb>? {
    memScoped {
        return interpretCPointer<EVP_PKEY_gen_cb>(kniBridge2017(ctx?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY_CTX_get_keygen_info(ctx: CValuesRef<EVP_PKEY_CTX>?, idx: Int): Int {
    memScoped {
        return kniBridge2018(ctx?.getPointer(memScope).rawValue, idx)
    }
}

fun EVP_PKEY_meth_set_init(pmeth: CValuesRef<EVP_PKEY_METHOD>?, init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2019(pmeth?.getPointer(memScope).rawValue, init.rawValue)
    }
}

fun EVP_PKEY_meth_set_copy(pmeth: CValuesRef<EVP_PKEY_METHOD>?, copy: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_PKEY_CTX>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2020(pmeth?.getPointer(memScope).rawValue, copy.rawValue)
    }
}

fun EVP_PKEY_meth_set_cleanup(pmeth: CValuesRef<EVP_PKEY_METHOD>?, cleanup: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge2021(pmeth?.getPointer(memScope).rawValue, cleanup.rawValue)
    }
}

fun EVP_PKEY_meth_set_paramgen(pmeth: CValuesRef<EVP_PKEY_METHOD>?, paramgen_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?, paramgen: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_PKEY>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2022(pmeth?.getPointer(memScope).rawValue, paramgen_init.rawValue, paramgen.rawValue)
    }
}

fun EVP_PKEY_meth_set_keygen(pmeth: CValuesRef<EVP_PKEY_METHOD>?, keygen_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?, keygen: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_PKEY>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2023(pmeth?.getPointer(memScope).rawValue, keygen_init.rawValue, keygen.rawValue)
    }
}

fun EVP_PKEY_meth_set_sign(pmeth: CValuesRef<EVP_PKEY_METHOD>?, sign_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?, sign: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<UByteVar>?, size_t) -> Int>>?): Unit {
    memScoped {
        return kniBridge2024(pmeth?.getPointer(memScope).rawValue, sign_init.rawValue, sign.rawValue)
    }
}

fun EVP_PKEY_meth_set_verify(pmeth: CValuesRef<EVP_PKEY_METHOD>?, verify_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?, verify: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, size_t, CPointer<UByteVar>?, size_t) -> Int>>?): Unit {
    memScoped {
        return kniBridge2025(pmeth?.getPointer(memScope).rawValue, verify_init.rawValue, verify.rawValue)
    }
}

fun EVP_PKEY_meth_set_verify_recover(pmeth: CValuesRef<EVP_PKEY_METHOD>?, verify_recover_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?, verify_recover: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<UByteVar>?, size_t) -> Int>>?): Unit {
    memScoped {
        return kniBridge2026(pmeth?.getPointer(memScope).rawValue, verify_recover_init.rawValue, verify_recover.rawValue)
    }
}

fun EVP_PKEY_meth_set_signctx(pmeth: CValuesRef<EVP_PKEY_METHOD>?, signctx_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_MD_CTX>?) -> Int>>?, signctx: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<EVP_MD_CTX>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2027(pmeth?.getPointer(memScope).rawValue, signctx_init.rawValue, signctx.rawValue)
    }
}

fun EVP_PKEY_meth_set_verifyctx(pmeth: CValuesRef<EVP_PKEY_METHOD>?, verifyctx_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_MD_CTX>?) -> Int>>?, verifyctx: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, Int, CPointer<EVP_MD_CTX>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2028(pmeth?.getPointer(memScope).rawValue, verifyctx_init.rawValue, verifyctx.rawValue)
    }
}

fun EVP_PKEY_meth_set_encrypt(pmeth: CValuesRef<EVP_PKEY_METHOD>?, encrypt_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?, encryptfn: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<UByteVar>?, size_t) -> Int>>?): Unit {
    memScoped {
        return kniBridge2029(pmeth?.getPointer(memScope).rawValue, encrypt_init.rawValue, encryptfn.rawValue)
    }
}

fun EVP_PKEY_meth_set_decrypt(pmeth: CValuesRef<EVP_PKEY_METHOD>?, decrypt_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?, decrypt: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<UByteVar>?, size_t) -> Int>>?): Unit {
    memScoped {
        return kniBridge2030(pmeth?.getPointer(memScope).rawValue, decrypt_init.rawValue, decrypt.rawValue)
    }
}

fun EVP_PKEY_meth_set_derive(pmeth: CValuesRef<EVP_PKEY_METHOD>?, derive_init: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>?, derive: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2031(pmeth?.getPointer(memScope).rawValue, derive_init.rawValue, derive.rawValue)
    }
}

fun EVP_PKEY_meth_set_ctrl(pmeth: CValuesRef<EVP_PKEY_METHOD>?, ctrl: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, Int, Int, COpaquePointer?) -> Int>>?, ctrl_str: CPointer<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<ByteVar>?, CPointer<ByteVar>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2032(pmeth?.getPointer(memScope).rawValue, ctrl.rawValue, ctrl_str.rawValue)
    }
}

fun EVP_PKEY_meth_get_init(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pinit: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2033(pmeth?.getPointer(memScope).rawValue, pinit?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_copy(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pcopy: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_PKEY_CTX>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2034(pmeth?.getPointer(memScope).rawValue, pcopy?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_cleanup(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pcleanup: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Unit>>>?): Unit {
    memScoped {
        return kniBridge2035(pmeth?.getPointer(memScope).rawValue, pcleanup?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_paramgen(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pparamgen_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?, pparamgen: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_PKEY>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2036(pmeth?.getPointer(memScope).rawValue, pparamgen_init?.getPointer(memScope).rawValue, pparamgen?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_keygen(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pkeygen_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?, pkeygen: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_PKEY>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2037(pmeth?.getPointer(memScope).rawValue, pkeygen_init?.getPointer(memScope).rawValue, pkeygen?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_sign(pmeth: CValuesRef<EVP_PKEY_METHOD>?, psign_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?, psign: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<UByteVar>?, size_t) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2038(pmeth?.getPointer(memScope).rawValue, psign_init?.getPointer(memScope).rawValue, psign?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_verify(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pverify_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?, pverify: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, size_t, CPointer<UByteVar>?, size_t) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2039(pmeth?.getPointer(memScope).rawValue, pverify_init?.getPointer(memScope).rawValue, pverify?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_verify_recover(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pverify_recover_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?, pverify_recover: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<UByteVar>?, size_t) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2040(pmeth?.getPointer(memScope).rawValue, pverify_recover_init?.getPointer(memScope).rawValue, pverify_recover?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_signctx(pmeth: CValuesRef<EVP_PKEY_METHOD>?, psignctx_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_MD_CTX>?) -> Int>>>?, psignctx: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<EVP_MD_CTX>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2041(pmeth?.getPointer(memScope).rawValue, psignctx_init?.getPointer(memScope).rawValue, psignctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_verifyctx(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pverifyctx_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<EVP_MD_CTX>?) -> Int>>>?, pverifyctx: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, Int, CPointer<EVP_MD_CTX>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2042(pmeth?.getPointer(memScope).rawValue, pverifyctx_init?.getPointer(memScope).rawValue, pverifyctx?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_encrypt(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pencrypt_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?, pencryptfn: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<UByteVar>?, size_t) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2043(pmeth?.getPointer(memScope).rawValue, pencrypt_init?.getPointer(memScope).rawValue, pencryptfn?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_decrypt(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pdecrypt_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?, pdecrypt: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?, CPointer<UByteVar>?, size_t) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2044(pmeth?.getPointer(memScope).rawValue, pdecrypt_init?.getPointer(memScope).rawValue, pdecrypt?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_derive(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pderive_init: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>>>?, pderive: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<UByteVar>?, CPointer<size_tVar>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2045(pmeth?.getPointer(memScope).rawValue, pderive_init?.getPointer(memScope).rawValue, pderive?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_meth_get_ctrl(pmeth: CValuesRef<EVP_PKEY_METHOD>?, pctrl: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, Int, Int, COpaquePointer?) -> Int>>>?, pctrl_str: CValuesRef<CPointerVar<CFunction<(CPointer<EVP_PKEY_CTX>?, CPointer<ByteVar>?, CPointer<ByteVar>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2046(pmeth?.getPointer(memScope).rawValue, pctrl?.getPointer(memScope).rawValue, pctrl_str?.getPointer(memScope).rawValue)
    }
}

fun EVP_add_alg_module(): Unit {
    return kniBridge2047()
}

fun ERR_load_EVP_strings(): Int {
    return kniBridge2048()
}

fun EC_GFp_simple_method(): CPointer<EC_METHOD>? {
    return interpretCPointer<EC_METHOD>(kniBridge2049())
}

fun EC_GFp_mont_method(): CPointer<EC_METHOD>? {
    return interpretCPointer<EC_METHOD>(kniBridge2050())
}

fun EC_GFp_nist_method(): CPointer<EC_METHOD>? {
    return interpretCPointer<EC_METHOD>(kniBridge2051())
}

fun EC_GFp_nistp224_method(): CPointer<EC_METHOD>? {
    return interpretCPointer<EC_METHOD>(kniBridge2052())
}

fun EC_GFp_nistp256_method(): CPointer<EC_METHOD>? {
    return interpretCPointer<EC_METHOD>(kniBridge2053())
}

fun EC_GFp_nistp521_method(): CPointer<EC_METHOD>? {
    return interpretCPointer<EC_METHOD>(kniBridge2054())
}

fun EC_GF2m_simple_method(): CPointer<EC_METHOD>? {
    return interpretCPointer<EC_METHOD>(kniBridge2055())
}

fun EC_GROUP_new(meth: CValuesRef<EC_METHOD>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge2056(meth?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_free(group: CValuesRef<EC_GROUP>?): Unit {
    memScoped {
        return kniBridge2057(group?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_clear_free(group: CValuesRef<EC_GROUP>?): Unit {
    memScoped {
        return kniBridge2058(group?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_copy(dst: CValuesRef<EC_GROUP>?, src: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge2059(dst?.getPointer(memScope).rawValue, src?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_dup(src: CValuesRef<EC_GROUP>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge2060(src?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_method_of(group: CValuesRef<EC_GROUP>?): CPointer<EC_METHOD>? {
    memScoped {
        return interpretCPointer<EC_METHOD>(kniBridge2061(group?.getPointer(memScope).rawValue))
    }
}

fun EC_METHOD_get_field_type(meth: CValuesRef<EC_METHOD>?): Int {
    memScoped {
        return kniBridge2062(meth?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_set_generator(group: CValuesRef<EC_GROUP>?, generator: CValuesRef<EC_POINT>?, order: CValuesRef<BIGNUM>?, cofactor: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2063(group?.getPointer(memScope).rawValue, generator?.getPointer(memScope).rawValue, order?.getPointer(memScope).rawValue, cofactor?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get0_generator(group: CValuesRef<EC_GROUP>?): CPointer<EC_POINT>? {
    memScoped {
        return interpretCPointer<EC_POINT>(kniBridge2064(group?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_get_mont_data(group: CValuesRef<EC_GROUP>?): CPointer<BN_MONT_CTX>? {
    memScoped {
        return interpretCPointer<BN_MONT_CTX>(kniBridge2065(group?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_get_order(group: CValuesRef<EC_GROUP>?, order: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2066(group?.getPointer(memScope).rawValue, order?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get0_order(group: CValuesRef<EC_GROUP>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge2067(group?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_order_bits(group: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge2068(group?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get_cofactor(group: CValuesRef<EC_GROUP>?, cofactor: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2069(group?.getPointer(memScope).rawValue, cofactor?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get0_cofactor(group: CValuesRef<EC_GROUP>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge2070(group?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_set_curve_name(group: CValuesRef<EC_GROUP>?, nid: Int): Unit {
    memScoped {
        return kniBridge2071(group?.getPointer(memScope).rawValue, nid)
    }
}

fun EC_GROUP_get_curve_name(group: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge2072(group?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_set_asn1_flag(group: CValuesRef<EC_GROUP>?, flag: Int): Unit {
    memScoped {
        return kniBridge2073(group?.getPointer(memScope).rawValue, flag)
    }
}

fun EC_GROUP_get_asn1_flag(group: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge2074(group?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_set_point_conversion_form(group: CValuesRef<EC_GROUP>?, form: point_conversion_form_t): Unit {
    memScoped {
        return kniBridge2075(group?.getPointer(memScope).rawValue, form)
    }
}

fun EC_GROUP_get_point_conversion_form(arg0: CValuesRef<EC_GROUP>?): point_conversion_form_t {
    memScoped {
        return kniBridge2076(arg0?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get0_seed(x: CValuesRef<EC_GROUP>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge2077(x?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_get_seed_len(arg0: CValuesRef<EC_GROUP>?): size_t {
    memScoped {
        return kniBridge2078(arg0?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_set_seed(arg0: CValuesRef<EC_GROUP>?, arg1: CValuesRef<UByteVar>?, len: size_t): size_t {
    memScoped {
        return kniBridge2079(arg0?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue, len)
    }
}

fun EC_GROUP_set_curve_GFp(group: CValuesRef<EC_GROUP>?, p: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2080(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get_curve_GFp(group: CValuesRef<EC_GROUP>?, p: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2081(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_set_curve_GF2m(group: CValuesRef<EC_GROUP>?, p: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2082(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get_curve_GF2m(group: CValuesRef<EC_GROUP>?, p: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2083(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get_degree(group: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge2084(group?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_check(group: CValuesRef<EC_GROUP>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2085(group?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_check_discriminant(group: CValuesRef<EC_GROUP>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2086(group?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_cmp(a: CValuesRef<EC_GROUP>?, b: CValuesRef<EC_GROUP>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2087(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_new_curve_GFp(p: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge2088(p?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_new_curve_GF2m(p: CValuesRef<BIGNUM>?, a: CValuesRef<BIGNUM>?, b: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge2089(p?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_new_by_curve_name(nid: Int): CPointer<EC_GROUP>? {
    return interpretCPointer<EC_GROUP>(kniBridge2090(nid))
}

fun EC_GROUP_new_from_ecparameters(params: CValuesRef<ECPARAMETERS>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge2091(params?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_get_ecparameters(group: CValuesRef<EC_GROUP>?, params: CValuesRef<ECPARAMETERS>?): CPointer<ECPARAMETERS>? {
    memScoped {
        return interpretCPointer<ECPARAMETERS>(kniBridge2092(group?.getPointer(memScope).rawValue, params?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_new_from_ecpkparameters(params: CValuesRef<ECPKPARAMETERS>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge2093(params?.getPointer(memScope).rawValue))
    }
}

fun EC_GROUP_get_ecpkparameters(group: CValuesRef<EC_GROUP>?, params: CValuesRef<ECPKPARAMETERS>?): CPointer<ECPKPARAMETERS>? {
    memScoped {
        return interpretCPointer<ECPKPARAMETERS>(kniBridge2094(group?.getPointer(memScope).rawValue, params?.getPointer(memScope).rawValue))
    }
}

fun EC_get_builtin_curves(r: CValuesRef<EC_builtin_curve>?, nitems: size_t): size_t {
    memScoped {
        return kniBridge2095(r?.getPointer(memScope).rawValue, nitems)
    }
}

fun EC_curve_nid2nist(nid: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge2096(nid))
}

fun EC_curve_nist2nid(name: String?): Int {
    memScoped {
        return kniBridge2097(name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_new(group: CValuesRef<EC_GROUP>?): CPointer<EC_POINT>? {
    memScoped {
        return interpretCPointer<EC_POINT>(kniBridge2098(group?.getPointer(memScope).rawValue))
    }
}

fun EC_POINT_free(point: CValuesRef<EC_POINT>?): Unit {
    memScoped {
        return kniBridge2099(point?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_clear_free(point: CValuesRef<EC_POINT>?): Unit {
    memScoped {
        return kniBridge2100(point?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_copy(dst: CValuesRef<EC_POINT>?, src: CValuesRef<EC_POINT>?): Int {
    memScoped {
        return kniBridge2101(dst?.getPointer(memScope).rawValue, src?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_dup(src: CValuesRef<EC_POINT>?, group: CValuesRef<EC_GROUP>?): CPointer<EC_POINT>? {
    memScoped {
        return interpretCPointer<EC_POINT>(kniBridge2102(src?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue))
    }
}

fun EC_POINT_method_of(point: CValuesRef<EC_POINT>?): CPointer<EC_METHOD>? {
    memScoped {
        return interpretCPointer<EC_METHOD>(kniBridge2103(point?.getPointer(memScope).rawValue))
    }
}

fun EC_POINT_set_to_infinity(group: CValuesRef<EC_GROUP>?, point: CValuesRef<EC_POINT>?): Int {
    memScoped {
        return kniBridge2104(group?.getPointer(memScope).rawValue, point?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_set_Jprojective_coordinates_GFp(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, x: CValuesRef<BIGNUM>?, y: CValuesRef<BIGNUM>?, z: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2105(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, z?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_get_Jprojective_coordinates_GFp(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, x: CValuesRef<BIGNUM>?, y: CValuesRef<BIGNUM>?, z: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2106(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, z?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_set_affine_coordinates_GFp(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, x: CValuesRef<BIGNUM>?, y: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2107(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_get_affine_coordinates_GFp(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, x: CValuesRef<BIGNUM>?, y: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2108(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_set_compressed_coordinates_GFp(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, x: CValuesRef<BIGNUM>?, y_bit: Int, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2109(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y_bit, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_set_affine_coordinates_GF2m(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, x: CValuesRef<BIGNUM>?, y: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2110(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_get_affine_coordinates_GF2m(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, x: CValuesRef<BIGNUM>?, y: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2111(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_set_compressed_coordinates_GF2m(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, x: CValuesRef<BIGNUM>?, y_bit: Int, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2112(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y_bit, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_point2oct(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, form: point_conversion_form_t, buf: CValuesRef<UByteVar>?, len: size_t, ctx: CValuesRef<BN_CTX>?): size_t {
    memScoped {
        return kniBridge2113(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, form, buf?.getPointer(memScope).rawValue, len, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_oct2point(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?, buf: CValuesRef<UByteVar>?, len: size_t, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2114(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_point2buf(group: CValuesRef<EC_GROUP>?, point: CValuesRef<EC_POINT>?, form: point_conversion_form_t, pbuf: CValuesRef<CPointerVar<UByteVar>>?, ctx: CValuesRef<BN_CTX>?): size_t {
    memScoped {
        return kniBridge2115(group?.getPointer(memScope).rawValue, point?.getPointer(memScope).rawValue, form, pbuf?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_point2bn(arg0: CValuesRef<EC_GROUP>?, arg1: CValuesRef<EC_POINT>?, form: point_conversion_form_t, arg3: CValuesRef<BIGNUM>?, arg4: CValuesRef<BN_CTX>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge2116(arg0?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue, form, arg3?.getPointer(memScope).rawValue, arg4?.getPointer(memScope).rawValue))
    }
}

fun EC_POINT_bn2point(arg0: CValuesRef<EC_GROUP>?, arg1: CValuesRef<BIGNUM>?, arg2: CValuesRef<EC_POINT>?, arg3: CValuesRef<BN_CTX>?): CPointer<EC_POINT>? {
    memScoped {
        return interpretCPointer<EC_POINT>(kniBridge2117(arg0?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue, arg2?.getPointer(memScope).rawValue, arg3?.getPointer(memScope).rawValue))
    }
}

fun EC_POINT_point2hex(arg0: CValuesRef<EC_GROUP>?, arg1: CValuesRef<EC_POINT>?, form: point_conversion_form_t, arg3: CValuesRef<BN_CTX>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2118(arg0?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue, form, arg3?.getPointer(memScope).rawValue))
    }
}

fun EC_POINT_hex2point(arg0: CValuesRef<EC_GROUP>?, arg1: String?, arg2: CValuesRef<EC_POINT>?, arg3: CValuesRef<BN_CTX>?): CPointer<EC_POINT>? {
    memScoped {
        return interpretCPointer<EC_POINT>(kniBridge2119(arg0?.getPointer(memScope).rawValue, arg1?.cstr?.getPointer(memScope).rawValue, arg2?.getPointer(memScope).rawValue, arg3?.getPointer(memScope).rawValue))
    }
}

fun EC_POINT_add(group: CValuesRef<EC_GROUP>?, r: CValuesRef<EC_POINT>?, a: CValuesRef<EC_POINT>?, b: CValuesRef<EC_POINT>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2120(group?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_dbl(group: CValuesRef<EC_GROUP>?, r: CValuesRef<EC_POINT>?, a: CValuesRef<EC_POINT>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2121(group?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_invert(group: CValuesRef<EC_GROUP>?, a: CValuesRef<EC_POINT>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2122(group?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_is_at_infinity(group: CValuesRef<EC_GROUP>?, p: CValuesRef<EC_POINT>?): Int {
    memScoped {
        return kniBridge2123(group?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_is_on_curve(group: CValuesRef<EC_GROUP>?, point: CValuesRef<EC_POINT>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2124(group?.getPointer(memScope).rawValue, point?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_cmp(group: CValuesRef<EC_GROUP>?, a: CValuesRef<EC_POINT>?, b: CValuesRef<EC_POINT>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2125(group?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_make_affine(group: CValuesRef<EC_GROUP>?, point: CValuesRef<EC_POINT>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2126(group?.getPointer(memScope).rawValue, point?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINTs_make_affine(group: CValuesRef<EC_GROUP>?, num: size_t, points: CValuesRef<CPointerVar<EC_POINT>>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2127(group?.getPointer(memScope).rawValue, num, points?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINTs_mul(group: CValuesRef<EC_GROUP>?, r: CValuesRef<EC_POINT>?, n: CValuesRef<BIGNUM>?, num: size_t, p: CValuesRef<CPointerVar<EC_POINT>>?, m: CValuesRef<CPointerVar<BIGNUM>>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2128(group?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, n?.getPointer(memScope).rawValue, num, p?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_POINT_mul(group: CValuesRef<EC_GROUP>?, r: CValuesRef<EC_POINT>?, n: CValuesRef<BIGNUM>?, q: CValuesRef<EC_POINT>?, m: CValuesRef<BIGNUM>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2129(group?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, n?.getPointer(memScope).rawValue, q?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_precompute_mult(group: CValuesRef<EC_GROUP>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2130(group?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_have_precompute_mult(group: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge2131(group?.getPointer(memScope).rawValue)
    }
}

fun ECPKPARAMETERS_new(): CPointer<ECPKPARAMETERS>? {
    return interpretCPointer<ECPKPARAMETERS>(kniBridge2132())
}

fun ECPKPARAMETERS_free(a: CValuesRef<ECPKPARAMETERS>?): Unit {
    memScoped {
        return kniBridge2133(a?.getPointer(memScope).rawValue)
    }
}

fun ECPARAMETERS_new(): CPointer<ECPARAMETERS>? {
    return interpretCPointer<ECPARAMETERS>(kniBridge2134())
}

fun ECPARAMETERS_free(a: CValuesRef<ECPARAMETERS>?): Unit {
    memScoped {
        return kniBridge2135(a?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get_basis_type(arg0: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge2136(arg0?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get_trinomial_basis(arg0: CValuesRef<EC_GROUP>?, k: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge2137(arg0?.getPointer(memScope).rawValue, k?.getPointer(memScope).rawValue)
    }
}

fun EC_GROUP_get_pentanomial_basis(arg0: CValuesRef<EC_GROUP>?, k1: CValuesRef<UIntVar>?, k2: CValuesRef<UIntVar>?, k3: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge2138(arg0?.getPointer(memScope).rawValue, k1?.getPointer(memScope).rawValue, k2?.getPointer(memScope).rawValue, k3?.getPointer(memScope).rawValue)
    }
}

fun d2i_ECPKParameters(arg0: CValuesRef<CPointerVar<EC_GROUP>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge2139(arg0?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ECPKParameters(arg0: CValuesRef<EC_GROUP>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2140(arg0?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ECPKParameters_print(bp: CValuesRef<BIO>?, x: CValuesRef<EC_GROUP>?, off: Int): Int {
    memScoped {
        return kniBridge2141(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, off)
    }
}

fun ECPKParameters_print_fp(fp: CValuesRef<FILE>?, x: CValuesRef<EC_GROUP>?, off: Int): Int {
    memScoped {
        return kniBridge2142(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, off)
    }
}

fun EC_KEY_new(): CPointer<EC_KEY>? {
    return interpretCPointer<EC_KEY>(kniBridge2143())
}

fun EC_KEY_get_flags(key: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2144(key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_set_flags(key: CValuesRef<EC_KEY>?, flags: Int): Unit {
    memScoped {
        return kniBridge2145(key?.getPointer(memScope).rawValue, flags)
    }
}

fun EC_KEY_clear_flags(key: CValuesRef<EC_KEY>?, flags: Int): Unit {
    memScoped {
        return kniBridge2146(key?.getPointer(memScope).rawValue, flags)
    }
}

fun EC_KEY_new_by_curve_name(nid: Int): CPointer<EC_KEY>? {
    return interpretCPointer<EC_KEY>(kniBridge2147(nid))
}

fun EC_KEY_free(key: CValuesRef<EC_KEY>?): Unit {
    memScoped {
        return kniBridge2148(key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_copy(dst: CValuesRef<EC_KEY>?, src: CValuesRef<EC_KEY>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge2149(dst?.getPointer(memScope).rawValue, src?.getPointer(memScope).rawValue))
    }
}

fun EC_KEY_dup(src: CValuesRef<EC_KEY>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge2150(src?.getPointer(memScope).rawValue))
    }
}

fun EC_KEY_up_ref(key: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2151(key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_get0_group(key: CValuesRef<EC_KEY>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge2152(key?.getPointer(memScope).rawValue))
    }
}

fun EC_KEY_set_group(key: CValuesRef<EC_KEY>?, group: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge2153(key?.getPointer(memScope).rawValue, group?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_get0_private_key(key: CValuesRef<EC_KEY>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge2154(key?.getPointer(memScope).rawValue))
    }
}

fun EC_KEY_set_private_key(key: CValuesRef<EC_KEY>?, prv: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2155(key?.getPointer(memScope).rawValue, prv?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_get0_public_key(key: CValuesRef<EC_KEY>?): CPointer<EC_POINT>? {
    memScoped {
        return interpretCPointer<EC_POINT>(kniBridge2156(key?.getPointer(memScope).rawValue))
    }
}

fun EC_KEY_set_public_key(key: CValuesRef<EC_KEY>?, pub: CValuesRef<EC_POINT>?): Int {
    memScoped {
        return kniBridge2157(key?.getPointer(memScope).rawValue, pub?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_get_enc_flags(key: CValuesRef<EC_KEY>?): UInt {
    memScoped {
        return kniBridge2158(key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_set_enc_flags(eckey: CValuesRef<EC_KEY>?, flags: UInt): Unit {
    memScoped {
        return kniBridge2159(eckey?.getPointer(memScope).rawValue, flags)
    }
}

fun EC_KEY_get_conv_form(key: CValuesRef<EC_KEY>?): point_conversion_form_t {
    memScoped {
        return kniBridge2160(key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_set_conv_form(eckey: CValuesRef<EC_KEY>?, cform: point_conversion_form_t): Unit {
    memScoped {
        return kniBridge2161(eckey?.getPointer(memScope).rawValue, cform)
    }
}

fun EC_KEY_set_ex_data(key: CValuesRef<EC_KEY>?, idx: Int, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2162(key?.getPointer(memScope).rawValue, idx, arg?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_get_ex_data(key: CValuesRef<EC_KEY>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2163(key?.getPointer(memScope).rawValue, idx))
    }
}

fun EC_KEY_set_asn1_flag(eckey: CValuesRef<EC_KEY>?, asn1_flag: Int): Unit {
    memScoped {
        return kniBridge2164(eckey?.getPointer(memScope).rawValue, asn1_flag)
    }
}

fun EC_KEY_precompute_mult(key: CValuesRef<EC_KEY>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2165(key?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_generate_key(key: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2166(key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_check_key(key: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2167(key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_can_sign(eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2168(eckey?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_set_public_key_affine_coordinates(key: CValuesRef<EC_KEY>?, x: CValuesRef<BIGNUM>?, y: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2169(key?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, y?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_key2buf(key: CValuesRef<EC_KEY>?, form: point_conversion_form_t, pbuf: CValuesRef<CPointerVar<UByteVar>>?, ctx: CValuesRef<BN_CTX>?): size_t {
    memScoped {
        return kniBridge2170(key?.getPointer(memScope).rawValue, form, pbuf?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_oct2key(key: CValuesRef<EC_KEY>?, buf: CValuesRef<UByteVar>?, len: size_t, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2171(key?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len, ctx?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_oct2priv(key: CValuesRef<EC_KEY>?, buf: CValuesRef<UByteVar>?, len: size_t): Int {
    memScoped {
        return kniBridge2172(key?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun EC_KEY_priv2oct(key: CValuesRef<EC_KEY>?, buf: CValuesRef<UByteVar>?, len: size_t): size_t {
    memScoped {
        return kniBridge2173(key?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun EC_KEY_priv2buf(eckey: CValuesRef<EC_KEY>?, pbuf: CValuesRef<CPointerVar<UByteVar>>?): size_t {
    memScoped {
        return kniBridge2174(eckey?.getPointer(memScope).rawValue, pbuf?.getPointer(memScope).rawValue)
    }
}

fun d2i_ECPrivateKey(key: CValuesRef<CPointerVar<EC_KEY>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge2175(key?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ECPrivateKey(key: CValuesRef<EC_KEY>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2176(key?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun d2i_ECParameters(key: CValuesRef<CPointerVar<EC_KEY>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge2177(key?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_ECParameters(key: CValuesRef<EC_KEY>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2178(key?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun o2i_ECPublicKey(key: CValuesRef<CPointerVar<EC_KEY>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge2179(key?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2o_ECPublicKey(key: CValuesRef<EC_KEY>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2180(key?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun ECParameters_print(bp: CValuesRef<BIO>?, key: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2181(bp?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_print(bp: CValuesRef<BIO>?, key: CValuesRef<EC_KEY>?, off: Int): Int {
    memScoped {
        return kniBridge2182(bp?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, off)
    }
}

fun ECParameters_print_fp(fp: CValuesRef<FILE>?, key: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2183(fp?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_print_fp(fp: CValuesRef<FILE>?, key: CValuesRef<EC_KEY>?, off: Int): Int {
    memScoped {
        return kniBridge2184(fp?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, off)
    }
}

fun EC_KEY_OpenSSL(): CPointer<EC_KEY_METHOD>? {
    return interpretCPointer<EC_KEY_METHOD>(kniBridge2185())
}

fun EC_KEY_get_default_method(): CPointer<EC_KEY_METHOD>? {
    return interpretCPointer<EC_KEY_METHOD>(kniBridge2186())
}

fun EC_KEY_set_default_method(meth: CValuesRef<EC_KEY_METHOD>?): Unit {
    memScoped {
        return kniBridge2187(meth?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_get_method(key: CValuesRef<EC_KEY>?): CPointer<EC_KEY_METHOD>? {
    memScoped {
        return interpretCPointer<EC_KEY_METHOD>(kniBridge2188(key?.getPointer(memScope).rawValue))
    }
}

fun EC_KEY_set_method(key: CValuesRef<EC_KEY>?, meth: CValuesRef<EC_KEY_METHOD>?): Int {
    memScoped {
        return kniBridge2189(key?.getPointer(memScope).rawValue, meth?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_new_method(engine: CValuesRef<ENGINE>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge2190(engine?.getPointer(memScope).rawValue))
    }
}

fun ECDH_KDF_X9_62(out: CValuesRef<UByteVar>?, outlen: size_t, Z: CValuesRef<UByteVar>?, Zlen: size_t, sinfo: CValuesRef<UByteVar>?, sinfolen: size_t, md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge2191(out?.getPointer(memScope).rawValue, outlen, Z?.getPointer(memScope).rawValue, Zlen, sinfo?.getPointer(memScope).rawValue, sinfolen, md?.getPointer(memScope).rawValue)
    }
}

fun ECDH_compute_key(out: CValuesRef<*>?, outlen: size_t, pub_key: CValuesRef<EC_POINT>?, ecdh: CValuesRef<EC_KEY>?, KDF: CPointer<CFunction<(COpaquePointer?, size_t, COpaquePointer?, CPointer<size_tVar>?) -> COpaquePointer?>>?): Int {
    memScoped {
        return kniBridge2192(out?.getPointer(memScope).rawValue, outlen, pub_key?.getPointer(memScope).rawValue, ecdh?.getPointer(memScope).rawValue, KDF.rawValue)
    }
}

fun ECDSA_SIG_new(): CPointer<ECDSA_SIG>? {
    return interpretCPointer<ECDSA_SIG>(kniBridge2193())
}

fun ECDSA_SIG_free(sig: CValuesRef<ECDSA_SIG>?): Unit {
    memScoped {
        return kniBridge2194(sig?.getPointer(memScope).rawValue)
    }
}

fun i2d_ECDSA_SIG(sig: CValuesRef<ECDSA_SIG>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2195(sig?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_ECDSA_SIG(sig: CValuesRef<CPointerVar<ECDSA_SIG>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<ECDSA_SIG>? {
    memScoped {
        return interpretCPointer<ECDSA_SIG>(kniBridge2196(sig?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, len))
    }
}

fun ECDSA_SIG_get0(sig: CValuesRef<ECDSA_SIG>?, pr: CValuesRef<CPointerVar<BIGNUM>>?, ps: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2197(sig?.getPointer(memScope).rawValue, pr?.getPointer(memScope).rawValue, ps?.getPointer(memScope).rawValue)
    }
}

fun ECDSA_SIG_set0(sig: CValuesRef<ECDSA_SIG>?, r: CValuesRef<BIGNUM>?, s: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2198(sig?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, s?.getPointer(memScope).rawValue)
    }
}

fun ECDSA_do_sign(dgst: CValuesRef<UByteVar>?, dgst_len: Int, eckey: CValuesRef<EC_KEY>?): CPointer<ECDSA_SIG>? {
    memScoped {
        return interpretCPointer<ECDSA_SIG>(kniBridge2199(dgst?.getPointer(memScope).rawValue, dgst_len, eckey?.getPointer(memScope).rawValue))
    }
}

fun ECDSA_do_sign_ex(dgst: CValuesRef<UByteVar>?, dgstlen: Int, kinv: CValuesRef<BIGNUM>?, rp: CValuesRef<BIGNUM>?, eckey: CValuesRef<EC_KEY>?): CPointer<ECDSA_SIG>? {
    memScoped {
        return interpretCPointer<ECDSA_SIG>(kniBridge2200(dgst?.getPointer(memScope).rawValue, dgstlen, kinv?.getPointer(memScope).rawValue, rp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue))
    }
}

fun ECDSA_do_verify(dgst: CValuesRef<UByteVar>?, dgst_len: Int, sig: CValuesRef<ECDSA_SIG>?, eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2201(dgst?.getPointer(memScope).rawValue, dgst_len, sig?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue)
    }
}

fun ECDSA_sign_setup(eckey: CValuesRef<EC_KEY>?, ctx: CValuesRef<BN_CTX>?, kinv: CValuesRef<CPointerVar<BIGNUM>>?, rp: CValuesRef<CPointerVar<BIGNUM>>?): Int {
    memScoped {
        return kniBridge2202(eckey?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, kinv?.getPointer(memScope).rawValue, rp?.getPointer(memScope).rawValue)
    }
}

fun ECDSA_sign(type: Int, dgst: CValuesRef<UByteVar>?, dgstlen: Int, sig: CValuesRef<UByteVar>?, siglen: CValuesRef<UIntVar>?, eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2203(type, dgst?.getPointer(memScope).rawValue, dgstlen, sig?.getPointer(memScope).rawValue, siglen?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue)
    }
}

fun ECDSA_sign_ex(type: Int, dgst: CValuesRef<UByteVar>?, dgstlen: Int, sig: CValuesRef<UByteVar>?, siglen: CValuesRef<UIntVar>?, kinv: CValuesRef<BIGNUM>?, rp: CValuesRef<BIGNUM>?, eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2204(type, dgst?.getPointer(memScope).rawValue, dgstlen, sig?.getPointer(memScope).rawValue, siglen?.getPointer(memScope).rawValue, kinv?.getPointer(memScope).rawValue, rp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue)
    }
}

fun ECDSA_verify(type: Int, dgst: CValuesRef<UByteVar>?, dgstlen: Int, sig: CValuesRef<UByteVar>?, siglen: Int, eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2205(type, dgst?.getPointer(memScope).rawValue, dgstlen, sig?.getPointer(memScope).rawValue, siglen, eckey?.getPointer(memScope).rawValue)
    }
}

fun ECDSA_size(eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge2206(eckey?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_METHOD_new(meth: CValuesRef<EC_KEY_METHOD>?): CPointer<EC_KEY_METHOD>? {
    memScoped {
        return interpretCPointer<EC_KEY_METHOD>(kniBridge2207(meth?.getPointer(memScope).rawValue))
    }
}

fun EC_KEY_METHOD_free(meth: CValuesRef<EC_KEY_METHOD>?): Unit {
    memScoped {
        return kniBridge2208(meth?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_METHOD_set_init(meth: CValuesRef<EC_KEY_METHOD>?, init: CPointer<CFunction<(CPointer<EC_KEY>?) -> Int>>?, finish: CPointer<CFunction<(CPointer<EC_KEY>?) -> Unit>>?, copy: CPointer<CFunction<(CPointer<EC_KEY>?, CPointer<EC_KEY>?) -> Int>>?, set_group: CPointer<CFunction<(CPointer<EC_KEY>?, CPointer<EC_GROUP>?) -> Int>>?, set_private: CPointer<CFunction<(CPointer<EC_KEY>?, CPointer<BIGNUM>?) -> Int>>?, set_public: CPointer<CFunction<(CPointer<EC_KEY>?, CPointer<EC_POINT>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2209(meth?.getPointer(memScope).rawValue, init.rawValue, finish.rawValue, copy.rawValue, set_group.rawValue, set_private.rawValue, set_public.rawValue)
    }
}

fun EC_KEY_METHOD_set_keygen(meth: CValuesRef<EC_KEY_METHOD>?, keygen: CPointer<CFunction<(CPointer<EC_KEY>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2210(meth?.getPointer(memScope).rawValue, keygen.rawValue)
    }
}

fun EC_KEY_METHOD_set_compute_key(meth: CValuesRef<EC_KEY_METHOD>?, ckey: CPointer<CFunction<(CPointer<CPointerVar<UByteVar>>?, CPointer<size_tVar>?, CPointer<EC_POINT>?, CPointer<EC_KEY>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2211(meth?.getPointer(memScope).rawValue, ckey.rawValue)
    }
}

fun EC_KEY_METHOD_set_sign(meth: CValuesRef<EC_KEY_METHOD>?, sign: CPointer<CFunction<(Int, CPointer<UByteVar>?, Int, CPointer<UByteVar>?, CPointer<UIntVar>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<EC_KEY>?) -> Int>>?, sign_setup: CPointer<CFunction<(CPointer<EC_KEY>?, CPointer<BN_CTX>?, CPointer<CPointerVar<BIGNUM>>?, CPointer<CPointerVar<BIGNUM>>?) -> Int>>?, sign_sig: CPointer<CFunction<(CPointer<UByteVar>?, Int, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<EC_KEY>?) -> CPointer<ECDSA_SIG>?>>?): Unit {
    memScoped {
        return kniBridge2212(meth?.getPointer(memScope).rawValue, sign.rawValue, sign_setup.rawValue, sign_sig.rawValue)
    }
}

fun EC_KEY_METHOD_set_verify(meth: CValuesRef<EC_KEY_METHOD>?, verify: CPointer<CFunction<(Int, CPointer<UByteVar>?, Int, CPointer<UByteVar>?, Int, CPointer<EC_KEY>?) -> Int>>?, verify_sig: CPointer<CFunction<(CPointer<UByteVar>?, Int, CPointer<ECDSA_SIG>?, CPointer<EC_KEY>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge2213(meth?.getPointer(memScope).rawValue, verify.rawValue, verify_sig.rawValue)
    }
}

fun EC_KEY_METHOD_get_init(meth: CValuesRef<EC_KEY_METHOD>?, pinit: CValuesRef<CPointerVar<CFunction<(CPointer<EC_KEY>?) -> Int>>>?, pfinish: CValuesRef<CPointerVar<CFunction<(CPointer<EC_KEY>?) -> Unit>>>?, pcopy: CValuesRef<CPointerVar<CFunction<(CPointer<EC_KEY>?, CPointer<EC_KEY>?) -> Int>>>?, pset_group: CValuesRef<CPointerVar<CFunction<(CPointer<EC_KEY>?, CPointer<EC_GROUP>?) -> Int>>>?, pset_private: CValuesRef<CPointerVar<CFunction<(CPointer<EC_KEY>?, CPointer<BIGNUM>?) -> Int>>>?, pset_public: CValuesRef<CPointerVar<CFunction<(CPointer<EC_KEY>?, CPointer<EC_POINT>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2214(meth?.getPointer(memScope).rawValue, pinit?.getPointer(memScope).rawValue, pfinish?.getPointer(memScope).rawValue, pcopy?.getPointer(memScope).rawValue, pset_group?.getPointer(memScope).rawValue, pset_private?.getPointer(memScope).rawValue, pset_public?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_METHOD_get_keygen(meth: CValuesRef<EC_KEY_METHOD>?, pkeygen: CValuesRef<CPointerVar<CFunction<(CPointer<EC_KEY>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2215(meth?.getPointer(memScope).rawValue, pkeygen?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_METHOD_get_compute_key(meth: CValuesRef<EC_KEY_METHOD>?, pck: CValuesRef<CPointerVar<CFunction<(CPointer<CPointerVar<UByteVar>>?, CPointer<size_tVar>?, CPointer<EC_POINT>?, CPointer<EC_KEY>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2216(meth?.getPointer(memScope).rawValue, pck?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_METHOD_get_sign(meth: CValuesRef<EC_KEY_METHOD>?, psign: CValuesRef<CPointerVar<CFunction<(Int, CPointer<UByteVar>?, Int, CPointer<UByteVar>?, CPointer<UIntVar>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<EC_KEY>?) -> Int>>>?, psign_setup: CValuesRef<CPointerVar<CFunction<(CPointer<EC_KEY>?, CPointer<BN_CTX>?, CPointer<CPointerVar<BIGNUM>>?, CPointer<CPointerVar<BIGNUM>>?) -> Int>>>?, psign_sig: CValuesRef<CPointerVar<CFunction<(CPointer<UByteVar>?, Int, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<EC_KEY>?) -> CPointer<ECDSA_SIG>?>>>?): Unit {
    memScoped {
        return kniBridge2217(meth?.getPointer(memScope).rawValue, psign?.getPointer(memScope).rawValue, psign_setup?.getPointer(memScope).rawValue, psign_sig?.getPointer(memScope).rawValue)
    }
}

fun EC_KEY_METHOD_get_verify(meth: CValuesRef<EC_KEY_METHOD>?, pverify: CValuesRef<CPointerVar<CFunction<(Int, CPointer<UByteVar>?, Int, CPointer<UByteVar>?, Int, CPointer<EC_KEY>?) -> Int>>>?, pverify_sig: CValuesRef<CPointerVar<CFunction<(CPointer<UByteVar>?, Int, CPointer<ECDSA_SIG>?, CPointer<EC_KEY>?) -> Int>>>?): Unit {
    memScoped {
        return kniBridge2218(meth?.getPointer(memScope).rawValue, pverify?.getPointer(memScope).rawValue, pverify_sig?.getPointer(memScope).rawValue)
    }
}

fun ERR_load_EC_strings(): Int {
    return kniBridge2219()
}

fun RSA_new(): CPointer<RSA>? {
    return interpretCPointer<RSA>(kniBridge2220())
}

fun RSA_new_method(engine: CValuesRef<ENGINE>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge2221(engine?.getPointer(memScope).rawValue))
    }
}

fun RSA_bits(rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2222(rsa?.getPointer(memScope).rawValue)
    }
}

fun RSA_size(rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2223(rsa?.getPointer(memScope).rawValue)
    }
}

fun RSA_security_bits(rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2224(rsa?.getPointer(memScope).rawValue)
    }
}

fun RSA_set0_key(r: CValuesRef<RSA>?, n: CValuesRef<BIGNUM>?, e: CValuesRef<BIGNUM>?, d: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2225(r?.getPointer(memScope).rawValue, n?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue)
    }
}

fun RSA_set0_factors(r: CValuesRef<RSA>?, p: CValuesRef<BIGNUM>?, q: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2226(r?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, q?.getPointer(memScope).rawValue)
    }
}

fun RSA_set0_crt_params(r: CValuesRef<RSA>?, dmp1: CValuesRef<BIGNUM>?, dmq1: CValuesRef<BIGNUM>?, iqmp: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2227(r?.getPointer(memScope).rawValue, dmp1?.getPointer(memScope).rawValue, dmq1?.getPointer(memScope).rawValue, iqmp?.getPointer(memScope).rawValue)
    }
}

fun RSA_get0_key(r: CValuesRef<RSA>?, n: CValuesRef<CPointerVar<BIGNUM>>?, e: CValuesRef<CPointerVar<BIGNUM>>?, d: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2228(r?.getPointer(memScope).rawValue, n?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue)
    }
}

fun RSA_get0_factors(r: CValuesRef<RSA>?, p: CValuesRef<CPointerVar<BIGNUM>>?, q: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2229(r?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, q?.getPointer(memScope).rawValue)
    }
}

fun RSA_get0_crt_params(r: CValuesRef<RSA>?, dmp1: CValuesRef<CPointerVar<BIGNUM>>?, dmq1: CValuesRef<CPointerVar<BIGNUM>>?, iqmp: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2230(r?.getPointer(memScope).rawValue, dmp1?.getPointer(memScope).rawValue, dmq1?.getPointer(memScope).rawValue, iqmp?.getPointer(memScope).rawValue)
    }
}

fun RSA_clear_flags(r: CValuesRef<RSA>?, flags: Int): Unit {
    memScoped {
        return kniBridge2231(r?.getPointer(memScope).rawValue, flags)
    }
}

fun RSA_test_flags(r: CValuesRef<RSA>?, flags: Int): Int {
    memScoped {
        return kniBridge2232(r?.getPointer(memScope).rawValue, flags)
    }
}

fun RSA_set_flags(r: CValuesRef<RSA>?, flags: Int): Unit {
    memScoped {
        return kniBridge2233(r?.getPointer(memScope).rawValue, flags)
    }
}

fun RSA_get0_engine(r: CValuesRef<RSA>?): CPointer<ENGINE>? {
    memScoped {
        return interpretCPointer<ENGINE>(kniBridge2234(r?.getPointer(memScope).rawValue))
    }
}

fun RSA_generate_key(bits: Int, e: ULong, callback: CPointer<CFunction<(Int, Int, COpaquePointer?) -> Unit>>?, cb_arg: CValuesRef<*>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge2235(bits, e, callback.rawValue, cb_arg?.getPointer(memScope).rawValue))
    }
}

fun RSA_generate_key_ex(rsa: CValuesRef<RSA>?, bits: Int, e: CValuesRef<BIGNUM>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge2236(rsa?.getPointer(memScope).rawValue, bits, e?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun RSA_X931_derive_ex(rsa: CValuesRef<RSA>?, p1: CValuesRef<BIGNUM>?, p2: CValuesRef<BIGNUM>?, q1: CValuesRef<BIGNUM>?, q2: CValuesRef<BIGNUM>?, Xp1: CValuesRef<BIGNUM>?, Xp2: CValuesRef<BIGNUM>?, Xp: CValuesRef<BIGNUM>?, Xq1: CValuesRef<BIGNUM>?, Xq2: CValuesRef<BIGNUM>?, Xq: CValuesRef<BIGNUM>?, e: CValuesRef<BIGNUM>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge2237(rsa?.getPointer(memScope).rawValue, p1?.getPointer(memScope).rawValue, p2?.getPointer(memScope).rawValue, q1?.getPointer(memScope).rawValue, q2?.getPointer(memScope).rawValue, Xp1?.getPointer(memScope).rawValue, Xp2?.getPointer(memScope).rawValue, Xp?.getPointer(memScope).rawValue, Xq1?.getPointer(memScope).rawValue, Xq2?.getPointer(memScope).rawValue, Xq?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun RSA_X931_generate_key_ex(rsa: CValuesRef<RSA>?, bits: Int, e: CValuesRef<BIGNUM>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge2238(rsa?.getPointer(memScope).rawValue, bits, e?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun RSA_check_key(arg0: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2239(arg0?.getPointer(memScope).rawValue)
    }
}

fun RSA_check_key_ex(arg0: CValuesRef<RSA>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge2240(arg0?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun RSA_public_encrypt(flen: Int, from: CValuesRef<UByteVar>?, to: CValuesRef<UByteVar>?, rsa: CValuesRef<RSA>?, padding: Int): Int {
    memScoped {
        return kniBridge2241(flen, from?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue, padding)
    }
}

fun RSA_private_encrypt(flen: Int, from: CValuesRef<UByteVar>?, to: CValuesRef<UByteVar>?, rsa: CValuesRef<RSA>?, padding: Int): Int {
    memScoped {
        return kniBridge2242(flen, from?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue, padding)
    }
}

fun RSA_public_decrypt(flen: Int, from: CValuesRef<UByteVar>?, to: CValuesRef<UByteVar>?, rsa: CValuesRef<RSA>?, padding: Int): Int {
    memScoped {
        return kniBridge2243(flen, from?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue, padding)
    }
}

fun RSA_private_decrypt(flen: Int, from: CValuesRef<UByteVar>?, to: CValuesRef<UByteVar>?, rsa: CValuesRef<RSA>?, padding: Int): Int {
    memScoped {
        return kniBridge2244(flen, from?.getPointer(memScope).rawValue, to?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue, padding)
    }
}

fun RSA_free(r: CValuesRef<RSA>?): Unit {
    memScoped {
        return kniBridge2245(r?.getPointer(memScope).rawValue)
    }
}

fun RSA_up_ref(r: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2246(r?.getPointer(memScope).rawValue)
    }
}

fun RSA_flags(r: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2247(r?.getPointer(memScope).rawValue)
    }
}

fun RSA_set_default_method(meth: CValuesRef<RSA_METHOD>?): Unit {
    memScoped {
        return kniBridge2248(meth?.getPointer(memScope).rawValue)
    }
}

fun RSA_get_default_method(): CPointer<RSA_METHOD>? {
    return interpretCPointer<RSA_METHOD>(kniBridge2249())
}

fun RSA_get_method(rsa: CValuesRef<RSA>?): CPointer<RSA_METHOD>? {
    memScoped {
        return interpretCPointer<RSA_METHOD>(kniBridge2250(rsa?.getPointer(memScope).rawValue))
    }
}

fun RSA_set_method(rsa: CValuesRef<RSA>?, meth: CValuesRef<RSA_METHOD>?): Int {
    memScoped {
        return kniBridge2251(rsa?.getPointer(memScope).rawValue, meth?.getPointer(memScope).rawValue)
    }
}

fun RSA_PKCS1_OpenSSL(): CPointer<RSA_METHOD>? {
    return interpretCPointer<RSA_METHOD>(kniBridge2252())
}

fun RSA_null_method(): CPointer<RSA_METHOD>? {
    return interpretCPointer<RSA_METHOD>(kniBridge2253())
}

fun d2i_RSAPublicKey(a: CValuesRef<CPointerVar<RSA>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge2254(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_RSAPublicKey(a: CValuesRef<RSA>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2255(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSAPrivateKey(a: CValuesRef<CPointerVar<RSA>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge2256(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_RSAPrivateKey(a: CValuesRef<RSA>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2257(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun RSA_PSS_PARAMS_new(): CPointer<RSA_PSS_PARAMS>? {
    return interpretCPointer<RSA_PSS_PARAMS>(kniBridge2258())
}

fun RSA_PSS_PARAMS_free(a: CValuesRef<RSA_PSS_PARAMS>?): Unit {
    memScoped {
        return kniBridge2259(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSA_PSS_PARAMS(a: CValuesRef<CPointerVar<RSA_PSS_PARAMS>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<RSA_PSS_PARAMS>? {
    memScoped {
        return interpretCPointer<RSA_PSS_PARAMS>(kniBridge2260(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_RSA_PSS_PARAMS(a: CValuesRef<RSA_PSS_PARAMS>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2261(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun RSA_OAEP_PARAMS_new(): CPointer<RSA_OAEP_PARAMS>? {
    return interpretCPointer<RSA_OAEP_PARAMS>(kniBridge2262())
}

fun RSA_OAEP_PARAMS_free(a: CValuesRef<RSA_OAEP_PARAMS>?): Unit {
    memScoped {
        return kniBridge2263(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSA_OAEP_PARAMS(a: CValuesRef<CPointerVar<RSA_OAEP_PARAMS>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<RSA_OAEP_PARAMS>? {
    memScoped {
        return interpretCPointer<RSA_OAEP_PARAMS>(kniBridge2264(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_RSA_OAEP_PARAMS(a: CValuesRef<RSA_OAEP_PARAMS>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2265(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun RSA_print_fp(fp: CValuesRef<FILE>?, r: CValuesRef<RSA>?, offset: Int): Int {
    memScoped {
        return kniBridge2266(fp?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, offset)
    }
}

fun RSA_print(bp: CValuesRef<BIO>?, r: CValuesRef<RSA>?, offset: Int): Int {
    memScoped {
        return kniBridge2267(bp?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, offset)
    }
}

fun RSA_sign(type: Int, m: CValuesRef<UByteVar>?, m_length: UInt, sigret: CValuesRef<UByteVar>?, siglen: CValuesRef<UIntVar>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2268(type, m?.getPointer(memScope).rawValue, m_length, sigret?.getPointer(memScope).rawValue, siglen?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun RSA_verify(type: Int, m: CValuesRef<UByteVar>?, m_length: UInt, sigbuf: CValuesRef<UByteVar>?, siglen: UInt, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2269(type, m?.getPointer(memScope).rawValue, m_length, sigbuf?.getPointer(memScope).rawValue, siglen, rsa?.getPointer(memScope).rawValue)
    }
}

fun RSA_sign_ASN1_OCTET_STRING(type: Int, m: CValuesRef<UByteVar>?, m_length: UInt, sigret: CValuesRef<UByteVar>?, siglen: CValuesRef<UIntVar>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2270(type, m?.getPointer(memScope).rawValue, m_length, sigret?.getPointer(memScope).rawValue, siglen?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun RSA_verify_ASN1_OCTET_STRING(type: Int, m: CValuesRef<UByteVar>?, m_length: UInt, sigbuf: CValuesRef<UByteVar>?, siglen: UInt, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge2271(type, m?.getPointer(memScope).rawValue, m_length, sigbuf?.getPointer(memScope).rawValue, siglen, rsa?.getPointer(memScope).rawValue)
    }
}

fun RSA_blinding_on(rsa: CValuesRef<RSA>?, ctx: CValuesRef<BN_CTX>?): Int {
    memScoped {
        return kniBridge2272(rsa?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun RSA_blinding_off(rsa: CValuesRef<RSA>?): Unit {
    memScoped {
        return kniBridge2273(rsa?.getPointer(memScope).rawValue)
    }
}

fun RSA_setup_blinding(rsa: CValuesRef<RSA>?, ctx: CValuesRef<BN_CTX>?): CPointer<BN_BLINDING>? {
    memScoped {
        return interpretCPointer<BN_BLINDING>(kniBridge2274(rsa?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue))
    }
}

fun RSA_padding_add_PKCS1_type_1(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int): Int {
    memScoped {
        return kniBridge2275(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl)
    }
}

fun RSA_padding_check_PKCS1_type_1(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int, rsa_len: Int): Int {
    memScoped {
        return kniBridge2276(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl, rsa_len)
    }
}

fun RSA_padding_add_PKCS1_type_2(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int): Int {
    memScoped {
        return kniBridge2277(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl)
    }
}

fun RSA_padding_check_PKCS1_type_2(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int, rsa_len: Int): Int {
    memScoped {
        return kniBridge2278(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl, rsa_len)
    }
}

fun PKCS1_MGF1(mask: CValuesRef<UByteVar>?, len: Long, seed: CValuesRef<UByteVar>?, seedlen: Long, dgst: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge2279(mask?.getPointer(memScope).rawValue, len, seed?.getPointer(memScope).rawValue, seedlen, dgst?.getPointer(memScope).rawValue)
    }
}

fun RSA_padding_add_PKCS1_OAEP(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int, p: CValuesRef<UByteVar>?, pl: Int): Int {
    memScoped {
        return kniBridge2280(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl, p?.getPointer(memScope).rawValue, pl)
    }
}

fun RSA_padding_check_PKCS1_OAEP(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int, rsa_len: Int, p: CValuesRef<UByteVar>?, pl: Int): Int {
    memScoped {
        return kniBridge2281(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl, rsa_len, p?.getPointer(memScope).rawValue, pl)
    }
}

fun RSA_padding_add_PKCS1_OAEP_mgf1(to: CValuesRef<UByteVar>?, tlen: Int, from: CValuesRef<UByteVar>?, flen: Int, param: CValuesRef<UByteVar>?, plen: Int, md: CValuesRef<EVP_MD>?, mgf1md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge2282(to?.getPointer(memScope).rawValue, tlen, from?.getPointer(memScope).rawValue, flen, param?.getPointer(memScope).rawValue, plen, md?.getPointer(memScope).rawValue, mgf1md?.getPointer(memScope).rawValue)
    }
}

fun RSA_padding_check_PKCS1_OAEP_mgf1(to: CValuesRef<UByteVar>?, tlen: Int, from: CValuesRef<UByteVar>?, flen: Int, num: Int, param: CValuesRef<UByteVar>?, plen: Int, md: CValuesRef<EVP_MD>?, mgf1md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge2283(to?.getPointer(memScope).rawValue, tlen, from?.getPointer(memScope).rawValue, flen, num, param?.getPointer(memScope).rawValue, plen, md?.getPointer(memScope).rawValue, mgf1md?.getPointer(memScope).rawValue)
    }
}

fun RSA_padding_add_SSLv23(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int): Int {
    memScoped {
        return kniBridge2284(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl)
    }
}

fun RSA_padding_check_SSLv23(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int, rsa_len: Int): Int {
    memScoped {
        return kniBridge2285(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl, rsa_len)
    }
}

fun RSA_padding_add_none(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int): Int {
    memScoped {
        return kniBridge2286(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl)
    }
}

fun RSA_padding_check_none(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int, rsa_len: Int): Int {
    memScoped {
        return kniBridge2287(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl, rsa_len)
    }
}

fun RSA_padding_add_X931(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int): Int {
    memScoped {
        return kniBridge2288(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl)
    }
}

fun RSA_padding_check_X931(to: CValuesRef<UByteVar>?, tlen: Int, f: CValuesRef<UByteVar>?, fl: Int, rsa_len: Int): Int {
    memScoped {
        return kniBridge2289(to?.getPointer(memScope).rawValue, tlen, f?.getPointer(memScope).rawValue, fl, rsa_len)
    }
}

fun RSA_X931_hash_id(nid: Int): Int {
    return kniBridge2290(nid)
}

fun RSA_verify_PKCS1_PSS(rsa: CValuesRef<RSA>?, mHash: CValuesRef<UByteVar>?, Hash: CValuesRef<EVP_MD>?, EM: CValuesRef<UByteVar>?, sLen: Int): Int {
    memScoped {
        return kniBridge2291(rsa?.getPointer(memScope).rawValue, mHash?.getPointer(memScope).rawValue, Hash?.getPointer(memScope).rawValue, EM?.getPointer(memScope).rawValue, sLen)
    }
}

fun RSA_padding_add_PKCS1_PSS(rsa: CValuesRef<RSA>?, EM: CValuesRef<UByteVar>?, mHash: CValuesRef<UByteVar>?, Hash: CValuesRef<EVP_MD>?, sLen: Int): Int {
    memScoped {
        return kniBridge2292(rsa?.getPointer(memScope).rawValue, EM?.getPointer(memScope).rawValue, mHash?.getPointer(memScope).rawValue, Hash?.getPointer(memScope).rawValue, sLen)
    }
}

fun RSA_verify_PKCS1_PSS_mgf1(rsa: CValuesRef<RSA>?, mHash: CValuesRef<UByteVar>?, Hash: CValuesRef<EVP_MD>?, mgf1Hash: CValuesRef<EVP_MD>?, EM: CValuesRef<UByteVar>?, sLen: Int): Int {
    memScoped {
        return kniBridge2293(rsa?.getPointer(memScope).rawValue, mHash?.getPointer(memScope).rawValue, Hash?.getPointer(memScope).rawValue, mgf1Hash?.getPointer(memScope).rawValue, EM?.getPointer(memScope).rawValue, sLen)
    }
}

fun RSA_padding_add_PKCS1_PSS_mgf1(rsa: CValuesRef<RSA>?, EM: CValuesRef<UByteVar>?, mHash: CValuesRef<UByteVar>?, Hash: CValuesRef<EVP_MD>?, mgf1Hash: CValuesRef<EVP_MD>?, sLen: Int): Int {
    memScoped {
        return kniBridge2294(rsa?.getPointer(memScope).rawValue, EM?.getPointer(memScope).rawValue, mHash?.getPointer(memScope).rawValue, Hash?.getPointer(memScope).rawValue, mgf1Hash?.getPointer(memScope).rawValue, sLen)
    }
}

fun RSA_set_ex_data(r: CValuesRef<RSA>?, idx: Int, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2295(r?.getPointer(memScope).rawValue, idx, arg?.getPointer(memScope).rawValue)
    }
}

fun RSA_get_ex_data(r: CValuesRef<RSA>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2296(r?.getPointer(memScope).rawValue, idx))
    }
}

fun RSAPublicKey_dup(rsa: CValuesRef<RSA>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge2297(rsa?.getPointer(memScope).rawValue))
    }
}

fun RSAPrivateKey_dup(rsa: CValuesRef<RSA>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge2298(rsa?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_new(name: String?, flags: Int): CPointer<RSA_METHOD>? {
    memScoped {
        return interpretCPointer<RSA_METHOD>(kniBridge2299(name?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun RSA_meth_free(meth: CValuesRef<RSA_METHOD>?): Unit {
    memScoped {
        return kniBridge2300(meth?.getPointer(memScope).rawValue)
    }
}

fun RSA_meth_dup(meth: CValuesRef<RSA_METHOD>?): CPointer<RSA_METHOD>? {
    memScoped {
        return interpretCPointer<RSA_METHOD>(kniBridge2301(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_get0_name(meth: CValuesRef<RSA_METHOD>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2302(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set1_name(meth: CValuesRef<RSA_METHOD>?, name: String?): Int {
    memScoped {
        return kniBridge2303(meth?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun RSA_meth_get_flags(meth: CValuesRef<RSA_METHOD>?): Int {
    memScoped {
        return kniBridge2304(meth?.getPointer(memScope).rawValue)
    }
}

fun RSA_meth_set_flags(meth: CValuesRef<RSA_METHOD>?, flags: Int): Int {
    memScoped {
        return kniBridge2305(meth?.getPointer(memScope).rawValue, flags)
    }
}

fun RSA_meth_get0_app_data(meth: CValuesRef<RSA_METHOD>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2306(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set0_app_data(meth: CValuesRef<RSA_METHOD>?, app_data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2307(meth?.getPointer(memScope).rawValue, app_data?.getPointer(memScope).rawValue)
    }
}

fun RSA_meth_get_pub_enc(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>(kniBridge2308(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_pub_enc(rsa: CValuesRef<RSA_METHOD>?, pub_enc: CPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>?): Int {
    memScoped {
        return kniBridge2309(rsa?.getPointer(memScope).rawValue, pub_enc.rawValue)
    }
}

fun RSA_meth_get_pub_dec(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>(kniBridge2310(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_pub_dec(rsa: CValuesRef<RSA_METHOD>?, pub_dec: CPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>?): Int {
    memScoped {
        return kniBridge2311(rsa?.getPointer(memScope).rawValue, pub_dec.rawValue)
    }
}

fun RSA_meth_get_priv_enc(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>(kniBridge2312(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_priv_enc(rsa: CValuesRef<RSA_METHOD>?, priv_enc: CPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>?): Int {
    memScoped {
        return kniBridge2313(rsa?.getPointer(memScope).rawValue, priv_enc.rawValue)
    }
}

fun RSA_meth_get_priv_dec(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>(kniBridge2314(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_priv_dec(rsa: CValuesRef<RSA_METHOD>?, priv_dec: CPointer<CFunction<(Int, CPointer<UByteVar>?, CPointer<UByteVar>?, CPointer<RSA>?, Int) -> Int>>?): Int {
    memScoped {
        return kniBridge2315(rsa?.getPointer(memScope).rawValue, priv_dec.rawValue)
    }
}

fun RSA_meth_get_mod_exp(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<RSA>?, CPointer<BN_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<RSA>?, CPointer<BN_CTX>?) -> Int>>(kniBridge2316(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_mod_exp(rsa: CValuesRef<RSA_METHOD>?, mod_exp: CPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<RSA>?, CPointer<BN_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2317(rsa?.getPointer(memScope).rawValue, mod_exp.rawValue)
    }
}

fun RSA_meth_get_bn_mod_exp(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>(kniBridge2318(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_bn_mod_exp(rsa: CValuesRef<RSA_METHOD>?, bn_mod_exp: CPointer<CFunction<(CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2319(rsa?.getPointer(memScope).rawValue, bn_mod_exp.rawValue)
    }
}

fun RSA_meth_get_init(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(CPointer<RSA>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<RSA>?) -> Int>>(kniBridge2320(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_init(rsa: CValuesRef<RSA_METHOD>?, init: CPointer<CFunction<(CPointer<RSA>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2321(rsa?.getPointer(memScope).rawValue, init.rawValue)
    }
}

fun RSA_meth_get_finish(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(CPointer<RSA>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<RSA>?) -> Int>>(kniBridge2322(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_finish(rsa: CValuesRef<RSA_METHOD>?, finish: CPointer<CFunction<(CPointer<RSA>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2323(rsa?.getPointer(memScope).rawValue, finish.rawValue)
    }
}

fun RSA_meth_get_sign(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(Int, CPointer<UByteVar>?, UInt, CPointer<UByteVar>?, CPointer<UIntVar>?, CPointer<RSA>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<UByteVar>?, UInt, CPointer<UByteVar>?, CPointer<UIntVar>?, CPointer<RSA>?) -> Int>>(kniBridge2324(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_sign(rsa: CValuesRef<RSA_METHOD>?, sign: CPointer<CFunction<(Int, CPointer<UByteVar>?, UInt, CPointer<UByteVar>?, CPointer<UIntVar>?, CPointer<RSA>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2325(rsa?.getPointer(memScope).rawValue, sign.rawValue)
    }
}

fun RSA_meth_get_verify(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(Int, CPointer<UByteVar>?, UInt, CPointer<UByteVar>?, UInt, CPointer<RSA>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<UByteVar>?, UInt, CPointer<UByteVar>?, UInt, CPointer<RSA>?) -> Int>>(kniBridge2326(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_verify(rsa: CValuesRef<RSA_METHOD>?, verify: CPointer<CFunction<(Int, CPointer<UByteVar>?, UInt, CPointer<UByteVar>?, UInt, CPointer<RSA>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2327(rsa?.getPointer(memScope).rawValue, verify.rawValue)
    }
}

fun RSA_meth_get_keygen(meth: CValuesRef<RSA_METHOD>?): CPointer<CFunction<(CPointer<RSA>?, Int, CPointer<BIGNUM>?, CPointer<BN_GENCB>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<RSA>?, Int, CPointer<BIGNUM>?, CPointer<BN_GENCB>?) -> Int>>(kniBridge2328(meth?.getPointer(memScope).rawValue))
    }
}

fun RSA_meth_set_keygen(rsa: CValuesRef<RSA_METHOD>?, keygen: CPointer<CFunction<(CPointer<RSA>?, Int, CPointer<BIGNUM>?, CPointer<BN_GENCB>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2329(rsa?.getPointer(memScope).rawValue, keygen.rawValue)
    }
}

fun ERR_load_RSA_strings(): Int {
    return kniBridge2330()
}

fun DHparams_dup(arg0: CValuesRef<DH>?): CPointer<DH>? {
    memScoped {
        return interpretCPointer<DH>(kniBridge2331(arg0?.getPointer(memScope).rawValue))
    }
}

fun DH_OpenSSL(): CPointer<DH_METHOD>? {
    return interpretCPointer<DH_METHOD>(kniBridge2332())
}

fun DH_set_default_method(meth: CValuesRef<DH_METHOD>?): Unit {
    memScoped {
        return kniBridge2333(meth?.getPointer(memScope).rawValue)
    }
}

fun DH_get_default_method(): CPointer<DH_METHOD>? {
    return interpretCPointer<DH_METHOD>(kniBridge2334())
}

fun DH_set_method(dh: CValuesRef<DH>?, meth: CValuesRef<DH_METHOD>?): Int {
    memScoped {
        return kniBridge2335(dh?.getPointer(memScope).rawValue, meth?.getPointer(memScope).rawValue)
    }
}

fun DH_new_method(engine: CValuesRef<ENGINE>?): CPointer<DH>? {
    memScoped {
        return interpretCPointer<DH>(kniBridge2336(engine?.getPointer(memScope).rawValue))
    }
}

fun DH_new(): CPointer<DH>? {
    return interpretCPointer<DH>(kniBridge2337())
}

fun DH_free(dh: CValuesRef<DH>?): Unit {
    memScoped {
        return kniBridge2338(dh?.getPointer(memScope).rawValue)
    }
}

fun DH_up_ref(dh: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2339(dh?.getPointer(memScope).rawValue)
    }
}

fun DH_bits(dh: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2340(dh?.getPointer(memScope).rawValue)
    }
}

fun DH_size(dh: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2341(dh?.getPointer(memScope).rawValue)
    }
}

fun DH_security_bits(dh: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2342(dh?.getPointer(memScope).rawValue)
    }
}

fun DH_set_ex_data(d: CValuesRef<DH>?, idx: Int, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2343(d?.getPointer(memScope).rawValue, idx, arg?.getPointer(memScope).rawValue)
    }
}

fun DH_get_ex_data(d: CValuesRef<DH>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2344(d?.getPointer(memScope).rawValue, idx))
    }
}

fun DH_generate_parameters(prime_len: Int, generator: Int, callback: CPointer<CFunction<(Int, Int, COpaquePointer?) -> Unit>>?, cb_arg: CValuesRef<*>?): CPointer<DH>? {
    memScoped {
        return interpretCPointer<DH>(kniBridge2345(prime_len, generator, callback.rawValue, cb_arg?.getPointer(memScope).rawValue))
    }
}

fun DH_generate_parameters_ex(dh: CValuesRef<DH>?, prime_len: Int, generator: Int, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge2346(dh?.getPointer(memScope).rawValue, prime_len, generator, cb?.getPointer(memScope).rawValue)
    }
}

fun DH_check_params(dh: CValuesRef<DH>?, ret: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge2347(dh?.getPointer(memScope).rawValue, ret?.getPointer(memScope).rawValue)
    }
}

fun DH_check(dh: CValuesRef<DH>?, codes: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge2348(dh?.getPointer(memScope).rawValue, codes?.getPointer(memScope).rawValue)
    }
}

fun DH_check_pub_key(dh: CValuesRef<DH>?, pub_key: CValuesRef<BIGNUM>?, codes: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge2349(dh?.getPointer(memScope).rawValue, pub_key?.getPointer(memScope).rawValue, codes?.getPointer(memScope).rawValue)
    }
}

fun DH_generate_key(dh: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2350(dh?.getPointer(memScope).rawValue)
    }
}

fun DH_compute_key(key: CValuesRef<UByteVar>?, pub_key: CValuesRef<BIGNUM>?, dh: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2351(key?.getPointer(memScope).rawValue, pub_key?.getPointer(memScope).rawValue, dh?.getPointer(memScope).rawValue)
    }
}

fun DH_compute_key_padded(key: CValuesRef<UByteVar>?, pub_key: CValuesRef<BIGNUM>?, dh: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2352(key?.getPointer(memScope).rawValue, pub_key?.getPointer(memScope).rawValue, dh?.getPointer(memScope).rawValue)
    }
}

fun d2i_DHparams(a: CValuesRef<CPointerVar<DH>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<DH>? {
    memScoped {
        return interpretCPointer<DH>(kniBridge2353(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun i2d_DHparams(a: CValuesRef<DH>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2354(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_DHxparams(a: CValuesRef<CPointerVar<DH>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<DH>? {
    memScoped {
        return interpretCPointer<DH>(kniBridge2355(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun i2d_DHxparams(a: CValuesRef<DH>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2356(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun DHparams_print_fp(fp: CValuesRef<FILE>?, x: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2357(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun DHparams_print(bp: CValuesRef<BIO>?, x: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge2358(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun DH_get_1024_160(): CPointer<DH>? {
    return interpretCPointer<DH>(kniBridge2359())
}

fun DH_get_2048_224(): CPointer<DH>? {
    return interpretCPointer<DH>(kniBridge2360())
}

fun DH_get_2048_256(): CPointer<DH>? {
    return interpretCPointer<DH>(kniBridge2361())
}

fun DH_KDF_X9_42(out: CValuesRef<UByteVar>?, outlen: size_t, Z: CValuesRef<UByteVar>?, Zlen: size_t, key_oid: CValuesRef<ASN1_OBJECT>?, ukm: CValuesRef<UByteVar>?, ukmlen: size_t, md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge2362(out?.getPointer(memScope).rawValue, outlen, Z?.getPointer(memScope).rawValue, Zlen, key_oid?.getPointer(memScope).rawValue, ukm?.getPointer(memScope).rawValue, ukmlen, md?.getPointer(memScope).rawValue)
    }
}

fun DH_get0_pqg(dh: CValuesRef<DH>?, p: CValuesRef<CPointerVar<BIGNUM>>?, q: CValuesRef<CPointerVar<BIGNUM>>?, g: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2363(dh?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, q?.getPointer(memScope).rawValue, g?.getPointer(memScope).rawValue)
    }
}

fun DH_set0_pqg(dh: CValuesRef<DH>?, p: CValuesRef<BIGNUM>?, q: CValuesRef<BIGNUM>?, g: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2364(dh?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, q?.getPointer(memScope).rawValue, g?.getPointer(memScope).rawValue)
    }
}

fun DH_get0_key(dh: CValuesRef<DH>?, pub_key: CValuesRef<CPointerVar<BIGNUM>>?, priv_key: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2365(dh?.getPointer(memScope).rawValue, pub_key?.getPointer(memScope).rawValue, priv_key?.getPointer(memScope).rawValue)
    }
}

fun DH_set0_key(dh: CValuesRef<DH>?, pub_key: CValuesRef<BIGNUM>?, priv_key: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2366(dh?.getPointer(memScope).rawValue, pub_key?.getPointer(memScope).rawValue, priv_key?.getPointer(memScope).rawValue)
    }
}

fun DH_clear_flags(dh: CValuesRef<DH>?, flags: Int): Unit {
    memScoped {
        return kniBridge2367(dh?.getPointer(memScope).rawValue, flags)
    }
}

fun DH_test_flags(dh: CValuesRef<DH>?, flags: Int): Int {
    memScoped {
        return kniBridge2368(dh?.getPointer(memScope).rawValue, flags)
    }
}

fun DH_set_flags(dh: CValuesRef<DH>?, flags: Int): Unit {
    memScoped {
        return kniBridge2369(dh?.getPointer(memScope).rawValue, flags)
    }
}

fun DH_get0_engine(d: CValuesRef<DH>?): CPointer<ENGINE>? {
    memScoped {
        return interpretCPointer<ENGINE>(kniBridge2370(d?.getPointer(memScope).rawValue))
    }
}

fun DH_get_length(dh: CValuesRef<DH>?): Long {
    memScoped {
        return kniBridge2371(dh?.getPointer(memScope).rawValue)
    }
}

fun DH_set_length(dh: CValuesRef<DH>?, length: Long): Int {
    memScoped {
        return kniBridge2372(dh?.getPointer(memScope).rawValue, length)
    }
}

fun DH_meth_new(name: String?, flags: Int): CPointer<DH_METHOD>? {
    memScoped {
        return interpretCPointer<DH_METHOD>(kniBridge2373(name?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun DH_meth_free(dhm: CValuesRef<DH_METHOD>?): Unit {
    memScoped {
        return kniBridge2374(dhm?.getPointer(memScope).rawValue)
    }
}

fun DH_meth_dup(dhm: CValuesRef<DH_METHOD>?): CPointer<DH_METHOD>? {
    memScoped {
        return interpretCPointer<DH_METHOD>(kniBridge2375(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_get0_name(dhm: CValuesRef<DH_METHOD>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2376(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_set1_name(dhm: CValuesRef<DH_METHOD>?, name: String?): Int {
    memScoped {
        return kniBridge2377(dhm?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun DH_meth_get_flags(dhm: CValuesRef<DH_METHOD>?): Int {
    memScoped {
        return kniBridge2378(dhm?.getPointer(memScope).rawValue)
    }
}

fun DH_meth_set_flags(dhm: CValuesRef<DH_METHOD>?, flags: Int): Int {
    memScoped {
        return kniBridge2379(dhm?.getPointer(memScope).rawValue, flags)
    }
}

fun DH_meth_get0_app_data(dhm: CValuesRef<DH_METHOD>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2380(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_set0_app_data(dhm: CValuesRef<DH_METHOD>?, app_data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2381(dhm?.getPointer(memScope).rawValue, app_data?.getPointer(memScope).rawValue)
    }
}

fun DH_meth_get_generate_key(dhm: CValuesRef<DH_METHOD>?): CPointer<CFunction<(CPointer<DH>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DH>?) -> Int>>(kniBridge2382(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_set_generate_key(dhm: CValuesRef<DH_METHOD>?, generate_key: CPointer<CFunction<(CPointer<DH>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2383(dhm?.getPointer(memScope).rawValue, generate_key.rawValue)
    }
}

fun DH_meth_get_compute_key(dhm: CValuesRef<DH_METHOD>?): CPointer<CFunction<(CPointer<UByteVar>?, CPointer<BIGNUM>?, CPointer<DH>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<UByteVar>?, CPointer<BIGNUM>?, CPointer<DH>?) -> Int>>(kniBridge2384(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_set_compute_key(dhm: CValuesRef<DH_METHOD>?, compute_key: CPointer<CFunction<(CPointer<UByteVar>?, CPointer<BIGNUM>?, CPointer<DH>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2385(dhm?.getPointer(memScope).rawValue, compute_key.rawValue)
    }
}

fun DH_meth_get_bn_mod_exp(dhm: CValuesRef<DH_METHOD>?): CPointer<CFunction<(CPointer<DH>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DH>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>(kniBridge2386(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_set_bn_mod_exp(dhm: CValuesRef<DH_METHOD>?, bn_mod_exp: CPointer<CFunction<(CPointer<DH>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2387(dhm?.getPointer(memScope).rawValue, bn_mod_exp.rawValue)
    }
}

fun DH_meth_get_init(dhm: CValuesRef<DH_METHOD>?): CPointer<CFunction<(CPointer<DH>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DH>?) -> Int>>(kniBridge2388(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_set_init(dhm: CValuesRef<DH_METHOD>?, init: CPointer<CFunction<(CPointer<DH>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2389(dhm?.getPointer(memScope).rawValue, init.rawValue)
    }
}

fun DH_meth_get_finish(dhm: CValuesRef<DH_METHOD>?): CPointer<CFunction<(CPointer<DH>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DH>?) -> Int>>(kniBridge2390(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_set_finish(dhm: CValuesRef<DH_METHOD>?, finish: CPointer<CFunction<(CPointer<DH>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2391(dhm?.getPointer(memScope).rawValue, finish.rawValue)
    }
}

fun DH_meth_get_generate_params(dhm: CValuesRef<DH_METHOD>?): CPointer<CFunction<(CPointer<DH>?, Int, Int, CPointer<BN_GENCB>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DH>?, Int, Int, CPointer<BN_GENCB>?) -> Int>>(kniBridge2392(dhm?.getPointer(memScope).rawValue))
    }
}

fun DH_meth_set_generate_params(dhm: CValuesRef<DH_METHOD>?, generate_params: CPointer<CFunction<(CPointer<DH>?, Int, Int, CPointer<BN_GENCB>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2393(dhm?.getPointer(memScope).rawValue, generate_params.rawValue)
    }
}

fun ERR_load_DH_strings(): Int {
    return kniBridge2394()
}

fun DSAparams_dup(x: CValuesRef<DSA>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge2395(x?.getPointer(memScope).rawValue))
    }
}

fun DSA_SIG_new(): CPointer<DSA_SIG>? {
    return interpretCPointer<DSA_SIG>(kniBridge2396())
}

fun DSA_SIG_free(a: CValuesRef<DSA_SIG>?): Unit {
    memScoped {
        return kniBridge2397(a?.getPointer(memScope).rawValue)
    }
}

fun i2d_DSA_SIG(a: CValuesRef<DSA_SIG>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2398(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_DSA_SIG(v: CValuesRef<CPointerVar<DSA_SIG>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<DSA_SIG>? {
    memScoped {
        return interpretCPointer<DSA_SIG>(kniBridge2399(v?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun DSA_SIG_get0(sig: CValuesRef<DSA_SIG>?, pr: CValuesRef<CPointerVar<BIGNUM>>?, ps: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2400(sig?.getPointer(memScope).rawValue, pr?.getPointer(memScope).rawValue, ps?.getPointer(memScope).rawValue)
    }
}

fun DSA_SIG_set0(sig: CValuesRef<DSA_SIG>?, r: CValuesRef<BIGNUM>?, s: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2401(sig?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue, s?.getPointer(memScope).rawValue)
    }
}

fun DSA_do_sign(dgst: CValuesRef<UByteVar>?, dlen: Int, dsa: CValuesRef<DSA>?): CPointer<DSA_SIG>? {
    memScoped {
        return interpretCPointer<DSA_SIG>(kniBridge2402(dgst?.getPointer(memScope).rawValue, dlen, dsa?.getPointer(memScope).rawValue))
    }
}

fun DSA_do_verify(dgst: CValuesRef<UByteVar>?, dgst_len: Int, sig: CValuesRef<DSA_SIG>?, dsa: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2403(dgst?.getPointer(memScope).rawValue, dgst_len, sig?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue)
    }
}

fun DSA_OpenSSL(): CPointer<DSA_METHOD>? {
    return interpretCPointer<DSA_METHOD>(kniBridge2404())
}

fun DSA_set_default_method(arg0: CValuesRef<DSA_METHOD>?): Unit {
    memScoped {
        return kniBridge2405(arg0?.getPointer(memScope).rawValue)
    }
}

fun DSA_get_default_method(): CPointer<DSA_METHOD>? {
    return interpretCPointer<DSA_METHOD>(kniBridge2406())
}

fun DSA_set_method(dsa: CValuesRef<DSA>?, arg1: CValuesRef<DSA_METHOD>?): Int {
    memScoped {
        return kniBridge2407(dsa?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue)
    }
}

fun DSA_get_method(d: CValuesRef<DSA>?): CPointer<DSA_METHOD>? {
    memScoped {
        return interpretCPointer<DSA_METHOD>(kniBridge2408(d?.getPointer(memScope).rawValue))
    }
}

fun DSA_new(): CPointer<DSA>? {
    return interpretCPointer<DSA>(kniBridge2409())
}

fun DSA_new_method(engine: CValuesRef<ENGINE>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge2410(engine?.getPointer(memScope).rawValue))
    }
}

fun DSA_free(r: CValuesRef<DSA>?): Unit {
    memScoped {
        return kniBridge2411(r?.getPointer(memScope).rawValue)
    }
}

fun DSA_up_ref(r: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2412(r?.getPointer(memScope).rawValue)
    }
}

fun DSA_size(arg0: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2413(arg0?.getPointer(memScope).rawValue)
    }
}

fun DSA_bits(d: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2414(d?.getPointer(memScope).rawValue)
    }
}

fun DSA_security_bits(d: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2415(d?.getPointer(memScope).rawValue)
    }
}

fun DSA_sign_setup(dsa: CValuesRef<DSA>?, ctx_in: CValuesRef<BN_CTX>?, kinvp: CValuesRef<CPointerVar<BIGNUM>>?, rp: CValuesRef<CPointerVar<BIGNUM>>?): Int {
    memScoped {
        return kniBridge2416(dsa?.getPointer(memScope).rawValue, ctx_in?.getPointer(memScope).rawValue, kinvp?.getPointer(memScope).rawValue, rp?.getPointer(memScope).rawValue)
    }
}

fun DSA_sign(type: Int, dgst: CValuesRef<UByteVar>?, dlen: Int, sig: CValuesRef<UByteVar>?, siglen: CValuesRef<UIntVar>?, dsa: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2417(type, dgst?.getPointer(memScope).rawValue, dlen, sig?.getPointer(memScope).rawValue, siglen?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue)
    }
}

fun DSA_verify(type: Int, dgst: CValuesRef<UByteVar>?, dgst_len: Int, sigbuf: CValuesRef<UByteVar>?, siglen: Int, dsa: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2418(type, dgst?.getPointer(memScope).rawValue, dgst_len, sigbuf?.getPointer(memScope).rawValue, siglen, dsa?.getPointer(memScope).rawValue)
    }
}

fun DSA_set_ex_data(d: CValuesRef<DSA>?, idx: Int, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2419(d?.getPointer(memScope).rawValue, idx, arg?.getPointer(memScope).rawValue)
    }
}

fun DSA_get_ex_data(d: CValuesRef<DSA>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2420(d?.getPointer(memScope).rawValue, idx))
    }
}

fun d2i_DSAPublicKey(a: CValuesRef<CPointerVar<DSA>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge2421(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun d2i_DSAPrivateKey(a: CValuesRef<CPointerVar<DSA>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge2422(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun d2i_DSAparams(a: CValuesRef<CPointerVar<DSA>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge2423(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun DSA_generate_parameters(bits: Int, seed: CValuesRef<UByteVar>?, seed_len: Int, counter_ret: CValuesRef<IntVar>?, h_ret: CValuesRef<ULongVar>?, callback: CPointer<CFunction<(Int, Int, COpaquePointer?) -> Unit>>?, cb_arg: CValuesRef<*>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge2424(bits, seed?.getPointer(memScope).rawValue, seed_len, counter_ret?.getPointer(memScope).rawValue, h_ret?.getPointer(memScope).rawValue, callback.rawValue, cb_arg?.getPointer(memScope).rawValue))
    }
}

fun DSA_generate_parameters_ex(dsa: CValuesRef<DSA>?, bits: Int, seed: CValuesRef<UByteVar>?, seed_len: Int, counter_ret: CValuesRef<IntVar>?, h_ret: CValuesRef<ULongVar>?, cb: CValuesRef<BN_GENCB>?): Int {
    memScoped {
        return kniBridge2425(dsa?.getPointer(memScope).rawValue, bits, seed?.getPointer(memScope).rawValue, seed_len, counter_ret?.getPointer(memScope).rawValue, h_ret?.getPointer(memScope).rawValue, cb?.getPointer(memScope).rawValue)
    }
}

fun DSA_generate_key(a: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2426(a?.getPointer(memScope).rawValue)
    }
}

fun i2d_DSAPublicKey(a: CValuesRef<DSA>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2427(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun i2d_DSAPrivateKey(a: CValuesRef<DSA>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2428(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun i2d_DSAparams(a: CValuesRef<DSA>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge2429(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun DSAparams_print(bp: CValuesRef<BIO>?, x: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2430(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun DSA_print(bp: CValuesRef<BIO>?, x: CValuesRef<DSA>?, off: Int): Int {
    memScoped {
        return kniBridge2431(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, off)
    }
}

fun DSAparams_print_fp(fp: CValuesRef<FILE>?, x: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge2432(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun DSA_print_fp(bp: CValuesRef<FILE>?, x: CValuesRef<DSA>?, off: Int): Int {
    memScoped {
        return kniBridge2433(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, off)
    }
}

fun DSA_dup_DH(r: CValuesRef<DSA>?): CPointer<DH>? {
    memScoped {
        return interpretCPointer<DH>(kniBridge2434(r?.getPointer(memScope).rawValue))
    }
}

fun DSA_get0_pqg(d: CValuesRef<DSA>?, p: CValuesRef<CPointerVar<BIGNUM>>?, q: CValuesRef<CPointerVar<BIGNUM>>?, g: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2435(d?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, q?.getPointer(memScope).rawValue, g?.getPointer(memScope).rawValue)
    }
}

fun DSA_set0_pqg(d: CValuesRef<DSA>?, p: CValuesRef<BIGNUM>?, q: CValuesRef<BIGNUM>?, g: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2436(d?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, q?.getPointer(memScope).rawValue, g?.getPointer(memScope).rawValue)
    }
}

fun DSA_get0_key(d: CValuesRef<DSA>?, pub_key: CValuesRef<CPointerVar<BIGNUM>>?, priv_key: CValuesRef<CPointerVar<BIGNUM>>?): Unit {
    memScoped {
        return kniBridge2437(d?.getPointer(memScope).rawValue, pub_key?.getPointer(memScope).rawValue, priv_key?.getPointer(memScope).rawValue)
    }
}

fun DSA_set0_key(d: CValuesRef<DSA>?, pub_key: CValuesRef<BIGNUM>?, priv_key: CValuesRef<BIGNUM>?): Int {
    memScoped {
        return kniBridge2438(d?.getPointer(memScope).rawValue, pub_key?.getPointer(memScope).rawValue, priv_key?.getPointer(memScope).rawValue)
    }
}

fun DSA_clear_flags(d: CValuesRef<DSA>?, flags: Int): Unit {
    memScoped {
        return kniBridge2439(d?.getPointer(memScope).rawValue, flags)
    }
}

fun DSA_test_flags(d: CValuesRef<DSA>?, flags: Int): Int {
    memScoped {
        return kniBridge2440(d?.getPointer(memScope).rawValue, flags)
    }
}

fun DSA_set_flags(d: CValuesRef<DSA>?, flags: Int): Unit {
    memScoped {
        return kniBridge2441(d?.getPointer(memScope).rawValue, flags)
    }
}

fun DSA_get0_engine(d: CValuesRef<DSA>?): CPointer<ENGINE>? {
    memScoped {
        return interpretCPointer<ENGINE>(kniBridge2442(d?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_new(name: String?, flags: Int): CPointer<DSA_METHOD>? {
    memScoped {
        return interpretCPointer<DSA_METHOD>(kniBridge2443(name?.cstr?.getPointer(memScope).rawValue, flags))
    }
}

fun DSA_meth_free(dsam: CValuesRef<DSA_METHOD>?): Unit {
    memScoped {
        return kniBridge2444(dsam?.getPointer(memScope).rawValue)
    }
}

fun DSA_meth_dup(dsam: CValuesRef<DSA_METHOD>?): CPointer<DSA_METHOD>? {
    memScoped {
        return interpretCPointer<DSA_METHOD>(kniBridge2445(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_get0_name(dsam: CValuesRef<DSA_METHOD>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2446(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set1_name(dsam: CValuesRef<DSA_METHOD>?, name: String?): Int {
    memScoped {
        return kniBridge2447(dsam?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun DSA_meth_get_flags(dsam: CValuesRef<DSA_METHOD>?): Int {
    memScoped {
        return kniBridge2448(dsam?.getPointer(memScope).rawValue)
    }
}

fun DSA_meth_set_flags(dsam: CValuesRef<DSA_METHOD>?, flags: Int): Int {
    memScoped {
        return kniBridge2449(dsam?.getPointer(memScope).rawValue, flags)
    }
}

fun DSA_meth_get0_app_data(dsam: CValuesRef<DSA_METHOD>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2450(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set0_app_data(dsam: CValuesRef<DSA_METHOD>?, app_data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2451(dsam?.getPointer(memScope).rawValue, app_data?.getPointer(memScope).rawValue)
    }
}

fun DSA_meth_get_sign(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<UByteVar>?, Int, CPointer<DSA>?) -> CPointer<DSA_SIG>?>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<UByteVar>?, Int, CPointer<DSA>?) -> CPointer<DSA_SIG>?>>(kniBridge2452(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_sign(dsam: CValuesRef<DSA_METHOD>?, sign: CPointer<CFunction<(CPointer<UByteVar>?, Int, CPointer<DSA>?) -> CPointer<DSA_SIG>?>>?): Int {
    memScoped {
        return kniBridge2453(dsam?.getPointer(memScope).rawValue, sign.rawValue)
    }
}

fun DSA_meth_get_sign_setup(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<DSA>?, CPointer<BN_CTX>?, CPointer<CPointerVar<BIGNUM>>?, CPointer<CPointerVar<BIGNUM>>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DSA>?, CPointer<BN_CTX>?, CPointer<CPointerVar<BIGNUM>>?, CPointer<CPointerVar<BIGNUM>>?) -> Int>>(kniBridge2454(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_sign_setup(dsam: CValuesRef<DSA_METHOD>?, sign_setup: CPointer<CFunction<(CPointer<DSA>?, CPointer<BN_CTX>?, CPointer<CPointerVar<BIGNUM>>?, CPointer<CPointerVar<BIGNUM>>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2455(dsam?.getPointer(memScope).rawValue, sign_setup.rawValue)
    }
}

fun DSA_meth_get_verify(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<UByteVar>?, Int, CPointer<DSA_SIG>?, CPointer<DSA>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<UByteVar>?, Int, CPointer<DSA_SIG>?, CPointer<DSA>?) -> Int>>(kniBridge2456(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_verify(dsam: CValuesRef<DSA_METHOD>?, verify: CPointer<CFunction<(CPointer<UByteVar>?, Int, CPointer<DSA_SIG>?, CPointer<DSA>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2457(dsam?.getPointer(memScope).rawValue, verify.rawValue)
    }
}

fun DSA_meth_get_mod_exp(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<DSA>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DSA>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>(kniBridge2458(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_mod_exp(dsam: CValuesRef<DSA_METHOD>?, mod_exp: CPointer<CFunction<(CPointer<DSA>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2459(dsam?.getPointer(memScope).rawValue, mod_exp.rawValue)
    }
}

fun DSA_meth_get_bn_mod_exp(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<DSA>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DSA>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>(kniBridge2460(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_bn_mod_exp(dsam: CValuesRef<DSA_METHOD>?, bn_mod_exp: CPointer<CFunction<(CPointer<DSA>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BIGNUM>?, CPointer<BN_CTX>?, CPointer<BN_MONT_CTX>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2461(dsam?.getPointer(memScope).rawValue, bn_mod_exp.rawValue)
    }
}

fun DSA_meth_get_init(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<DSA>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DSA>?) -> Int>>(kniBridge2462(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_init(dsam: CValuesRef<DSA_METHOD>?, init: CPointer<CFunction<(CPointer<DSA>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2463(dsam?.getPointer(memScope).rawValue, init.rawValue)
    }
}

fun DSA_meth_get_finish(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<DSA>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DSA>?) -> Int>>(kniBridge2464(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_finish(dsam: CValuesRef<DSA_METHOD>?, finish: CPointer<CFunction<(CPointer<DSA>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2465(dsam?.getPointer(memScope).rawValue, finish.rawValue)
    }
}

fun DSA_meth_get_paramgen(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<DSA>?, Int, CPointer<UByteVar>?, Int, CPointer<IntVar>?, CPointer<ULongVar>?, CPointer<BN_GENCB>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DSA>?, Int, CPointer<UByteVar>?, Int, CPointer<IntVar>?, CPointer<ULongVar>?, CPointer<BN_GENCB>?) -> Int>>(kniBridge2466(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_paramgen(dsam: CValuesRef<DSA_METHOD>?, paramgen: CPointer<CFunction<(CPointer<DSA>?, Int, CPointer<UByteVar>?, Int, CPointer<IntVar>?, CPointer<ULongVar>?, CPointer<BN_GENCB>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2467(dsam?.getPointer(memScope).rawValue, paramgen.rawValue)
    }
}

fun DSA_meth_get_keygen(dsam: CValuesRef<DSA_METHOD>?): CPointer<CFunction<(CPointer<DSA>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<DSA>?) -> Int>>(kniBridge2468(dsam?.getPointer(memScope).rawValue))
    }
}

fun DSA_meth_set_keygen(dsam: CValuesRef<DSA_METHOD>?, keygen: CPointer<CFunction<(CPointer<DSA>?) -> Int>>?): Int {
    memScoped {
        return kniBridge2469(dsam?.getPointer(memScope).rawValue, keygen.rawValue)
    }
}

fun ERR_load_DSA_strings(): Int {
    return kniBridge2470()
}

fun SHA1_Init(c: CValuesRef<SHA_CTX>?): Int {
    memScoped {
        return kniBridge2471(c?.getPointer(memScope).rawValue)
    }
}

fun SHA1_Update(c: CValuesRef<SHA_CTX>?, data: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge2472(c?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun SHA1_Final(md: CValuesRef<UByteVar>?, c: CValuesRef<SHA_CTX>?): Int {
    memScoped {
        return kniBridge2473(md?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue)
    }
}

fun SHA1(d: CValuesRef<UByteVar>?, n: size_t, md: CValuesRef<UByteVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge2474(d?.getPointer(memScope).rawValue, n, md?.getPointer(memScope).rawValue))
    }
}

fun SHA1_Transform(c: CValuesRef<SHA_CTX>?, data: CValuesRef<UByteVar>?): Unit {
    memScoped {
        return kniBridge2475(c?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun SHA224_Init(c: CValuesRef<SHA256_CTX>?): Int {
    memScoped {
        return kniBridge2476(c?.getPointer(memScope).rawValue)
    }
}

fun SHA224_Update(c: CValuesRef<SHA256_CTX>?, data: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge2477(c?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun SHA224_Final(md: CValuesRef<UByteVar>?, c: CValuesRef<SHA256_CTX>?): Int {
    memScoped {
        return kniBridge2478(md?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue)
    }
}

fun SHA224(d: CValuesRef<UByteVar>?, n: size_t, md: CValuesRef<UByteVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge2479(d?.getPointer(memScope).rawValue, n, md?.getPointer(memScope).rawValue))
    }
}

fun SHA256_Init(c: CValuesRef<SHA256_CTX>?): Int {
    memScoped {
        return kniBridge2480(c?.getPointer(memScope).rawValue)
    }
}

fun SHA256_Update(c: CValuesRef<SHA256_CTX>?, data: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge2481(c?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun SHA256_Final(md: CValuesRef<UByteVar>?, c: CValuesRef<SHA256_CTX>?): Int {
    memScoped {
        return kniBridge2482(md?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue)
    }
}

fun SHA256(d: CValuesRef<UByteVar>?, n: size_t, md: CValuesRef<UByteVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge2483(d?.getPointer(memScope).rawValue, n, md?.getPointer(memScope).rawValue))
    }
}

fun SHA256_Transform(c: CValuesRef<SHA256_CTX>?, data: CValuesRef<UByteVar>?): Unit {
    memScoped {
        return kniBridge2484(c?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun SHA384_Init(c: CValuesRef<SHA512_CTX>?): Int {
    memScoped {
        return kniBridge2485(c?.getPointer(memScope).rawValue)
    }
}

fun SHA384_Update(c: CValuesRef<SHA512_CTX>?, data: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge2486(c?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun SHA384_Final(md: CValuesRef<UByteVar>?, c: CValuesRef<SHA512_CTX>?): Int {
    memScoped {
        return kniBridge2487(md?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue)
    }
}

fun SHA384(d: CValuesRef<UByteVar>?, n: size_t, md: CValuesRef<UByteVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge2488(d?.getPointer(memScope).rawValue, n, md?.getPointer(memScope).rawValue))
    }
}

fun SHA512_Init(c: CValuesRef<SHA512_CTX>?): Int {
    memScoped {
        return kniBridge2489(c?.getPointer(memScope).rawValue)
    }
}

fun SHA512_Update(c: CValuesRef<SHA512_CTX>?, data: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge2490(c?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun SHA512_Final(md: CValuesRef<UByteVar>?, c: CValuesRef<SHA512_CTX>?): Int {
    memScoped {
        return kniBridge2491(md?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue)
    }
}

fun SHA512(d: CValuesRef<UByteVar>?, n: size_t, md: CValuesRef<UByteVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge2492(d?.getPointer(memScope).rawValue, n, md?.getPointer(memScope).rawValue))
    }
}

fun SHA512_Transform(c: CValuesRef<SHA512_CTX>?, data: CValuesRef<UByteVar>?): Unit {
    memScoped {
        return kniBridge2493(c?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_num(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?): Int {
    memScoped {
        return kniBridge2494(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_value(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, idx: Int): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge2495(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_NAME_ENTRY_new(compare: sk_X509_NAME_ENTRY_compfunc?): CPointer<stack_st_X509_NAME_ENTRY>? {
    return interpretCPointer<stack_st_X509_NAME_ENTRY>(kniBridge2496(compare.rawValue))
}

fun sk_X509_NAME_ENTRY_new_null(): CPointer<stack_st_X509_NAME_ENTRY>? {
    return interpretCPointer<stack_st_X509_NAME_ENTRY>(kniBridge2497())
}

fun sk_X509_NAME_ENTRY_free(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?): Unit {
    memScoped {
        return kniBridge2498(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_zero(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?): Unit {
    memScoped {
        return kniBridge2499(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_delete(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, i: Int): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge2500(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_NAME_ENTRY_delete_ptr(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, ptr: CValuesRef<X509_NAME_ENTRY>?): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge2501(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_ENTRY_push(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, ptr: CValuesRef<X509_NAME_ENTRY>?): Int {
    memScoped {
        return kniBridge2502(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_unshift(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, ptr: CValuesRef<X509_NAME_ENTRY>?): Int {
    memScoped {
        return kniBridge2503(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_pop(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge2504(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_ENTRY_shift(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge2505(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_ENTRY_pop_free(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, freefunc: sk_X509_NAME_ENTRY_freefunc?): Unit {
    memScoped {
        return kniBridge2506(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_NAME_ENTRY_insert(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, ptr: CValuesRef<X509_NAME_ENTRY>?, idx: Int): Int {
    memScoped {
        return kniBridge2507(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_NAME_ENTRY_set(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, idx: Int, ptr: CValuesRef<X509_NAME_ENTRY>?): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge2508(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_ENTRY_find(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, ptr: CValuesRef<X509_NAME_ENTRY>?): Int {
    memScoped {
        return kniBridge2509(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_find_ex(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, ptr: CValuesRef<X509_NAME_ENTRY>?): Int {
    memScoped {
        return kniBridge2510(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_sort(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?): Unit {
    memScoped {
        return kniBridge2511(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_is_sorted(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?): Int {
    memScoped {
        return kniBridge2512(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_ENTRY_dup(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?): CPointer<stack_st_X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<stack_st_X509_NAME_ENTRY>(kniBridge2513(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_ENTRY_deep_copy(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, copyfunc: sk_X509_NAME_ENTRY_copyfunc?, freefunc: sk_X509_NAME_ENTRY_freefunc?): CPointer<stack_st_X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<stack_st_X509_NAME_ENTRY>(kniBridge2514(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_NAME_ENTRY_set_cmp_func(sk: CValuesRef<stack_st_X509_NAME_ENTRY>?, compare: sk_X509_NAME_ENTRY_compfunc?): sk_X509_NAME_ENTRY_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_NAME_ENTRY>>?, CPointer<CPointerVar<X509_NAME_ENTRY>>?) -> Int>>(kniBridge2515(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_NAME_num(sk: CValuesRef<stack_st_X509_NAME>?): Int {
    memScoped {
        return kniBridge2516(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_value(sk: CValuesRef<stack_st_X509_NAME>?, idx: Int): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge2517(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_NAME_new(compare: sk_X509_NAME_compfunc?): CPointer<stack_st_X509_NAME>? {
    return interpretCPointer<stack_st_X509_NAME>(kniBridge2518(compare.rawValue))
}

fun sk_X509_NAME_new_null(): CPointer<stack_st_X509_NAME>? {
    return interpretCPointer<stack_st_X509_NAME>(kniBridge2519())
}

fun sk_X509_NAME_free(sk: CValuesRef<stack_st_X509_NAME>?): Unit {
    memScoped {
        return kniBridge2520(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_zero(sk: CValuesRef<stack_st_X509_NAME>?): Unit {
    memScoped {
        return kniBridge2521(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_delete(sk: CValuesRef<stack_st_X509_NAME>?, i: Int): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge2522(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_NAME_delete_ptr(sk: CValuesRef<stack_st_X509_NAME>?, ptr: CValuesRef<X509_NAME>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge2523(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_push(sk: CValuesRef<stack_st_X509_NAME>?, ptr: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge2524(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_unshift(sk: CValuesRef<stack_st_X509_NAME>?, ptr: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge2525(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_pop(sk: CValuesRef<stack_st_X509_NAME>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge2526(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_shift(sk: CValuesRef<stack_st_X509_NAME>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge2527(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_pop_free(sk: CValuesRef<stack_st_X509_NAME>?, freefunc: sk_X509_NAME_freefunc?): Unit {
    memScoped {
        return kniBridge2528(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_NAME_insert(sk: CValuesRef<stack_st_X509_NAME>?, ptr: CValuesRef<X509_NAME>?, idx: Int): Int {
    memScoped {
        return kniBridge2529(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_NAME_set(sk: CValuesRef<stack_st_X509_NAME>?, idx: Int, ptr: CValuesRef<X509_NAME>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge2530(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_find(sk: CValuesRef<stack_st_X509_NAME>?, ptr: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge2531(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_find_ex(sk: CValuesRef<stack_st_X509_NAME>?, ptr: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge2532(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_sort(sk: CValuesRef<stack_st_X509_NAME>?): Unit {
    memScoped {
        return kniBridge2533(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_is_sorted(sk: CValuesRef<stack_st_X509_NAME>?): Int {
    memScoped {
        return kniBridge2534(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_NAME_dup(sk: CValuesRef<stack_st_X509_NAME>?): CPointer<stack_st_X509_NAME>? {
    memScoped {
        return interpretCPointer<stack_st_X509_NAME>(kniBridge2535(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_NAME_deep_copy(sk: CValuesRef<stack_st_X509_NAME>?, copyfunc: sk_X509_NAME_copyfunc?, freefunc: sk_X509_NAME_freefunc?): CPointer<stack_st_X509_NAME>? {
    memScoped {
        return interpretCPointer<stack_st_X509_NAME>(kniBridge2536(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_NAME_set_cmp_func(sk: CValuesRef<stack_st_X509_NAME>?, compare: sk_X509_NAME_compfunc?): sk_X509_NAME_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_NAME>>?, CPointer<CPointerVar<X509_NAME>>?) -> Int>>(kniBridge2537(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_EXTENSION_num(sk: CValuesRef<stack_st_X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge2538(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_value(sk: CValuesRef<stack_st_X509_EXTENSION>?, idx: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge2539(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_EXTENSION_new(compare: sk_X509_EXTENSION_compfunc?): CPointer<stack_st_X509_EXTENSION>? {
    return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge2540(compare.rawValue))
}

fun sk_X509_EXTENSION_new_null(): CPointer<stack_st_X509_EXTENSION>? {
    return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge2541())
}

fun sk_X509_EXTENSION_free(sk: CValuesRef<stack_st_X509_EXTENSION>?): Unit {
    memScoped {
        return kniBridge2542(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_zero(sk: CValuesRef<stack_st_X509_EXTENSION>?): Unit {
    memScoped {
        return kniBridge2543(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_delete(sk: CValuesRef<stack_st_X509_EXTENSION>?, i: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge2544(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_EXTENSION_delete_ptr(sk: CValuesRef<stack_st_X509_EXTENSION>?, ptr: CValuesRef<X509_EXTENSION>?): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge2545(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_EXTENSION_push(sk: CValuesRef<stack_st_X509_EXTENSION>?, ptr: CValuesRef<X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge2546(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_unshift(sk: CValuesRef<stack_st_X509_EXTENSION>?, ptr: CValuesRef<X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge2547(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_pop(sk: CValuesRef<stack_st_X509_EXTENSION>?): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge2548(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_EXTENSION_shift(sk: CValuesRef<stack_st_X509_EXTENSION>?): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge2549(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_EXTENSION_pop_free(sk: CValuesRef<stack_st_X509_EXTENSION>?, freefunc: sk_X509_EXTENSION_freefunc?): Unit {
    memScoped {
        return kniBridge2550(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_EXTENSION_insert(sk: CValuesRef<stack_st_X509_EXTENSION>?, ptr: CValuesRef<X509_EXTENSION>?, idx: Int): Int {
    memScoped {
        return kniBridge2551(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_EXTENSION_set(sk: CValuesRef<stack_st_X509_EXTENSION>?, idx: Int, ptr: CValuesRef<X509_EXTENSION>?): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge2552(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_EXTENSION_find(sk: CValuesRef<stack_st_X509_EXTENSION>?, ptr: CValuesRef<X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge2553(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_find_ex(sk: CValuesRef<stack_st_X509_EXTENSION>?, ptr: CValuesRef<X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge2554(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_sort(sk: CValuesRef<stack_st_X509_EXTENSION>?): Unit {
    memScoped {
        return kniBridge2555(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_is_sorted(sk: CValuesRef<stack_st_X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge2556(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_EXTENSION_dup(sk: CValuesRef<stack_st_X509_EXTENSION>?): CPointer<stack_st_X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge2557(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_EXTENSION_deep_copy(sk: CValuesRef<stack_st_X509_EXTENSION>?, copyfunc: sk_X509_EXTENSION_copyfunc?, freefunc: sk_X509_EXTENSION_freefunc?): CPointer<stack_st_X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge2558(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_EXTENSION_set_cmp_func(sk: CValuesRef<stack_st_X509_EXTENSION>?, compare: sk_X509_EXTENSION_compfunc?): sk_X509_EXTENSION_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_EXTENSION>>?, CPointer<CPointerVar<X509_EXTENSION>>?) -> Int>>(kniBridge2559(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_ATTRIBUTE_num(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge2560(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_value(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, idx: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge2561(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_ATTRIBUTE_new(compare: sk_X509_ATTRIBUTE_compfunc?): CPointer<stack_st_X509_ATTRIBUTE>? {
    return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge2562(compare.rawValue))
}

fun sk_X509_ATTRIBUTE_new_null(): CPointer<stack_st_X509_ATTRIBUTE>? {
    return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge2563())
}

fun sk_X509_ATTRIBUTE_free(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): Unit {
    memScoped {
        return kniBridge2564(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_zero(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): Unit {
    memScoped {
        return kniBridge2565(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_delete(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, i: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge2566(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_ATTRIBUTE_delete_ptr(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, ptr: CValuesRef<X509_ATTRIBUTE>?): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge2567(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ATTRIBUTE_push(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, ptr: CValuesRef<X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge2568(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_unshift(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, ptr: CValuesRef<X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge2569(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_pop(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge2570(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ATTRIBUTE_shift(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge2571(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ATTRIBUTE_pop_free(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, freefunc: sk_X509_ATTRIBUTE_freefunc?): Unit {
    memScoped {
        return kniBridge2572(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_ATTRIBUTE_insert(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, ptr: CValuesRef<X509_ATTRIBUTE>?, idx: Int): Int {
    memScoped {
        return kniBridge2573(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_ATTRIBUTE_set(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, idx: Int, ptr: CValuesRef<X509_ATTRIBUTE>?): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge2574(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ATTRIBUTE_find(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, ptr: CValuesRef<X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge2575(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_find_ex(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, ptr: CValuesRef<X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge2576(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_sort(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): Unit {
    memScoped {
        return kniBridge2577(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_is_sorted(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge2578(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_ATTRIBUTE_dup(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): CPointer<stack_st_X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge2579(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_ATTRIBUTE_deep_copy(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, copyfunc: sk_X509_ATTRIBUTE_copyfunc?, freefunc: sk_X509_ATTRIBUTE_freefunc?): CPointer<stack_st_X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge2580(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_ATTRIBUTE_set_cmp_func(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, compare: sk_X509_ATTRIBUTE_compfunc?): sk_X509_ATTRIBUTE_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_ATTRIBUTE>>?, CPointer<CPointerVar<X509_ATTRIBUTE>>?) -> Int>>(kniBridge2581(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_num(sk: CValuesRef<stack_st_X509>?): Int {
    memScoped {
        return kniBridge2582(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_value(sk: CValuesRef<stack_st_X509>?, idx: Int): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2583(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_new(compare: sk_X509_compfunc?): CPointer<stack_st_X509>? {
    return interpretCPointer<stack_st_X509>(kniBridge2584(compare.rawValue))
}

fun sk_X509_new_null(): CPointer<stack_st_X509>? {
    return interpretCPointer<stack_st_X509>(kniBridge2585())
}

fun sk_X509_free(sk: CValuesRef<stack_st_X509>?): Unit {
    memScoped {
        return kniBridge2586(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_zero(sk: CValuesRef<stack_st_X509>?): Unit {
    memScoped {
        return kniBridge2587(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_delete(sk: CValuesRef<stack_st_X509>?, i: Int): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2588(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_delete_ptr(sk: CValuesRef<stack_st_X509>?, ptr: CValuesRef<X509>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2589(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_push(sk: CValuesRef<stack_st_X509>?, ptr: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge2590(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_unshift(sk: CValuesRef<stack_st_X509>?, ptr: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge2591(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_pop(sk: CValuesRef<stack_st_X509>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2592(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_shift(sk: CValuesRef<stack_st_X509>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2593(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_pop_free(sk: CValuesRef<stack_st_X509>?, freefunc: sk_X509_freefunc?): Unit {
    memScoped {
        return kniBridge2594(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_insert(sk: CValuesRef<stack_st_X509>?, ptr: CValuesRef<X509>?, idx: Int): Int {
    memScoped {
        return kniBridge2595(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_set(sk: CValuesRef<stack_st_X509>?, idx: Int, ptr: CValuesRef<X509>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2596(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_find(sk: CValuesRef<stack_st_X509>?, ptr: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge2597(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_find_ex(sk: CValuesRef<stack_st_X509>?, ptr: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge2598(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_sort(sk: CValuesRef<stack_st_X509>?): Unit {
    memScoped {
        return kniBridge2599(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_is_sorted(sk: CValuesRef<stack_st_X509>?): Int {
    memScoped {
        return kniBridge2600(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_dup(sk: CValuesRef<stack_st_X509>?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge2601(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_deep_copy(sk: CValuesRef<stack_st_X509>?, copyfunc: sk_X509_copyfunc?, freefunc: sk_X509_freefunc?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge2602(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_set_cmp_func(sk: CValuesRef<stack_st_X509>?, compare: sk_X509_compfunc?): sk_X509_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509>>?, CPointer<CPointerVar<X509>>?) -> Int>>(kniBridge2603(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_TRUST_num(sk: CValuesRef<stack_st_X509_TRUST>?): Int {
    memScoped {
        return kniBridge2604(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_value(sk: CValuesRef<stack_st_X509_TRUST>?, idx: Int): CPointer<X509_TRUST>? {
    memScoped {
        return interpretCPointer<X509_TRUST>(kniBridge2605(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_TRUST_new(compare: sk_X509_TRUST_compfunc?): CPointer<stack_st_X509_TRUST>? {
    return interpretCPointer<stack_st_X509_TRUST>(kniBridge2606(compare.rawValue))
}

fun sk_X509_TRUST_new_null(): CPointer<stack_st_X509_TRUST>? {
    return interpretCPointer<stack_st_X509_TRUST>(kniBridge2607())
}

fun sk_X509_TRUST_free(sk: CValuesRef<stack_st_X509_TRUST>?): Unit {
    memScoped {
        return kniBridge2608(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_zero(sk: CValuesRef<stack_st_X509_TRUST>?): Unit {
    memScoped {
        return kniBridge2609(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_delete(sk: CValuesRef<stack_st_X509_TRUST>?, i: Int): CPointer<X509_TRUST>? {
    memScoped {
        return interpretCPointer<X509_TRUST>(kniBridge2610(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_TRUST_delete_ptr(sk: CValuesRef<stack_st_X509_TRUST>?, ptr: CValuesRef<X509_TRUST>?): CPointer<X509_TRUST>? {
    memScoped {
        return interpretCPointer<X509_TRUST>(kniBridge2611(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_TRUST_push(sk: CValuesRef<stack_st_X509_TRUST>?, ptr: CValuesRef<X509_TRUST>?): Int {
    memScoped {
        return kniBridge2612(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_unshift(sk: CValuesRef<stack_st_X509_TRUST>?, ptr: CValuesRef<X509_TRUST>?): Int {
    memScoped {
        return kniBridge2613(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_pop(sk: CValuesRef<stack_st_X509_TRUST>?): CPointer<X509_TRUST>? {
    memScoped {
        return interpretCPointer<X509_TRUST>(kniBridge2614(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_TRUST_shift(sk: CValuesRef<stack_st_X509_TRUST>?): CPointer<X509_TRUST>? {
    memScoped {
        return interpretCPointer<X509_TRUST>(kniBridge2615(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_TRUST_pop_free(sk: CValuesRef<stack_st_X509_TRUST>?, freefunc: sk_X509_TRUST_freefunc?): Unit {
    memScoped {
        return kniBridge2616(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_TRUST_insert(sk: CValuesRef<stack_st_X509_TRUST>?, ptr: CValuesRef<X509_TRUST>?, idx: Int): Int {
    memScoped {
        return kniBridge2617(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_TRUST_set(sk: CValuesRef<stack_st_X509_TRUST>?, idx: Int, ptr: CValuesRef<X509_TRUST>?): CPointer<X509_TRUST>? {
    memScoped {
        return interpretCPointer<X509_TRUST>(kniBridge2618(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_TRUST_find(sk: CValuesRef<stack_st_X509_TRUST>?, ptr: CValuesRef<X509_TRUST>?): Int {
    memScoped {
        return kniBridge2619(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_find_ex(sk: CValuesRef<stack_st_X509_TRUST>?, ptr: CValuesRef<X509_TRUST>?): Int {
    memScoped {
        return kniBridge2620(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_sort(sk: CValuesRef<stack_st_X509_TRUST>?): Unit {
    memScoped {
        return kniBridge2621(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_is_sorted(sk: CValuesRef<stack_st_X509_TRUST>?): Int {
    memScoped {
        return kniBridge2622(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_TRUST_dup(sk: CValuesRef<stack_st_X509_TRUST>?): CPointer<stack_st_X509_TRUST>? {
    memScoped {
        return interpretCPointer<stack_st_X509_TRUST>(kniBridge2623(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_TRUST_deep_copy(sk: CValuesRef<stack_st_X509_TRUST>?, copyfunc: sk_X509_TRUST_copyfunc?, freefunc: sk_X509_TRUST_freefunc?): CPointer<stack_st_X509_TRUST>? {
    memScoped {
        return interpretCPointer<stack_st_X509_TRUST>(kniBridge2624(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_TRUST_set_cmp_func(sk: CValuesRef<stack_st_X509_TRUST>?, compare: sk_X509_TRUST_compfunc?): sk_X509_TRUST_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_TRUST>>?, CPointer<CPointerVar<X509_TRUST>>?) -> Int>>(kniBridge2625(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_REVOKED_num(sk: CValuesRef<stack_st_X509_REVOKED>?): Int {
    memScoped {
        return kniBridge2626(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_value(sk: CValuesRef<stack_st_X509_REVOKED>?, idx: Int): CPointer<X509_REVOKED>? {
    memScoped {
        return interpretCPointer<X509_REVOKED>(kniBridge2627(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_REVOKED_new(compare: sk_X509_REVOKED_compfunc?): CPointer<stack_st_X509_REVOKED>? {
    return interpretCPointer<stack_st_X509_REVOKED>(kniBridge2628(compare.rawValue))
}

fun sk_X509_REVOKED_new_null(): CPointer<stack_st_X509_REVOKED>? {
    return interpretCPointer<stack_st_X509_REVOKED>(kniBridge2629())
}

fun sk_X509_REVOKED_free(sk: CValuesRef<stack_st_X509_REVOKED>?): Unit {
    memScoped {
        return kniBridge2630(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_zero(sk: CValuesRef<stack_st_X509_REVOKED>?): Unit {
    memScoped {
        return kniBridge2631(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_delete(sk: CValuesRef<stack_st_X509_REVOKED>?, i: Int): CPointer<X509_REVOKED>? {
    memScoped {
        return interpretCPointer<X509_REVOKED>(kniBridge2632(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_REVOKED_delete_ptr(sk: CValuesRef<stack_st_X509_REVOKED>?, ptr: CValuesRef<X509_REVOKED>?): CPointer<X509_REVOKED>? {
    memScoped {
        return interpretCPointer<X509_REVOKED>(kniBridge2633(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_REVOKED_push(sk: CValuesRef<stack_st_X509_REVOKED>?, ptr: CValuesRef<X509_REVOKED>?): Int {
    memScoped {
        return kniBridge2634(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_unshift(sk: CValuesRef<stack_st_X509_REVOKED>?, ptr: CValuesRef<X509_REVOKED>?): Int {
    memScoped {
        return kniBridge2635(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_pop(sk: CValuesRef<stack_st_X509_REVOKED>?): CPointer<X509_REVOKED>? {
    memScoped {
        return interpretCPointer<X509_REVOKED>(kniBridge2636(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_REVOKED_shift(sk: CValuesRef<stack_st_X509_REVOKED>?): CPointer<X509_REVOKED>? {
    memScoped {
        return interpretCPointer<X509_REVOKED>(kniBridge2637(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_REVOKED_pop_free(sk: CValuesRef<stack_st_X509_REVOKED>?, freefunc: sk_X509_REVOKED_freefunc?): Unit {
    memScoped {
        return kniBridge2638(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_REVOKED_insert(sk: CValuesRef<stack_st_X509_REVOKED>?, ptr: CValuesRef<X509_REVOKED>?, idx: Int): Int {
    memScoped {
        return kniBridge2639(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_REVOKED_set(sk: CValuesRef<stack_st_X509_REVOKED>?, idx: Int, ptr: CValuesRef<X509_REVOKED>?): CPointer<X509_REVOKED>? {
    memScoped {
        return interpretCPointer<X509_REVOKED>(kniBridge2640(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_REVOKED_find(sk: CValuesRef<stack_st_X509_REVOKED>?, ptr: CValuesRef<X509_REVOKED>?): Int {
    memScoped {
        return kniBridge2641(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_find_ex(sk: CValuesRef<stack_st_X509_REVOKED>?, ptr: CValuesRef<X509_REVOKED>?): Int {
    memScoped {
        return kniBridge2642(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_sort(sk: CValuesRef<stack_st_X509_REVOKED>?): Unit {
    memScoped {
        return kniBridge2643(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_is_sorted(sk: CValuesRef<stack_st_X509_REVOKED>?): Int {
    memScoped {
        return kniBridge2644(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_REVOKED_dup(sk: CValuesRef<stack_st_X509_REVOKED>?): CPointer<stack_st_X509_REVOKED>? {
    memScoped {
        return interpretCPointer<stack_st_X509_REVOKED>(kniBridge2645(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_REVOKED_deep_copy(sk: CValuesRef<stack_st_X509_REVOKED>?, copyfunc: sk_X509_REVOKED_copyfunc?, freefunc: sk_X509_REVOKED_freefunc?): CPointer<stack_st_X509_REVOKED>? {
    memScoped {
        return interpretCPointer<stack_st_X509_REVOKED>(kniBridge2646(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_REVOKED_set_cmp_func(sk: CValuesRef<stack_st_X509_REVOKED>?, compare: sk_X509_REVOKED_compfunc?): sk_X509_REVOKED_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_REVOKED>>?, CPointer<CPointerVar<X509_REVOKED>>?) -> Int>>(kniBridge2647(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_CRL_num(sk: CValuesRef<stack_st_X509_CRL>?): Int {
    memScoped {
        return kniBridge2648(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_value(sk: CValuesRef<stack_st_X509_CRL>?, idx: Int): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge2649(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_CRL_new(compare: sk_X509_CRL_compfunc?): CPointer<stack_st_X509_CRL>? {
    return interpretCPointer<stack_st_X509_CRL>(kniBridge2650(compare.rawValue))
}

fun sk_X509_CRL_new_null(): CPointer<stack_st_X509_CRL>? {
    return interpretCPointer<stack_st_X509_CRL>(kniBridge2651())
}

fun sk_X509_CRL_free(sk: CValuesRef<stack_st_X509_CRL>?): Unit {
    memScoped {
        return kniBridge2652(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_zero(sk: CValuesRef<stack_st_X509_CRL>?): Unit {
    memScoped {
        return kniBridge2653(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_delete(sk: CValuesRef<stack_st_X509_CRL>?, i: Int): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge2654(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_CRL_delete_ptr(sk: CValuesRef<stack_st_X509_CRL>?, ptr: CValuesRef<X509_CRL>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge2655(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_CRL_push(sk: CValuesRef<stack_st_X509_CRL>?, ptr: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge2656(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_unshift(sk: CValuesRef<stack_st_X509_CRL>?, ptr: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge2657(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_pop(sk: CValuesRef<stack_st_X509_CRL>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge2658(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_CRL_shift(sk: CValuesRef<stack_st_X509_CRL>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge2659(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_CRL_pop_free(sk: CValuesRef<stack_st_X509_CRL>?, freefunc: sk_X509_CRL_freefunc?): Unit {
    memScoped {
        return kniBridge2660(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_CRL_insert(sk: CValuesRef<stack_st_X509_CRL>?, ptr: CValuesRef<X509_CRL>?, idx: Int): Int {
    memScoped {
        return kniBridge2661(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_CRL_set(sk: CValuesRef<stack_st_X509_CRL>?, idx: Int, ptr: CValuesRef<X509_CRL>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge2662(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_CRL_find(sk: CValuesRef<stack_st_X509_CRL>?, ptr: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge2663(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_find_ex(sk: CValuesRef<stack_st_X509_CRL>?, ptr: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge2664(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_sort(sk: CValuesRef<stack_st_X509_CRL>?): Unit {
    memScoped {
        return kniBridge2665(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_is_sorted(sk: CValuesRef<stack_st_X509_CRL>?): Int {
    memScoped {
        return kniBridge2666(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_CRL_dup(sk: CValuesRef<stack_st_X509_CRL>?): CPointer<stack_st_X509_CRL>? {
    memScoped {
        return interpretCPointer<stack_st_X509_CRL>(kniBridge2667(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_CRL_deep_copy(sk: CValuesRef<stack_st_X509_CRL>?, copyfunc: sk_X509_CRL_copyfunc?, freefunc: sk_X509_CRL_freefunc?): CPointer<stack_st_X509_CRL>? {
    memScoped {
        return interpretCPointer<stack_st_X509_CRL>(kniBridge2668(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_CRL_set_cmp_func(sk: CValuesRef<stack_st_X509_CRL>?, compare: sk_X509_CRL_compfunc?): sk_X509_CRL_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_CRL>>?, CPointer<CPointerVar<X509_CRL>>?) -> Int>>(kniBridge2669(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_INFO_num(sk: CValuesRef<stack_st_X509_INFO>?): Int {
    memScoped {
        return kniBridge2670(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_value(sk: CValuesRef<stack_st_X509_INFO>?, idx: Int): CPointer<X509_INFO>? {
    memScoped {
        return interpretCPointer<X509_INFO>(kniBridge2671(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_INFO_new(compare: sk_X509_INFO_compfunc?): CPointer<stack_st_X509_INFO>? {
    return interpretCPointer<stack_st_X509_INFO>(kniBridge2672(compare.rawValue))
}

fun sk_X509_INFO_new_null(): CPointer<stack_st_X509_INFO>? {
    return interpretCPointer<stack_st_X509_INFO>(kniBridge2673())
}

fun sk_X509_INFO_free(sk: CValuesRef<stack_st_X509_INFO>?): Unit {
    memScoped {
        return kniBridge2674(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_zero(sk: CValuesRef<stack_st_X509_INFO>?): Unit {
    memScoped {
        return kniBridge2675(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_delete(sk: CValuesRef<stack_st_X509_INFO>?, i: Int): CPointer<X509_INFO>? {
    memScoped {
        return interpretCPointer<X509_INFO>(kniBridge2676(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_INFO_delete_ptr(sk: CValuesRef<stack_st_X509_INFO>?, ptr: CValuesRef<X509_INFO>?): CPointer<X509_INFO>? {
    memScoped {
        return interpretCPointer<X509_INFO>(kniBridge2677(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_INFO_push(sk: CValuesRef<stack_st_X509_INFO>?, ptr: CValuesRef<X509_INFO>?): Int {
    memScoped {
        return kniBridge2678(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_unshift(sk: CValuesRef<stack_st_X509_INFO>?, ptr: CValuesRef<X509_INFO>?): Int {
    memScoped {
        return kniBridge2679(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_pop(sk: CValuesRef<stack_st_X509_INFO>?): CPointer<X509_INFO>? {
    memScoped {
        return interpretCPointer<X509_INFO>(kniBridge2680(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_INFO_shift(sk: CValuesRef<stack_st_X509_INFO>?): CPointer<X509_INFO>? {
    memScoped {
        return interpretCPointer<X509_INFO>(kniBridge2681(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_INFO_pop_free(sk: CValuesRef<stack_st_X509_INFO>?, freefunc: sk_X509_INFO_freefunc?): Unit {
    memScoped {
        return kniBridge2682(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_INFO_insert(sk: CValuesRef<stack_st_X509_INFO>?, ptr: CValuesRef<X509_INFO>?, idx: Int): Int {
    memScoped {
        return kniBridge2683(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_INFO_set(sk: CValuesRef<stack_st_X509_INFO>?, idx: Int, ptr: CValuesRef<X509_INFO>?): CPointer<X509_INFO>? {
    memScoped {
        return interpretCPointer<X509_INFO>(kniBridge2684(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_INFO_find(sk: CValuesRef<stack_st_X509_INFO>?, ptr: CValuesRef<X509_INFO>?): Int {
    memScoped {
        return kniBridge2685(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_find_ex(sk: CValuesRef<stack_st_X509_INFO>?, ptr: CValuesRef<X509_INFO>?): Int {
    memScoped {
        return kniBridge2686(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_sort(sk: CValuesRef<stack_st_X509_INFO>?): Unit {
    memScoped {
        return kniBridge2687(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_is_sorted(sk: CValuesRef<stack_st_X509_INFO>?): Int {
    memScoped {
        return kniBridge2688(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_INFO_dup(sk: CValuesRef<stack_st_X509_INFO>?): CPointer<stack_st_X509_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_X509_INFO>(kniBridge2689(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_INFO_deep_copy(sk: CValuesRef<stack_st_X509_INFO>?, copyfunc: sk_X509_INFO_copyfunc?, freefunc: sk_X509_INFO_freefunc?): CPointer<stack_st_X509_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_X509_INFO>(kniBridge2690(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_INFO_set_cmp_func(sk: CValuesRef<stack_st_X509_INFO>?, compare: sk_X509_INFO_compfunc?): sk_X509_INFO_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_INFO>>?, CPointer<CPointerVar<X509_INFO>>?) -> Int>>(kniBridge2691(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun OPENSSL_LH_error(lh: CValuesRef<OPENSSL_LHASH>?): Int {
    memScoped {
        return kniBridge2692(lh?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_new(h: OPENSSL_LH_HASHFUNC?, c: OPENSSL_LH_COMPFUNC?): CPointer<OPENSSL_LHASH>? {
    return interpretCPointer<OPENSSL_LHASH>(kniBridge2693(h.rawValue, c.rawValue))
}

fun OPENSSL_LH_free(lh: CValuesRef<OPENSSL_LHASH>?): Unit {
    memScoped {
        return kniBridge2694(lh?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_insert(lh: CValuesRef<OPENSSL_LHASH>?, data: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2695(lh?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_LH_delete(lh: CValuesRef<OPENSSL_LHASH>?, data: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2696(lh?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_LH_retrieve(lh: CValuesRef<OPENSSL_LHASH>?, data: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2697(lh?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_LH_doall(lh: CValuesRef<OPENSSL_LHASH>?, func: OPENSSL_LH_DOALL_FUNC?): Unit {
    memScoped {
        return kniBridge2698(lh?.getPointer(memScope).rawValue, func.rawValue)
    }
}

fun OPENSSL_LH_doall_arg(lh: CValuesRef<OPENSSL_LHASH>?, func: OPENSSL_LH_DOALL_FUNCARG?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge2699(lh?.getPointer(memScope).rawValue, func.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_strhash(c: String?): ULong {
    memScoped {
        return kniBridge2700(c?.cstr?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_num_items(lh: CValuesRef<OPENSSL_LHASH>?): ULong {
    memScoped {
        return kniBridge2701(lh?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_get_down_load(lh: CValuesRef<OPENSSL_LHASH>?): ULong {
    memScoped {
        return kniBridge2702(lh?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_set_down_load(lh: CValuesRef<OPENSSL_LHASH>?, down_load: ULong): Unit {
    memScoped {
        return kniBridge2703(lh?.getPointer(memScope).rawValue, down_load)
    }
}

fun OPENSSL_LH_stats(lh: CValuesRef<OPENSSL_LHASH>?, fp: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge2704(lh?.getPointer(memScope).rawValue, fp?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_node_stats(lh: CValuesRef<OPENSSL_LHASH>?, fp: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge2705(lh?.getPointer(memScope).rawValue, fp?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_node_usage_stats(lh: CValuesRef<OPENSSL_LHASH>?, fp: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge2706(lh?.getPointer(memScope).rawValue, fp?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_stats_bio(lh: CValuesRef<OPENSSL_LHASH>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2707(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_node_stats_bio(lh: CValuesRef<OPENSSL_LHASH>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2708(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun OPENSSL_LH_node_usage_stats_bio(lh: CValuesRef<OPENSSL_LHASH>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2709(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_STRING_new(hfn: CPointer<CFunction<(CPointer<OPENSSL_STRINGVar>?) -> ULong>>?, cfn: CPointer<CFunction<(CPointer<OPENSSL_STRINGVar>?, CPointer<OPENSSL_STRINGVar>?) -> Int>>?): CPointer<lhash_st_OPENSSL_STRING>? {
    return interpretCPointer<lhash_st_OPENSSL_STRING>(kniBridge2710(hfn.rawValue, cfn.rawValue))
}

fun lh_OPENSSL_STRING_free(lh: CValuesRef<lhash_st_OPENSSL_STRING>?): Unit {
    memScoped {
        return kniBridge2711(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_STRING_insert(lh: CValuesRef<lhash_st_OPENSSL_STRING>?, d: CValuesRef<OPENSSL_STRINGVar>?): CPointer<OPENSSL_STRINGVar>? {
    memScoped {
        return interpretCPointer<OPENSSL_STRINGVar>(kniBridge2712(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_OPENSSL_STRING_delete(lh: CValuesRef<lhash_st_OPENSSL_STRING>?, d: CValuesRef<OPENSSL_STRINGVar>?): CPointer<OPENSSL_STRINGVar>? {
    memScoped {
        return interpretCPointer<OPENSSL_STRINGVar>(kniBridge2713(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_OPENSSL_STRING_retrieve(lh: CValuesRef<lhash_st_OPENSSL_STRING>?, d: CValuesRef<OPENSSL_STRINGVar>?): CPointer<OPENSSL_STRINGVar>? {
    memScoped {
        return interpretCPointer<OPENSSL_STRINGVar>(kniBridge2714(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_OPENSSL_STRING_error(lh: CValuesRef<lhash_st_OPENSSL_STRING>?): Int {
    memScoped {
        return kniBridge2715(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_STRING_num_items(lh: CValuesRef<lhash_st_OPENSSL_STRING>?): ULong {
    memScoped {
        return kniBridge2716(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_STRING_node_stats_bio(lh: CValuesRef<lhash_st_OPENSSL_STRING>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2717(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_STRING_node_usage_stats_bio(lh: CValuesRef<lhash_st_OPENSSL_STRING>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2718(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_STRING_stats_bio(lh: CValuesRef<lhash_st_OPENSSL_STRING>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2719(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_STRING_get_down_load(lh: CValuesRef<lhash_st_OPENSSL_STRING>?): ULong {
    memScoped {
        return kniBridge2720(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_STRING_set_down_load(lh: CValuesRef<lhash_st_OPENSSL_STRING>?, dl: ULong): Unit {
    memScoped {
        return kniBridge2721(lh?.getPointer(memScope).rawValue, dl)
    }
}

fun lh_OPENSSL_STRING_doall(lh: CValuesRef<lhash_st_OPENSSL_STRING>?, doall: CPointer<CFunction<(CPointer<OPENSSL_STRINGVar>?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge2722(lh?.getPointer(memScope).rawValue, doall.rawValue)
    }
}

fun lh_OPENSSL_CSTRING_new(hfn: CPointer<CFunction<(CPointer<OPENSSL_CSTRINGVar>?) -> ULong>>?, cfn: CPointer<CFunction<(CPointer<OPENSSL_CSTRINGVar>?, CPointer<OPENSSL_CSTRINGVar>?) -> Int>>?): CPointer<lhash_st_OPENSSL_CSTRING>? {
    return interpretCPointer<lhash_st_OPENSSL_CSTRING>(kniBridge2723(hfn.rawValue, cfn.rawValue))
}

fun lh_OPENSSL_CSTRING_free(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?): Unit {
    memScoped {
        return kniBridge2724(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_CSTRING_insert(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?, d: CValuesRef<OPENSSL_CSTRINGVar>?): CPointer<OPENSSL_CSTRINGVar>? {
    memScoped {
        return interpretCPointer<OPENSSL_CSTRINGVar>(kniBridge2725(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_OPENSSL_CSTRING_delete(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?, d: CValuesRef<OPENSSL_CSTRINGVar>?): CPointer<OPENSSL_CSTRINGVar>? {
    memScoped {
        return interpretCPointer<OPENSSL_CSTRINGVar>(kniBridge2726(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_OPENSSL_CSTRING_retrieve(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?, d: CValuesRef<OPENSSL_CSTRINGVar>?): CPointer<OPENSSL_CSTRINGVar>? {
    memScoped {
        return interpretCPointer<OPENSSL_CSTRINGVar>(kniBridge2727(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_OPENSSL_CSTRING_error(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?): Int {
    memScoped {
        return kniBridge2728(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_CSTRING_num_items(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?): ULong {
    memScoped {
        return kniBridge2729(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_CSTRING_node_stats_bio(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2730(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_CSTRING_node_usage_stats_bio(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2731(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_CSTRING_stats_bio(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge2732(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_CSTRING_get_down_load(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?): ULong {
    memScoped {
        return kniBridge2733(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_OPENSSL_CSTRING_set_down_load(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?, dl: ULong): Unit {
    memScoped {
        return kniBridge2734(lh?.getPointer(memScope).rawValue, dl)
    }
}

fun lh_OPENSSL_CSTRING_doall(lh: CValuesRef<lhash_st_OPENSSL_CSTRING>?, doall: CPointer<CFunction<(CPointer<OPENSSL_CSTRINGVar>?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge2735(lh?.getPointer(memScope).rawValue, doall.rawValue)
    }
}

fun sk_X509_LOOKUP_num(sk: CValuesRef<stack_st_X509_LOOKUP>?): Int {
    memScoped {
        return kniBridge2736(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_value(sk: CValuesRef<stack_st_X509_LOOKUP>?, idx: Int): CPointer<X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<X509_LOOKUP>(kniBridge2737(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_LOOKUP_new(compare: sk_X509_LOOKUP_compfunc?): CPointer<stack_st_X509_LOOKUP>? {
    return interpretCPointer<stack_st_X509_LOOKUP>(kniBridge2738(compare.rawValue))
}

fun sk_X509_LOOKUP_new_null(): CPointer<stack_st_X509_LOOKUP>? {
    return interpretCPointer<stack_st_X509_LOOKUP>(kniBridge2739())
}

fun sk_X509_LOOKUP_free(sk: CValuesRef<stack_st_X509_LOOKUP>?): Unit {
    memScoped {
        return kniBridge2740(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_zero(sk: CValuesRef<stack_st_X509_LOOKUP>?): Unit {
    memScoped {
        return kniBridge2741(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_delete(sk: CValuesRef<stack_st_X509_LOOKUP>?, i: Int): CPointer<X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<X509_LOOKUP>(kniBridge2742(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_LOOKUP_delete_ptr(sk: CValuesRef<stack_st_X509_LOOKUP>?, ptr: CValuesRef<X509_LOOKUP>?): CPointer<X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<X509_LOOKUP>(kniBridge2743(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_LOOKUP_push(sk: CValuesRef<stack_st_X509_LOOKUP>?, ptr: CValuesRef<X509_LOOKUP>?): Int {
    memScoped {
        return kniBridge2744(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_unshift(sk: CValuesRef<stack_st_X509_LOOKUP>?, ptr: CValuesRef<X509_LOOKUP>?): Int {
    memScoped {
        return kniBridge2745(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_pop(sk: CValuesRef<stack_st_X509_LOOKUP>?): CPointer<X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<X509_LOOKUP>(kniBridge2746(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_LOOKUP_shift(sk: CValuesRef<stack_st_X509_LOOKUP>?): CPointer<X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<X509_LOOKUP>(kniBridge2747(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_LOOKUP_pop_free(sk: CValuesRef<stack_st_X509_LOOKUP>?, freefunc: sk_X509_LOOKUP_freefunc?): Unit {
    memScoped {
        return kniBridge2748(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_LOOKUP_insert(sk: CValuesRef<stack_st_X509_LOOKUP>?, ptr: CValuesRef<X509_LOOKUP>?, idx: Int): Int {
    memScoped {
        return kniBridge2749(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_LOOKUP_set(sk: CValuesRef<stack_st_X509_LOOKUP>?, idx: Int, ptr: CValuesRef<X509_LOOKUP>?): CPointer<X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<X509_LOOKUP>(kniBridge2750(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_LOOKUP_find(sk: CValuesRef<stack_st_X509_LOOKUP>?, ptr: CValuesRef<X509_LOOKUP>?): Int {
    memScoped {
        return kniBridge2751(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_find_ex(sk: CValuesRef<stack_st_X509_LOOKUP>?, ptr: CValuesRef<X509_LOOKUP>?): Int {
    memScoped {
        return kniBridge2752(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_sort(sk: CValuesRef<stack_st_X509_LOOKUP>?): Unit {
    memScoped {
        return kniBridge2753(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_is_sorted(sk: CValuesRef<stack_st_X509_LOOKUP>?): Int {
    memScoped {
        return kniBridge2754(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_LOOKUP_dup(sk: CValuesRef<stack_st_X509_LOOKUP>?): CPointer<stack_st_X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<stack_st_X509_LOOKUP>(kniBridge2755(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_LOOKUP_deep_copy(sk: CValuesRef<stack_st_X509_LOOKUP>?, copyfunc: sk_X509_LOOKUP_copyfunc?, freefunc: sk_X509_LOOKUP_freefunc?): CPointer<stack_st_X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<stack_st_X509_LOOKUP>(kniBridge2756(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_LOOKUP_set_cmp_func(sk: CValuesRef<stack_st_X509_LOOKUP>?, compare: sk_X509_LOOKUP_compfunc?): sk_X509_LOOKUP_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_LOOKUP>>?, CPointer<CPointerVar<X509_LOOKUP>>?) -> Int>>(kniBridge2757(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_OBJECT_num(sk: CValuesRef<stack_st_X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2758(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_value(sk: CValuesRef<stack_st_X509_OBJECT>?, idx: Int): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2759(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_OBJECT_new(compare: sk_X509_OBJECT_compfunc?): CPointer<stack_st_X509_OBJECT>? {
    return interpretCPointer<stack_st_X509_OBJECT>(kniBridge2760(compare.rawValue))
}

fun sk_X509_OBJECT_new_null(): CPointer<stack_st_X509_OBJECT>? {
    return interpretCPointer<stack_st_X509_OBJECT>(kniBridge2761())
}

fun sk_X509_OBJECT_free(sk: CValuesRef<stack_st_X509_OBJECT>?): Unit {
    memScoped {
        return kniBridge2762(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_zero(sk: CValuesRef<stack_st_X509_OBJECT>?): Unit {
    memScoped {
        return kniBridge2763(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_delete(sk: CValuesRef<stack_st_X509_OBJECT>?, i: Int): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2764(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_OBJECT_delete_ptr(sk: CValuesRef<stack_st_X509_OBJECT>?, ptr: CValuesRef<X509_OBJECT>?): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2765(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_OBJECT_push(sk: CValuesRef<stack_st_X509_OBJECT>?, ptr: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2766(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_unshift(sk: CValuesRef<stack_st_X509_OBJECT>?, ptr: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2767(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_pop(sk: CValuesRef<stack_st_X509_OBJECT>?): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2768(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_OBJECT_shift(sk: CValuesRef<stack_st_X509_OBJECT>?): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2769(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_OBJECT_pop_free(sk: CValuesRef<stack_st_X509_OBJECT>?, freefunc: sk_X509_OBJECT_freefunc?): Unit {
    memScoped {
        return kniBridge2770(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_OBJECT_insert(sk: CValuesRef<stack_st_X509_OBJECT>?, ptr: CValuesRef<X509_OBJECT>?, idx: Int): Int {
    memScoped {
        return kniBridge2771(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_OBJECT_set(sk: CValuesRef<stack_st_X509_OBJECT>?, idx: Int, ptr: CValuesRef<X509_OBJECT>?): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2772(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_OBJECT_find(sk: CValuesRef<stack_st_X509_OBJECT>?, ptr: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2773(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_find_ex(sk: CValuesRef<stack_st_X509_OBJECT>?, ptr: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2774(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_sort(sk: CValuesRef<stack_st_X509_OBJECT>?): Unit {
    memScoped {
        return kniBridge2775(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_is_sorted(sk: CValuesRef<stack_st_X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2776(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_OBJECT_dup(sk: CValuesRef<stack_st_X509_OBJECT>?): CPointer<stack_st_X509_OBJECT>? {
    memScoped {
        return interpretCPointer<stack_st_X509_OBJECT>(kniBridge2777(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_OBJECT_deep_copy(sk: CValuesRef<stack_st_X509_OBJECT>?, copyfunc: sk_X509_OBJECT_copyfunc?, freefunc: sk_X509_OBJECT_freefunc?): CPointer<stack_st_X509_OBJECT>? {
    memScoped {
        return interpretCPointer<stack_st_X509_OBJECT>(kniBridge2778(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_OBJECT_set_cmp_func(sk: CValuesRef<stack_st_X509_OBJECT>?, compare: sk_X509_OBJECT_compfunc?): sk_X509_OBJECT_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_OBJECT>>?, CPointer<CPointerVar<X509_OBJECT>>?) -> Int>>(kniBridge2779(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_X509_VERIFY_PARAM_num(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2780(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_value(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, idx: Int): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2781(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_X509_VERIFY_PARAM_new(compare: sk_X509_VERIFY_PARAM_compfunc?): CPointer<stack_st_X509_VERIFY_PARAM>? {
    return interpretCPointer<stack_st_X509_VERIFY_PARAM>(kniBridge2782(compare.rawValue))
}

fun sk_X509_VERIFY_PARAM_new_null(): CPointer<stack_st_X509_VERIFY_PARAM>? {
    return interpretCPointer<stack_st_X509_VERIFY_PARAM>(kniBridge2783())
}

fun sk_X509_VERIFY_PARAM_free(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?): Unit {
    memScoped {
        return kniBridge2784(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_zero(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?): Unit {
    memScoped {
        return kniBridge2785(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_delete(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, i: Int): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2786(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_X509_VERIFY_PARAM_delete_ptr(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, ptr: CValuesRef<X509_VERIFY_PARAM>?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2787(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_VERIFY_PARAM_push(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, ptr: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2788(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_unshift(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, ptr: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2789(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_pop(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2790(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_VERIFY_PARAM_shift(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2791(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_VERIFY_PARAM_pop_free(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, freefunc: sk_X509_VERIFY_PARAM_freefunc?): Unit {
    memScoped {
        return kniBridge2792(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_insert(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, ptr: CValuesRef<X509_VERIFY_PARAM>?, idx: Int): Int {
    memScoped {
        return kniBridge2793(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_X509_VERIFY_PARAM_set(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, idx: Int, ptr: CValuesRef<X509_VERIFY_PARAM>?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2794(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_VERIFY_PARAM_find(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, ptr: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2795(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_find_ex(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, ptr: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2796(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_sort(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?): Unit {
    memScoped {
        return kniBridge2797(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_is_sorted(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2798(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_X509_VERIFY_PARAM_dup(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?): CPointer<stack_st_X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<stack_st_X509_VERIFY_PARAM>(kniBridge2799(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_X509_VERIFY_PARAM_deep_copy(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, copyfunc: sk_X509_VERIFY_PARAM_copyfunc?, freefunc: sk_X509_VERIFY_PARAM_freefunc?): CPointer<stack_st_X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<stack_st_X509_VERIFY_PARAM>(kniBridge2800(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_X509_VERIFY_PARAM_set_cmp_func(sk: CValuesRef<stack_st_X509_VERIFY_PARAM>?, compare: sk_X509_VERIFY_PARAM_compfunc?): sk_X509_VERIFY_PARAM_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509_VERIFY_PARAM>>?, CPointer<CPointerVar<X509_VERIFY_PARAM>>?) -> Int>>(kniBridge2801(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun X509_STORE_set_depth(store: CValuesRef<X509_STORE>?, depth: Int): Int {
    memScoped {
        return kniBridge2802(store?.getPointer(memScope).rawValue, depth)
    }
}

fun X509_STORE_CTX_set_depth(ctx: CValuesRef<X509_STORE_CTX>?, depth: Int): Unit {
    memScoped {
        return kniBridge2803(ctx?.getPointer(memScope).rawValue, depth)
    }
}

fun X509_OBJECT_idx_by_subject(h: CValuesRef<stack_st_X509_OBJECT>?, type: X509_LOOKUP_TYPE, name: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge2804(h?.getPointer(memScope).rawValue, type, name?.getPointer(memScope).rawValue)
    }
}

fun X509_OBJECT_retrieve_by_subject(h: CValuesRef<stack_st_X509_OBJECT>?, type: X509_LOOKUP_TYPE, name: CValuesRef<X509_NAME>?): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2805(h?.getPointer(memScope).rawValue, type, name?.getPointer(memScope).rawValue))
    }
}

fun X509_OBJECT_retrieve_match(h: CValuesRef<stack_st_X509_OBJECT>?, x: CValuesRef<X509_OBJECT>?): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2806(h?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue))
    }
}

fun X509_OBJECT_up_ref_count(a: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2807(a?.getPointer(memScope).rawValue)
    }
}

fun X509_OBJECT_new(): CPointer<X509_OBJECT>? {
    return interpretCPointer<X509_OBJECT>(kniBridge2808())
}

fun X509_OBJECT_free(a: CValuesRef<X509_OBJECT>?): Unit {
    memScoped {
        return kniBridge2809(a?.getPointer(memScope).rawValue)
    }
}

fun X509_OBJECT_get_type(a: CValuesRef<X509_OBJECT>?): X509_LOOKUP_TYPE {
    memScoped {
        return kniBridge2810(a?.getPointer(memScope).rawValue)
    }
}

fun X509_OBJECT_get0_X509(a: CValuesRef<X509_OBJECT>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2811(a?.getPointer(memScope).rawValue))
    }
}

fun X509_OBJECT_get0_X509_CRL(a: CValuesRef<X509_OBJECT>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge2812(a?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_new(): CPointer<X509_STORE>? {
    return interpretCPointer<X509_STORE>(kniBridge2813())
}

fun X509_STORE_free(v: CValuesRef<X509_STORE>?): Unit {
    memScoped {
        return kniBridge2814(v?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_lock(ctx: CValuesRef<X509_STORE>?): Int {
    memScoped {
        return kniBridge2815(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_unlock(ctx: CValuesRef<X509_STORE>?): Int {
    memScoped {
        return kniBridge2816(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_up_ref(v: CValuesRef<X509_STORE>?): Int {
    memScoped {
        return kniBridge2817(v?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_get0_objects(v: CValuesRef<X509_STORE>?): CPointer<stack_st_X509_OBJECT>? {
    memScoped {
        return interpretCPointer<stack_st_X509_OBJECT>(kniBridge2818(v?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get1_certs(st: CValuesRef<X509_STORE_CTX>?, nm: CValuesRef<X509_NAME>?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge2819(st?.getPointer(memScope).rawValue, nm?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get1_crls(st: CValuesRef<X509_STORE_CTX>?, nm: CValuesRef<X509_NAME>?): CPointer<stack_st_X509_CRL>? {
    memScoped {
        return interpretCPointer<stack_st_X509_CRL>(kniBridge2820(st?.getPointer(memScope).rawValue, nm?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_flags(ctx: CValuesRef<X509_STORE>?, flags: ULong): Int {
    memScoped {
        return kniBridge2821(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_STORE_set_purpose(ctx: CValuesRef<X509_STORE>?, purpose: Int): Int {
    memScoped {
        return kniBridge2822(ctx?.getPointer(memScope).rawValue, purpose)
    }
}

fun X509_STORE_set_trust(ctx: CValuesRef<X509_STORE>?, trust: Int): Int {
    memScoped {
        return kniBridge2823(ctx?.getPointer(memScope).rawValue, trust)
    }
}

fun X509_STORE_set1_param(ctx: CValuesRef<X509_STORE>?, pm: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2824(ctx?.getPointer(memScope).rawValue, pm?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_get0_param(ctx: CValuesRef<X509_STORE>?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2825(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_verify(ctx: CValuesRef<X509_STORE>?, verify: X509_STORE_CTX_verify_fn?): Unit {
    memScoped {
        return kniBridge2826(ctx?.getPointer(memScope).rawValue, verify.rawValue)
    }
}

fun X509_STORE_CTX_set_verify(ctx: CValuesRef<X509_STORE_CTX>?, verify: X509_STORE_CTX_verify_fn?): Unit {
    memScoped {
        return kniBridge2827(ctx?.getPointer(memScope).rawValue, verify.rawValue)
    }
}

fun X509_STORE_get_verify(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_verify_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2828(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_verify_cb(ctx: CValuesRef<X509_STORE>?, verify_cb: X509_STORE_CTX_verify_cb?): Unit {
    memScoped {
        return kniBridge2829(ctx?.getPointer(memScope).rawValue, verify_cb.rawValue)
    }
}

fun X509_STORE_get_verify_cb(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_verify_cb? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2830(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_get_issuer(ctx: CValuesRef<X509_STORE>?, get_issuer: X509_STORE_CTX_get_issuer_fn?): Unit {
    memScoped {
        return kniBridge2831(ctx?.getPointer(memScope).rawValue, get_issuer.rawValue)
    }
}

fun X509_STORE_get_get_issuer(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_get_issuer_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509>>?, CPointer<X509_STORE_CTX>?, CPointer<X509>?) -> Int>>(kniBridge2832(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_check_issued(ctx: CValuesRef<X509_STORE>?, check_issued: X509_STORE_CTX_check_issued_fn?): Unit {
    memScoped {
        return kniBridge2833(ctx?.getPointer(memScope).rawValue, check_issued.rawValue)
    }
}

fun X509_STORE_get_check_issued(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_check_issued_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509>?, CPointer<X509>?) -> Int>>(kniBridge2834(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_check_revocation(ctx: CValuesRef<X509_STORE>?, check_revocation: X509_STORE_CTX_check_revocation_fn?): Unit {
    memScoped {
        return kniBridge2835(ctx?.getPointer(memScope).rawValue, check_revocation.rawValue)
    }
}

fun X509_STORE_get_check_revocation(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_check_revocation_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2836(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_get_crl(ctx: CValuesRef<X509_STORE>?, get_crl: X509_STORE_CTX_get_crl_fn?): Unit {
    memScoped {
        return kniBridge2837(ctx?.getPointer(memScope).rawValue, get_crl.rawValue)
    }
}

fun X509_STORE_get_get_crl(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_get_crl_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<CPointerVar<X509_CRL>>?, CPointer<X509>?) -> Int>>(kniBridge2838(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_check_crl(ctx: CValuesRef<X509_STORE>?, check_crl: X509_STORE_CTX_check_crl_fn?): Unit {
    memScoped {
        return kniBridge2839(ctx?.getPointer(memScope).rawValue, check_crl.rawValue)
    }
}

fun X509_STORE_get_check_crl(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_check_crl_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_CRL>?) -> Int>>(kniBridge2840(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_cert_crl(ctx: CValuesRef<X509_STORE>?, cert_crl: X509_STORE_CTX_cert_crl_fn?): Unit {
    memScoped {
        return kniBridge2841(ctx?.getPointer(memScope).rawValue, cert_crl.rawValue)
    }
}

fun X509_STORE_get_cert_crl(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_cert_crl_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_CRL>?, CPointer<X509>?) -> Int>>(kniBridge2842(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_check_policy(ctx: CValuesRef<X509_STORE>?, check_policy: X509_STORE_CTX_check_policy_fn?): Unit {
    memScoped {
        return kniBridge2843(ctx?.getPointer(memScope).rawValue, check_policy.rawValue)
    }
}

fun X509_STORE_get_check_policy(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_check_policy_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2844(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_lookup_certs(ctx: CValuesRef<X509_STORE>?, lookup_certs: X509_STORE_CTX_lookup_certs_fn?): Unit {
    memScoped {
        return kniBridge2845(ctx?.getPointer(memScope).rawValue, lookup_certs.rawValue)
    }
}

fun X509_STORE_get_lookup_certs(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_lookup_certs_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509>?>>(kniBridge2846(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_lookup_crls(ctx: CValuesRef<X509_STORE>?, lookup_crls: X509_STORE_CTX_lookup_crls_fn?): Unit {
    memScoped {
        return kniBridge2847(ctx?.getPointer(memScope).rawValue, lookup_crls.rawValue)
    }
}

fun X509_STORE_get_lookup_crls(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_lookup_crls_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509_CRL>?>>(kniBridge2848(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_cleanup(ctx: CValuesRef<X509_STORE>?, cleanup: X509_STORE_CTX_cleanup_fn?): Unit {
    memScoped {
        return kniBridge2849(ctx?.getPointer(memScope).rawValue, cleanup.rawValue)
    }
}

fun X509_STORE_get_cleanup(ctx: CValuesRef<X509_STORE>?): X509_STORE_CTX_cleanup_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2850(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_set_ex_data(ctx: CValuesRef<X509_STORE>?, idx: Int, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2851(ctx?.getPointer(memScope).rawValue, idx, data?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_get_ex_data(ctx: CValuesRef<X509_STORE>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2852(ctx?.getPointer(memScope).rawValue, idx))
    }
}

fun X509_STORE_CTX_new(): CPointer<X509_STORE_CTX>? {
    return interpretCPointer<X509_STORE_CTX>(kniBridge2853())
}

fun X509_STORE_CTX_get1_issuer(issuer: CValuesRef<CPointerVar<X509>>?, ctx: CValuesRef<X509_STORE_CTX>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge2854(issuer?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_free(ctx: CValuesRef<X509_STORE_CTX>?): Unit {
    memScoped {
        return kniBridge2855(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_init(ctx: CValuesRef<X509_STORE_CTX>?, store: CValuesRef<X509_STORE>?, x509: CValuesRef<X509>?, chain: CValuesRef<stack_st_X509>?): Int {
    memScoped {
        return kniBridge2856(ctx?.getPointer(memScope).rawValue, store?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue, chain?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set0_trusted_stack(ctx: CValuesRef<X509_STORE_CTX>?, sk: CValuesRef<stack_st_X509>?): Unit {
    memScoped {
        return kniBridge2857(ctx?.getPointer(memScope).rawValue, sk?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_cleanup(ctx: CValuesRef<X509_STORE_CTX>?): Unit {
    memScoped {
        return kniBridge2858(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_get0_store(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<X509_STORE>? {
    memScoped {
        return interpretCPointer<X509_STORE>(kniBridge2859(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get0_cert(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2860(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get0_untrusted(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge2861(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_set0_untrusted(ctx: CValuesRef<X509_STORE_CTX>?, sk: CValuesRef<stack_st_X509>?): Unit {
    memScoped {
        return kniBridge2862(ctx?.getPointer(memScope).rawValue, sk?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set_verify_cb(ctx: CValuesRef<X509_STORE_CTX>?, verify: X509_STORE_CTX_verify_cb?): Unit {
    memScoped {
        return kniBridge2863(ctx?.getPointer(memScope).rawValue, verify.rawValue)
    }
}

fun X509_STORE_CTX_get_verify_cb(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_verify_cb? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2864(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_verify(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_verify_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2865(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_get_issuer(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_get_issuer_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<X509>>?, CPointer<X509_STORE_CTX>?, CPointer<X509>?) -> Int>>(kniBridge2866(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_check_issued(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_check_issued_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509>?, CPointer<X509>?) -> Int>>(kniBridge2867(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_check_revocation(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_check_revocation_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2868(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_get_crl(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_get_crl_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<CPointerVar<X509_CRL>>?, CPointer<X509>?) -> Int>>(kniBridge2869(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_check_crl(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_check_crl_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_CRL>?) -> Int>>(kniBridge2870(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_cert_crl(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_cert_crl_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_CRL>?, CPointer<X509>?) -> Int>>(kniBridge2871(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_check_policy(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_check_policy_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2872(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_lookup_certs(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_lookup_certs_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509>?>>(kniBridge2873(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_lookup_crls(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_lookup_crls_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509_CRL>?>>(kniBridge2874(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_cleanup(ctx: CValuesRef<X509_STORE_CTX>?): X509_STORE_CTX_cleanup_fn? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge2875(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_add_lookup(v: CValuesRef<X509_STORE>?, m: CValuesRef<X509_LOOKUP_METHOD>?): CPointer<X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<X509_LOOKUP>(kniBridge2876(v?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue))
    }
}

fun X509_LOOKUP_hash_dir(): CPointer<X509_LOOKUP_METHOD>? {
    return interpretCPointer<X509_LOOKUP_METHOD>(kniBridge2877())
}

fun X509_LOOKUP_file(): CPointer<X509_LOOKUP_METHOD>? {
    return interpretCPointer<X509_LOOKUP_METHOD>(kniBridge2878())
}

fun X509_STORE_add_cert(ctx: CValuesRef<X509_STORE>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge2879(ctx?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_add_crl(ctx: CValuesRef<X509_STORE>?, x: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge2880(ctx?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_get_by_subject(vs: CValuesRef<X509_STORE_CTX>?, type: X509_LOOKUP_TYPE, name: CValuesRef<X509_NAME>?, ret: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2881(vs?.getPointer(memScope).rawValue, type, name?.getPointer(memScope).rawValue, ret?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_get_obj_by_subject(vs: CValuesRef<X509_STORE_CTX>?, type: X509_LOOKUP_TYPE, name: CValuesRef<X509_NAME>?): CPointer<X509_OBJECT>? {
    memScoped {
        return interpretCPointer<X509_OBJECT>(kniBridge2882(vs?.getPointer(memScope).rawValue, type, name?.getPointer(memScope).rawValue))
    }
}

fun X509_LOOKUP_ctrl(ctx: CValuesRef<X509_LOOKUP>?, cmd: Int, argc: String?, argl: Long, ret: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge2883(ctx?.getPointer(memScope).rawValue, cmd, argc?.cstr?.getPointer(memScope).rawValue, argl, ret?.getPointer(memScope).rawValue)
    }
}

fun X509_load_cert_file(ctx: CValuesRef<X509_LOOKUP>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge2884(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun X509_load_crl_file(ctx: CValuesRef<X509_LOOKUP>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge2885(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun X509_load_cert_crl_file(ctx: CValuesRef<X509_LOOKUP>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge2886(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun X509_LOOKUP_new(method: CValuesRef<X509_LOOKUP_METHOD>?): CPointer<X509_LOOKUP>? {
    memScoped {
        return interpretCPointer<X509_LOOKUP>(kniBridge2887(method?.getPointer(memScope).rawValue))
    }
}

fun X509_LOOKUP_free(ctx: CValuesRef<X509_LOOKUP>?): Unit {
    memScoped {
        return kniBridge2888(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_LOOKUP_init(ctx: CValuesRef<X509_LOOKUP>?): Int {
    memScoped {
        return kniBridge2889(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_LOOKUP_by_subject(ctx: CValuesRef<X509_LOOKUP>?, type: X509_LOOKUP_TYPE, name: CValuesRef<X509_NAME>?, ret: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2890(ctx?.getPointer(memScope).rawValue, type, name?.getPointer(memScope).rawValue, ret?.getPointer(memScope).rawValue)
    }
}

fun X509_LOOKUP_by_issuer_serial(ctx: CValuesRef<X509_LOOKUP>?, type: X509_LOOKUP_TYPE, name: CValuesRef<X509_NAME>?, serial: CValuesRef<ASN1_INTEGER>?, ret: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2891(ctx?.getPointer(memScope).rawValue, type, name?.getPointer(memScope).rawValue, serial?.getPointer(memScope).rawValue, ret?.getPointer(memScope).rawValue)
    }
}

fun X509_LOOKUP_by_fingerprint(ctx: CValuesRef<X509_LOOKUP>?, type: X509_LOOKUP_TYPE, bytes: CValuesRef<UByteVar>?, len: Int, ret: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2892(ctx?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len, ret?.getPointer(memScope).rawValue)
    }
}

fun X509_LOOKUP_by_alias(ctx: CValuesRef<X509_LOOKUP>?, type: X509_LOOKUP_TYPE, str: String?, len: Int, ret: CValuesRef<X509_OBJECT>?): Int {
    memScoped {
        return kniBridge2893(ctx?.getPointer(memScope).rawValue, type, str?.cstr?.getPointer(memScope).rawValue, len, ret?.getPointer(memScope).rawValue)
    }
}

fun X509_LOOKUP_shutdown(ctx: CValuesRef<X509_LOOKUP>?): Int {
    memScoped {
        return kniBridge2894(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_load_locations(ctx: CValuesRef<X509_STORE>?, file: String?, dir: String?): Int {
    memScoped {
        return kniBridge2895(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, dir?.cstr?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_set_default_paths(ctx: CValuesRef<X509_STORE>?): Int {
    memScoped {
        return kniBridge2896(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set_ex_data(ctx: CValuesRef<X509_STORE_CTX>?, idx: Int, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge2897(ctx?.getPointer(memScope).rawValue, idx, data?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_get_ex_data(ctx: CValuesRef<X509_STORE_CTX>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge2898(ctx?.getPointer(memScope).rawValue, idx))
    }
}

fun X509_STORE_CTX_get_error(ctx: CValuesRef<X509_STORE_CTX>?): Int {
    memScoped {
        return kniBridge2899(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set_error(ctx: CValuesRef<X509_STORE_CTX>?, s: Int): Unit {
    memScoped {
        return kniBridge2900(ctx?.getPointer(memScope).rawValue, s)
    }
}

fun X509_STORE_CTX_get_error_depth(ctx: CValuesRef<X509_STORE_CTX>?): Int {
    memScoped {
        return kniBridge2901(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set_error_depth(ctx: CValuesRef<X509_STORE_CTX>?, depth: Int): Unit {
    memScoped {
        return kniBridge2902(ctx?.getPointer(memScope).rawValue, depth)
    }
}

fun X509_STORE_CTX_get_current_cert(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2903(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_set_current_cert(ctx: CValuesRef<X509_STORE_CTX>?, x: CValuesRef<X509>?): Unit {
    memScoped {
        return kniBridge2904(ctx?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_get0_current_issuer(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge2905(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get0_current_crl(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge2906(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get0_parent_ctx(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<X509_STORE_CTX>? {
    memScoped {
        return interpretCPointer<X509_STORE_CTX>(kniBridge2907(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get0_chain(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge2908(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get1_chain(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge2909(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_set_cert(c: CValuesRef<X509_STORE_CTX>?, x: CValuesRef<X509>?): Unit {
    memScoped {
        return kniBridge2910(c?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set0_verified_chain(c: CValuesRef<X509_STORE_CTX>?, sk: CValuesRef<stack_st_X509>?): Unit {
    memScoped {
        return kniBridge2911(c?.getPointer(memScope).rawValue, sk?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set0_crls(c: CValuesRef<X509_STORE_CTX>?, sk: CValuesRef<stack_st_X509_CRL>?): Unit {
    memScoped {
        return kniBridge2912(c?.getPointer(memScope).rawValue, sk?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set_purpose(ctx: CValuesRef<X509_STORE_CTX>?, purpose: Int): Int {
    memScoped {
        return kniBridge2913(ctx?.getPointer(memScope).rawValue, purpose)
    }
}

fun X509_STORE_CTX_set_trust(ctx: CValuesRef<X509_STORE_CTX>?, trust: Int): Int {
    memScoped {
        return kniBridge2914(ctx?.getPointer(memScope).rawValue, trust)
    }
}

fun X509_STORE_CTX_purpose_inherit(ctx: CValuesRef<X509_STORE_CTX>?, def_purpose: Int, purpose: Int, trust: Int): Int {
    memScoped {
        return kniBridge2915(ctx?.getPointer(memScope).rawValue, def_purpose, purpose, trust)
    }
}

fun X509_STORE_CTX_set_flags(ctx: CValuesRef<X509_STORE_CTX>?, flags: ULong): Unit {
    memScoped {
        return kniBridge2916(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_STORE_CTX_set_time(ctx: CValuesRef<X509_STORE_CTX>?, flags: ULong, t: time_t): Unit {
    memScoped {
        return kniBridge2917(ctx?.getPointer(memScope).rawValue, flags, t)
    }
}

fun X509_STORE_CTX_get0_policy_tree(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<X509_POLICY_TREE>? {
    memScoped {
        return interpretCPointer<X509_POLICY_TREE>(kniBridge2918(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_get_explicit_policy(ctx: CValuesRef<X509_STORE_CTX>?): Int {
    memScoped {
        return kniBridge2919(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_get_num_untrusted(ctx: CValuesRef<X509_STORE_CTX>?): Int {
    memScoped {
        return kniBridge2920(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_get0_param(ctx: CValuesRef<X509_STORE_CTX>?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2921(ctx?.getPointer(memScope).rawValue))
    }
}

fun X509_STORE_CTX_set0_param(ctx: CValuesRef<X509_STORE_CTX>?, param: CValuesRef<X509_VERIFY_PARAM>?): Unit {
    memScoped {
        return kniBridge2922(ctx?.getPointer(memScope).rawValue, param?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set_default(ctx: CValuesRef<X509_STORE_CTX>?, name: String?): Int {
    memScoped {
        return kniBridge2923(ctx?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun X509_STORE_CTX_set0_dane(ctx: CValuesRef<X509_STORE_CTX>?, dane: CValuesRef<SSL_DANE>?): Unit {
    memScoped {
        return kniBridge2924(ctx?.getPointer(memScope).rawValue, dane?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_new(): CPointer<X509_VERIFY_PARAM>? {
    return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2925())
}

fun X509_VERIFY_PARAM_free(param: CValuesRef<X509_VERIFY_PARAM>?): Unit {
    memScoped {
        return kniBridge2926(param?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_inherit(to: CValuesRef<X509_VERIFY_PARAM>?, from: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2927(to?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set1(to: CValuesRef<X509_VERIFY_PARAM>?, from: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2928(to?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set1_name(param: CValuesRef<X509_VERIFY_PARAM>?, name: String?): Int {
    memScoped {
        return kniBridge2929(param?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set_flags(param: CValuesRef<X509_VERIFY_PARAM>?, flags: ULong): Int {
    memScoped {
        return kniBridge2930(param?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_VERIFY_PARAM_clear_flags(param: CValuesRef<X509_VERIFY_PARAM>?, flags: ULong): Int {
    memScoped {
        return kniBridge2931(param?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_VERIFY_PARAM_get_flags(param: CValuesRef<X509_VERIFY_PARAM>?): ULong {
    memScoped {
        return kniBridge2932(param?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set_purpose(param: CValuesRef<X509_VERIFY_PARAM>?, purpose: Int): Int {
    memScoped {
        return kniBridge2933(param?.getPointer(memScope).rawValue, purpose)
    }
}

fun X509_VERIFY_PARAM_set_trust(param: CValuesRef<X509_VERIFY_PARAM>?, trust: Int): Int {
    memScoped {
        return kniBridge2934(param?.getPointer(memScope).rawValue, trust)
    }
}

fun X509_VERIFY_PARAM_set_depth(param: CValuesRef<X509_VERIFY_PARAM>?, depth: Int): Unit {
    memScoped {
        return kniBridge2935(param?.getPointer(memScope).rawValue, depth)
    }
}

fun X509_VERIFY_PARAM_set_auth_level(param: CValuesRef<X509_VERIFY_PARAM>?, auth_level: Int): Unit {
    memScoped {
        return kniBridge2936(param?.getPointer(memScope).rawValue, auth_level)
    }
}

fun X509_VERIFY_PARAM_get_time(param: CValuesRef<X509_VERIFY_PARAM>?): time_t {
    memScoped {
        return kniBridge2937(param?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set_time(param: CValuesRef<X509_VERIFY_PARAM>?, t: time_t): Unit {
    memScoped {
        return kniBridge2938(param?.getPointer(memScope).rawValue, t)
    }
}

fun X509_VERIFY_PARAM_add0_policy(param: CValuesRef<X509_VERIFY_PARAM>?, policy: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge2939(param?.getPointer(memScope).rawValue, policy?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set1_policies(param: CValuesRef<X509_VERIFY_PARAM>?, policies: CValuesRef<stack_st_ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge2940(param?.getPointer(memScope).rawValue, policies?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set_inh_flags(param: CValuesRef<X509_VERIFY_PARAM>?, flags: uint32_t): Int {
    memScoped {
        return kniBridge2941(param?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_VERIFY_PARAM_get_inh_flags(param: CValuesRef<X509_VERIFY_PARAM>?): uint32_t {
    memScoped {
        return kniBridge2942(param?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set1_host(param: CValuesRef<X509_VERIFY_PARAM>?, name: String?, namelen: size_t): Int {
    memScoped {
        return kniBridge2943(param?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, namelen)
    }
}

fun X509_VERIFY_PARAM_add1_host(param: CValuesRef<X509_VERIFY_PARAM>?, name: String?, namelen: size_t): Int {
    memScoped {
        return kniBridge2944(param?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, namelen)
    }
}

fun X509_VERIFY_PARAM_set_hostflags(param: CValuesRef<X509_VERIFY_PARAM>?, flags: UInt): Unit {
    memScoped {
        return kniBridge2945(param?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_VERIFY_PARAM_get0_peername(arg0: CValuesRef<X509_VERIFY_PARAM>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2946(arg0?.getPointer(memScope).rawValue))
    }
}

fun X509_VERIFY_PARAM_move_peername(arg0: CValuesRef<X509_VERIFY_PARAM>?, arg1: CValuesRef<X509_VERIFY_PARAM>?): Unit {
    memScoped {
        return kniBridge2947(arg0?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_set1_email(param: CValuesRef<X509_VERIFY_PARAM>?, email: String?, emaillen: size_t): Int {
    memScoped {
        return kniBridge2948(param?.getPointer(memScope).rawValue, email?.cstr?.getPointer(memScope).rawValue, emaillen)
    }
}

fun X509_VERIFY_PARAM_set1_ip(param: CValuesRef<X509_VERIFY_PARAM>?, ip: CValuesRef<UByteVar>?, iplen: size_t): Int {
    memScoped {
        return kniBridge2949(param?.getPointer(memScope).rawValue, ip?.getPointer(memScope).rawValue, iplen)
    }
}

fun X509_VERIFY_PARAM_set1_ip_asc(param: CValuesRef<X509_VERIFY_PARAM>?, ipasc: String?): Int {
    memScoped {
        return kniBridge2950(param?.getPointer(memScope).rawValue, ipasc?.cstr?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_get_depth(param: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2951(param?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_get_auth_level(param: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2952(param?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_get0_name(param: CValuesRef<X509_VERIFY_PARAM>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge2953(param?.getPointer(memScope).rawValue))
    }
}

fun X509_VERIFY_PARAM_add0_table(param: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge2954(param?.getPointer(memScope).rawValue)
    }
}

fun X509_VERIFY_PARAM_get_count(): Int {
    return kniBridge2955()
}

fun X509_VERIFY_PARAM_get0(id: Int): CPointer<X509_VERIFY_PARAM>? {
    return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2956(id))
}

fun X509_VERIFY_PARAM_lookup(name: String?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge2957(name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun X509_VERIFY_PARAM_table_cleanup(): Unit {
    return kniBridge2958()
}

fun X509_policy_check(ptree: CValuesRef<CPointerVar<X509_POLICY_TREE>>?, pexplicit_policy: CValuesRef<IntVar>?, certs: CValuesRef<stack_st_X509>?, policy_oids: CValuesRef<stack_st_ASN1_OBJECT>?, flags: UInt): Int {
    memScoped {
        return kniBridge2959(ptree?.getPointer(memScope).rawValue, pexplicit_policy?.getPointer(memScope).rawValue, certs?.getPointer(memScope).rawValue, policy_oids?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_policy_tree_free(tree: CValuesRef<X509_POLICY_TREE>?): Unit {
    memScoped {
        return kniBridge2960(tree?.getPointer(memScope).rawValue)
    }
}

fun X509_policy_tree_level_count(tree: CValuesRef<X509_POLICY_TREE>?): Int {
    memScoped {
        return kniBridge2961(tree?.getPointer(memScope).rawValue)
    }
}

fun X509_policy_tree_get0_level(tree: CValuesRef<X509_POLICY_TREE>?, i: Int): CPointer<X509_POLICY_LEVEL>? {
    memScoped {
        return interpretCPointer<X509_POLICY_LEVEL>(kniBridge2962(tree?.getPointer(memScope).rawValue, i))
    }
}

fun X509_policy_tree_get0_policies(tree: CValuesRef<X509_POLICY_TREE>?): CPointer<stack_st_X509_POLICY_NODE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_POLICY_NODE>(kniBridge2963(tree?.getPointer(memScope).rawValue))
    }
}

fun X509_policy_tree_get0_user_policies(tree: CValuesRef<X509_POLICY_TREE>?): CPointer<stack_st_X509_POLICY_NODE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_POLICY_NODE>(kniBridge2964(tree?.getPointer(memScope).rawValue))
    }
}

fun X509_policy_level_node_count(level: CValuesRef<X509_POLICY_LEVEL>?): Int {
    memScoped {
        return kniBridge2965(level?.getPointer(memScope).rawValue)
    }
}

fun X509_policy_level_get0_node(level: CValuesRef<X509_POLICY_LEVEL>?, i: Int): CPointer<X509_POLICY_NODE>? {
    memScoped {
        return interpretCPointer<X509_POLICY_NODE>(kniBridge2966(level?.getPointer(memScope).rawValue, i))
    }
}

fun X509_policy_node_get0_policy(node: CValuesRef<X509_POLICY_NODE>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge2967(node?.getPointer(memScope).rawValue))
    }
}

fun X509_policy_node_get0_qualifiers(node: CValuesRef<X509_POLICY_NODE>?): CPointer<stack_st_POLICYQUALINFO>? {
    memScoped {
        return interpretCPointer<stack_st_POLICYQUALINFO>(kniBridge2968(node?.getPointer(memScope).rawValue))
    }
}

fun X509_policy_node_get0_parent(node: CValuesRef<X509_POLICY_NODE>?): CPointer<X509_POLICY_NODE>? {
    memScoped {
        return interpretCPointer<X509_POLICY_NODE>(kniBridge2969(node?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_SIGNER_INFO_num(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge2970(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_value(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, idx: Int): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge2971(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_PKCS7_SIGNER_INFO_new(compare: sk_PKCS7_SIGNER_INFO_compfunc?): CPointer<stack_st_PKCS7_SIGNER_INFO>? {
    return interpretCPointer<stack_st_PKCS7_SIGNER_INFO>(kniBridge2972(compare.rawValue))
}

fun sk_PKCS7_SIGNER_INFO_new_null(): CPointer<stack_st_PKCS7_SIGNER_INFO>? {
    return interpretCPointer<stack_st_PKCS7_SIGNER_INFO>(kniBridge2973())
}

fun sk_PKCS7_SIGNER_INFO_free(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?): Unit {
    memScoped {
        return kniBridge2974(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_zero(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?): Unit {
    memScoped {
        return kniBridge2975(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_delete(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, i: Int): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge2976(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_PKCS7_SIGNER_INFO_delete_ptr(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, ptr: CValuesRef<PKCS7_SIGNER_INFO>?): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge2977(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_SIGNER_INFO_push(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, ptr: CValuesRef<PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge2978(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_unshift(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, ptr: CValuesRef<PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge2979(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_pop(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge2980(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_SIGNER_INFO_shift(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge2981(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_SIGNER_INFO_pop_free(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, freefunc: sk_PKCS7_SIGNER_INFO_freefunc?): Unit {
    memScoped {
        return kniBridge2982(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_insert(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, ptr: CValuesRef<PKCS7_SIGNER_INFO>?, idx: Int): Int {
    memScoped {
        return kniBridge2983(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_PKCS7_SIGNER_INFO_set(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, idx: Int, ptr: CValuesRef<PKCS7_SIGNER_INFO>?): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge2984(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_SIGNER_INFO_find(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, ptr: CValuesRef<PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge2985(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_find_ex(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, ptr: CValuesRef<PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge2986(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_sort(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?): Unit {
    memScoped {
        return kniBridge2987(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_is_sorted(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge2988(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_SIGNER_INFO_dup(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?): CPointer<stack_st_PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_PKCS7_SIGNER_INFO>(kniBridge2989(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_SIGNER_INFO_deep_copy(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, copyfunc: sk_PKCS7_SIGNER_INFO_copyfunc?, freefunc: sk_PKCS7_SIGNER_INFO_freefunc?): CPointer<stack_st_PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_PKCS7_SIGNER_INFO>(kniBridge2990(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_PKCS7_SIGNER_INFO_set_cmp_func(sk: CValuesRef<stack_st_PKCS7_SIGNER_INFO>?, compare: sk_PKCS7_SIGNER_INFO_compfunc?): sk_PKCS7_SIGNER_INFO_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<PKCS7_SIGNER_INFO>>?, CPointer<CPointerVar<PKCS7_SIGNER_INFO>>?) -> Int>>(kniBridge2991(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_PKCS7_RECIP_INFO_num(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?): Int {
    memScoped {
        return kniBridge2992(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_value(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, idx: Int): CPointer<PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge2993(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_PKCS7_RECIP_INFO_new(compare: sk_PKCS7_RECIP_INFO_compfunc?): CPointer<stack_st_PKCS7_RECIP_INFO>? {
    return interpretCPointer<stack_st_PKCS7_RECIP_INFO>(kniBridge2994(compare.rawValue))
}

fun sk_PKCS7_RECIP_INFO_new_null(): CPointer<stack_st_PKCS7_RECIP_INFO>? {
    return interpretCPointer<stack_st_PKCS7_RECIP_INFO>(kniBridge2995())
}

fun sk_PKCS7_RECIP_INFO_free(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?): Unit {
    memScoped {
        return kniBridge2996(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_zero(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?): Unit {
    memScoped {
        return kniBridge2997(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_delete(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, i: Int): CPointer<PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge2998(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_PKCS7_RECIP_INFO_delete_ptr(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, ptr: CValuesRef<PKCS7_RECIP_INFO>?): CPointer<PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge2999(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_RECIP_INFO_push(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, ptr: CValuesRef<PKCS7_RECIP_INFO>?): Int {
    memScoped {
        return kniBridge3000(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_unshift(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, ptr: CValuesRef<PKCS7_RECIP_INFO>?): Int {
    memScoped {
        return kniBridge3001(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_pop(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?): CPointer<PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge3002(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_RECIP_INFO_shift(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?): CPointer<PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge3003(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_RECIP_INFO_pop_free(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, freefunc: sk_PKCS7_RECIP_INFO_freefunc?): Unit {
    memScoped {
        return kniBridge3004(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_insert(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, ptr: CValuesRef<PKCS7_RECIP_INFO>?, idx: Int): Int {
    memScoped {
        return kniBridge3005(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_PKCS7_RECIP_INFO_set(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, idx: Int, ptr: CValuesRef<PKCS7_RECIP_INFO>?): CPointer<PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge3006(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_RECIP_INFO_find(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, ptr: CValuesRef<PKCS7_RECIP_INFO>?): Int {
    memScoped {
        return kniBridge3007(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_find_ex(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, ptr: CValuesRef<PKCS7_RECIP_INFO>?): Int {
    memScoped {
        return kniBridge3008(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_sort(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?): Unit {
    memScoped {
        return kniBridge3009(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_is_sorted(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?): Int {
    memScoped {
        return kniBridge3010(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_RECIP_INFO_dup(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?): CPointer<stack_st_PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_PKCS7_RECIP_INFO>(kniBridge3011(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_RECIP_INFO_deep_copy(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, copyfunc: sk_PKCS7_RECIP_INFO_copyfunc?, freefunc: sk_PKCS7_RECIP_INFO_freefunc?): CPointer<stack_st_PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_PKCS7_RECIP_INFO>(kniBridge3012(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_PKCS7_RECIP_INFO_set_cmp_func(sk: CValuesRef<stack_st_PKCS7_RECIP_INFO>?, compare: sk_PKCS7_RECIP_INFO_compfunc?): sk_PKCS7_RECIP_INFO_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<PKCS7_RECIP_INFO>>?, CPointer<CPointerVar<PKCS7_RECIP_INFO>>?) -> Int>>(kniBridge3013(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_PKCS7_num(sk: CValuesRef<stack_st_PKCS7>?): Int {
    memScoped {
        return kniBridge3014(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_value(sk: CValuesRef<stack_st_PKCS7>?, idx: Int): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3015(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_PKCS7_new(compare: sk_PKCS7_compfunc?): CPointer<stack_st_PKCS7>? {
    return interpretCPointer<stack_st_PKCS7>(kniBridge3016(compare.rawValue))
}

fun sk_PKCS7_new_null(): CPointer<stack_st_PKCS7>? {
    return interpretCPointer<stack_st_PKCS7>(kniBridge3017())
}

fun sk_PKCS7_free(sk: CValuesRef<stack_st_PKCS7>?): Unit {
    memScoped {
        return kniBridge3018(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_zero(sk: CValuesRef<stack_st_PKCS7>?): Unit {
    memScoped {
        return kniBridge3019(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_delete(sk: CValuesRef<stack_st_PKCS7>?, i: Int): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3020(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_PKCS7_delete_ptr(sk: CValuesRef<stack_st_PKCS7>?, ptr: CValuesRef<PKCS7>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3021(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_push(sk: CValuesRef<stack_st_PKCS7>?, ptr: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3022(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_unshift(sk: CValuesRef<stack_st_PKCS7>?, ptr: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3023(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_pop(sk: CValuesRef<stack_st_PKCS7>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3024(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_shift(sk: CValuesRef<stack_st_PKCS7>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3025(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_pop_free(sk: CValuesRef<stack_st_PKCS7>?, freefunc: sk_PKCS7_freefunc?): Unit {
    memScoped {
        return kniBridge3026(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_PKCS7_insert(sk: CValuesRef<stack_st_PKCS7>?, ptr: CValuesRef<PKCS7>?, idx: Int): Int {
    memScoped {
        return kniBridge3027(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_PKCS7_set(sk: CValuesRef<stack_st_PKCS7>?, idx: Int, ptr: CValuesRef<PKCS7>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3028(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_find(sk: CValuesRef<stack_st_PKCS7>?, ptr: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3029(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_find_ex(sk: CValuesRef<stack_st_PKCS7>?, ptr: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3030(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_sort(sk: CValuesRef<stack_st_PKCS7>?): Unit {
    memScoped {
        return kniBridge3031(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_is_sorted(sk: CValuesRef<stack_st_PKCS7>?): Int {
    memScoped {
        return kniBridge3032(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_PKCS7_dup(sk: CValuesRef<stack_st_PKCS7>?): CPointer<stack_st_PKCS7>? {
    memScoped {
        return interpretCPointer<stack_st_PKCS7>(kniBridge3033(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_PKCS7_deep_copy(sk: CValuesRef<stack_st_PKCS7>?, copyfunc: sk_PKCS7_copyfunc?, freefunc: sk_PKCS7_freefunc?): CPointer<stack_st_PKCS7>? {
    memScoped {
        return interpretCPointer<stack_st_PKCS7>(kniBridge3034(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_PKCS7_set_cmp_func(sk: CValuesRef<stack_st_PKCS7>?, compare: sk_PKCS7_compfunc?): sk_PKCS7_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<PKCS7>>?, CPointer<CPointerVar<PKCS7>>?) -> Int>>(kniBridge3035(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun PKCS7_ISSUER_AND_SERIAL_new(): CPointer<PKCS7_ISSUER_AND_SERIAL>? {
    return interpretCPointer<PKCS7_ISSUER_AND_SERIAL>(kniBridge3036())
}

fun PKCS7_ISSUER_AND_SERIAL_free(a: CValuesRef<PKCS7_ISSUER_AND_SERIAL>?): Unit {
    memScoped {
        return kniBridge3037(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_ISSUER_AND_SERIAL(a: CValuesRef<CPointerVar<PKCS7_ISSUER_AND_SERIAL>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_ISSUER_AND_SERIAL>? {
    memScoped {
        return interpretCPointer<PKCS7_ISSUER_AND_SERIAL>(kniBridge3038(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_ISSUER_AND_SERIAL(a: CValuesRef<PKCS7_ISSUER_AND_SERIAL>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3039(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_ISSUER_AND_SERIAL_digest(data: CValuesRef<PKCS7_ISSUER_AND_SERIAL>?, type: CValuesRef<EVP_MD>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3040(data?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_fp(fp: CValuesRef<FILE>?, p7: CValuesRef<CPointerVar<PKCS7>>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3041(fp?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue))
    }
}

fun i2d_PKCS7_fp(fp: CValuesRef<FILE>?, p7: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3042(fp?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_dup(p7: CValuesRef<PKCS7>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3043(p7?.getPointer(memScope).rawValue))
    }
}

fun d2i_PKCS7_bio(bp: CValuesRef<BIO>?, p7: CValuesRef<CPointerVar<PKCS7>>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3044(bp?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue))
    }
}

fun i2d_PKCS7_bio(bp: CValuesRef<BIO>?, p7: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3045(bp?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue)
    }
}

fun i2d_PKCS7_bio_stream(out: CValuesRef<BIO>?, p7: CValuesRef<PKCS7>?, `in`: CValuesRef<BIO>?, flags: Int): Int {
    memScoped {
        return kniBridge3046(out?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, flags)
    }
}

fun PEM_write_bio_PKCS7_stream(out: CValuesRef<BIO>?, p7: CValuesRef<PKCS7>?, `in`: CValuesRef<BIO>?, flags: Int): Int {
    memScoped {
        return kniBridge3047(out?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, flags)
    }
}

fun PKCS7_SIGNER_INFO_new(): CPointer<PKCS7_SIGNER_INFO>? {
    return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge3048())
}

fun PKCS7_SIGNER_INFO_free(a: CValuesRef<PKCS7_SIGNER_INFO>?): Unit {
    memScoped {
        return kniBridge3049(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_SIGNER_INFO(a: CValuesRef<CPointerVar<PKCS7_SIGNER_INFO>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge3050(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_SIGNER_INFO(a: CValuesRef<PKCS7_SIGNER_INFO>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3051(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_RECIP_INFO_new(): CPointer<PKCS7_RECIP_INFO>? {
    return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge3052())
}

fun PKCS7_RECIP_INFO_free(a: CValuesRef<PKCS7_RECIP_INFO>?): Unit {
    memScoped {
        return kniBridge3053(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_RECIP_INFO(a: CValuesRef<CPointerVar<PKCS7_RECIP_INFO>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge3054(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_RECIP_INFO(a: CValuesRef<PKCS7_RECIP_INFO>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3055(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_SIGNED_new(): CPointer<PKCS7_SIGNED>? {
    return interpretCPointer<PKCS7_SIGNED>(kniBridge3056())
}

fun PKCS7_SIGNED_free(a: CValuesRef<PKCS7_SIGNED>?): Unit {
    memScoped {
        return kniBridge3057(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_SIGNED(a: CValuesRef<CPointerVar<PKCS7_SIGNED>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_SIGNED>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNED>(kniBridge3058(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_SIGNED(a: CValuesRef<PKCS7_SIGNED>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3059(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_ENC_CONTENT_new(): CPointer<PKCS7_ENC_CONTENT>? {
    return interpretCPointer<PKCS7_ENC_CONTENT>(kniBridge3060())
}

fun PKCS7_ENC_CONTENT_free(a: CValuesRef<PKCS7_ENC_CONTENT>?): Unit {
    memScoped {
        return kniBridge3061(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_ENC_CONTENT(a: CValuesRef<CPointerVar<PKCS7_ENC_CONTENT>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_ENC_CONTENT>? {
    memScoped {
        return interpretCPointer<PKCS7_ENC_CONTENT>(kniBridge3062(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_ENC_CONTENT(a: CValuesRef<PKCS7_ENC_CONTENT>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3063(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_ENVELOPE_new(): CPointer<PKCS7_ENVELOPE>? {
    return interpretCPointer<PKCS7_ENVELOPE>(kniBridge3064())
}

fun PKCS7_ENVELOPE_free(a: CValuesRef<PKCS7_ENVELOPE>?): Unit {
    memScoped {
        return kniBridge3065(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_ENVELOPE(a: CValuesRef<CPointerVar<PKCS7_ENVELOPE>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_ENVELOPE>? {
    memScoped {
        return interpretCPointer<PKCS7_ENVELOPE>(kniBridge3066(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_ENVELOPE(a: CValuesRef<PKCS7_ENVELOPE>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3067(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_SIGN_ENVELOPE_new(): CPointer<PKCS7_SIGN_ENVELOPE>? {
    return interpretCPointer<PKCS7_SIGN_ENVELOPE>(kniBridge3068())
}

fun PKCS7_SIGN_ENVELOPE_free(a: CValuesRef<PKCS7_SIGN_ENVELOPE>?): Unit {
    memScoped {
        return kniBridge3069(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_SIGN_ENVELOPE(a: CValuesRef<CPointerVar<PKCS7_SIGN_ENVELOPE>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_SIGN_ENVELOPE>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGN_ENVELOPE>(kniBridge3070(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_SIGN_ENVELOPE(a: CValuesRef<PKCS7_SIGN_ENVELOPE>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3071(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_DIGEST_new(): CPointer<PKCS7_DIGEST>? {
    return interpretCPointer<PKCS7_DIGEST>(kniBridge3072())
}

fun PKCS7_DIGEST_free(a: CValuesRef<PKCS7_DIGEST>?): Unit {
    memScoped {
        return kniBridge3073(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_DIGEST(a: CValuesRef<CPointerVar<PKCS7_DIGEST>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_DIGEST>? {
    memScoped {
        return interpretCPointer<PKCS7_DIGEST>(kniBridge3074(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_DIGEST(a: CValuesRef<PKCS7_DIGEST>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3075(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_ENCRYPT_new(): CPointer<PKCS7_ENCRYPT>? {
    return interpretCPointer<PKCS7_ENCRYPT>(kniBridge3076())
}

fun PKCS7_ENCRYPT_free(a: CValuesRef<PKCS7_ENCRYPT>?): Unit {
    memScoped {
        return kniBridge3077(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7_ENCRYPT(a: CValuesRef<CPointerVar<PKCS7_ENCRYPT>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7_ENCRYPT>? {
    memScoped {
        return interpretCPointer<PKCS7_ENCRYPT>(kniBridge3078(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7_ENCRYPT(a: CValuesRef<PKCS7_ENCRYPT>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3079(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_new(): CPointer<PKCS7>? {
    return interpretCPointer<PKCS7>(kniBridge3080())
}

fun PKCS7_free(a: CValuesRef<PKCS7>?): Unit {
    memScoped {
        return kniBridge3081(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS7(a: CValuesRef<CPointerVar<PKCS7>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3082(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS7(a: CValuesRef<PKCS7>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3083(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun i2d_PKCS7_NDEF(a: CValuesRef<PKCS7>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3084(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_print_ctx(out: CValuesRef<BIO>?, x: CValuesRef<PKCS7>?, indent: Int, pctx: CValuesRef<ASN1_PCTX>?): Int {
    memScoped {
        return kniBridge3085(out?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, indent, pctx?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_ctrl(p7: CValuesRef<PKCS7>?, cmd: Int, larg: Long, parg: CValuesRef<ByteVar>?): Long {
    memScoped {
        return kniBridge3086(p7?.getPointer(memScope).rawValue, cmd, larg, parg?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_set_type(p7: CValuesRef<PKCS7>?, type: Int): Int {
    memScoped {
        return kniBridge3087(p7?.getPointer(memScope).rawValue, type)
    }
}

fun PKCS7_set0_type_other(p7: CValuesRef<PKCS7>?, type: Int, other: CValuesRef<ASN1_TYPE>?): Int {
    memScoped {
        return kniBridge3088(p7?.getPointer(memScope).rawValue, type, other?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_set_content(p7: CValuesRef<PKCS7>?, p7_data: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3089(p7?.getPointer(memScope).rawValue, p7_data?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_SIGNER_INFO_set(p7i: CValuesRef<PKCS7_SIGNER_INFO>?, x509: CValuesRef<X509>?, pkey: CValuesRef<EVP_PKEY>?, dgst: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3090(p7i?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, dgst?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_SIGNER_INFO_sign(si: CValuesRef<PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge3091(si?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_add_signer(p7: CValuesRef<PKCS7>?, p7i: CValuesRef<PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge3092(p7?.getPointer(memScope).rawValue, p7i?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_add_certificate(p7: CValuesRef<PKCS7>?, x509: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3093(p7?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_add_crl(p7: CValuesRef<PKCS7>?, x509: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3094(p7?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_content_new(p7: CValuesRef<PKCS7>?, nid: Int): Int {
    memScoped {
        return kniBridge3095(p7?.getPointer(memScope).rawValue, nid)
    }
}

fun PKCS7_dataVerify(cert_store: CValuesRef<X509_STORE>?, ctx: CValuesRef<X509_STORE_CTX>?, bio: CValuesRef<BIO>?, p7: CValuesRef<PKCS7>?, si: CValuesRef<PKCS7_SIGNER_INFO>?): Int {
    memScoped {
        return kniBridge3096(cert_store?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, bio?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue, si?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_signatureVerify(bio: CValuesRef<BIO>?, p7: CValuesRef<PKCS7>?, si: CValuesRef<PKCS7_SIGNER_INFO>?, x509: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3097(bio?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue, si?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_dataInit(p7: CValuesRef<PKCS7>?, bio: CValuesRef<BIO>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge3098(p7?.getPointer(memScope).rawValue, bio?.getPointer(memScope).rawValue))
    }
}

fun PKCS7_dataFinal(p7: CValuesRef<PKCS7>?, bio: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge3099(p7?.getPointer(memScope).rawValue, bio?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_dataDecode(p7: CValuesRef<PKCS7>?, pkey: CValuesRef<EVP_PKEY>?, in_bio: CValuesRef<BIO>?, pcert: CValuesRef<X509>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge3100(p7?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, in_bio?.getPointer(memScope).rawValue, pcert?.getPointer(memScope).rawValue))
    }
}

fun PKCS7_add_signature(p7: CValuesRef<PKCS7>?, x509: CValuesRef<X509>?, pkey: CValuesRef<EVP_PKEY>?, dgst: CValuesRef<EVP_MD>?): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge3101(p7?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, dgst?.getPointer(memScope).rawValue))
    }
}

fun PKCS7_cert_from_signer_info(p7: CValuesRef<PKCS7>?, si: CValuesRef<PKCS7_SIGNER_INFO>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3102(p7?.getPointer(memScope).rawValue, si?.getPointer(memScope).rawValue))
    }
}

fun PKCS7_set_digest(p7: CValuesRef<PKCS7>?, md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3103(p7?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_get_signer_info(p7: CValuesRef<PKCS7>?): CPointer<stack_st_PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_PKCS7_SIGNER_INFO>(kniBridge3104(p7?.getPointer(memScope).rawValue))
    }
}

fun PKCS7_add_recipient(p7: CValuesRef<PKCS7>?, x509: CValuesRef<X509>?): CPointer<PKCS7_RECIP_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_RECIP_INFO>(kniBridge3105(p7?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue))
    }
}

fun PKCS7_SIGNER_INFO_get0_algs(si: CValuesRef<PKCS7_SIGNER_INFO>?, pk: CValuesRef<CPointerVar<EVP_PKEY>>?, pdig: CValuesRef<CPointerVar<X509_ALGOR>>?, psig: CValuesRef<CPointerVar<X509_ALGOR>>?): Unit {
    memScoped {
        return kniBridge3106(si?.getPointer(memScope).rawValue, pk?.getPointer(memScope).rawValue, pdig?.getPointer(memScope).rawValue, psig?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_RECIP_INFO_get0_alg(ri: CValuesRef<PKCS7_RECIP_INFO>?, penc: CValuesRef<CPointerVar<X509_ALGOR>>?): Unit {
    memScoped {
        return kniBridge3107(ri?.getPointer(memScope).rawValue, penc?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_add_recipient_info(p7: CValuesRef<PKCS7>?, ri: CValuesRef<PKCS7_RECIP_INFO>?): Int {
    memScoped {
        return kniBridge3108(p7?.getPointer(memScope).rawValue, ri?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_RECIP_INFO_set(p7i: CValuesRef<PKCS7_RECIP_INFO>?, x509: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3109(p7i?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_set_cipher(p7: CValuesRef<PKCS7>?, cipher: CValuesRef<EVP_CIPHER>?): Int {
    memScoped {
        return kniBridge3110(p7?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_stream(boundary: CValuesRef<CPointerVar<CPointerVar<UByteVar>>>?, p7: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3111(boundary?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_get_issuer_and_serial(p7: CValuesRef<PKCS7>?, idx: Int): CPointer<PKCS7_ISSUER_AND_SERIAL>? {
    memScoped {
        return interpretCPointer<PKCS7_ISSUER_AND_SERIAL>(kniBridge3112(p7?.getPointer(memScope).rawValue, idx))
    }
}

fun PKCS7_digest_from_attributes(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): CPointer<ASN1_OCTET_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_OCTET_STRING>(kniBridge3113(sk?.getPointer(memScope).rawValue))
    }
}

fun PKCS7_add_signed_attribute(p7si: CValuesRef<PKCS7_SIGNER_INFO>?, nid: Int, type: Int, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3114(p7si?.getPointer(memScope).rawValue, nid, type, data?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_add_attribute(p7si: CValuesRef<PKCS7_SIGNER_INFO>?, nid: Int, atrtype: Int, value: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3115(p7si?.getPointer(memScope).rawValue, nid, atrtype, value?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_get_attribute(si: CValuesRef<PKCS7_SIGNER_INFO>?, nid: Int): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge3116(si?.getPointer(memScope).rawValue, nid))
    }
}

fun PKCS7_get_signed_attribute(si: CValuesRef<PKCS7_SIGNER_INFO>?, nid: Int): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge3117(si?.getPointer(memScope).rawValue, nid))
    }
}

fun PKCS7_set_signed_attributes(p7si: CValuesRef<PKCS7_SIGNER_INFO>?, sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge3118(p7si?.getPointer(memScope).rawValue, sk?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_set_attributes(p7si: CValuesRef<PKCS7_SIGNER_INFO>?, sk: CValuesRef<stack_st_X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge3119(p7si?.getPointer(memScope).rawValue, sk?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_sign(signcert: CValuesRef<X509>?, pkey: CValuesRef<EVP_PKEY>?, certs: CValuesRef<stack_st_X509>?, data: CValuesRef<BIO>?, flags: Int): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3120(signcert?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, certs?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, flags))
    }
}

fun PKCS7_sign_add_signer(p7: CValuesRef<PKCS7>?, signcert: CValuesRef<X509>?, pkey: CValuesRef<EVP_PKEY>?, md: CValuesRef<EVP_MD>?, flags: Int): CPointer<PKCS7_SIGNER_INFO>? {
    memScoped {
        return interpretCPointer<PKCS7_SIGNER_INFO>(kniBridge3121(p7?.getPointer(memScope).rawValue, signcert?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, flags))
    }
}

fun PKCS7_final(p7: CValuesRef<PKCS7>?, data: CValuesRef<BIO>?, flags: Int): Int {
    memScoped {
        return kniBridge3122(p7?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, flags)
    }
}

fun PKCS7_verify(p7: CValuesRef<PKCS7>?, certs: CValuesRef<stack_st_X509>?, store: CValuesRef<X509_STORE>?, indata: CValuesRef<BIO>?, out: CValuesRef<BIO>?, flags: Int): Int {
    memScoped {
        return kniBridge3123(p7?.getPointer(memScope).rawValue, certs?.getPointer(memScope).rawValue, store?.getPointer(memScope).rawValue, indata?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, flags)
    }
}

fun PKCS7_get0_signers(p7: CValuesRef<PKCS7>?, certs: CValuesRef<stack_st_X509>?, flags: Int): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge3124(p7?.getPointer(memScope).rawValue, certs?.getPointer(memScope).rawValue, flags))
    }
}

fun PKCS7_encrypt(certs: CValuesRef<stack_st_X509>?, `in`: CValuesRef<BIO>?, cipher: CValuesRef<EVP_CIPHER>?, flags: Int): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3125(certs?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue, flags))
    }
}

fun PKCS7_decrypt(p7: CValuesRef<PKCS7>?, pkey: CValuesRef<EVP_PKEY>?, cert: CValuesRef<X509>?, data: CValuesRef<BIO>?, flags: Int): Int {
    memScoped {
        return kniBridge3126(p7?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, cert?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, flags)
    }
}

fun PKCS7_add_attrib_smimecap(si: CValuesRef<PKCS7_SIGNER_INFO>?, cap: CValuesRef<stack_st_X509_ALGOR>?): Int {
    memScoped {
        return kniBridge3127(si?.getPointer(memScope).rawValue, cap?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_get_smimecap(si: CValuesRef<PKCS7_SIGNER_INFO>?): CPointer<stack_st_X509_ALGOR>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ALGOR>(kniBridge3128(si?.getPointer(memScope).rawValue))
    }
}

fun PKCS7_simple_smimecap(sk: CValuesRef<stack_st_X509_ALGOR>?, nid: Int, arg: Int): Int {
    memScoped {
        return kniBridge3129(sk?.getPointer(memScope).rawValue, nid, arg)
    }
}

fun PKCS7_add_attrib_content_type(si: CValuesRef<PKCS7_SIGNER_INFO>?, coid: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge3130(si?.getPointer(memScope).rawValue, coid?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_add0_attrib_signing_time(si: CValuesRef<PKCS7_SIGNER_INFO>?, t: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge3131(si?.getPointer(memScope).rawValue, t?.getPointer(memScope).rawValue)
    }
}

fun PKCS7_add1_attrib_digest(si: CValuesRef<PKCS7_SIGNER_INFO>?, md: CValuesRef<UByteVar>?, mdlen: Int): Int {
    memScoped {
        return kniBridge3132(si?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, mdlen)
    }
}

fun SMIME_write_PKCS7(bio: CValuesRef<BIO>?, p7: CValuesRef<PKCS7>?, data: CValuesRef<BIO>?, flags: Int): Int {
    memScoped {
        return kniBridge3133(bio?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, flags)
    }
}

fun SMIME_read_PKCS7(bio: CValuesRef<BIO>?, bcont: CValuesRef<CPointerVar<BIO>>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3134(bio?.getPointer(memScope).rawValue, bcont?.getPointer(memScope).rawValue))
    }
}

fun BIO_new_PKCS7(out: CValuesRef<BIO>?, p7: CValuesRef<PKCS7>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge3135(out?.getPointer(memScope).rawValue, p7?.getPointer(memScope).rawValue))
    }
}

fun ERR_load_PKCS7_strings(): Int {
    return kniBridge3136()
}

fun X509_CRL_set_default_method(meth: CValuesRef<X509_CRL_METHOD>?): Unit {
    memScoped {
        return kniBridge3137(meth?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_METHOD_new(crl_init: CPointer<CFunction<(CPointer<X509_CRL>?) -> Int>>?, crl_free: CPointer<CFunction<(CPointer<X509_CRL>?) -> Int>>?, crl_lookup: CPointer<CFunction<(CPointer<X509_CRL>?, CPointer<CPointerVar<X509_REVOKED>>?, CPointer<ASN1_INTEGER>?, CPointer<X509_NAME>?) -> Int>>?, crl_verify: CPointer<CFunction<(CPointer<X509_CRL>?, CPointer<EVP_PKEY>?) -> Int>>?): CPointer<X509_CRL_METHOD>? {
    return interpretCPointer<X509_CRL_METHOD>(kniBridge3138(crl_init.rawValue, crl_free.rawValue, crl_lookup.rawValue, crl_verify.rawValue))
}

fun X509_CRL_METHOD_free(m: CValuesRef<X509_CRL_METHOD>?): Unit {
    memScoped {
        return kniBridge3139(m?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_set_meth_data(crl: CValuesRef<X509_CRL>?, dat: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge3140(crl?.getPointer(memScope).rawValue, dat?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_get_meth_data(crl: CValuesRef<X509_CRL>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3141(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_verify_cert_error_string(n: Long): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge3142(n))
}

fun X509_verify(a: CValuesRef<X509>?, r: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3143(a?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_verify(a: CValuesRef<X509_REQ>?, r: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3144(a?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_verify(a: CValuesRef<X509_CRL>?, r: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3145(a?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue)
    }
}

fun NETSCAPE_SPKI_verify(a: CValuesRef<NETSCAPE_SPKI>?, r: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3146(a?.getPointer(memScope).rawValue, r?.getPointer(memScope).rawValue)
    }
}

fun NETSCAPE_SPKI_b64_decode(str: String?, len: Int): CPointer<NETSCAPE_SPKI>? {
    memScoped {
        return interpretCPointer<NETSCAPE_SPKI>(kniBridge3147(str?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun NETSCAPE_SPKI_b64_encode(x: CValuesRef<NETSCAPE_SPKI>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3148(x?.getPointer(memScope).rawValue))
    }
}

fun NETSCAPE_SPKI_get_pubkey(x: CValuesRef<NETSCAPE_SPKI>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3149(x?.getPointer(memScope).rawValue))
    }
}

fun NETSCAPE_SPKI_set_pubkey(x: CValuesRef<NETSCAPE_SPKI>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3150(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun NETSCAPE_SPKI_print(out: CValuesRef<BIO>?, spki: CValuesRef<NETSCAPE_SPKI>?): Int {
    memScoped {
        return kniBridge3151(out?.getPointer(memScope).rawValue, spki?.getPointer(memScope).rawValue)
    }
}

fun X509_signature_dump(bp: CValuesRef<BIO>?, sig: CValuesRef<ASN1_STRING>?, indent: Int): Int {
    memScoped {
        return kniBridge3152(bp?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue, indent)
    }
}

fun X509_signature_print(bp: CValuesRef<BIO>?, alg: CValuesRef<X509_ALGOR>?, sig: CValuesRef<ASN1_STRING>?): Int {
    memScoped {
        return kniBridge3153(bp?.getPointer(memScope).rawValue, alg?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue)
    }
}

fun X509_sign(x: CValuesRef<X509>?, pkey: CValuesRef<EVP_PKEY>?, md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3154(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue)
    }
}

fun X509_sign_ctx(x: CValuesRef<X509>?, ctx: CValuesRef<EVP_MD_CTX>?): Int {
    memScoped {
        return kniBridge3155(x?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_http_nbio(rctx: CValuesRef<OCSP_REQ_CTX>?, pcert: CValuesRef<CPointerVar<X509>>?): Int {
    memScoped {
        return kniBridge3156(rctx?.getPointer(memScope).rawValue, pcert?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_sign(x: CValuesRef<X509_REQ>?, pkey: CValuesRef<EVP_PKEY>?, md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3157(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_sign_ctx(x: CValuesRef<X509_REQ>?, ctx: CValuesRef<EVP_MD_CTX>?): Int {
    memScoped {
        return kniBridge3158(x?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_sign(x: CValuesRef<X509_CRL>?, pkey: CValuesRef<EVP_PKEY>?, md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3159(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_sign_ctx(x: CValuesRef<X509_CRL>?, ctx: CValuesRef<EVP_MD_CTX>?): Int {
    memScoped {
        return kniBridge3160(x?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_http_nbio(rctx: CValuesRef<OCSP_REQ_CTX>?, pcrl: CValuesRef<CPointerVar<X509_CRL>>?): Int {
    memScoped {
        return kniBridge3161(rctx?.getPointer(memScope).rawValue, pcrl?.getPointer(memScope).rawValue)
    }
}

fun NETSCAPE_SPKI_sign(x: CValuesRef<NETSCAPE_SPKI>?, pkey: CValuesRef<EVP_PKEY>?, md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3162(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue)
    }
}

fun X509_pubkey_digest(data: CValuesRef<X509>?, type: CValuesRef<EVP_MD>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3163(data?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun X509_digest(data: CValuesRef<X509>?, type: CValuesRef<EVP_MD>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3164(data?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_digest(data: CValuesRef<X509_CRL>?, type: CValuesRef<EVP_MD>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3165(data?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_digest(data: CValuesRef<X509_REQ>?, type: CValuesRef<EVP_MD>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3166(data?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_digest(data: CValuesRef<X509_NAME>?, type: CValuesRef<EVP_MD>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3167(data?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_fp(fp: CValuesRef<FILE>?, x509: CValuesRef<CPointerVar<X509>>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3168(fp?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue))
    }
}

fun i2d_X509_fp(fp: CValuesRef<FILE>?, x509: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3169(fp?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_CRL_fp(fp: CValuesRef<FILE>?, crl: CValuesRef<CPointerVar<X509_CRL>>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge3170(fp?.getPointer(memScope).rawValue, crl?.getPointer(memScope).rawValue))
    }
}

fun i2d_X509_CRL_fp(fp: CValuesRef<FILE>?, crl: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3171(fp?.getPointer(memScope).rawValue, crl?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_REQ_fp(fp: CValuesRef<FILE>?, req: CValuesRef<CPointerVar<X509_REQ>>?): CPointer<X509_REQ>? {
    memScoped {
        return interpretCPointer<X509_REQ>(kniBridge3172(fp?.getPointer(memScope).rawValue, req?.getPointer(memScope).rawValue))
    }
}

fun i2d_X509_REQ_fp(fp: CValuesRef<FILE>?, req: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3173(fp?.getPointer(memScope).rawValue, req?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSAPrivateKey_fp(fp: CValuesRef<FILE>?, rsa: CValuesRef<CPointerVar<RSA>>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3174(fp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_RSAPrivateKey_fp(fp: CValuesRef<FILE>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3175(fp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSAPublicKey_fp(fp: CValuesRef<FILE>?, rsa: CValuesRef<CPointerVar<RSA>>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3176(fp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_RSAPublicKey_fp(fp: CValuesRef<FILE>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3177(fp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSA_PUBKEY_fp(fp: CValuesRef<FILE>?, rsa: CValuesRef<CPointerVar<RSA>>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3178(fp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_RSA_PUBKEY_fp(fp: CValuesRef<FILE>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3179(fp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_DSA_PUBKEY_fp(fp: CValuesRef<FILE>?, dsa: CValuesRef<CPointerVar<DSA>>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3180(fp?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_DSA_PUBKEY_fp(fp: CValuesRef<FILE>?, dsa: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge3181(fp?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_DSAPrivateKey_fp(fp: CValuesRef<FILE>?, dsa: CValuesRef<CPointerVar<DSA>>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3182(fp?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_DSAPrivateKey_fp(fp: CValuesRef<FILE>?, dsa: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge3183(fp?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_EC_PUBKEY_fp(fp: CValuesRef<FILE>?, eckey: CValuesRef<CPointerVar<EC_KEY>>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3184(fp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue))
    }
}

fun i2d_EC_PUBKEY_fp(fp: CValuesRef<FILE>?, eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge3185(fp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue)
    }
}

fun d2i_ECPrivateKey_fp(fp: CValuesRef<FILE>?, eckey: CValuesRef<CPointerVar<EC_KEY>>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3186(fp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue))
    }
}

fun i2d_ECPrivateKey_fp(fp: CValuesRef<FILE>?, eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge3187(fp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS8_fp(fp: CValuesRef<FILE>?, p8: CValuesRef<CPointerVar<X509_SIG>>?): CPointer<X509_SIG>? {
    memScoped {
        return interpretCPointer<X509_SIG>(kniBridge3188(fp?.getPointer(memScope).rawValue, p8?.getPointer(memScope).rawValue))
    }
}

fun i2d_PKCS8_fp(fp: CValuesRef<FILE>?, p8: CValuesRef<X509_SIG>?): Int {
    memScoped {
        return kniBridge3189(fp?.getPointer(memScope).rawValue, p8?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS8_PRIV_KEY_INFO_fp(fp: CValuesRef<FILE>?, p8inf: CValuesRef<CPointerVar<PKCS8_PRIV_KEY_INFO>>?): CPointer<PKCS8_PRIV_KEY_INFO>? {
    memScoped {
        return interpretCPointer<PKCS8_PRIV_KEY_INFO>(kniBridge3190(fp?.getPointer(memScope).rawValue, p8inf?.getPointer(memScope).rawValue))
    }
}

fun i2d_PKCS8_PRIV_KEY_INFO_fp(fp: CValuesRef<FILE>?, p8inf: CValuesRef<PKCS8_PRIV_KEY_INFO>?): Int {
    memScoped {
        return kniBridge3191(fp?.getPointer(memScope).rawValue, p8inf?.getPointer(memScope).rawValue)
    }
}

fun i2d_PKCS8PrivateKeyInfo_fp(fp: CValuesRef<FILE>?, key: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3192(fp?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun i2d_PrivateKey_fp(fp: CValuesRef<FILE>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3193(fp?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun d2i_PrivateKey_fp(fp: CValuesRef<FILE>?, a: CValuesRef<CPointerVar<EVP_PKEY>>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3194(fp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue))
    }
}

fun i2d_PUBKEY_fp(fp: CValuesRef<FILE>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3195(fp?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun d2i_PUBKEY_fp(fp: CValuesRef<FILE>?, a: CValuesRef<CPointerVar<EVP_PKEY>>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3196(fp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue))
    }
}

fun d2i_X509_bio(bp: CValuesRef<BIO>?, x509: CValuesRef<CPointerVar<X509>>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3197(bp?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue))
    }
}

fun i2d_X509_bio(bp: CValuesRef<BIO>?, x509: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3198(bp?.getPointer(memScope).rawValue, x509?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_CRL_bio(bp: CValuesRef<BIO>?, crl: CValuesRef<CPointerVar<X509_CRL>>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge3199(bp?.getPointer(memScope).rawValue, crl?.getPointer(memScope).rawValue))
    }
}

fun i2d_X509_CRL_bio(bp: CValuesRef<BIO>?, crl: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3200(bp?.getPointer(memScope).rawValue, crl?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_REQ_bio(bp: CValuesRef<BIO>?, req: CValuesRef<CPointerVar<X509_REQ>>?): CPointer<X509_REQ>? {
    memScoped {
        return interpretCPointer<X509_REQ>(kniBridge3201(bp?.getPointer(memScope).rawValue, req?.getPointer(memScope).rawValue))
    }
}

fun i2d_X509_REQ_bio(bp: CValuesRef<BIO>?, req: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3202(bp?.getPointer(memScope).rawValue, req?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSAPrivateKey_bio(bp: CValuesRef<BIO>?, rsa: CValuesRef<CPointerVar<RSA>>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3203(bp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_RSAPrivateKey_bio(bp: CValuesRef<BIO>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3204(bp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSAPublicKey_bio(bp: CValuesRef<BIO>?, rsa: CValuesRef<CPointerVar<RSA>>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3205(bp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_RSAPublicKey_bio(bp: CValuesRef<BIO>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3206(bp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSA_PUBKEY_bio(bp: CValuesRef<BIO>?, rsa: CValuesRef<CPointerVar<RSA>>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3207(bp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_RSA_PUBKEY_bio(bp: CValuesRef<BIO>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3208(bp?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_DSA_PUBKEY_bio(bp: CValuesRef<BIO>?, dsa: CValuesRef<CPointerVar<DSA>>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3209(bp?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_DSA_PUBKEY_bio(bp: CValuesRef<BIO>?, dsa: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge3210(bp?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_DSAPrivateKey_bio(bp: CValuesRef<BIO>?, dsa: CValuesRef<CPointerVar<DSA>>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3211(bp?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue))
    }
}

fun i2d_DSAPrivateKey_bio(bp: CValuesRef<BIO>?, dsa: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge3212(bp?.getPointer(memScope).rawValue, dsa?.getPointer(memScope).rawValue)
    }
}

fun d2i_EC_PUBKEY_bio(bp: CValuesRef<BIO>?, eckey: CValuesRef<CPointerVar<EC_KEY>>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3213(bp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue))
    }
}

fun i2d_EC_PUBKEY_bio(bp: CValuesRef<BIO>?, eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge3214(bp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue)
    }
}

fun d2i_ECPrivateKey_bio(bp: CValuesRef<BIO>?, eckey: CValuesRef<CPointerVar<EC_KEY>>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3215(bp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue))
    }
}

fun i2d_ECPrivateKey_bio(bp: CValuesRef<BIO>?, eckey: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge3216(bp?.getPointer(memScope).rawValue, eckey?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS8_bio(bp: CValuesRef<BIO>?, p8: CValuesRef<CPointerVar<X509_SIG>>?): CPointer<X509_SIG>? {
    memScoped {
        return interpretCPointer<X509_SIG>(kniBridge3217(bp?.getPointer(memScope).rawValue, p8?.getPointer(memScope).rawValue))
    }
}

fun i2d_PKCS8_bio(bp: CValuesRef<BIO>?, p8: CValuesRef<X509_SIG>?): Int {
    memScoped {
        return kniBridge3218(bp?.getPointer(memScope).rawValue, p8?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS8_PRIV_KEY_INFO_bio(bp: CValuesRef<BIO>?, p8inf: CValuesRef<CPointerVar<PKCS8_PRIV_KEY_INFO>>?): CPointer<PKCS8_PRIV_KEY_INFO>? {
    memScoped {
        return interpretCPointer<PKCS8_PRIV_KEY_INFO>(kniBridge3219(bp?.getPointer(memScope).rawValue, p8inf?.getPointer(memScope).rawValue))
    }
}

fun i2d_PKCS8_PRIV_KEY_INFO_bio(bp: CValuesRef<BIO>?, p8inf: CValuesRef<PKCS8_PRIV_KEY_INFO>?): Int {
    memScoped {
        return kniBridge3220(bp?.getPointer(memScope).rawValue, p8inf?.getPointer(memScope).rawValue)
    }
}

fun i2d_PKCS8PrivateKeyInfo_bio(bp: CValuesRef<BIO>?, key: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3221(bp?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun i2d_PrivateKey_bio(bp: CValuesRef<BIO>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3222(bp?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun d2i_PrivateKey_bio(bp: CValuesRef<BIO>?, a: CValuesRef<CPointerVar<EVP_PKEY>>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3223(bp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue))
    }
}

fun i2d_PUBKEY_bio(bp: CValuesRef<BIO>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3224(bp?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun d2i_PUBKEY_bio(bp: CValuesRef<BIO>?, a: CValuesRef<CPointerVar<EVP_PKEY>>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3225(bp?.getPointer(memScope).rawValue, a?.getPointer(memScope).rawValue))
    }
}

fun X509_dup(x509: CValuesRef<X509>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3226(x509?.getPointer(memScope).rawValue))
    }
}

fun X509_ATTRIBUTE_dup(xa: CValuesRef<X509_ATTRIBUTE>?): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3227(xa?.getPointer(memScope).rawValue))
    }
}

fun X509_EXTENSION_dup(ex: CValuesRef<X509_EXTENSION>?): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3228(ex?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_dup(crl: CValuesRef<X509_CRL>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge3229(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_REVOKED_dup(rev: CValuesRef<X509_REVOKED>?): CPointer<X509_REVOKED>? {
    memScoped {
        return interpretCPointer<X509_REVOKED>(kniBridge3230(rev?.getPointer(memScope).rawValue))
    }
}

fun X509_REQ_dup(req: CValuesRef<X509_REQ>?): CPointer<X509_REQ>? {
    memScoped {
        return interpretCPointer<X509_REQ>(kniBridge3231(req?.getPointer(memScope).rawValue))
    }
}

fun X509_ALGOR_dup(xn: CValuesRef<X509_ALGOR>?): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge3232(xn?.getPointer(memScope).rawValue))
    }
}

fun X509_ALGOR_set0(alg: CValuesRef<X509_ALGOR>?, aobj: CValuesRef<ASN1_OBJECT>?, ptype: Int, pval: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3233(alg?.getPointer(memScope).rawValue, aobj?.getPointer(memScope).rawValue, ptype, pval?.getPointer(memScope).rawValue)
    }
}

fun X509_ALGOR_get0(paobj: CValuesRef<CPointerVar<ASN1_OBJECT>>?, pptype: CValuesRef<IntVar>?, ppval: CValuesRef<COpaquePointerVar>?, algor: CValuesRef<X509_ALGOR>?): Unit {
    memScoped {
        return kniBridge3234(paobj?.getPointer(memScope).rawValue, pptype?.getPointer(memScope).rawValue, ppval?.getPointer(memScope).rawValue, algor?.getPointer(memScope).rawValue)
    }
}

fun X509_ALGOR_set_md(alg: CValuesRef<X509_ALGOR>?, md: CValuesRef<EVP_MD>?): Unit {
    memScoped {
        return kniBridge3235(alg?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue)
    }
}

fun X509_ALGOR_cmp(a: CValuesRef<X509_ALGOR>?, b: CValuesRef<X509_ALGOR>?): Int {
    memScoped {
        return kniBridge3236(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_dup(xn: CValuesRef<X509_NAME>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge3237(xn?.getPointer(memScope).rawValue))
    }
}

fun X509_NAME_ENTRY_dup(ne: CValuesRef<X509_NAME_ENTRY>?): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge3238(ne?.getPointer(memScope).rawValue))
    }
}

fun X509_cmp_time(s: CValuesRef<ASN1_TIME>?, t: CValuesRef<time_tVar>?): Int {
    memScoped {
        return kniBridge3239(s?.getPointer(memScope).rawValue, t?.getPointer(memScope).rawValue)
    }
}

fun X509_cmp_current_time(s: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge3240(s?.getPointer(memScope).rawValue)
    }
}

fun X509_time_adj(s: CValuesRef<ASN1_TIME>?, adj: Long, t: CValuesRef<time_tVar>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3241(s?.getPointer(memScope).rawValue, adj, t?.getPointer(memScope).rawValue))
    }
}

fun X509_time_adj_ex(s: CValuesRef<ASN1_TIME>?, offset_day: Int, offset_sec: Long, t: CValuesRef<time_tVar>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3242(s?.getPointer(memScope).rawValue, offset_day, offset_sec, t?.getPointer(memScope).rawValue))
    }
}

fun X509_gmtime_adj(s: CValuesRef<ASN1_TIME>?, adj: Long): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3243(s?.getPointer(memScope).rawValue, adj))
    }
}

fun X509_get_default_cert_area(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge3244())
}

fun X509_get_default_cert_dir(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge3245())
}

fun X509_get_default_cert_file(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge3246())
}

fun X509_get_default_cert_dir_env(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge3247())
}

fun X509_get_default_cert_file_env(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge3248())
}

fun X509_get_default_private_dir(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge3249())
}

fun X509_to_X509_REQ(x: CValuesRef<X509>?, pkey: CValuesRef<EVP_PKEY>?, md: CValuesRef<EVP_MD>?): CPointer<X509_REQ>? {
    memScoped {
        return interpretCPointer<X509_REQ>(kniBridge3250(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue))
    }
}

fun X509_REQ_to_X509(r: CValuesRef<X509_REQ>?, days: Int, pkey: CValuesRef<EVP_PKEY>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3251(r?.getPointer(memScope).rawValue, days, pkey?.getPointer(memScope).rawValue))
    }
}

fun X509_ALGOR_new(): CPointer<X509_ALGOR>? {
    return interpretCPointer<X509_ALGOR>(kniBridge3252())
}

fun X509_ALGOR_free(a: CValuesRef<X509_ALGOR>?): Unit {
    memScoped {
        return kniBridge3253(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_ALGOR(a: CValuesRef<CPointerVar<X509_ALGOR>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge3254(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_ALGOR(a: CValuesRef<X509_ALGOR>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3255(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_ALGORS(a: CValuesRef<CPointerVar<X509_ALGORS>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_ALGORS>? {
    memScoped {
        return interpretCPointer<X509_ALGORS>(kniBridge3256(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_ALGORS(a: CValuesRef<X509_ALGORS>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3257(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_VAL_new(): CPointer<X509_VAL>? {
    return interpretCPointer<X509_VAL>(kniBridge3258())
}

fun X509_VAL_free(a: CValuesRef<X509_VAL>?): Unit {
    memScoped {
        return kniBridge3259(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_VAL(a: CValuesRef<CPointerVar<X509_VAL>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_VAL>? {
    memScoped {
        return interpretCPointer<X509_VAL>(kniBridge3260(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_VAL(a: CValuesRef<X509_VAL>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3261(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_PUBKEY_new(): CPointer<X509_PUBKEY>? {
    return interpretCPointer<X509_PUBKEY>(kniBridge3262())
}

fun X509_PUBKEY_free(a: CValuesRef<X509_PUBKEY>?): Unit {
    memScoped {
        return kniBridge3263(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_PUBKEY(a: CValuesRef<CPointerVar<X509_PUBKEY>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_PUBKEY>? {
    memScoped {
        return interpretCPointer<X509_PUBKEY>(kniBridge3264(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_PUBKEY(a: CValuesRef<X509_PUBKEY>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3265(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_PUBKEY_set(x: CValuesRef<CPointerVar<X509_PUBKEY>>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3266(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun X509_PUBKEY_get0(key: CValuesRef<X509_PUBKEY>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3267(key?.getPointer(memScope).rawValue))
    }
}

fun X509_PUBKEY_get(key: CValuesRef<X509_PUBKEY>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3268(key?.getPointer(memScope).rawValue))
    }
}

fun X509_get_pubkey_parameters(pkey: CValuesRef<EVP_PKEY>?, chain: CValuesRef<stack_st_X509>?): Int {
    memScoped {
        return kniBridge3269(pkey?.getPointer(memScope).rawValue, chain?.getPointer(memScope).rawValue)
    }
}

fun X509_get_pathlen(x: CValuesRef<X509>?): Long {
    memScoped {
        return kniBridge3270(x?.getPointer(memScope).rawValue)
    }
}

fun i2d_PUBKEY(a: CValuesRef<EVP_PKEY>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3271(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_PUBKEY(a: CValuesRef<CPointerVar<EVP_PKEY>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3272(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun i2d_RSA_PUBKEY(a: CValuesRef<RSA>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3273(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_RSA_PUBKEY(a: CValuesRef<CPointerVar<RSA>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3274(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun i2d_DSA_PUBKEY(a: CValuesRef<DSA>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3275(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_DSA_PUBKEY(a: CValuesRef<CPointerVar<DSA>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3276(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun i2d_EC_PUBKEY(a: CValuesRef<EC_KEY>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3277(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_EC_PUBKEY(a: CValuesRef<CPointerVar<EC_KEY>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3278(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun X509_SIG_new(): CPointer<X509_SIG>? {
    return interpretCPointer<X509_SIG>(kniBridge3279())
}

fun X509_SIG_free(a: CValuesRef<X509_SIG>?): Unit {
    memScoped {
        return kniBridge3280(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_SIG(a: CValuesRef<CPointerVar<X509_SIG>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_SIG>? {
    memScoped {
        return interpretCPointer<X509_SIG>(kniBridge3281(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_SIG(a: CValuesRef<X509_SIG>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3282(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_SIG_get0(sig: CValuesRef<X509_SIG>?, palg: CValuesRef<CPointerVar<X509_ALGOR>>?, pdigest: CValuesRef<CPointerVar<ASN1_OCTET_STRING>>?): Unit {
    memScoped {
        return kniBridge3283(sig?.getPointer(memScope).rawValue, palg?.getPointer(memScope).rawValue, pdigest?.getPointer(memScope).rawValue)
    }
}

fun X509_SIG_getm(sig: CValuesRef<X509_SIG>?, palg: CValuesRef<CPointerVar<X509_ALGOR>>?, pdigest: CValuesRef<CPointerVar<ASN1_OCTET_STRING>>?): Unit {
    memScoped {
        return kniBridge3284(sig?.getPointer(memScope).rawValue, palg?.getPointer(memScope).rawValue, pdigest?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_INFO_new(): CPointer<X509_REQ_INFO>? {
    return interpretCPointer<X509_REQ_INFO>(kniBridge3285())
}

fun X509_REQ_INFO_free(a: CValuesRef<X509_REQ_INFO>?): Unit {
    memScoped {
        return kniBridge3286(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_REQ_INFO(a: CValuesRef<CPointerVar<X509_REQ_INFO>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_REQ_INFO>? {
    memScoped {
        return interpretCPointer<X509_REQ_INFO>(kniBridge3287(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_REQ_INFO(a: CValuesRef<X509_REQ_INFO>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3288(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_new(): CPointer<X509_REQ>? {
    return interpretCPointer<X509_REQ>(kniBridge3289())
}

fun X509_REQ_free(a: CValuesRef<X509_REQ>?): Unit {
    memScoped {
        return kniBridge3290(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_REQ(a: CValuesRef<CPointerVar<X509_REQ>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_REQ>? {
    memScoped {
        return interpretCPointer<X509_REQ>(kniBridge3291(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_REQ(a: CValuesRef<X509_REQ>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3292(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_ATTRIBUTE_new(): CPointer<X509_ATTRIBUTE>? {
    return interpretCPointer<X509_ATTRIBUTE>(kniBridge3293())
}

fun X509_ATTRIBUTE_free(a: CValuesRef<X509_ATTRIBUTE>?): Unit {
    memScoped {
        return kniBridge3294(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_ATTRIBUTE(a: CValuesRef<CPointerVar<X509_ATTRIBUTE>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3295(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_ATTRIBUTE(a: CValuesRef<X509_ATTRIBUTE>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3296(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_ATTRIBUTE_create(nid: Int, atrtype: Int, value: CValuesRef<*>?): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3297(nid, atrtype, value?.getPointer(memScope).rawValue))
    }
}

fun X509_EXTENSION_new(): CPointer<X509_EXTENSION>? {
    return interpretCPointer<X509_EXTENSION>(kniBridge3298())
}

fun X509_EXTENSION_free(a: CValuesRef<X509_EXTENSION>?): Unit {
    memScoped {
        return kniBridge3299(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_EXTENSION(a: CValuesRef<CPointerVar<X509_EXTENSION>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3300(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_EXTENSION(a: CValuesRef<X509_EXTENSION>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3301(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_EXTENSIONS(a: CValuesRef<CPointerVar<X509_EXTENSIONS>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_EXTENSIONS>? {
    memScoped {
        return interpretCPointer<X509_EXTENSIONS>(kniBridge3302(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_EXTENSIONS(a: CValuesRef<X509_EXTENSIONS>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3303(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_ENTRY_new(): CPointer<X509_NAME_ENTRY>? {
    return interpretCPointer<X509_NAME_ENTRY>(kniBridge3304())
}

fun X509_NAME_ENTRY_free(a: CValuesRef<X509_NAME_ENTRY>?): Unit {
    memScoped {
        return kniBridge3305(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_NAME_ENTRY(a: CValuesRef<CPointerVar<X509_NAME_ENTRY>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge3306(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_NAME_ENTRY(a: CValuesRef<X509_NAME_ENTRY>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3307(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_new(): CPointer<X509_NAME>? {
    return interpretCPointer<X509_NAME>(kniBridge3308())
}

fun X509_NAME_free(a: CValuesRef<X509_NAME>?): Unit {
    memScoped {
        return kniBridge3309(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_NAME(a: CValuesRef<CPointerVar<X509_NAME>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge3310(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_NAME(a: CValuesRef<X509_NAME>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3311(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_set(xn: CValuesRef<CPointerVar<X509_NAME>>?, name: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge3312(xn?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue)
    }
}

fun X509_CINF_new(): CPointer<X509_CINF>? {
    return interpretCPointer<X509_CINF>(kniBridge3313())
}

fun X509_CINF_free(a: CValuesRef<X509_CINF>?): Unit {
    memScoped {
        return kniBridge3314(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_CINF(a: CValuesRef<CPointerVar<X509_CINF>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_CINF>? {
    memScoped {
        return interpretCPointer<X509_CINF>(kniBridge3315(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_CINF(a: CValuesRef<X509_CINF>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3316(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_new(): CPointer<X509>? {
    return interpretCPointer<X509>(kniBridge3317())
}

fun X509_free(a: CValuesRef<X509>?): Unit {
    memScoped {
        return kniBridge3318(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509(a: CValuesRef<CPointerVar<X509>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3319(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509(a: CValuesRef<X509>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3320(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_CERT_AUX_new(): CPointer<X509_CERT_AUX>? {
    return interpretCPointer<X509_CERT_AUX>(kniBridge3321())
}

fun X509_CERT_AUX_free(a: CValuesRef<X509_CERT_AUX>?): Unit {
    memScoped {
        return kniBridge3322(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_CERT_AUX(a: CValuesRef<CPointerVar<X509_CERT_AUX>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_CERT_AUX>? {
    memScoped {
        return interpretCPointer<X509_CERT_AUX>(kniBridge3323(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_CERT_AUX(a: CValuesRef<X509_CERT_AUX>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3324(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_set_ex_data(r: CValuesRef<X509>?, idx: Int, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3325(r?.getPointer(memScope).rawValue, idx, arg?.getPointer(memScope).rawValue)
    }
}

fun X509_get_ex_data(r: CValuesRef<X509>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3326(r?.getPointer(memScope).rawValue, idx))
    }
}

fun i2d_X509_AUX(a: CValuesRef<X509>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3327(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_AUX(a: CValuesRef<CPointerVar<X509>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3328(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun i2d_re_X509_tbs(x: CValuesRef<X509>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3329(x?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun X509_get0_signature(psig: CValuesRef<CPointerVar<ASN1_BIT_STRING>>?, palg: CValuesRef<CPointerVar<X509_ALGOR>>?, x: CValuesRef<X509>?): Unit {
    memScoped {
        return kniBridge3330(psig?.getPointer(memScope).rawValue, palg?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_get_signature_nid(x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3331(x?.getPointer(memScope).rawValue)
    }
}

fun X509_trusted(x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3332(x?.getPointer(memScope).rawValue)
    }
}

fun X509_alias_set1(x: CValuesRef<X509>?, name: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3333(x?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue, len)
    }
}

fun X509_keyid_set1(x: CValuesRef<X509>?, id: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3334(x?.getPointer(memScope).rawValue, id?.getPointer(memScope).rawValue, len)
    }
}

fun X509_alias_get0(x: CValuesRef<X509>?, len: CValuesRef<IntVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge3335(x?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue))
    }
}

fun X509_keyid_get0(x: CValuesRef<X509>?, len: CValuesRef<IntVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge3336(x?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue))
    }
}

fun X509_TRUST_set_default(trust: CPointer<CFunction<(Int, CPointer<X509>?, Int) -> Int>>?): CPointer<CFunction<(Int, CPointer<X509>?, Int) -> Int>>? {
    return interpretCPointer<CFunction<(Int, CPointer<X509>?, Int) -> Int>>(kniBridge3337(trust.rawValue))
}

fun X509_TRUST_set(t: CValuesRef<IntVar>?, trust: Int): Int {
    memScoped {
        return kniBridge3338(t?.getPointer(memScope).rawValue, trust)
    }
}

fun X509_add1_trust_object(x: CValuesRef<X509>?, obj: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge3339(x?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue)
    }
}

fun X509_add1_reject_object(x: CValuesRef<X509>?, obj: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge3340(x?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue)
    }
}

fun X509_trust_clear(x: CValuesRef<X509>?): Unit {
    memScoped {
        return kniBridge3341(x?.getPointer(memScope).rawValue)
    }
}

fun X509_reject_clear(x: CValuesRef<X509>?): Unit {
    memScoped {
        return kniBridge3342(x?.getPointer(memScope).rawValue)
    }
}

fun X509_get0_trust_objects(x: CValuesRef<X509>?): CPointer<stack_st_ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_OBJECT>(kniBridge3343(x?.getPointer(memScope).rawValue))
    }
}

fun X509_get0_reject_objects(x: CValuesRef<X509>?): CPointer<stack_st_ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<stack_st_ASN1_OBJECT>(kniBridge3344(x?.getPointer(memScope).rawValue))
    }
}

fun X509_REVOKED_new(): CPointer<X509_REVOKED>? {
    return interpretCPointer<X509_REVOKED>(kniBridge3345())
}

fun X509_REVOKED_free(a: CValuesRef<X509_REVOKED>?): Unit {
    memScoped {
        return kniBridge3346(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_REVOKED(a: CValuesRef<CPointerVar<X509_REVOKED>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_REVOKED>? {
    memScoped {
        return interpretCPointer<X509_REVOKED>(kniBridge3347(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_REVOKED(a: CValuesRef<X509_REVOKED>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3348(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_INFO_new(): CPointer<X509_CRL_INFO>? {
    return interpretCPointer<X509_CRL_INFO>(kniBridge3349())
}

fun X509_CRL_INFO_free(a: CValuesRef<X509_CRL_INFO>?): Unit {
    memScoped {
        return kniBridge3350(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_CRL_INFO(a: CValuesRef<CPointerVar<X509_CRL_INFO>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_CRL_INFO>? {
    memScoped {
        return interpretCPointer<X509_CRL_INFO>(kniBridge3351(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_CRL_INFO(a: CValuesRef<X509_CRL_INFO>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3352(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_new(): CPointer<X509_CRL>? {
    return interpretCPointer<X509_CRL>(kniBridge3353())
}

fun X509_CRL_free(a: CValuesRef<X509_CRL>?): Unit {
    memScoped {
        return kniBridge3354(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_X509_CRL(a: CValuesRef<CPointerVar<X509_CRL>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge3355(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_X509_CRL(a: CValuesRef<X509_CRL>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3356(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_add0_revoked(crl: CValuesRef<X509_CRL>?, rev: CValuesRef<X509_REVOKED>?): Int {
    memScoped {
        return kniBridge3357(crl?.getPointer(memScope).rawValue, rev?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_get0_by_serial(crl: CValuesRef<X509_CRL>?, ret: CValuesRef<CPointerVar<X509_REVOKED>>?, serial: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge3358(crl?.getPointer(memScope).rawValue, ret?.getPointer(memScope).rawValue, serial?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_get0_by_cert(crl: CValuesRef<X509_CRL>?, ret: CValuesRef<CPointerVar<X509_REVOKED>>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3359(crl?.getPointer(memScope).rawValue, ret?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_PKEY_new(): CPointer<X509_PKEY>? {
    return interpretCPointer<X509_PKEY>(kniBridge3360())
}

fun X509_PKEY_free(a: CValuesRef<X509_PKEY>?): Unit {
    memScoped {
        return kniBridge3361(a?.getPointer(memScope).rawValue)
    }
}

fun NETSCAPE_SPKI_new(): CPointer<NETSCAPE_SPKI>? {
    return interpretCPointer<NETSCAPE_SPKI>(kniBridge3362())
}

fun NETSCAPE_SPKI_free(a: CValuesRef<NETSCAPE_SPKI>?): Unit {
    memScoped {
        return kniBridge3363(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_NETSCAPE_SPKI(a: CValuesRef<CPointerVar<NETSCAPE_SPKI>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<NETSCAPE_SPKI>? {
    memScoped {
        return interpretCPointer<NETSCAPE_SPKI>(kniBridge3364(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_NETSCAPE_SPKI(a: CValuesRef<NETSCAPE_SPKI>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3365(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun NETSCAPE_SPKAC_new(): CPointer<NETSCAPE_SPKAC>? {
    return interpretCPointer<NETSCAPE_SPKAC>(kniBridge3366())
}

fun NETSCAPE_SPKAC_free(a: CValuesRef<NETSCAPE_SPKAC>?): Unit {
    memScoped {
        return kniBridge3367(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_NETSCAPE_SPKAC(a: CValuesRef<CPointerVar<NETSCAPE_SPKAC>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<NETSCAPE_SPKAC>? {
    memScoped {
        return interpretCPointer<NETSCAPE_SPKAC>(kniBridge3368(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_NETSCAPE_SPKAC(a: CValuesRef<NETSCAPE_SPKAC>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3369(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun NETSCAPE_CERT_SEQUENCE_new(): CPointer<NETSCAPE_CERT_SEQUENCE>? {
    return interpretCPointer<NETSCAPE_CERT_SEQUENCE>(kniBridge3370())
}

fun NETSCAPE_CERT_SEQUENCE_free(a: CValuesRef<NETSCAPE_CERT_SEQUENCE>?): Unit {
    memScoped {
        return kniBridge3371(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_NETSCAPE_CERT_SEQUENCE(a: CValuesRef<CPointerVar<NETSCAPE_CERT_SEQUENCE>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<NETSCAPE_CERT_SEQUENCE>? {
    memScoped {
        return interpretCPointer<NETSCAPE_CERT_SEQUENCE>(kniBridge3372(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_NETSCAPE_CERT_SEQUENCE(a: CValuesRef<NETSCAPE_CERT_SEQUENCE>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3373(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun X509_INFO_new(): CPointer<X509_INFO>? {
    return interpretCPointer<X509_INFO>(kniBridge3374())
}

fun X509_INFO_free(a: CValuesRef<X509_INFO>?): Unit {
    memScoped {
        return kniBridge3375(a?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_oneline(a: CValuesRef<X509_NAME>?, buf: CValuesRef<ByteVar>?, size: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3376(a?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, size))
    }
}

fun ASN1_verify(i2d: CPointer<i2d_of_void>?, algor1: CValuesRef<X509_ALGOR>?, signature: CValuesRef<ASN1_BIT_STRING>?, data: CValuesRef<ByteVar>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3377(i2d.rawValue, algor1?.getPointer(memScope).rawValue, signature?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun ASN1_digest(i2d: CPointer<i2d_of_void>?, type: CValuesRef<EVP_MD>?, data: CValuesRef<ByteVar>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3378(i2d.rawValue, type?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun ASN1_sign(i2d: CPointer<i2d_of_void>?, algor1: CValuesRef<X509_ALGOR>?, algor2: CValuesRef<X509_ALGOR>?, signature: CValuesRef<ASN1_BIT_STRING>?, data: CValuesRef<ByteVar>?, pkey: CValuesRef<EVP_PKEY>?, type: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3379(i2d.rawValue, algor1?.getPointer(memScope).rawValue, algor2?.getPointer(memScope).rawValue, signature?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_digest(it: CValuesRef<ASN1_ITEM>?, type: CValuesRef<EVP_MD>?, data: CValuesRef<*>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3380(it?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_verify(it: CValuesRef<ASN1_ITEM>?, algor1: CValuesRef<X509_ALGOR>?, signature: CValuesRef<ASN1_BIT_STRING>?, data: CValuesRef<*>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3381(it?.getPointer(memScope).rawValue, algor1?.getPointer(memScope).rawValue, signature?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_sign(it: CValuesRef<ASN1_ITEM>?, algor1: CValuesRef<X509_ALGOR>?, algor2: CValuesRef<X509_ALGOR>?, signature: CValuesRef<ASN1_BIT_STRING>?, data: CValuesRef<*>?, pkey: CValuesRef<EVP_PKEY>?, type: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3382(it?.getPointer(memScope).rawValue, algor1?.getPointer(memScope).rawValue, algor2?.getPointer(memScope).rawValue, signature?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun ASN1_item_sign_ctx(it: CValuesRef<ASN1_ITEM>?, algor1: CValuesRef<X509_ALGOR>?, algor2: CValuesRef<X509_ALGOR>?, signature: CValuesRef<ASN1_BIT_STRING>?, asn: CValuesRef<*>?, ctx: CValuesRef<EVP_MD_CTX>?): Int {
    memScoped {
        return kniBridge3383(it?.getPointer(memScope).rawValue, algor1?.getPointer(memScope).rawValue, algor2?.getPointer(memScope).rawValue, signature?.getPointer(memScope).rawValue, asn?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_get_version(x: CValuesRef<X509>?): Long {
    memScoped {
        return kniBridge3384(x?.getPointer(memScope).rawValue)
    }
}

fun X509_set_version(x: CValuesRef<X509>?, version: Long): Int {
    memScoped {
        return kniBridge3385(x?.getPointer(memScope).rawValue, version)
    }
}

fun X509_set_serialNumber(x: CValuesRef<X509>?, serial: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge3386(x?.getPointer(memScope).rawValue, serial?.getPointer(memScope).rawValue)
    }
}

fun X509_get_serialNumber(x: CValuesRef<X509>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge3387(x?.getPointer(memScope).rawValue))
    }
}

fun X509_get0_serialNumber(x: CValuesRef<X509>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge3388(x?.getPointer(memScope).rawValue))
    }
}

fun X509_set_issuer_name(x: CValuesRef<X509>?, name: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge3389(x?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue)
    }
}

fun X509_get_issuer_name(a: CValuesRef<X509>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge3390(a?.getPointer(memScope).rawValue))
    }
}

fun X509_set_subject_name(x: CValuesRef<X509>?, name: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge3391(x?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue)
    }
}

fun X509_get_subject_name(a: CValuesRef<X509>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge3392(a?.getPointer(memScope).rawValue))
    }
}

fun X509_get0_notBefore(x: CValuesRef<X509>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3393(x?.getPointer(memScope).rawValue))
    }
}

fun X509_getm_notBefore(x: CValuesRef<X509>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3394(x?.getPointer(memScope).rawValue))
    }
}

fun X509_set1_notBefore(x: CValuesRef<X509>?, tm: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge3395(x?.getPointer(memScope).rawValue, tm?.getPointer(memScope).rawValue)
    }
}

fun X509_get0_notAfter(x: CValuesRef<X509>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3396(x?.getPointer(memScope).rawValue))
    }
}

fun X509_getm_notAfter(x: CValuesRef<X509>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3397(x?.getPointer(memScope).rawValue))
    }
}

fun X509_set1_notAfter(x: CValuesRef<X509>?, tm: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge3398(x?.getPointer(memScope).rawValue, tm?.getPointer(memScope).rawValue)
    }
}

fun X509_set_pubkey(x: CValuesRef<X509>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3399(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun X509_up_ref(x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3400(x?.getPointer(memScope).rawValue)
    }
}

fun X509_get_signature_type(x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3401(x?.getPointer(memScope).rawValue)
    }
}

fun X509_get_X509_PUBKEY(x: CValuesRef<X509>?): CPointer<X509_PUBKEY>? {
    memScoped {
        return interpretCPointer<X509_PUBKEY>(kniBridge3402(x?.getPointer(memScope).rawValue))
    }
}

fun X509_get0_extensions(x: CValuesRef<X509>?): CPointer<stack_st_X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge3403(x?.getPointer(memScope).rawValue))
    }
}

fun X509_get0_uids(x: CValuesRef<X509>?, piuid: CValuesRef<CPointerVar<ASN1_BIT_STRING>>?, psuid: CValuesRef<CPointerVar<ASN1_BIT_STRING>>?): Unit {
    memScoped {
        return kniBridge3404(x?.getPointer(memScope).rawValue, piuid?.getPointer(memScope).rawValue, psuid?.getPointer(memScope).rawValue)
    }
}

fun X509_get0_tbs_sigalg(x: CValuesRef<X509>?): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge3405(x?.getPointer(memScope).rawValue))
    }
}

fun X509_get0_pubkey(x: CValuesRef<X509>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3406(x?.getPointer(memScope).rawValue))
    }
}

fun X509_get_pubkey(x: CValuesRef<X509>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3407(x?.getPointer(memScope).rawValue))
    }
}

fun X509_get0_pubkey_bitstr(x: CValuesRef<X509>?): CPointer<ASN1_BIT_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_BIT_STRING>(kniBridge3408(x?.getPointer(memScope).rawValue))
    }
}

fun X509_certificate_type(x: CValuesRef<X509>?, pubkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3409(x?.getPointer(memScope).rawValue, pubkey?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_get_version(req: CValuesRef<X509_REQ>?): Long {
    memScoped {
        return kniBridge3410(req?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_set_version(x: CValuesRef<X509_REQ>?, version: Long): Int {
    memScoped {
        return kniBridge3411(x?.getPointer(memScope).rawValue, version)
    }
}

fun X509_REQ_get_subject_name(req: CValuesRef<X509_REQ>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge3412(req?.getPointer(memScope).rawValue))
    }
}

fun X509_REQ_set_subject_name(req: CValuesRef<X509_REQ>?, name: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge3413(req?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_get0_signature(req: CValuesRef<X509_REQ>?, psig: CValuesRef<CPointerVar<ASN1_BIT_STRING>>?, palg: CValuesRef<CPointerVar<X509_ALGOR>>?): Unit {
    memScoped {
        return kniBridge3414(req?.getPointer(memScope).rawValue, psig?.getPointer(memScope).rawValue, palg?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_get_signature_nid(req: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3415(req?.getPointer(memScope).rawValue)
    }
}

fun i2d_re_X509_REQ_tbs(req: CValuesRef<X509_REQ>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3416(req?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_set_pubkey(x: CValuesRef<X509_REQ>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3417(x?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_get_pubkey(req: CValuesRef<X509_REQ>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3418(req?.getPointer(memScope).rawValue))
    }
}

fun X509_REQ_get0_pubkey(req: CValuesRef<X509_REQ>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3419(req?.getPointer(memScope).rawValue))
    }
}

fun X509_REQ_get_X509_PUBKEY(req: CValuesRef<X509_REQ>?): CPointer<X509_PUBKEY>? {
    memScoped {
        return interpretCPointer<X509_PUBKEY>(kniBridge3420(req?.getPointer(memScope).rawValue))
    }
}

fun X509_REQ_extension_nid(nid: Int): Int {
    return kniBridge3421(nid)
}

fun X509_REQ_get_extension_nids(): CPointer<IntVar>? {
    return interpretCPointer<IntVar>(kniBridge3422())
}

fun X509_REQ_set_extension_nids(nids: CValuesRef<IntVar>?): Unit {
    memScoped {
        return kniBridge3423(nids?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_get_extensions(req: CValuesRef<X509_REQ>?): CPointer<stack_st_X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge3424(req?.getPointer(memScope).rawValue))
    }
}

fun X509_REQ_add_extensions_nid(req: CValuesRef<X509_REQ>?, exts: CValuesRef<stack_st_X509_EXTENSION>?, nid: Int): Int {
    memScoped {
        return kniBridge3425(req?.getPointer(memScope).rawValue, exts?.getPointer(memScope).rawValue, nid)
    }
}

fun X509_REQ_add_extensions(req: CValuesRef<X509_REQ>?, exts: CValuesRef<stack_st_X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge3426(req?.getPointer(memScope).rawValue, exts?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_get_attr_count(req: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3427(req?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_get_attr_by_NID(req: CValuesRef<X509_REQ>?, nid: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3428(req?.getPointer(memScope).rawValue, nid, lastpos)
    }
}

fun X509_REQ_get_attr_by_OBJ(req: CValuesRef<X509_REQ>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int): Int {
    memScoped {
        return kniBridge3429(req?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos)
    }
}

fun X509_REQ_get_attr(req: CValuesRef<X509_REQ>?, loc: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3430(req?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_REQ_delete_attr(req: CValuesRef<X509_REQ>?, loc: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3431(req?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_REQ_add1_attr(req: CValuesRef<X509_REQ>?, attr: CValuesRef<X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge3432(req?.getPointer(memScope).rawValue, attr?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_add1_attr_by_OBJ(req: CValuesRef<X509_REQ>?, obj: CValuesRef<ASN1_OBJECT>?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3433(req?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len)
    }
}

fun X509_REQ_add1_attr_by_NID(req: CValuesRef<X509_REQ>?, nid: Int, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3434(req?.getPointer(memScope).rawValue, nid, type, bytes?.getPointer(memScope).rawValue, len)
    }
}

fun X509_REQ_add1_attr_by_txt(req: CValuesRef<X509_REQ>?, attrname: String?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3435(req?.getPointer(memScope).rawValue, attrname?.cstr?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len)
    }
}

fun X509_CRL_set_version(x: CValuesRef<X509_CRL>?, version: Long): Int {
    memScoped {
        return kniBridge3436(x?.getPointer(memScope).rawValue, version)
    }
}

fun X509_CRL_set_issuer_name(x: CValuesRef<X509_CRL>?, name: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge3437(x?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_set1_lastUpdate(x: CValuesRef<X509_CRL>?, tm: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge3438(x?.getPointer(memScope).rawValue, tm?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_set1_nextUpdate(x: CValuesRef<X509_CRL>?, tm: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge3439(x?.getPointer(memScope).rawValue, tm?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_sort(crl: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3440(crl?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_up_ref(crl: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3441(crl?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_get_version(crl: CValuesRef<X509_CRL>?): Long {
    memScoped {
        return kniBridge3442(crl?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_get0_lastUpdate(crl: CValuesRef<X509_CRL>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3443(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_get0_nextUpdate(crl: CValuesRef<X509_CRL>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3444(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_get_lastUpdate(crl: CValuesRef<X509_CRL>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3445(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_get_nextUpdate(crl: CValuesRef<X509_CRL>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3446(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_get_issuer(crl: CValuesRef<X509_CRL>?): CPointer<X509_NAME>? {
    memScoped {
        return interpretCPointer<X509_NAME>(kniBridge3447(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_get0_extensions(crl: CValuesRef<X509_CRL>?): CPointer<stack_st_X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge3448(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_get_REVOKED(crl: CValuesRef<X509_CRL>?): CPointer<stack_st_X509_REVOKED>? {
    memScoped {
        return interpretCPointer<stack_st_X509_REVOKED>(kniBridge3449(crl?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_get0_signature(crl: CValuesRef<X509_CRL>?, psig: CValuesRef<CPointerVar<ASN1_BIT_STRING>>?, palg: CValuesRef<CPointerVar<X509_ALGOR>>?): Unit {
    memScoped {
        return kniBridge3450(crl?.getPointer(memScope).rawValue, psig?.getPointer(memScope).rawValue, palg?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_get_signature_nid(crl: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3451(crl?.getPointer(memScope).rawValue)
    }
}

fun i2d_re_X509_CRL_tbs(req: CValuesRef<X509_CRL>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3452(req?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun X509_REVOKED_get0_serialNumber(x: CValuesRef<X509_REVOKED>?): CPointer<ASN1_INTEGER>? {
    memScoped {
        return interpretCPointer<ASN1_INTEGER>(kniBridge3453(x?.getPointer(memScope).rawValue))
    }
}

fun X509_REVOKED_set_serialNumber(x: CValuesRef<X509_REVOKED>?, serial: CValuesRef<ASN1_INTEGER>?): Int {
    memScoped {
        return kniBridge3454(x?.getPointer(memScope).rawValue, serial?.getPointer(memScope).rawValue)
    }
}

fun X509_REVOKED_get0_revocationDate(x: CValuesRef<X509_REVOKED>?): CPointer<ASN1_TIME>? {
    memScoped {
        return interpretCPointer<ASN1_TIME>(kniBridge3455(x?.getPointer(memScope).rawValue))
    }
}

fun X509_REVOKED_set_revocationDate(r: CValuesRef<X509_REVOKED>?, tm: CValuesRef<ASN1_TIME>?): Int {
    memScoped {
        return kniBridge3456(r?.getPointer(memScope).rawValue, tm?.getPointer(memScope).rawValue)
    }
}

fun X509_REVOKED_get0_extensions(r: CValuesRef<X509_REVOKED>?): CPointer<stack_st_X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge3457(r?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_diff(base: CValuesRef<X509_CRL>?, newer: CValuesRef<X509_CRL>?, skey: CValuesRef<EVP_PKEY>?, md: CValuesRef<EVP_MD>?, flags: UInt): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge3458(base?.getPointer(memScope).rawValue, newer?.getPointer(memScope).rawValue, skey?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, flags))
    }
}

fun X509_REQ_check_private_key(x509: CValuesRef<X509_REQ>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3459(x509?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun X509_check_private_key(x509: CValuesRef<X509>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3460(x509?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun X509_chain_check_suiteb(perror_depth: CValuesRef<IntVar>?, x: CValuesRef<X509>?, chain: CValuesRef<stack_st_X509>?, flags: ULong): Int {
    memScoped {
        return kniBridge3461(perror_depth?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, chain?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_CRL_check_suiteb(crl: CValuesRef<X509_CRL>?, pk: CValuesRef<EVP_PKEY>?, flags: ULong): Int {
    memScoped {
        return kniBridge3462(crl?.getPointer(memScope).rawValue, pk?.getPointer(memScope).rawValue, flags)
    }
}

fun X509_chain_up_ref(chain: CValuesRef<stack_st_X509>?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge3463(chain?.getPointer(memScope).rawValue))
    }
}

fun X509_issuer_and_serial_cmp(a: CValuesRef<X509>?, b: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3464(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun X509_issuer_and_serial_hash(a: CValuesRef<X509>?): ULong {
    memScoped {
        return kniBridge3465(a?.getPointer(memScope).rawValue)
    }
}

fun X509_issuer_name_cmp(a: CValuesRef<X509>?, b: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3466(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun X509_issuer_name_hash(a: CValuesRef<X509>?): ULong {
    memScoped {
        return kniBridge3467(a?.getPointer(memScope).rawValue)
    }
}

fun X509_subject_name_cmp(a: CValuesRef<X509>?, b: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3468(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun X509_subject_name_hash(x: CValuesRef<X509>?): ULong {
    memScoped {
        return kniBridge3469(x?.getPointer(memScope).rawValue)
    }
}

fun X509_issuer_name_hash_old(a: CValuesRef<X509>?): ULong {
    memScoped {
        return kniBridge3470(a?.getPointer(memScope).rawValue)
    }
}

fun X509_subject_name_hash_old(x: CValuesRef<X509>?): ULong {
    memScoped {
        return kniBridge3471(x?.getPointer(memScope).rawValue)
    }
}

fun X509_cmp(a: CValuesRef<X509>?, b: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3472(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_cmp(a: CValuesRef<X509_NAME>?, b: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge3473(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_hash(x: CValuesRef<X509_NAME>?): ULong {
    memScoped {
        return kniBridge3474(x?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_hash_old(x: CValuesRef<X509_NAME>?): ULong {
    memScoped {
        return kniBridge3475(x?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_cmp(a: CValuesRef<X509_CRL>?, b: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3476(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_match(a: CValuesRef<X509_CRL>?, b: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3477(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue)
    }
}

fun X509_aux_print(out: CValuesRef<BIO>?, x: CValuesRef<X509>?, indent: Int): Int {
    memScoped {
        return kniBridge3478(out?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, indent)
    }
}

fun X509_print_ex_fp(bp: CValuesRef<FILE>?, x: CValuesRef<X509>?, nmflag: ULong, cflag: ULong): Int {
    memScoped {
        return kniBridge3479(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, nmflag, cflag)
    }
}

fun X509_print_fp(bp: CValuesRef<FILE>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3480(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_print_fp(bp: CValuesRef<FILE>?, x: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3481(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_print_fp(bp: CValuesRef<FILE>?, req: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3482(bp?.getPointer(memScope).rawValue, req?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_print_ex_fp(fp: CValuesRef<FILE>?, nm: CValuesRef<X509_NAME>?, indent: Int, flags: ULong): Int {
    memScoped {
        return kniBridge3483(fp?.getPointer(memScope).rawValue, nm?.getPointer(memScope).rawValue, indent, flags)
    }
}

fun X509_NAME_print(bp: CValuesRef<BIO>?, name: CValuesRef<X509_NAME>?, obase: Int): Int {
    memScoped {
        return kniBridge3484(bp?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue, obase)
    }
}

fun X509_NAME_print_ex(out: CValuesRef<BIO>?, nm: CValuesRef<X509_NAME>?, indent: Int, flags: ULong): Int {
    memScoped {
        return kniBridge3485(out?.getPointer(memScope).rawValue, nm?.getPointer(memScope).rawValue, indent, flags)
    }
}

fun X509_print_ex(bp: CValuesRef<BIO>?, x: CValuesRef<X509>?, nmflag: ULong, cflag: ULong): Int {
    memScoped {
        return kniBridge3486(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, nmflag, cflag)
    }
}

fun X509_print(bp: CValuesRef<BIO>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3487(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_ocspid_print(bp: CValuesRef<BIO>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3488(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_print(bp: CValuesRef<BIO>?, x: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3489(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun X509_REQ_print_ex(bp: CValuesRef<BIO>?, x: CValuesRef<X509_REQ>?, nmflag: ULong, cflag: ULong): Int {
    memScoped {
        return kniBridge3490(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, nmflag, cflag)
    }
}

fun X509_REQ_print(bp: CValuesRef<BIO>?, req: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3491(bp?.getPointer(memScope).rawValue, req?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_entry_count(name: CValuesRef<X509_NAME>?): Int {
    memScoped {
        return kniBridge3492(name?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_get_text_by_NID(name: CValuesRef<X509_NAME>?, nid: Int, buf: CValuesRef<ByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3493(name?.getPointer(memScope).rawValue, nid, buf?.getPointer(memScope).rawValue, len)
    }
}

fun X509_NAME_get_text_by_OBJ(name: CValuesRef<X509_NAME>?, obj: CValuesRef<ASN1_OBJECT>?, buf: CValuesRef<ByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3494(name?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun X509_NAME_get_index_by_NID(name: CValuesRef<X509_NAME>?, nid: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3495(name?.getPointer(memScope).rawValue, nid, lastpos)
    }
}

fun X509_NAME_get_index_by_OBJ(name: CValuesRef<X509_NAME>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int): Int {
    memScoped {
        return kniBridge3496(name?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos)
    }
}

fun X509_NAME_get_entry(name: CValuesRef<X509_NAME>?, loc: Int): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge3497(name?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_NAME_delete_entry(name: CValuesRef<X509_NAME>?, loc: Int): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge3498(name?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_NAME_add_entry(name: CValuesRef<X509_NAME>?, ne: CValuesRef<X509_NAME_ENTRY>?, loc: Int, set: Int): Int {
    memScoped {
        return kniBridge3499(name?.getPointer(memScope).rawValue, ne?.getPointer(memScope).rawValue, loc, set)
    }
}

fun X509_NAME_add_entry_by_OBJ(name: CValuesRef<X509_NAME>?, obj: CValuesRef<ASN1_OBJECT>?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int, loc: Int, set: Int): Int {
    memScoped {
        return kniBridge3500(name?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len, loc, set)
    }
}

fun X509_NAME_add_entry_by_NID(name: CValuesRef<X509_NAME>?, nid: Int, type: Int, bytes: CValuesRef<UByteVar>?, len: Int, loc: Int, set: Int): Int {
    memScoped {
        return kniBridge3501(name?.getPointer(memScope).rawValue, nid, type, bytes?.getPointer(memScope).rawValue, len, loc, set)
    }
}

fun X509_NAME_ENTRY_create_by_txt(ne: CValuesRef<CPointerVar<X509_NAME_ENTRY>>?, field: String?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge3502(ne?.getPointer(memScope).rawValue, field?.cstr?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len))
    }
}

fun X509_NAME_ENTRY_create_by_NID(ne: CValuesRef<CPointerVar<X509_NAME_ENTRY>>?, nid: Int, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge3503(ne?.getPointer(memScope).rawValue, nid, type, bytes?.getPointer(memScope).rawValue, len))
    }
}

fun X509_NAME_add_entry_by_txt(name: CValuesRef<X509_NAME>?, field: String?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int, loc: Int, set: Int): Int {
    memScoped {
        return kniBridge3504(name?.getPointer(memScope).rawValue, field?.cstr?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len, loc, set)
    }
}

fun X509_NAME_ENTRY_create_by_OBJ(ne: CValuesRef<CPointerVar<X509_NAME_ENTRY>>?, obj: CValuesRef<ASN1_OBJECT>?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): CPointer<X509_NAME_ENTRY>? {
    memScoped {
        return interpretCPointer<X509_NAME_ENTRY>(kniBridge3505(ne?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len))
    }
}

fun X509_NAME_ENTRY_set_object(ne: CValuesRef<X509_NAME_ENTRY>?, obj: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge3506(ne?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_ENTRY_set_data(ne: CValuesRef<X509_NAME_ENTRY>?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3507(ne?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len)
    }
}

fun X509_NAME_ENTRY_get_object(ne: CValuesRef<X509_NAME_ENTRY>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge3508(ne?.getPointer(memScope).rawValue))
    }
}

fun X509_NAME_ENTRY_get_data(ne: CValuesRef<X509_NAME_ENTRY>?): CPointer<ASN1_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_STRING>(kniBridge3509(ne?.getPointer(memScope).rawValue))
    }
}

fun X509_NAME_ENTRY_set(ne: CValuesRef<X509_NAME_ENTRY>?): Int {
    memScoped {
        return kniBridge3510(ne?.getPointer(memScope).rawValue)
    }
}

fun X509_NAME_get0_der(nm: CValuesRef<X509_NAME>?, pder: CValuesRef<CPointerVar<UByteVar>>?, pderlen: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge3511(nm?.getPointer(memScope).rawValue, pder?.getPointer(memScope).rawValue, pderlen?.getPointer(memScope).rawValue)
    }
}

fun X509v3_get_ext_count(x: CValuesRef<stack_st_X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge3512(x?.getPointer(memScope).rawValue)
    }
}

fun X509v3_get_ext_by_NID(x: CValuesRef<stack_st_X509_EXTENSION>?, nid: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3513(x?.getPointer(memScope).rawValue, nid, lastpos)
    }
}

fun X509v3_get_ext_by_OBJ(x: CValuesRef<stack_st_X509_EXTENSION>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int): Int {
    memScoped {
        return kniBridge3514(x?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos)
    }
}

fun X509v3_get_ext_by_critical(x: CValuesRef<stack_st_X509_EXTENSION>?, crit: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3515(x?.getPointer(memScope).rawValue, crit, lastpos)
    }
}

fun X509v3_get_ext(x: CValuesRef<stack_st_X509_EXTENSION>?, loc: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3516(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509v3_delete_ext(x: CValuesRef<stack_st_X509_EXTENSION>?, loc: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3517(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509v3_add_ext(x: CValuesRef<CPointerVar<stack_st_X509_EXTENSION>>?, ex: CValuesRef<X509_EXTENSION>?, loc: Int): CPointer<stack_st_X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<stack_st_X509_EXTENSION>(kniBridge3518(x?.getPointer(memScope).rawValue, ex?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_get_ext_count(x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3519(x?.getPointer(memScope).rawValue)
    }
}

fun X509_get_ext_by_NID(x: CValuesRef<X509>?, nid: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3520(x?.getPointer(memScope).rawValue, nid, lastpos)
    }
}

fun X509_get_ext_by_OBJ(x: CValuesRef<X509>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int): Int {
    memScoped {
        return kniBridge3521(x?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos)
    }
}

fun X509_get_ext_by_critical(x: CValuesRef<X509>?, crit: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3522(x?.getPointer(memScope).rawValue, crit, lastpos)
    }
}

fun X509_get_ext(x: CValuesRef<X509>?, loc: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3523(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_delete_ext(x: CValuesRef<X509>?, loc: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3524(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_add_ext(x: CValuesRef<X509>?, ex: CValuesRef<X509_EXTENSION>?, loc: Int): Int {
    memScoped {
        return kniBridge3525(x?.getPointer(memScope).rawValue, ex?.getPointer(memScope).rawValue, loc)
    }
}

fun X509_get_ext_d2i(x: CValuesRef<X509>?, nid: Int, crit: CValuesRef<IntVar>?, idx: CValuesRef<IntVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3526(x?.getPointer(memScope).rawValue, nid, crit?.getPointer(memScope).rawValue, idx?.getPointer(memScope).rawValue))
    }
}

fun X509_add1_ext_i2d(x: CValuesRef<X509>?, nid: Int, value: CValuesRef<*>?, crit: Int, flags: ULong): Int {
    memScoped {
        return kniBridge3527(x?.getPointer(memScope).rawValue, nid, value?.getPointer(memScope).rawValue, crit, flags)
    }
}

fun X509_CRL_get_ext_count(x: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3528(x?.getPointer(memScope).rawValue)
    }
}

fun X509_CRL_get_ext_by_NID(x: CValuesRef<X509_CRL>?, nid: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3529(x?.getPointer(memScope).rawValue, nid, lastpos)
    }
}

fun X509_CRL_get_ext_by_OBJ(x: CValuesRef<X509_CRL>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int): Int {
    memScoped {
        return kniBridge3530(x?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos)
    }
}

fun X509_CRL_get_ext_by_critical(x: CValuesRef<X509_CRL>?, crit: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3531(x?.getPointer(memScope).rawValue, crit, lastpos)
    }
}

fun X509_CRL_get_ext(x: CValuesRef<X509_CRL>?, loc: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3532(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_CRL_delete_ext(x: CValuesRef<X509_CRL>?, loc: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3533(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_CRL_add_ext(x: CValuesRef<X509_CRL>?, ex: CValuesRef<X509_EXTENSION>?, loc: Int): Int {
    memScoped {
        return kniBridge3534(x?.getPointer(memScope).rawValue, ex?.getPointer(memScope).rawValue, loc)
    }
}

fun X509_CRL_get_ext_d2i(x: CValuesRef<X509_CRL>?, nid: Int, crit: CValuesRef<IntVar>?, idx: CValuesRef<IntVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3535(x?.getPointer(memScope).rawValue, nid, crit?.getPointer(memScope).rawValue, idx?.getPointer(memScope).rawValue))
    }
}

fun X509_CRL_add1_ext_i2d(x: CValuesRef<X509_CRL>?, nid: Int, value: CValuesRef<*>?, crit: Int, flags: ULong): Int {
    memScoped {
        return kniBridge3536(x?.getPointer(memScope).rawValue, nid, value?.getPointer(memScope).rawValue, crit, flags)
    }
}

fun X509_REVOKED_get_ext_count(x: CValuesRef<X509_REVOKED>?): Int {
    memScoped {
        return kniBridge3537(x?.getPointer(memScope).rawValue)
    }
}

fun X509_REVOKED_get_ext_by_NID(x: CValuesRef<X509_REVOKED>?, nid: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3538(x?.getPointer(memScope).rawValue, nid, lastpos)
    }
}

fun X509_REVOKED_get_ext_by_OBJ(x: CValuesRef<X509_REVOKED>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int): Int {
    memScoped {
        return kniBridge3539(x?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos)
    }
}

fun X509_REVOKED_get_ext_by_critical(x: CValuesRef<X509_REVOKED>?, crit: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3540(x?.getPointer(memScope).rawValue, crit, lastpos)
    }
}

fun X509_REVOKED_get_ext(x: CValuesRef<X509_REVOKED>?, loc: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3541(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_REVOKED_delete_ext(x: CValuesRef<X509_REVOKED>?, loc: Int): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3542(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509_REVOKED_add_ext(x: CValuesRef<X509_REVOKED>?, ex: CValuesRef<X509_EXTENSION>?, loc: Int): Int {
    memScoped {
        return kniBridge3543(x?.getPointer(memScope).rawValue, ex?.getPointer(memScope).rawValue, loc)
    }
}

fun X509_REVOKED_get_ext_d2i(x: CValuesRef<X509_REVOKED>?, nid: Int, crit: CValuesRef<IntVar>?, idx: CValuesRef<IntVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3544(x?.getPointer(memScope).rawValue, nid, crit?.getPointer(memScope).rawValue, idx?.getPointer(memScope).rawValue))
    }
}

fun X509_REVOKED_add1_ext_i2d(x: CValuesRef<X509_REVOKED>?, nid: Int, value: CValuesRef<*>?, crit: Int, flags: ULong): Int {
    memScoped {
        return kniBridge3545(x?.getPointer(memScope).rawValue, nid, value?.getPointer(memScope).rawValue, crit, flags)
    }
}

fun X509_EXTENSION_create_by_NID(ex: CValuesRef<CPointerVar<X509_EXTENSION>>?, nid: Int, crit: Int, data: CValuesRef<ASN1_OCTET_STRING>?): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3546(ex?.getPointer(memScope).rawValue, nid, crit, data?.getPointer(memScope).rawValue))
    }
}

fun X509_EXTENSION_create_by_OBJ(ex: CValuesRef<CPointerVar<X509_EXTENSION>>?, obj: CValuesRef<ASN1_OBJECT>?, crit: Int, data: CValuesRef<ASN1_OCTET_STRING>?): CPointer<X509_EXTENSION>? {
    memScoped {
        return interpretCPointer<X509_EXTENSION>(kniBridge3547(ex?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, crit, data?.getPointer(memScope).rawValue))
    }
}

fun X509_EXTENSION_set_object(ex: CValuesRef<X509_EXTENSION>?, obj: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge3548(ex?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue)
    }
}

fun X509_EXTENSION_set_critical(ex: CValuesRef<X509_EXTENSION>?, crit: Int): Int {
    memScoped {
        return kniBridge3549(ex?.getPointer(memScope).rawValue, crit)
    }
}

fun X509_EXTENSION_set_data(ex: CValuesRef<X509_EXTENSION>?, data: CValuesRef<ASN1_OCTET_STRING>?): Int {
    memScoped {
        return kniBridge3550(ex?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun X509_EXTENSION_get_object(ex: CValuesRef<X509_EXTENSION>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge3551(ex?.getPointer(memScope).rawValue))
    }
}

fun X509_EXTENSION_get_data(ne: CValuesRef<X509_EXTENSION>?): CPointer<ASN1_OCTET_STRING>? {
    memScoped {
        return interpretCPointer<ASN1_OCTET_STRING>(kniBridge3552(ne?.getPointer(memScope).rawValue))
    }
}

fun X509_EXTENSION_get_critical(ex: CValuesRef<X509_EXTENSION>?): Int {
    memScoped {
        return kniBridge3553(ex?.getPointer(memScope).rawValue)
    }
}

fun X509at_get_attr_count(x: CValuesRef<stack_st_X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge3554(x?.getPointer(memScope).rawValue)
    }
}

fun X509at_get_attr_by_NID(x: CValuesRef<stack_st_X509_ATTRIBUTE>?, nid: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3555(x?.getPointer(memScope).rawValue, nid, lastpos)
    }
}

fun X509at_get_attr_by_OBJ(sk: CValuesRef<stack_st_X509_ATTRIBUTE>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int): Int {
    memScoped {
        return kniBridge3556(sk?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos)
    }
}

fun X509at_get_attr(x: CValuesRef<stack_st_X509_ATTRIBUTE>?, loc: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3557(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509at_delete_attr(x: CValuesRef<stack_st_X509_ATTRIBUTE>?, loc: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3558(x?.getPointer(memScope).rawValue, loc))
    }
}

fun X509at_add1_attr(x: CValuesRef<CPointerVar<stack_st_X509_ATTRIBUTE>>?, attr: CValuesRef<X509_ATTRIBUTE>?): CPointer<stack_st_X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge3559(x?.getPointer(memScope).rawValue, attr?.getPointer(memScope).rawValue))
    }
}

fun X509at_add1_attr_by_OBJ(x: CValuesRef<CPointerVar<stack_st_X509_ATTRIBUTE>>?, obj: CValuesRef<ASN1_OBJECT>?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): CPointer<stack_st_X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge3560(x?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len))
    }
}

fun X509at_add1_attr_by_NID(x: CValuesRef<CPointerVar<stack_st_X509_ATTRIBUTE>>?, nid: Int, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): CPointer<stack_st_X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge3561(x?.getPointer(memScope).rawValue, nid, type, bytes?.getPointer(memScope).rawValue, len))
    }
}

fun X509at_add1_attr_by_txt(x: CValuesRef<CPointerVar<stack_st_X509_ATTRIBUTE>>?, attrname: String?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): CPointer<stack_st_X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge3562(x?.getPointer(memScope).rawValue, attrname?.cstr?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len))
    }
}

fun X509at_get0_data_by_OBJ(x: CValuesRef<stack_st_X509_ATTRIBUTE>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int, type: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3563(x?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos, type))
    }
}

fun X509_ATTRIBUTE_create_by_NID(attr: CValuesRef<CPointerVar<X509_ATTRIBUTE>>?, nid: Int, atrtype: Int, data: CValuesRef<*>?, len: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3564(attr?.getPointer(memScope).rawValue, nid, atrtype, data?.getPointer(memScope).rawValue, len))
    }
}

fun X509_ATTRIBUTE_create_by_OBJ(attr: CValuesRef<CPointerVar<X509_ATTRIBUTE>>?, obj: CValuesRef<ASN1_OBJECT>?, atrtype: Int, data: CValuesRef<*>?, len: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3565(attr?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, atrtype, data?.getPointer(memScope).rawValue, len))
    }
}

fun X509_ATTRIBUTE_create_by_txt(attr: CValuesRef<CPointerVar<X509_ATTRIBUTE>>?, atrname: String?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3566(attr?.getPointer(memScope).rawValue, atrname?.cstr?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len))
    }
}

fun X509_ATTRIBUTE_set1_object(attr: CValuesRef<X509_ATTRIBUTE>?, obj: CValuesRef<ASN1_OBJECT>?): Int {
    memScoped {
        return kniBridge3567(attr?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue)
    }
}

fun X509_ATTRIBUTE_set1_data(attr: CValuesRef<X509_ATTRIBUTE>?, attrtype: Int, data: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge3568(attr?.getPointer(memScope).rawValue, attrtype, data?.getPointer(memScope).rawValue, len)
    }
}

fun X509_ATTRIBUTE_get0_data(attr: CValuesRef<X509_ATTRIBUTE>?, idx: Int, atrtype: Int, data: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3569(attr?.getPointer(memScope).rawValue, idx, atrtype, data?.getPointer(memScope).rawValue))
    }
}

fun X509_ATTRIBUTE_count(attr: CValuesRef<X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge3570(attr?.getPointer(memScope).rawValue)
    }
}

fun X509_ATTRIBUTE_get0_object(attr: CValuesRef<X509_ATTRIBUTE>?): CPointer<ASN1_OBJECT>? {
    memScoped {
        return interpretCPointer<ASN1_OBJECT>(kniBridge3571(attr?.getPointer(memScope).rawValue))
    }
}

fun X509_ATTRIBUTE_get0_type(attr: CValuesRef<X509_ATTRIBUTE>?, idx: Int): CPointer<ASN1_TYPE>? {
    memScoped {
        return interpretCPointer<ASN1_TYPE>(kniBridge3572(attr?.getPointer(memScope).rawValue, idx))
    }
}

fun EVP_PKEY_get_attr_count(key: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3573(key?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_get_attr_by_NID(key: CValuesRef<EVP_PKEY>?, nid: Int, lastpos: Int): Int {
    memScoped {
        return kniBridge3574(key?.getPointer(memScope).rawValue, nid, lastpos)
    }
}

fun EVP_PKEY_get_attr_by_OBJ(key: CValuesRef<EVP_PKEY>?, obj: CValuesRef<ASN1_OBJECT>?, lastpos: Int): Int {
    memScoped {
        return kniBridge3575(key?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, lastpos)
    }
}

fun EVP_PKEY_get_attr(key: CValuesRef<EVP_PKEY>?, loc: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3576(key?.getPointer(memScope).rawValue, loc))
    }
}

fun EVP_PKEY_delete_attr(key: CValuesRef<EVP_PKEY>?, loc: Int): CPointer<X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<X509_ATTRIBUTE>(kniBridge3577(key?.getPointer(memScope).rawValue, loc))
    }
}

fun EVP_PKEY_add1_attr(key: CValuesRef<EVP_PKEY>?, attr: CValuesRef<X509_ATTRIBUTE>?): Int {
    memScoped {
        return kniBridge3578(key?.getPointer(memScope).rawValue, attr?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKEY_add1_attr_by_OBJ(key: CValuesRef<EVP_PKEY>?, obj: CValuesRef<ASN1_OBJECT>?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3579(key?.getPointer(memScope).rawValue, obj?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len)
    }
}

fun EVP_PKEY_add1_attr_by_NID(key: CValuesRef<EVP_PKEY>?, nid: Int, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3580(key?.getPointer(memScope).rawValue, nid, type, bytes?.getPointer(memScope).rawValue, len)
    }
}

fun EVP_PKEY_add1_attr_by_txt(key: CValuesRef<EVP_PKEY>?, attrname: String?, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3581(key?.getPointer(memScope).rawValue, attrname?.cstr?.getPointer(memScope).rawValue, type, bytes?.getPointer(memScope).rawValue, len)
    }
}

fun X509_verify_cert(ctx: CValuesRef<X509_STORE_CTX>?): Int {
    memScoped {
        return kniBridge3582(ctx?.getPointer(memScope).rawValue)
    }
}

fun X509_find_by_issuer_and_serial(sk: CValuesRef<stack_st_X509>?, name: CValuesRef<X509_NAME>?, serial: CValuesRef<ASN1_INTEGER>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3583(sk?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue, serial?.getPointer(memScope).rawValue))
    }
}

fun X509_find_by_subject(sk: CValuesRef<stack_st_X509>?, name: CValuesRef<X509_NAME>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3584(sk?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue))
    }
}

fun PBEPARAM_new(): CPointer<PBEPARAM>? {
    return interpretCPointer<PBEPARAM>(kniBridge3585())
}

fun PBEPARAM_free(a: CValuesRef<PBEPARAM>?): Unit {
    memScoped {
        return kniBridge3586(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PBEPARAM(a: CValuesRef<CPointerVar<PBEPARAM>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PBEPARAM>? {
    memScoped {
        return interpretCPointer<PBEPARAM>(kniBridge3587(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PBEPARAM(a: CValuesRef<PBEPARAM>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3588(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PBE2PARAM_new(): CPointer<PBE2PARAM>? {
    return interpretCPointer<PBE2PARAM>(kniBridge3589())
}

fun PBE2PARAM_free(a: CValuesRef<PBE2PARAM>?): Unit {
    memScoped {
        return kniBridge3590(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PBE2PARAM(a: CValuesRef<CPointerVar<PBE2PARAM>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PBE2PARAM>? {
    memScoped {
        return interpretCPointer<PBE2PARAM>(kniBridge3591(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PBE2PARAM(a: CValuesRef<PBE2PARAM>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3592(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PBKDF2PARAM_new(): CPointer<PBKDF2PARAM>? {
    return interpretCPointer<PBKDF2PARAM>(kniBridge3593())
}

fun PBKDF2PARAM_free(a: CValuesRef<PBKDF2PARAM>?): Unit {
    memScoped {
        return kniBridge3594(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PBKDF2PARAM(a: CValuesRef<CPointerVar<PBKDF2PARAM>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PBKDF2PARAM>? {
    memScoped {
        return interpretCPointer<PBKDF2PARAM>(kniBridge3595(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PBKDF2PARAM(a: CValuesRef<PBKDF2PARAM>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3596(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun PKCS5_pbe_set0_algor(algor: CValuesRef<X509_ALGOR>?, alg: Int, iter: Int, salt: CValuesRef<UByteVar>?, saltlen: Int): Int {
    memScoped {
        return kniBridge3597(algor?.getPointer(memScope).rawValue, alg, iter, salt?.getPointer(memScope).rawValue, saltlen)
    }
}

fun PKCS5_pbe_set(alg: Int, iter: Int, salt: CValuesRef<UByteVar>?, saltlen: Int): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge3598(alg, iter, salt?.getPointer(memScope).rawValue, saltlen))
    }
}

fun PKCS5_pbe2_set(cipher: CValuesRef<EVP_CIPHER>?, iter: Int, salt: CValuesRef<UByteVar>?, saltlen: Int): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge3599(cipher?.getPointer(memScope).rawValue, iter, salt?.getPointer(memScope).rawValue, saltlen))
    }
}

fun PKCS5_pbe2_set_iv(cipher: CValuesRef<EVP_CIPHER>?, iter: Int, salt: CValuesRef<UByteVar>?, saltlen: Int, aiv: CValuesRef<UByteVar>?, prf_nid: Int): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge3600(cipher?.getPointer(memScope).rawValue, iter, salt?.getPointer(memScope).rawValue, saltlen, aiv?.getPointer(memScope).rawValue, prf_nid))
    }
}

fun PKCS5_pbe2_set_scrypt(cipher: CValuesRef<EVP_CIPHER>?, salt: CValuesRef<UByteVar>?, saltlen: Int, aiv: CValuesRef<UByteVar>?, N: uint64_t, r: uint64_t, p: uint64_t): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge3601(cipher?.getPointer(memScope).rawValue, salt?.getPointer(memScope).rawValue, saltlen, aiv?.getPointer(memScope).rawValue, N, r, p))
    }
}

fun PKCS5_pbkdf2_set(iter: Int, salt: CValuesRef<UByteVar>?, saltlen: Int, prf_nid: Int, keylen: Int): CPointer<X509_ALGOR>? {
    memScoped {
        return interpretCPointer<X509_ALGOR>(kniBridge3602(iter, salt?.getPointer(memScope).rawValue, saltlen, prf_nid, keylen))
    }
}

fun PKCS8_PRIV_KEY_INFO_new(): CPointer<PKCS8_PRIV_KEY_INFO>? {
    return interpretCPointer<PKCS8_PRIV_KEY_INFO>(kniBridge3603())
}

fun PKCS8_PRIV_KEY_INFO_free(a: CValuesRef<PKCS8_PRIV_KEY_INFO>?): Unit {
    memScoped {
        return kniBridge3604(a?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS8_PRIV_KEY_INFO(a: CValuesRef<CPointerVar<PKCS8_PRIV_KEY_INFO>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<PKCS8_PRIV_KEY_INFO>? {
    memScoped {
        return interpretCPointer<PKCS8_PRIV_KEY_INFO>(kniBridge3605(a?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_PKCS8_PRIV_KEY_INFO(a: CValuesRef<PKCS8_PRIV_KEY_INFO>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3606(a?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun EVP_PKCS82PKEY(p8: CValuesRef<PKCS8_PRIV_KEY_INFO>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3607(p8?.getPointer(memScope).rawValue))
    }
}

fun EVP_PKEY2PKCS8(pkey: CValuesRef<EVP_PKEY>?): CPointer<PKCS8_PRIV_KEY_INFO>? {
    memScoped {
        return interpretCPointer<PKCS8_PRIV_KEY_INFO>(kniBridge3608(pkey?.getPointer(memScope).rawValue))
    }
}

fun PKCS8_pkey_set0(priv: CValuesRef<PKCS8_PRIV_KEY_INFO>?, aobj: CValuesRef<ASN1_OBJECT>?, version: Int, ptype: Int, pval: CValuesRef<*>?, penc: CValuesRef<UByteVar>?, penclen: Int): Int {
    memScoped {
        return kniBridge3609(priv?.getPointer(memScope).rawValue, aobj?.getPointer(memScope).rawValue, version, ptype, pval?.getPointer(memScope).rawValue, penc?.getPointer(memScope).rawValue, penclen)
    }
}

fun PKCS8_pkey_get0(ppkalg: CValuesRef<CPointerVar<ASN1_OBJECT>>?, pk: CValuesRef<CPointerVar<UByteVar>>?, ppklen: CValuesRef<IntVar>?, pa: CValuesRef<CPointerVar<X509_ALGOR>>?, p8: CValuesRef<PKCS8_PRIV_KEY_INFO>?): Int {
    memScoped {
        return kniBridge3610(ppkalg?.getPointer(memScope).rawValue, pk?.getPointer(memScope).rawValue, ppklen?.getPointer(memScope).rawValue, pa?.getPointer(memScope).rawValue, p8?.getPointer(memScope).rawValue)
    }
}

fun PKCS8_pkey_get0_attrs(p8: CValuesRef<PKCS8_PRIV_KEY_INFO>?): CPointer<stack_st_X509_ATTRIBUTE>? {
    memScoped {
        return interpretCPointer<stack_st_X509_ATTRIBUTE>(kniBridge3611(p8?.getPointer(memScope).rawValue))
    }
}

fun PKCS8_pkey_add1_attr_by_NID(p8: CValuesRef<PKCS8_PRIV_KEY_INFO>?, nid: Int, type: Int, bytes: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge3612(p8?.getPointer(memScope).rawValue, nid, type, bytes?.getPointer(memScope).rawValue, len)
    }
}

fun X509_PUBKEY_set0_param(pub: CValuesRef<X509_PUBKEY>?, aobj: CValuesRef<ASN1_OBJECT>?, ptype: Int, pval: CValuesRef<*>?, penc: CValuesRef<UByteVar>?, penclen: Int): Int {
    memScoped {
        return kniBridge3613(pub?.getPointer(memScope).rawValue, aobj?.getPointer(memScope).rawValue, ptype, pval?.getPointer(memScope).rawValue, penc?.getPointer(memScope).rawValue, penclen)
    }
}

fun X509_PUBKEY_get0_param(ppkalg: CValuesRef<CPointerVar<ASN1_OBJECT>>?, pk: CValuesRef<CPointerVar<UByteVar>>?, ppklen: CValuesRef<IntVar>?, pa: CValuesRef<CPointerVar<X509_ALGOR>>?, pub: CValuesRef<X509_PUBKEY>?): Int {
    memScoped {
        return kniBridge3614(ppkalg?.getPointer(memScope).rawValue, pk?.getPointer(memScope).rawValue, ppklen?.getPointer(memScope).rawValue, pa?.getPointer(memScope).rawValue, pub?.getPointer(memScope).rawValue)
    }
}

fun X509_check_trust(x: CValuesRef<X509>?, id: Int, flags: Int): Int {
    memScoped {
        return kniBridge3615(x?.getPointer(memScope).rawValue, id, flags)
    }
}

fun X509_TRUST_get_count(): Int {
    return kniBridge3616()
}

fun X509_TRUST_get0(idx: Int): CPointer<X509_TRUST>? {
    return interpretCPointer<X509_TRUST>(kniBridge3617(idx))
}

fun X509_TRUST_get_by_id(id: Int): Int {
    return kniBridge3618(id)
}

fun X509_TRUST_add(id: Int, flags: Int, ck: CPointer<CFunction<(CPointer<X509_TRUST>?, CPointer<X509>?, Int) -> Int>>?, name: String?, arg1: Int, arg2: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3619(id, flags, ck.rawValue, name?.cstr?.getPointer(memScope).rawValue, arg1, arg2?.getPointer(memScope).rawValue)
    }
}

fun X509_TRUST_cleanup(): Unit {
    return kniBridge3620()
}

fun X509_TRUST_get_flags(xp: CValuesRef<X509_TRUST>?): Int {
    memScoped {
        return kniBridge3621(xp?.getPointer(memScope).rawValue)
    }
}

fun X509_TRUST_get0_name(xp: CValuesRef<X509_TRUST>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3622(xp?.getPointer(memScope).rawValue))
    }
}

fun X509_TRUST_get_trust(xp: CValuesRef<X509_TRUST>?): Int {
    memScoped {
        return kniBridge3623(xp?.getPointer(memScope).rawValue)
    }
}

fun ERR_load_X509_strings(): Int {
    return kniBridge3624()
}

fun PEM_get_EVP_CIPHER_INFO(header: CValuesRef<ByteVar>?, cipher: CValuesRef<EVP_CIPHER_INFO>?): Int {
    memScoped {
        return kniBridge3625(header?.getPointer(memScope).rawValue, cipher?.getPointer(memScope).rawValue)
    }
}

fun PEM_do_header(cipher: CValuesRef<EVP_CIPHER_INFO>?, data: CValuesRef<UByteVar>?, len: CValuesRef<LongVar>?, callback: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3626(cipher?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue, callback.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio(bp: CValuesRef<BIO>?, name: CValuesRef<CPointerVar<ByteVar>>?, header: CValuesRef<CPointerVar<ByteVar>>?, data: CValuesRef<CPointerVar<UByteVar>>?, len: CValuesRef<LongVar>?): Int {
    memScoped {
        return kniBridge3627(bp?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue, header?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_bio(bp: CValuesRef<BIO>?, name: String?, hdr: String?, data: CValuesRef<UByteVar>?, len: Long): Int {
    memScoped {
        return kniBridge3628(bp?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, hdr?.cstr?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun PEM_bytes_read_bio(pdata: CValuesRef<CPointerVar<UByteVar>>?, plen: CValuesRef<LongVar>?, pnm: CValuesRef<CPointerVar<ByteVar>>?, name: String?, bp: CValuesRef<BIO>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3629(pdata?.getPointer(memScope).rawValue, plen?.getPointer(memScope).rawValue, pnm?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, bp?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_ASN1_read_bio(d2i: CPointer<d2i_of_void>?, name: String?, bp: CValuesRef<BIO>?, x: CValuesRef<COpaquePointerVar>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3630(d2i.rawValue, name?.cstr?.getPointer(memScope).rawValue, bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_ASN1_write_bio(i2d: CPointer<i2d_of_void>?, name: String?, bp: CValuesRef<BIO>?, x: CValuesRef<*>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3631(i2d.rawValue, name?.cstr?.getPointer(memScope).rawValue, bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_X509_INFO_read_bio(bp: CValuesRef<BIO>?, sk: CValuesRef<stack_st_X509_INFO>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<stack_st_X509_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_X509_INFO>(kniBridge3632(bp?.getPointer(memScope).rawValue, sk?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_X509_INFO_write_bio(bp: CValuesRef<BIO>?, xi: CValuesRef<X509_INFO>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cd: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3633(bp?.getPointer(memScope).rawValue, xi?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cd.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_read(fp: CValuesRef<FILE>?, name: CValuesRef<CPointerVar<ByteVar>>?, header: CValuesRef<CPointerVar<ByteVar>>?, data: CValuesRef<CPointerVar<UByteVar>>?, len: CValuesRef<LongVar>?): Int {
    memScoped {
        return kniBridge3634(fp?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue, header?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun PEM_write(fp: CValuesRef<FILE>?, name: String?, hdr: String?, data: CValuesRef<UByteVar>?, len: Long): Int {
    memScoped {
        return kniBridge3635(fp?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, hdr?.cstr?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun PEM_ASN1_read(d2i: CPointer<d2i_of_void>?, name: String?, fp: CValuesRef<FILE>?, x: CValuesRef<COpaquePointerVar>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge3636(d2i.rawValue, name?.cstr?.getPointer(memScope).rawValue, fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_ASN1_write(i2d: CPointer<i2d_of_void>?, name: String?, fp: CValuesRef<FILE>?, x: CValuesRef<*>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, callback: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3637(i2d.rawValue, name?.cstr?.getPointer(memScope).rawValue, fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, callback.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_X509_INFO_read(fp: CValuesRef<FILE>?, sk: CValuesRef<stack_st_X509_INFO>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<stack_st_X509_INFO>? {
    memScoped {
        return interpretCPointer<stack_st_X509_INFO>(kniBridge3638(fp?.getPointer(memScope).rawValue, sk?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_SignInit(ctx: CValuesRef<EVP_MD_CTX>?, type: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3639(ctx?.getPointer(memScope).rawValue, type?.getPointer(memScope).rawValue)
    }
}

fun PEM_SignUpdate(ctx: CValuesRef<EVP_MD_CTX>?, d: CValuesRef<UByteVar>?, cnt: UInt): Int {
    memScoped {
        return kniBridge3640(ctx?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, cnt)
    }
}

fun PEM_SignFinal(ctx: CValuesRef<EVP_MD_CTX>?, sigret: CValuesRef<UByteVar>?, siglen: CValuesRef<UIntVar>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3641(ctx?.getPointer(memScope).rawValue, sigret?.getPointer(memScope).rawValue, siglen?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun PEM_def_callback(buf: CValuesRef<ByteVar>?, num: Int, w: Int, key: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3642(buf?.getPointer(memScope).rawValue, num, w, key?.getPointer(memScope).rawValue)
    }
}

fun PEM_proc_type(buf: CValuesRef<ByteVar>?, type: Int): Unit {
    memScoped {
        return kniBridge3643(buf?.getPointer(memScope).rawValue, type)
    }
}

fun PEM_dek_info(buf: CValuesRef<ByteVar>?, type: String?, len: Int, str: CValuesRef<ByteVar>?): Unit {
    memScoped {
        return kniBridge3644(buf?.getPointer(memScope).rawValue, type?.cstr?.getPointer(memScope).rawValue, len, str?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_X509(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<X509>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3645(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_X509(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<X509>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3646(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_X509(bp: CValuesRef<BIO>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3647(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_X509(fp: CValuesRef<FILE>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3648(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_X509_AUX(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<X509>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3649(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_X509_AUX(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<X509>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3650(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_X509_AUX(bp: CValuesRef<BIO>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3651(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_X509_AUX(fp: CValuesRef<FILE>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3652(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_X509_REQ(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<X509_REQ>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509_REQ>? {
    memScoped {
        return interpretCPointer<X509_REQ>(kniBridge3653(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_X509_REQ(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<X509_REQ>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509_REQ>? {
    memScoped {
        return interpretCPointer<X509_REQ>(kniBridge3654(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_X509_REQ(bp: CValuesRef<BIO>?, x: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3655(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_X509_REQ(fp: CValuesRef<FILE>?, x: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3656(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_bio_X509_REQ_NEW(bp: CValuesRef<BIO>?, x: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3657(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_X509_REQ_NEW(fp: CValuesRef<FILE>?, x: CValuesRef<X509_REQ>?): Int {
    memScoped {
        return kniBridge3658(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_X509_CRL(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<X509_CRL>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge3659(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_X509_CRL(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<X509_CRL>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509_CRL>? {
    memScoped {
        return interpretCPointer<X509_CRL>(kniBridge3660(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_X509_CRL(bp: CValuesRef<BIO>?, x: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3661(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_X509_CRL(fp: CValuesRef<FILE>?, x: CValuesRef<X509_CRL>?): Int {
    memScoped {
        return kniBridge3662(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_PKCS7(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<PKCS7>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3663(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_PKCS7(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<PKCS7>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<PKCS7>? {
    memScoped {
        return interpretCPointer<PKCS7>(kniBridge3664(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_PKCS7(bp: CValuesRef<BIO>?, x: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3665(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_PKCS7(fp: CValuesRef<FILE>?, x: CValuesRef<PKCS7>?): Int {
    memScoped {
        return kniBridge3666(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_NETSCAPE_CERT_SEQUENCE(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<NETSCAPE_CERT_SEQUENCE>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<NETSCAPE_CERT_SEQUENCE>? {
    memScoped {
        return interpretCPointer<NETSCAPE_CERT_SEQUENCE>(kniBridge3667(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_NETSCAPE_CERT_SEQUENCE(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<NETSCAPE_CERT_SEQUENCE>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<NETSCAPE_CERT_SEQUENCE>? {
    memScoped {
        return interpretCPointer<NETSCAPE_CERT_SEQUENCE>(kniBridge3668(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_NETSCAPE_CERT_SEQUENCE(bp: CValuesRef<BIO>?, x: CValuesRef<NETSCAPE_CERT_SEQUENCE>?): Int {
    memScoped {
        return kniBridge3669(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_NETSCAPE_CERT_SEQUENCE(fp: CValuesRef<FILE>?, x: CValuesRef<NETSCAPE_CERT_SEQUENCE>?): Int {
    memScoped {
        return kniBridge3670(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_PKCS8(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<X509_SIG>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509_SIG>? {
    memScoped {
        return interpretCPointer<X509_SIG>(kniBridge3671(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_PKCS8(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<X509_SIG>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<X509_SIG>? {
    memScoped {
        return interpretCPointer<X509_SIG>(kniBridge3672(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_PKCS8(bp: CValuesRef<BIO>?, x: CValuesRef<X509_SIG>?): Int {
    memScoped {
        return kniBridge3673(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_PKCS8(fp: CValuesRef<FILE>?, x: CValuesRef<X509_SIG>?): Int {
    memScoped {
        return kniBridge3674(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_PKCS8_PRIV_KEY_INFO(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<PKCS8_PRIV_KEY_INFO>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<PKCS8_PRIV_KEY_INFO>? {
    memScoped {
        return interpretCPointer<PKCS8_PRIV_KEY_INFO>(kniBridge3675(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_PKCS8_PRIV_KEY_INFO(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<PKCS8_PRIV_KEY_INFO>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<PKCS8_PRIV_KEY_INFO>? {
    memScoped {
        return interpretCPointer<PKCS8_PRIV_KEY_INFO>(kniBridge3676(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_PKCS8_PRIV_KEY_INFO(bp: CValuesRef<BIO>?, x: CValuesRef<PKCS8_PRIV_KEY_INFO>?): Int {
    memScoped {
        return kniBridge3677(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_PKCS8_PRIV_KEY_INFO(fp: CValuesRef<FILE>?, x: CValuesRef<PKCS8_PRIV_KEY_INFO>?): Int {
    memScoped {
        return kniBridge3678(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_RSAPrivateKey(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<RSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3679(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_RSAPrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<RSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3680(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_RSAPrivateKey(bp: CValuesRef<BIO>?, x: CValuesRef<RSA>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3681(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_RSAPrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<RSA>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3682(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_RSAPublicKey(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<RSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3683(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_RSAPublicKey(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<RSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3684(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_RSAPublicKey(bp: CValuesRef<BIO>?, x: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3685(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_RSAPublicKey(fp: CValuesRef<FILE>?, x: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3686(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_RSA_PUBKEY(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<RSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3687(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_RSA_PUBKEY(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<RSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<RSA>? {
    memScoped {
        return interpretCPointer<RSA>(kniBridge3688(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_RSA_PUBKEY(bp: CValuesRef<BIO>?, x: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3689(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_RSA_PUBKEY(fp: CValuesRef<FILE>?, x: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge3690(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_DSAPrivateKey(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<DSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3691(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_DSAPrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<DSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3692(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_DSAPrivateKey(bp: CValuesRef<BIO>?, x: CValuesRef<DSA>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3693(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_DSAPrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<DSA>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3694(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_DSA_PUBKEY(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<DSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3695(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_DSA_PUBKEY(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<DSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3696(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_DSA_PUBKEY(bp: CValuesRef<BIO>?, x: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge3697(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_DSA_PUBKEY(fp: CValuesRef<FILE>?, x: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge3698(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_DSAparams(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<DSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3699(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_DSAparams(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<DSA>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<DSA>? {
    memScoped {
        return interpretCPointer<DSA>(kniBridge3700(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_DSAparams(bp: CValuesRef<BIO>?, x: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge3701(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_DSAparams(fp: CValuesRef<FILE>?, x: CValuesRef<DSA>?): Int {
    memScoped {
        return kniBridge3702(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_ECPKParameters(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<EC_GROUP>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge3703(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_ECPKParameters(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<EC_GROUP>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EC_GROUP>? {
    memScoped {
        return interpretCPointer<EC_GROUP>(kniBridge3704(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_ECPKParameters(bp: CValuesRef<BIO>?, x: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge3705(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_ECPKParameters(fp: CValuesRef<FILE>?, x: CValuesRef<EC_GROUP>?): Int {
    memScoped {
        return kniBridge3706(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_ECPrivateKey(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<EC_KEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3707(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_ECPrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<EC_KEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3708(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_ECPrivateKey(bp: CValuesRef<BIO>?, x: CValuesRef<EC_KEY>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3709(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_ECPrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<EC_KEY>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3710(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_EC_PUBKEY(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<EC_KEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3711(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_EC_PUBKEY(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<EC_KEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EC_KEY>? {
    memScoped {
        return interpretCPointer<EC_KEY>(kniBridge3712(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_EC_PUBKEY(bp: CValuesRef<BIO>?, x: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge3713(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_EC_PUBKEY(fp: CValuesRef<FILE>?, x: CValuesRef<EC_KEY>?): Int {
    memScoped {
        return kniBridge3714(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_DHparams(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<DH>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<DH>? {
    memScoped {
        return interpretCPointer<DH>(kniBridge3715(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_DHparams(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<DH>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<DH>? {
    memScoped {
        return interpretCPointer<DH>(kniBridge3716(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_DHparams(bp: CValuesRef<BIO>?, x: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge3717(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_DHparams(fp: CValuesRef<FILE>?, x: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge3718(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_bio_DHxparams(bp: CValuesRef<BIO>?, x: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge3719(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_DHxparams(fp: CValuesRef<FILE>?, x: CValuesRef<DH>?): Int {
    memScoped {
        return kniBridge3720(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_PrivateKey(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<EVP_PKEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3721(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_PrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<EVP_PKEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3722(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_PrivateKey(bp: CValuesRef<BIO>?, x: CValuesRef<EVP_PKEY>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3723(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_PrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<EVP_PKEY>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3724(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_PUBKEY(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<EVP_PKEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3725(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_PUBKEY(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<EVP_PKEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3726(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_PUBKEY(bp: CValuesRef<BIO>?, x: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3727(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_PUBKEY(fp: CValuesRef<FILE>?, x: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3728(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_bio_PrivateKey_traditional(bp: CValuesRef<BIO>?, x: CValuesRef<EVP_PKEY>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<UByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3729(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_bio_PKCS8PrivateKey_nid(bp: CValuesRef<BIO>?, x: CValuesRef<EVP_PKEY>?, nid: Int, kstr: CValuesRef<ByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3730(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, nid, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_bio_PKCS8PrivateKey(arg0: CValuesRef<BIO>?, arg1: CValuesRef<EVP_PKEY>?, arg2: CValuesRef<EVP_CIPHER>?, arg3: CValuesRef<ByteVar>?, arg4: Int, arg5: CPointer<pem_password_cb>?, arg6: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3731(arg0?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue, arg2?.getPointer(memScope).rawValue, arg3?.getPointer(memScope).rawValue, arg4, arg5.rawValue, arg6?.getPointer(memScope).rawValue)
    }
}

fun i2d_PKCS8PrivateKey_bio(bp: CValuesRef<BIO>?, x: CValuesRef<EVP_PKEY>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<ByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3732(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun i2d_PKCS8PrivateKey_nid_bio(bp: CValuesRef<BIO>?, x: CValuesRef<EVP_PKEY>?, nid: Int, kstr: CValuesRef<ByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3733(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, nid, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS8PrivateKey_bio(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<EVP_PKEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3734(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun i2d_PKCS8PrivateKey_fp(fp: CValuesRef<FILE>?, x: CValuesRef<EVP_PKEY>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<ByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3735(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun i2d_PKCS8PrivateKey_nid_fp(fp: CValuesRef<FILE>?, x: CValuesRef<EVP_PKEY>?, nid: Int, kstr: CValuesRef<ByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3736(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, nid, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_PKCS8PrivateKey_nid(fp: CValuesRef<FILE>?, x: CValuesRef<EVP_PKEY>?, nid: Int, kstr: CValuesRef<ByteVar>?, klen: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3737(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, nid, kstr?.getPointer(memScope).rawValue, klen, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun d2i_PKCS8PrivateKey_fp(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<EVP_PKEY>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3738(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_PKCS8PrivateKey(fp: CValuesRef<FILE>?, x: CValuesRef<EVP_PKEY>?, enc: CValuesRef<EVP_CIPHER>?, kstr: CValuesRef<ByteVar>?, klen: Int, cd: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3739(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, enc?.getPointer(memScope).rawValue, kstr?.getPointer(memScope).rawValue, klen, cd.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun PEM_read_bio_Parameters(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<EVP_PKEY>>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3740(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_Parameters(bp: CValuesRef<BIO>?, x: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3741(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun b2i_PrivateKey(`in`: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3742(`in`?.getPointer(memScope).rawValue, length))
    }
}

fun b2i_PublicKey(`in`: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3743(`in`?.getPointer(memScope).rawValue, length))
    }
}

fun b2i_PrivateKey_bio(`in`: CValuesRef<BIO>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3744(`in`?.getPointer(memScope).rawValue))
    }
}

fun b2i_PublicKey_bio(`in`: CValuesRef<BIO>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3745(`in`?.getPointer(memScope).rawValue))
    }
}

fun i2b_PrivateKey_bio(out: CValuesRef<BIO>?, pk: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3746(out?.getPointer(memScope).rawValue, pk?.getPointer(memScope).rawValue)
    }
}

fun i2b_PublicKey_bio(out: CValuesRef<BIO>?, pk: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge3747(out?.getPointer(memScope).rawValue, pk?.getPointer(memScope).rawValue)
    }
}

fun b2i_PVK_bio(`in`: CValuesRef<BIO>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3748(`in`?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun i2b_PVK_bio(out: CValuesRef<BIO>?, pk: CValuesRef<EVP_PKEY>?, enclevel: Int, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3749(out?.getPointer(memScope).rawValue, pk?.getPointer(memScope).rawValue, enclevel, cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun ERR_load_PEM_strings(): Int {
    return kniBridge3750()
}

fun HMAC_size(e: CValuesRef<HMAC_CTX>?): size_t {
    memScoped {
        return kniBridge3751(e?.getPointer(memScope).rawValue)
    }
}

fun HMAC_CTX_new(): CPointer<HMAC_CTX>? {
    return interpretCPointer<HMAC_CTX>(kniBridge3752())
}

fun HMAC_CTX_reset(ctx: CValuesRef<HMAC_CTX>?): Int {
    memScoped {
        return kniBridge3753(ctx?.getPointer(memScope).rawValue)
    }
}

fun HMAC_CTX_free(ctx: CValuesRef<HMAC_CTX>?): Unit {
    memScoped {
        return kniBridge3754(ctx?.getPointer(memScope).rawValue)
    }
}

fun HMAC_Init(ctx: CValuesRef<HMAC_CTX>?, key: CValuesRef<*>?, len: Int, md: CValuesRef<EVP_MD>?): Int {
    memScoped {
        return kniBridge3755(ctx?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, len, md?.getPointer(memScope).rawValue)
    }
}

fun HMAC_Init_ex(ctx: CValuesRef<HMAC_CTX>?, key: CValuesRef<*>?, len: Int, md: CValuesRef<EVP_MD>?, impl: CValuesRef<ENGINE>?): Int {
    memScoped {
        return kniBridge3756(ctx?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, len, md?.getPointer(memScope).rawValue, impl?.getPointer(memScope).rawValue)
    }
}

fun HMAC_Update(ctx: CValuesRef<HMAC_CTX>?, data: CValuesRef<UByteVar>?, len: size_t): Int {
    memScoped {
        return kniBridge3757(ctx?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len)
    }
}

fun HMAC_Final(ctx: CValuesRef<HMAC_CTX>?, md: CValuesRef<UByteVar>?, len: CValuesRef<UIntVar>?): Int {
    memScoped {
        return kniBridge3758(ctx?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun HMAC(evp_md: CValuesRef<EVP_MD>?, key: CValuesRef<*>?, key_len: Int, d: CValuesRef<UByteVar>?, n: size_t, md: CValuesRef<UByteVar>?, md_len: CValuesRef<UIntVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge3759(evp_md?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, key_len, d?.getPointer(memScope).rawValue, n, md?.getPointer(memScope).rawValue, md_len?.getPointer(memScope).rawValue))
    }
}

fun HMAC_CTX_copy(dctx: CValuesRef<HMAC_CTX>?, sctx: CValuesRef<HMAC_CTX>?): Int {
    memScoped {
        return kniBridge3760(dctx?.getPointer(memScope).rawValue, sctx?.getPointer(memScope).rawValue)
    }
}

fun HMAC_CTX_set_flags(ctx: CValuesRef<HMAC_CTX>?, flags: ULong): Unit {
    memScoped {
        return kniBridge3761(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun HMAC_CTX_get_md(ctx: CValuesRef<HMAC_CTX>?): CPointer<EVP_MD>? {
    memScoped {
        return interpretCPointer<EVP_MD>(kniBridge3762(ctx?.getPointer(memScope).rawValue))
    }
}

fun ASYNC_init_thread(max_size: size_t, init_size: size_t): Int {
    return kniBridge3763(max_size, init_size)
}

fun ASYNC_cleanup_thread(): Unit {
    return kniBridge3764()
}

fun ASYNC_WAIT_CTX_new(): CPointer<ASYNC_WAIT_CTX>? {
    return interpretCPointer<ASYNC_WAIT_CTX>(kniBridge3765())
}

fun ASYNC_WAIT_CTX_free(ctx: CValuesRef<ASYNC_WAIT_CTX>?): Unit {
    memScoped {
        return kniBridge3766(ctx?.getPointer(memScope).rawValue)
    }
}

fun ASYNC_WAIT_CTX_set_wait_fd(ctx: CValuesRef<ASYNC_WAIT_CTX>?, key: CValuesRef<*>?, fd: Int, custom_data: CValuesRef<*>?, cleanup: CPointer<CFunction<(CPointer<ASYNC_WAIT_CTX>?, COpaquePointer?, Int, COpaquePointer?) -> Unit>>?): Int {
    memScoped {
        return kniBridge3767(ctx?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, fd, custom_data?.getPointer(memScope).rawValue, cleanup.rawValue)
    }
}

fun ASYNC_WAIT_CTX_get_fd(ctx: CValuesRef<ASYNC_WAIT_CTX>?, key: CValuesRef<*>?, fd: CValuesRef<IntVar>?, custom_data: CValuesRef<COpaquePointerVar>?): Int {
    memScoped {
        return kniBridge3768(ctx?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue, fd?.getPointer(memScope).rawValue, custom_data?.getPointer(memScope).rawValue)
    }
}

fun ASYNC_WAIT_CTX_get_all_fds(ctx: CValuesRef<ASYNC_WAIT_CTX>?, fd: CValuesRef<IntVar>?, numfds: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge3769(ctx?.getPointer(memScope).rawValue, fd?.getPointer(memScope).rawValue, numfds?.getPointer(memScope).rawValue)
    }
}

fun ASYNC_WAIT_CTX_get_changed_fds(ctx: CValuesRef<ASYNC_WAIT_CTX>?, addfd: CValuesRef<IntVar>?, numaddfds: CValuesRef<size_tVar>?, delfd: CValuesRef<IntVar>?, numdelfds: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge3770(ctx?.getPointer(memScope).rawValue, addfd?.getPointer(memScope).rawValue, numaddfds?.getPointer(memScope).rawValue, delfd?.getPointer(memScope).rawValue, numdelfds?.getPointer(memScope).rawValue)
    }
}

fun ASYNC_WAIT_CTX_clear_fd(ctx: CValuesRef<ASYNC_WAIT_CTX>?, key: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3771(ctx?.getPointer(memScope).rawValue, key?.getPointer(memScope).rawValue)
    }
}

fun ASYNC_is_capable(): Int {
    return kniBridge3772()
}

fun ASYNC_start_job(job: CValuesRef<CPointerVar<ASYNC_JOB>>?, ctx: CValuesRef<ASYNC_WAIT_CTX>?, ret: CValuesRef<IntVar>?, func: CPointer<CFunction<(COpaquePointer?) -> Int>>?, args: CValuesRef<*>?, size: size_t): Int {
    memScoped {
        return kniBridge3773(job?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, ret?.getPointer(memScope).rawValue, func.rawValue, args?.getPointer(memScope).rawValue, size)
    }
}

fun ASYNC_pause_job(): Int {
    return kniBridge3774()
}

fun ASYNC_get_current_job(): CPointer<ASYNC_JOB>? {
    return interpretCPointer<ASYNC_JOB>(kniBridge3775())
}

fun ASYNC_get_wait_ctx(job: CValuesRef<ASYNC_JOB>?): CPointer<ASYNC_WAIT_CTX>? {
    memScoped {
        return interpretCPointer<ASYNC_WAIT_CTX>(kniBridge3776(job?.getPointer(memScope).rawValue))
    }
}

fun ASYNC_block_pause(): Unit {
    return kniBridge3777()
}

fun ASYNC_unblock_pause(): Unit {
    return kniBridge3778()
}

fun ERR_load_ASYNC_strings(): Int {
    return kniBridge3779()
}

fun sk_SCT_num(sk: CValuesRef<stack_st_SCT>?): Int {
    memScoped {
        return kniBridge3780(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_value(sk: CValuesRef<stack_st_SCT>?, idx: Int): CPointer<SCT>? {
    memScoped {
        return interpretCPointer<SCT>(kniBridge3781(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_SCT_new(compare: sk_SCT_compfunc?): CPointer<stack_st_SCT>? {
    return interpretCPointer<stack_st_SCT>(kniBridge3782(compare.rawValue))
}

fun sk_SCT_new_null(): CPointer<stack_st_SCT>? {
    return interpretCPointer<stack_st_SCT>(kniBridge3783())
}

fun sk_SCT_free(sk: CValuesRef<stack_st_SCT>?): Unit {
    memScoped {
        return kniBridge3784(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_zero(sk: CValuesRef<stack_st_SCT>?): Unit {
    memScoped {
        return kniBridge3785(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_delete(sk: CValuesRef<stack_st_SCT>?, i: Int): CPointer<SCT>? {
    memScoped {
        return interpretCPointer<SCT>(kniBridge3786(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_SCT_delete_ptr(sk: CValuesRef<stack_st_SCT>?, ptr: CValuesRef<SCT>?): CPointer<SCT>? {
    memScoped {
        return interpretCPointer<SCT>(kniBridge3787(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_SCT_push(sk: CValuesRef<stack_st_SCT>?, ptr: CValuesRef<SCT>?): Int {
    memScoped {
        return kniBridge3788(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_unshift(sk: CValuesRef<stack_st_SCT>?, ptr: CValuesRef<SCT>?): Int {
    memScoped {
        return kniBridge3789(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_pop(sk: CValuesRef<stack_st_SCT>?): CPointer<SCT>? {
    memScoped {
        return interpretCPointer<SCT>(kniBridge3790(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SCT_shift(sk: CValuesRef<stack_st_SCT>?): CPointer<SCT>? {
    memScoped {
        return interpretCPointer<SCT>(kniBridge3791(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SCT_pop_free(sk: CValuesRef<stack_st_SCT>?, freefunc: sk_SCT_freefunc?): Unit {
    memScoped {
        return kniBridge3792(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_SCT_insert(sk: CValuesRef<stack_st_SCT>?, ptr: CValuesRef<SCT>?, idx: Int): Int {
    memScoped {
        return kniBridge3793(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_SCT_set(sk: CValuesRef<stack_st_SCT>?, idx: Int, ptr: CValuesRef<SCT>?): CPointer<SCT>? {
    memScoped {
        return interpretCPointer<SCT>(kniBridge3794(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_SCT_find(sk: CValuesRef<stack_st_SCT>?, ptr: CValuesRef<SCT>?): Int {
    memScoped {
        return kniBridge3795(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_find_ex(sk: CValuesRef<stack_st_SCT>?, ptr: CValuesRef<SCT>?): Int {
    memScoped {
        return kniBridge3796(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_sort(sk: CValuesRef<stack_st_SCT>?): Unit {
    memScoped {
        return kniBridge3797(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_is_sorted(sk: CValuesRef<stack_st_SCT>?): Int {
    memScoped {
        return kniBridge3798(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SCT_dup(sk: CValuesRef<stack_st_SCT>?): CPointer<stack_st_SCT>? {
    memScoped {
        return interpretCPointer<stack_st_SCT>(kniBridge3799(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SCT_deep_copy(sk: CValuesRef<stack_st_SCT>?, copyfunc: sk_SCT_copyfunc?, freefunc: sk_SCT_freefunc?): CPointer<stack_st_SCT>? {
    memScoped {
        return interpretCPointer<stack_st_SCT>(kniBridge3800(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_SCT_set_cmp_func(sk: CValuesRef<stack_st_SCT>?, compare: sk_SCT_compfunc?): sk_SCT_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<SCT>>?, CPointer<CPointerVar<SCT>>?) -> Int>>(kniBridge3801(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_CTLOG_num(sk: CValuesRef<stack_st_CTLOG>?): Int {
    memScoped {
        return kniBridge3802(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_value(sk: CValuesRef<stack_st_CTLOG>?, idx: Int): CPointer<CTLOG>? {
    memScoped {
        return interpretCPointer<CTLOG>(kniBridge3803(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_CTLOG_new(compare: sk_CTLOG_compfunc?): CPointer<stack_st_CTLOG>? {
    return interpretCPointer<stack_st_CTLOG>(kniBridge3804(compare.rawValue))
}

fun sk_CTLOG_new_null(): CPointer<stack_st_CTLOG>? {
    return interpretCPointer<stack_st_CTLOG>(kniBridge3805())
}

fun sk_CTLOG_free(sk: CValuesRef<stack_st_CTLOG>?): Unit {
    memScoped {
        return kniBridge3806(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_zero(sk: CValuesRef<stack_st_CTLOG>?): Unit {
    memScoped {
        return kniBridge3807(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_delete(sk: CValuesRef<stack_st_CTLOG>?, i: Int): CPointer<CTLOG>? {
    memScoped {
        return interpretCPointer<CTLOG>(kniBridge3808(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_CTLOG_delete_ptr(sk: CValuesRef<stack_st_CTLOG>?, ptr: CValuesRef<CTLOG>?): CPointer<CTLOG>? {
    memScoped {
        return interpretCPointer<CTLOG>(kniBridge3809(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_CTLOG_push(sk: CValuesRef<stack_st_CTLOG>?, ptr: CValuesRef<CTLOG>?): Int {
    memScoped {
        return kniBridge3810(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_unshift(sk: CValuesRef<stack_st_CTLOG>?, ptr: CValuesRef<CTLOG>?): Int {
    memScoped {
        return kniBridge3811(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_pop(sk: CValuesRef<stack_st_CTLOG>?): CPointer<CTLOG>? {
    memScoped {
        return interpretCPointer<CTLOG>(kniBridge3812(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_CTLOG_shift(sk: CValuesRef<stack_st_CTLOG>?): CPointer<CTLOG>? {
    memScoped {
        return interpretCPointer<CTLOG>(kniBridge3813(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_CTLOG_pop_free(sk: CValuesRef<stack_st_CTLOG>?, freefunc: sk_CTLOG_freefunc?): Unit {
    memScoped {
        return kniBridge3814(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_CTLOG_insert(sk: CValuesRef<stack_st_CTLOG>?, ptr: CValuesRef<CTLOG>?, idx: Int): Int {
    memScoped {
        return kniBridge3815(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_CTLOG_set(sk: CValuesRef<stack_st_CTLOG>?, idx: Int, ptr: CValuesRef<CTLOG>?): CPointer<CTLOG>? {
    memScoped {
        return interpretCPointer<CTLOG>(kniBridge3816(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_CTLOG_find(sk: CValuesRef<stack_st_CTLOG>?, ptr: CValuesRef<CTLOG>?): Int {
    memScoped {
        return kniBridge3817(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_find_ex(sk: CValuesRef<stack_st_CTLOG>?, ptr: CValuesRef<CTLOG>?): Int {
    memScoped {
        return kniBridge3818(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_sort(sk: CValuesRef<stack_st_CTLOG>?): Unit {
    memScoped {
        return kniBridge3819(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_is_sorted(sk: CValuesRef<stack_st_CTLOG>?): Int {
    memScoped {
        return kniBridge3820(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_CTLOG_dup(sk: CValuesRef<stack_st_CTLOG>?): CPointer<stack_st_CTLOG>? {
    memScoped {
        return interpretCPointer<stack_st_CTLOG>(kniBridge3821(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_CTLOG_deep_copy(sk: CValuesRef<stack_st_CTLOG>?, copyfunc: sk_CTLOG_copyfunc?, freefunc: sk_CTLOG_freefunc?): CPointer<stack_st_CTLOG>? {
    memScoped {
        return interpretCPointer<stack_st_CTLOG>(kniBridge3822(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_CTLOG_set_cmp_func(sk: CValuesRef<stack_st_CTLOG>?, compare: sk_CTLOG_compfunc?): sk_CTLOG_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<CTLOG>>?, CPointer<CPointerVar<CTLOG>>?) -> Int>>(kniBridge3823(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun CT_POLICY_EVAL_CTX_new(): CPointer<CT_POLICY_EVAL_CTX>? {
    return interpretCPointer<CT_POLICY_EVAL_CTX>(kniBridge3824())
}

fun CT_POLICY_EVAL_CTX_free(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?): Unit {
    memScoped {
        return kniBridge3825(ctx?.getPointer(memScope).rawValue)
    }
}

fun CT_POLICY_EVAL_CTX_get0_cert(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3826(ctx?.getPointer(memScope).rawValue))
    }
}

fun CT_POLICY_EVAL_CTX_set1_cert(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?, cert: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3827(ctx?.getPointer(memScope).rawValue, cert?.getPointer(memScope).rawValue)
    }
}

fun CT_POLICY_EVAL_CTX_get0_issuer(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge3828(ctx?.getPointer(memScope).rawValue))
    }
}

fun CT_POLICY_EVAL_CTX_set1_issuer(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?, issuer: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge3829(ctx?.getPointer(memScope).rawValue, issuer?.getPointer(memScope).rawValue)
    }
}

fun CT_POLICY_EVAL_CTX_get0_log_store(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?): CPointer<CTLOG_STORE>? {
    memScoped {
        return interpretCPointer<CTLOG_STORE>(kniBridge3830(ctx?.getPointer(memScope).rawValue))
    }
}

fun CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?, log_store: CValuesRef<CTLOG_STORE>?): Unit {
    memScoped {
        return kniBridge3831(ctx?.getPointer(memScope).rawValue, log_store?.getPointer(memScope).rawValue)
    }
}

fun CT_POLICY_EVAL_CTX_get_time(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?): uint64_t {
    memScoped {
        return kniBridge3832(ctx?.getPointer(memScope).rawValue)
    }
}

fun CT_POLICY_EVAL_CTX_set_time(ctx: CValuesRef<CT_POLICY_EVAL_CTX>?, time_in_ms: uint64_t): Unit {
    memScoped {
        return kniBridge3833(ctx?.getPointer(memScope).rawValue, time_in_ms)
    }
}

fun SCT_new(): CPointer<SCT>? {
    return interpretCPointer<SCT>(kniBridge3834())
}

fun SCT_new_from_base64(version: UByte, logid_base64: String?, entry_type: ct_log_entry_type_t, timestamp: uint64_t, extensions_base64: String?, signature_base64: String?): CPointer<SCT>? {
    memScoped {
        return interpretCPointer<SCT>(kniBridge3835(version, logid_base64?.cstr?.getPointer(memScope).rawValue, entry_type, timestamp, extensions_base64?.cstr?.getPointer(memScope).rawValue, signature_base64?.cstr?.getPointer(memScope).rawValue))
    }
}

fun SCT_free(sct: CValuesRef<SCT>?): Unit {
    memScoped {
        return kniBridge3836(sct?.getPointer(memScope).rawValue)
    }
}

fun SCT_LIST_free(a: CValuesRef<stack_st_SCT>?): Unit {
    memScoped {
        return kniBridge3837(a?.getPointer(memScope).rawValue)
    }
}

fun SCT_get_version(sct: CValuesRef<SCT>?): sct_version_t {
    memScoped {
        return kniBridge3838(sct?.getPointer(memScope).rawValue)
    }
}

fun SCT_set_version(sct: CValuesRef<SCT>?, version: sct_version_t): Int {
    memScoped {
        return kniBridge3839(sct?.getPointer(memScope).rawValue, version)
    }
}

fun SCT_get_log_entry_type(sct: CValuesRef<SCT>?): ct_log_entry_type_t {
    memScoped {
        return kniBridge3840(sct?.getPointer(memScope).rawValue)
    }
}

fun SCT_set_log_entry_type(sct: CValuesRef<SCT>?, entry_type: ct_log_entry_type_t): Int {
    memScoped {
        return kniBridge3841(sct?.getPointer(memScope).rawValue, entry_type)
    }
}

fun SCT_get0_log_id(sct: CValuesRef<SCT>?, log_id: CValuesRef<CPointerVar<UByteVar>>?): size_t {
    memScoped {
        return kniBridge3842(sct?.getPointer(memScope).rawValue, log_id?.getPointer(memScope).rawValue)
    }
}

fun SCT_set0_log_id(sct: CValuesRef<SCT>?, log_id: CValuesRef<UByteVar>?, log_id_len: size_t): Int {
    memScoped {
        return kniBridge3843(sct?.getPointer(memScope).rawValue, log_id?.getPointer(memScope).rawValue, log_id_len)
    }
}

fun SCT_set1_log_id(sct: CValuesRef<SCT>?, log_id: CValuesRef<UByteVar>?, log_id_len: size_t): Int {
    memScoped {
        return kniBridge3844(sct?.getPointer(memScope).rawValue, log_id?.getPointer(memScope).rawValue, log_id_len)
    }
}

fun SCT_get_timestamp(sct: CValuesRef<SCT>?): uint64_t {
    memScoped {
        return kniBridge3845(sct?.getPointer(memScope).rawValue)
    }
}

fun SCT_set_timestamp(sct: CValuesRef<SCT>?, timestamp: uint64_t): Unit {
    memScoped {
        return kniBridge3846(sct?.getPointer(memScope).rawValue, timestamp)
    }
}

fun SCT_get_signature_nid(sct: CValuesRef<SCT>?): Int {
    memScoped {
        return kniBridge3847(sct?.getPointer(memScope).rawValue)
    }
}

fun SCT_set_signature_nid(sct: CValuesRef<SCT>?, nid: Int): Int {
    memScoped {
        return kniBridge3848(sct?.getPointer(memScope).rawValue, nid)
    }
}

fun SCT_get0_extensions(sct: CValuesRef<SCT>?, ext: CValuesRef<CPointerVar<UByteVar>>?): size_t {
    memScoped {
        return kniBridge3849(sct?.getPointer(memScope).rawValue, ext?.getPointer(memScope).rawValue)
    }
}

fun SCT_set0_extensions(sct: CValuesRef<SCT>?, ext: CValuesRef<UByteVar>?, ext_len: size_t): Unit {
    memScoped {
        return kniBridge3850(sct?.getPointer(memScope).rawValue, ext?.getPointer(memScope).rawValue, ext_len)
    }
}

fun SCT_set1_extensions(sct: CValuesRef<SCT>?, ext: CValuesRef<UByteVar>?, ext_len: size_t): Int {
    memScoped {
        return kniBridge3851(sct?.getPointer(memScope).rawValue, ext?.getPointer(memScope).rawValue, ext_len)
    }
}

fun SCT_get0_signature(sct: CValuesRef<SCT>?, sig: CValuesRef<CPointerVar<UByteVar>>?): size_t {
    memScoped {
        return kniBridge3852(sct?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue)
    }
}

fun SCT_set0_signature(sct: CValuesRef<SCT>?, sig: CValuesRef<UByteVar>?, sig_len: size_t): Unit {
    memScoped {
        return kniBridge3853(sct?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue, sig_len)
    }
}

fun SCT_set1_signature(sct: CValuesRef<SCT>?, sig: CValuesRef<UByteVar>?, sig_len: size_t): Int {
    memScoped {
        return kniBridge3854(sct?.getPointer(memScope).rawValue, sig?.getPointer(memScope).rawValue, sig_len)
    }
}

fun SCT_get_source(sct: CValuesRef<SCT>?): sct_source_t {
    memScoped {
        return sct_source_t.byValue(kniBridge3855(sct?.getPointer(memScope).rawValue))
    }
}

fun SCT_set_source(sct: CValuesRef<SCT>?, source: sct_source_t): Int {
    memScoped {
        return kniBridge3856(sct?.getPointer(memScope).rawValue, source.value)
    }
}

fun SCT_validation_status_string(sct: CValuesRef<SCT>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3857(sct?.getPointer(memScope).rawValue))
    }
}

fun SCT_print(sct: CValuesRef<SCT>?, out: CValuesRef<BIO>?, indent: Int, logs: CValuesRef<CTLOG_STORE>?): Unit {
    memScoped {
        return kniBridge3858(sct?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, indent, logs?.getPointer(memScope).rawValue)
    }
}

fun SCT_LIST_print(sct_list: CValuesRef<stack_st_SCT>?, out: CValuesRef<BIO>?, indent: Int, separator: String?, logs: CValuesRef<CTLOG_STORE>?): Unit {
    memScoped {
        return kniBridge3859(sct_list?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, indent, separator?.cstr?.getPointer(memScope).rawValue, logs?.getPointer(memScope).rawValue)
    }
}

fun SCT_get_validation_status(sct: CValuesRef<SCT>?): sct_validation_status_t {
    memScoped {
        return sct_validation_status_t.byValue(kniBridge3860(sct?.getPointer(memScope).rawValue))
    }
}

fun SCT_validate(sct: CValuesRef<SCT>?, ctx: CValuesRef<CT_POLICY_EVAL_CTX>?): Int {
    memScoped {
        return kniBridge3861(sct?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun SCT_LIST_validate(scts: CValuesRef<stack_st_SCT>?, ctx: CValuesRef<CT_POLICY_EVAL_CTX>?): Int {
    memScoped {
        return kniBridge3862(scts?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun i2o_SCT_LIST(a: CValuesRef<stack_st_SCT>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3863(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun o2i_SCT_LIST(a: CValuesRef<CPointerVar<stack_st_SCT>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, len: size_t): CPointer<stack_st_SCT>? {
    memScoped {
        return interpretCPointer<stack_st_SCT>(kniBridge3864(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, len))
    }
}

fun i2d_SCT_LIST(a: CValuesRef<stack_st_SCT>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3865(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun d2i_SCT_LIST(a: CValuesRef<CPointerVar<stack_st_SCT>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, len: Long): CPointer<stack_st_SCT>? {
    memScoped {
        return interpretCPointer<stack_st_SCT>(kniBridge3866(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, len))
    }
}

fun i2o_SCT(sct: CValuesRef<SCT>?, out: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge3867(sct?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun o2i_SCT(psct: CValuesRef<CPointerVar<SCT>>?, `in`: CValuesRef<CPointerVar<UByteVar>>?, len: size_t): CPointer<SCT>? {
    memScoped {
        return interpretCPointer<SCT>(kniBridge3868(psct?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len))
    }
}

fun CTLOG_new(public_key: CValuesRef<EVP_PKEY>?, name: String?): CPointer<CTLOG>? {
    memScoped {
        return interpretCPointer<CTLOG>(kniBridge3869(public_key?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun CTLOG_new_from_base64(ct_log: CValuesRef<CPointerVar<CTLOG>>?, pkey_base64: String?, name: String?): Int {
    memScoped {
        return kniBridge3870(ct_log?.getPointer(memScope).rawValue, pkey_base64?.cstr?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun CTLOG_free(log: CValuesRef<CTLOG>?): Unit {
    memScoped {
        return kniBridge3871(log?.getPointer(memScope).rawValue)
    }
}

fun CTLOG_get0_name(log: CValuesRef<CTLOG>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3872(log?.getPointer(memScope).rawValue))
    }
}

fun CTLOG_get0_log_id(log: CValuesRef<CTLOG>?, log_id: CValuesRef<CPointerVar<uint8_tVar>>?, log_id_len: CValuesRef<size_tVar>?): Unit {
    memScoped {
        return kniBridge3873(log?.getPointer(memScope).rawValue, log_id?.getPointer(memScope).rawValue, log_id_len?.getPointer(memScope).rawValue)
    }
}

fun CTLOG_get0_public_key(log: CValuesRef<CTLOG>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge3874(log?.getPointer(memScope).rawValue))
    }
}

fun CTLOG_STORE_new(): CPointer<CTLOG_STORE>? {
    return interpretCPointer<CTLOG_STORE>(kniBridge3875())
}

fun CTLOG_STORE_free(store: CValuesRef<CTLOG_STORE>?): Unit {
    memScoped {
        return kniBridge3876(store?.getPointer(memScope).rawValue)
    }
}

fun CTLOG_STORE_get0_log_by_id(store: CValuesRef<CTLOG_STORE>?, log_id: CValuesRef<uint8_tVar>?, log_id_len: size_t): CPointer<CTLOG>? {
    memScoped {
        return interpretCPointer<CTLOG>(kniBridge3877(store?.getPointer(memScope).rawValue, log_id?.getPointer(memScope).rawValue, log_id_len))
    }
}

fun CTLOG_STORE_load_file(store: CValuesRef<CTLOG_STORE>?, file: String?): Int {
    memScoped {
        return kniBridge3878(store?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue)
    }
}

fun CTLOG_STORE_load_default_file(store: CValuesRef<CTLOG_STORE>?): Int {
    memScoped {
        return kniBridge3879(store?.getPointer(memScope).rawValue)
    }
}

fun ERR_load_CT_strings(): Int {
    return kniBridge3880()
}

fun sk_SRTP_PROTECTION_PROFILE_num(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?): Int {
    memScoped {
        return kniBridge3881(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_value(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, idx: Int): CPointer<SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<SRTP_PROTECTION_PROFILE>(kniBridge3882(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_SRTP_PROTECTION_PROFILE_new(compare: sk_SRTP_PROTECTION_PROFILE_compfunc?): CPointer<stack_st_SRTP_PROTECTION_PROFILE>? {
    return interpretCPointer<stack_st_SRTP_PROTECTION_PROFILE>(kniBridge3883(compare.rawValue))
}

fun sk_SRTP_PROTECTION_PROFILE_new_null(): CPointer<stack_st_SRTP_PROTECTION_PROFILE>? {
    return interpretCPointer<stack_st_SRTP_PROTECTION_PROFILE>(kniBridge3884())
}

fun sk_SRTP_PROTECTION_PROFILE_free(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?): Unit {
    memScoped {
        return kniBridge3885(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_zero(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?): Unit {
    memScoped {
        return kniBridge3886(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_delete(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, i: Int): CPointer<SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<SRTP_PROTECTION_PROFILE>(kniBridge3887(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_SRTP_PROTECTION_PROFILE_delete_ptr(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, ptr: CValuesRef<SRTP_PROTECTION_PROFILE>?): CPointer<SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<SRTP_PROTECTION_PROFILE>(kniBridge3888(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_SRTP_PROTECTION_PROFILE_push(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, ptr: CValuesRef<SRTP_PROTECTION_PROFILE>?): Int {
    memScoped {
        return kniBridge3889(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_unshift(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, ptr: CValuesRef<SRTP_PROTECTION_PROFILE>?): Int {
    memScoped {
        return kniBridge3890(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_pop(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?): CPointer<SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<SRTP_PROTECTION_PROFILE>(kniBridge3891(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SRTP_PROTECTION_PROFILE_shift(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?): CPointer<SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<SRTP_PROTECTION_PROFILE>(kniBridge3892(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SRTP_PROTECTION_PROFILE_pop_free(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, freefunc: sk_SRTP_PROTECTION_PROFILE_freefunc?): Unit {
    memScoped {
        return kniBridge3893(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_insert(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, ptr: CValuesRef<SRTP_PROTECTION_PROFILE>?, idx: Int): Int {
    memScoped {
        return kniBridge3894(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_set(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, idx: Int, ptr: CValuesRef<SRTP_PROTECTION_PROFILE>?): CPointer<SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<SRTP_PROTECTION_PROFILE>(kniBridge3895(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_SRTP_PROTECTION_PROFILE_find(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, ptr: CValuesRef<SRTP_PROTECTION_PROFILE>?): Int {
    memScoped {
        return kniBridge3896(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_find_ex(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, ptr: CValuesRef<SRTP_PROTECTION_PROFILE>?): Int {
    memScoped {
        return kniBridge3897(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_sort(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?): Unit {
    memScoped {
        return kniBridge3898(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_is_sorted(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?): Int {
    memScoped {
        return kniBridge3899(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SRTP_PROTECTION_PROFILE_dup(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?): CPointer<stack_st_SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<stack_st_SRTP_PROTECTION_PROFILE>(kniBridge3900(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SRTP_PROTECTION_PROFILE_deep_copy(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, copyfunc: sk_SRTP_PROTECTION_PROFILE_copyfunc?, freefunc: sk_SRTP_PROTECTION_PROFILE_freefunc?): CPointer<stack_st_SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<stack_st_SRTP_PROTECTION_PROFILE>(kniBridge3901(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_SRTP_PROTECTION_PROFILE_set_cmp_func(sk: CValuesRef<stack_st_SRTP_PROTECTION_PROFILE>?, compare: sk_SRTP_PROTECTION_PROFILE_compfunc?): sk_SRTP_PROTECTION_PROFILE_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<SRTP_PROTECTION_PROFILE>>?, CPointer<CPointerVar<SRTP_PROTECTION_PROFILE>>?) -> Int>>(kniBridge3902(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun SSL_CTX_get_options(ctx: CValuesRef<SSL_CTX>?): ULong {
    memScoped {
        return kniBridge3903(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_options(s: CValuesRef<SSL>?): ULong {
    memScoped {
        return kniBridge3904(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_clear_options(ctx: CValuesRef<SSL_CTX>?, op: ULong): ULong {
    memScoped {
        return kniBridge3905(ctx?.getPointer(memScope).rawValue, op)
    }
}

fun SSL_clear_options(s: CValuesRef<SSL>?, op: ULong): ULong {
    memScoped {
        return kniBridge3906(s?.getPointer(memScope).rawValue, op)
    }
}

fun SSL_CTX_set_options(ctx: CValuesRef<SSL_CTX>?, op: ULong): ULong {
    memScoped {
        return kniBridge3907(ctx?.getPointer(memScope).rawValue, op)
    }
}

fun SSL_set_options(s: CValuesRef<SSL>?, op: ULong): ULong {
    memScoped {
        return kniBridge3908(s?.getPointer(memScope).rawValue, op)
    }
}

fun SSL_CTX_set_msg_callback(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(Int, Int, Int, COpaquePointer?, size_t, CPointer<SSL>?, COpaquePointer?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge3909(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_set_msg_callback(ssl: CValuesRef<SSL>?, cb: CPointer<CFunction<(Int, Int, Int, COpaquePointer?, size_t, CPointer<SSL>?, COpaquePointer?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge3910(ssl?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_SRP_CTX_init(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge3911(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_SRP_CTX_init(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge3912(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_SRP_CTX_free(ctx: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge3913(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_SRP_CTX_free(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge3914(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_srp_server_param_with_username(s: CValuesRef<SSL>?, ad: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge3915(s?.getPointer(memScope).rawValue, ad?.getPointer(memScope).rawValue)
    }
}

fun SRP_Calc_A_param(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge3916(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_sessions(ctx: CValuesRef<SSL_CTX>?): CPointer<lhash_st_SSL_SESSION>? {
    memScoped {
        return interpretCPointer<lhash_st_SSL_SESSION>(kniBridge3917(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_sess_set_new_cb(ctx: CValuesRef<SSL_CTX>?, new_session_cb: CPointer<CFunction<(CPointer<ssl_st>?, CPointer<SSL_SESSION>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge3918(ctx?.getPointer(memScope).rawValue, new_session_cb.rawValue)
    }
}

fun SSL_CTX_sess_get_new_cb(ctx: CValuesRef<SSL_CTX>?): CPointer<CFunction<(CPointer<ssl_st>?, CPointer<SSL_SESSION>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<ssl_st>?, CPointer<SSL_SESSION>?) -> Int>>(kniBridge3919(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_sess_set_remove_cb(ctx: CValuesRef<SSL_CTX>?, remove_session_cb: CPointer<CFunction<(CPointer<ssl_ctx_st>?, CPointer<SSL_SESSION>?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge3920(ctx?.getPointer(memScope).rawValue, remove_session_cb.rawValue)
    }
}

fun SSL_CTX_sess_get_remove_cb(ctx: CValuesRef<SSL_CTX>?): CPointer<CFunction<(CPointer<ssl_ctx_st>?, CPointer<SSL_SESSION>?) -> Unit>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<ssl_ctx_st>?, CPointer<SSL_SESSION>?) -> Unit>>(kniBridge3921(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_sess_set_get_cb(ctx: CValuesRef<SSL_CTX>?, get_session_cb: CPointer<CFunction<(CPointer<ssl_st>?, CPointer<UByteVar>?, Int, CPointer<IntVar>?) -> CPointer<SSL_SESSION>?>>?): Unit {
    memScoped {
        return kniBridge3922(ctx?.getPointer(memScope).rawValue, get_session_cb.rawValue)
    }
}

fun SSL_CTX_sess_get_get_cb(ctx: CValuesRef<SSL_CTX>?): CPointer<CFunction<(CPointer<ssl_st>?, CPointer<UByteVar>?, Int, CPointer<IntVar>?) -> CPointer<SSL_SESSION>?>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<ssl_st>?, CPointer<UByteVar>?, Int, CPointer<IntVar>?) -> CPointer<SSL_SESSION>?>>(kniBridge3923(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_info_callback(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, Int, Int) -> Unit>>?): Unit {
    memScoped {
        return kniBridge3924(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_CTX_get_info_callback(ctx: CValuesRef<SSL_CTX>?): CPointer<CFunction<(CPointer<SSL>?, Int, Int) -> Unit>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<SSL>?, Int, Int) -> Unit>>(kniBridge3925(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_client_cert_cb(ctx: CValuesRef<SSL_CTX>?, client_cert_cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<CPointerVar<X509>>?, CPointer<CPointerVar<EVP_PKEY>>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge3926(ctx?.getPointer(memScope).rawValue, client_cert_cb.rawValue)
    }
}

fun SSL_CTX_get_client_cert_cb(ctx: CValuesRef<SSL_CTX>?): CPointer<CFunction<(CPointer<SSL>?, CPointer<CPointerVar<X509>>?, CPointer<CPointerVar<EVP_PKEY>>?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<SSL>?, CPointer<CPointerVar<X509>>?, CPointer<CPointerVar<EVP_PKEY>>?) -> Int>>(kniBridge3927(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_client_cert_engine(ctx: CValuesRef<SSL_CTX>?, e: CValuesRef<ENGINE>?): Int {
    memScoped {
        return kniBridge3928(ctx?.getPointer(memScope).rawValue, e?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_cookie_generate_cb(ctx: CValuesRef<SSL_CTX>?, app_gen_cookie_cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<UByteVar>?, CPointer<UIntVar>?) -> Int>>?): Unit {
    memScoped {
        return kniBridge3929(ctx?.getPointer(memScope).rawValue, app_gen_cookie_cb.rawValue)
    }
}

fun SSL_CTX_set_cookie_verify_cb(ctx: CValuesRef<SSL_CTX>?, app_verify_cookie_cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<UByteVar>?, UInt) -> Int>>?): Unit {
    memScoped {
        return kniBridge3930(ctx?.getPointer(memScope).rawValue, app_verify_cookie_cb.rawValue)
    }
}

fun SSL_CTX_set_next_protos_advertised_cb(s: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<CPointerVar<UByteVar>>?, CPointer<UIntVar>?, COpaquePointer?) -> Int>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge3931(s?.getPointer(memScope).rawValue, cb.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_next_proto_select_cb(s: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<CPointerVar<UByteVar>>?, CPointer<UByteVar>?, CPointer<UByteVar>?, UInt, COpaquePointer?) -> Int>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge3932(s?.getPointer(memScope).rawValue, cb.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_get0_next_proto_negotiated(s: CValuesRef<SSL>?, data: CValuesRef<CPointerVar<UByteVar>>?, len: CValuesRef<UIntVar>?): Unit {
    memScoped {
        return kniBridge3933(s?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun SSL_select_next_proto(out: CValuesRef<CPointerVar<UByteVar>>?, outlen: CValuesRef<UByteVar>?, `in`: CValuesRef<UByteVar>?, inlen: UInt, client: CValuesRef<UByteVar>?, client_len: UInt): Int {
    memScoped {
        return kniBridge3934(out?.getPointer(memScope).rawValue, outlen?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, inlen, client?.getPointer(memScope).rawValue, client_len)
    }
}

fun SSL_CTX_set_alpn_protos(ctx: CValuesRef<SSL_CTX>?, protos: CValuesRef<UByteVar>?, protos_len: UInt): Int {
    memScoped {
        return kniBridge3935(ctx?.getPointer(memScope).rawValue, protos?.getPointer(memScope).rawValue, protos_len)
    }
}

fun SSL_set_alpn_protos(ssl: CValuesRef<SSL>?, protos: CValuesRef<UByteVar>?, protos_len: UInt): Int {
    memScoped {
        return kniBridge3936(ssl?.getPointer(memScope).rawValue, protos?.getPointer(memScope).rawValue, protos_len)
    }
}

fun SSL_CTX_set_alpn_select_cb(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<CPointerVar<UByteVar>>?, CPointer<UByteVar>?, CPointer<UByteVar>?, UInt, COpaquePointer?) -> Int>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge3937(ctx?.getPointer(memScope).rawValue, cb.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_get0_alpn_selected(ssl: CValuesRef<SSL>?, data: CValuesRef<CPointerVar<UByteVar>>?, len: CValuesRef<UIntVar>?): Unit {
    memScoped {
        return kniBridge3938(ssl?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_psk_client_callback(ctx: CValuesRef<SSL_CTX>?, psk_client_callback: CPointer<CFunction<(CPointer<SSL>?, CPointer<ByteVar>?, CPointer<ByteVar>?, UInt, CPointer<UByteVar>?, UInt) -> UInt>>?): Unit {
    memScoped {
        return kniBridge3939(ctx?.getPointer(memScope).rawValue, psk_client_callback.rawValue)
    }
}

fun SSL_set_psk_client_callback(ssl: CValuesRef<SSL>?, psk_client_callback: CPointer<CFunction<(CPointer<SSL>?, CPointer<ByteVar>?, CPointer<ByteVar>?, UInt, CPointer<UByteVar>?, UInt) -> UInt>>?): Unit {
    memScoped {
        return kniBridge3940(ssl?.getPointer(memScope).rawValue, psk_client_callback.rawValue)
    }
}

fun SSL_CTX_set_psk_server_callback(ctx: CValuesRef<SSL_CTX>?, psk_server_callback: CPointer<CFunction<(CPointer<SSL>?, CPointer<ByteVar>?, CPointer<UByteVar>?, UInt) -> UInt>>?): Unit {
    memScoped {
        return kniBridge3941(ctx?.getPointer(memScope).rawValue, psk_server_callback.rawValue)
    }
}

fun SSL_set_psk_server_callback(ssl: CValuesRef<SSL>?, psk_server_callback: CPointer<CFunction<(CPointer<SSL>?, CPointer<ByteVar>?, CPointer<UByteVar>?, UInt) -> UInt>>?): Unit {
    memScoped {
        return kniBridge3942(ssl?.getPointer(memScope).rawValue, psk_server_callback.rawValue)
    }
}

fun SSL_CTX_use_psk_identity_hint(ctx: CValuesRef<SSL_CTX>?, identity_hint: String?): Int {
    memScoped {
        return kniBridge3943(ctx?.getPointer(memScope).rawValue, identity_hint?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_use_psk_identity_hint(s: CValuesRef<SSL>?, identity_hint: String?): Int {
    memScoped {
        return kniBridge3944(s?.getPointer(memScope).rawValue, identity_hint?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_psk_identity_hint(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3945(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_psk_identity(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3946(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_has_client_custom_ext(ctx: CValuesRef<SSL_CTX>?, ext_type: UInt): Int {
    memScoped {
        return kniBridge3947(ctx?.getPointer(memScope).rawValue, ext_type)
    }
}

fun SSL_CTX_add_client_custom_ext(ctx: CValuesRef<SSL_CTX>?, ext_type: UInt, add_cb: custom_ext_add_cb?, free_cb: custom_ext_free_cb?, add_arg: CValuesRef<*>?, parse_cb: custom_ext_parse_cb?, parse_arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3948(ctx?.getPointer(memScope).rawValue, ext_type, add_cb.rawValue, free_cb.rawValue, add_arg?.getPointer(memScope).rawValue, parse_cb.rawValue, parse_arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_add_server_custom_ext(ctx: CValuesRef<SSL_CTX>?, ext_type: UInt, add_cb: custom_ext_add_cb?, free_cb: custom_ext_free_cb?, add_arg: CValuesRef<*>?, parse_cb: custom_ext_parse_cb?, parse_arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge3949(ctx?.getPointer(memScope).rawValue, ext_type, add_cb.rawValue, free_cb.rawValue, add_arg?.getPointer(memScope).rawValue, parse_cb.rawValue, parse_arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_extension_supported(ext_type: UInt): Int {
    return kniBridge3950(ext_type)
}

fun SSL_get_servername(s: CValuesRef<SSL>?, type: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge3951(s?.getPointer(memScope).rawValue, type))
    }
}

fun SSL_get_servername_type(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge3952(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_export_keying_material(s: CValuesRef<SSL>?, out: CValuesRef<UByteVar>?, olen: size_t, label: String?, llen: size_t, context: CValuesRef<UByteVar>?, contextlen: size_t, use_context: Int): Int {
    memScoped {
        return kniBridge3953(s?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, olen, label?.cstr?.getPointer(memScope).rawValue, llen, context?.getPointer(memScope).rawValue, contextlen, use_context)
    }
}

fun SSL_get_sigalgs(s: CValuesRef<SSL>?, idx: Int, psign: CValuesRef<IntVar>?, phash: CValuesRef<IntVar>?, psignandhash: CValuesRef<IntVar>?, rsig: CValuesRef<UByteVar>?, rhash: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge3954(s?.getPointer(memScope).rawValue, idx, psign?.getPointer(memScope).rawValue, phash?.getPointer(memScope).rawValue, psignandhash?.getPointer(memScope).rawValue, rsig?.getPointer(memScope).rawValue, rhash?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_shared_sigalgs(s: CValuesRef<SSL>?, idx: Int, psign: CValuesRef<IntVar>?, phash: CValuesRef<IntVar>?, psignandhash: CValuesRef<IntVar>?, rsig: CValuesRef<UByteVar>?, rhash: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge3955(s?.getPointer(memScope).rawValue, idx, psign?.getPointer(memScope).rawValue, phash?.getPointer(memScope).rawValue, psignandhash?.getPointer(memScope).rawValue, rsig?.getPointer(memScope).rawValue, rhash?.getPointer(memScope).rawValue)
    }
}

fun SSL_check_chain(s: CValuesRef<SSL>?, x: CValuesRef<X509>?, pk: CValuesRef<EVP_PKEY>?, chain: CValuesRef<stack_st_X509>?): Int {
    memScoped {
        return kniBridge3956(s?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, pk?.getPointer(memScope).rawValue, chain?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_tlsext_use_srtp(ctx: CValuesRef<SSL_CTX>?, profiles: String?): Int {
    memScoped {
        return kniBridge3957(ctx?.getPointer(memScope).rawValue, profiles?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_tlsext_use_srtp(ssl: CValuesRef<SSL>?, profiles: String?): Int {
    memScoped {
        return kniBridge3958(ssl?.getPointer(memScope).rawValue, profiles?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_srtp_profiles(ssl: CValuesRef<SSL>?): CPointer<stack_st_SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<stack_st_SRTP_PROTECTION_PROFILE>(kniBridge3959(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_selected_srtp_profile(s: CValuesRef<SSL>?): CPointer<SRTP_PROTECTION_PROFILE>? {
    memScoped {
        return interpretCPointer<SRTP_PROTECTION_PROFILE>(kniBridge3960(s?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_CIPHER_num(sk: CValuesRef<stack_st_SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge3961(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_value(sk: CValuesRef<stack_st_SSL_CIPHER>?, idx: Int): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge3962(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_SSL_CIPHER_new(compare: sk_SSL_CIPHER_compfunc?): CPointer<stack_st_SSL_CIPHER>? {
    return interpretCPointer<stack_st_SSL_CIPHER>(kniBridge3963(compare.rawValue))
}

fun sk_SSL_CIPHER_new_null(): CPointer<stack_st_SSL_CIPHER>? {
    return interpretCPointer<stack_st_SSL_CIPHER>(kniBridge3964())
}

fun sk_SSL_CIPHER_free(sk: CValuesRef<stack_st_SSL_CIPHER>?): Unit {
    memScoped {
        return kniBridge3965(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_zero(sk: CValuesRef<stack_st_SSL_CIPHER>?): Unit {
    memScoped {
        return kniBridge3966(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_delete(sk: CValuesRef<stack_st_SSL_CIPHER>?, i: Int): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge3967(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_SSL_CIPHER_delete_ptr(sk: CValuesRef<stack_st_SSL_CIPHER>?, ptr: CValuesRef<SSL_CIPHER>?): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge3968(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_CIPHER_push(sk: CValuesRef<stack_st_SSL_CIPHER>?, ptr: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge3969(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_unshift(sk: CValuesRef<stack_st_SSL_CIPHER>?, ptr: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge3970(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_pop(sk: CValuesRef<stack_st_SSL_CIPHER>?): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge3971(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_CIPHER_shift(sk: CValuesRef<stack_st_SSL_CIPHER>?): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge3972(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_CIPHER_pop_free(sk: CValuesRef<stack_st_SSL_CIPHER>?, freefunc: sk_SSL_CIPHER_freefunc?): Unit {
    memScoped {
        return kniBridge3973(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_SSL_CIPHER_insert(sk: CValuesRef<stack_st_SSL_CIPHER>?, ptr: CValuesRef<SSL_CIPHER>?, idx: Int): Int {
    memScoped {
        return kniBridge3974(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_SSL_CIPHER_set(sk: CValuesRef<stack_st_SSL_CIPHER>?, idx: Int, ptr: CValuesRef<SSL_CIPHER>?): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge3975(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_CIPHER_find(sk: CValuesRef<stack_st_SSL_CIPHER>?, ptr: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge3976(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_find_ex(sk: CValuesRef<stack_st_SSL_CIPHER>?, ptr: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge3977(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_sort(sk: CValuesRef<stack_st_SSL_CIPHER>?): Unit {
    memScoped {
        return kniBridge3978(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_is_sorted(sk: CValuesRef<stack_st_SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge3979(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_CIPHER_dup(sk: CValuesRef<stack_st_SSL_CIPHER>?): CPointer<stack_st_SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_CIPHER>(kniBridge3980(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_CIPHER_deep_copy(sk: CValuesRef<stack_st_SSL_CIPHER>?, copyfunc: sk_SSL_CIPHER_copyfunc?, freefunc: sk_SSL_CIPHER_freefunc?): CPointer<stack_st_SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_CIPHER>(kniBridge3981(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_SSL_CIPHER_set_cmp_func(sk: CValuesRef<stack_st_SSL_CIPHER>?, compare: sk_SSL_CIPHER_compfunc?): sk_SSL_CIPHER_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<SSL_CIPHER>>?, CPointer<CPointerVar<SSL_CIPHER>>?) -> Int>>(kniBridge3982(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun sk_SSL_COMP_num(sk: CValuesRef<stack_st_SSL_COMP>?): Int {
    memScoped {
        return kniBridge3983(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_value(sk: CValuesRef<stack_st_SSL_COMP>?, idx: Int): CPointer<SSL_COMP>? {
    memScoped {
        return interpretCPointer<SSL_COMP>(kniBridge3984(sk?.getPointer(memScope).rawValue, idx))
    }
}

fun sk_SSL_COMP_new(compare: sk_SSL_COMP_compfunc?): CPointer<stack_st_SSL_COMP>? {
    return interpretCPointer<stack_st_SSL_COMP>(kniBridge3985(compare.rawValue))
}

fun sk_SSL_COMP_new_null(): CPointer<stack_st_SSL_COMP>? {
    return interpretCPointer<stack_st_SSL_COMP>(kniBridge3986())
}

fun sk_SSL_COMP_free(sk: CValuesRef<stack_st_SSL_COMP>?): Unit {
    memScoped {
        return kniBridge3987(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_zero(sk: CValuesRef<stack_st_SSL_COMP>?): Unit {
    memScoped {
        return kniBridge3988(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_delete(sk: CValuesRef<stack_st_SSL_COMP>?, i: Int): CPointer<SSL_COMP>? {
    memScoped {
        return interpretCPointer<SSL_COMP>(kniBridge3989(sk?.getPointer(memScope).rawValue, i))
    }
}

fun sk_SSL_COMP_delete_ptr(sk: CValuesRef<stack_st_SSL_COMP>?, ptr: CValuesRef<SSL_COMP>?): CPointer<SSL_COMP>? {
    memScoped {
        return interpretCPointer<SSL_COMP>(kniBridge3990(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_COMP_push(sk: CValuesRef<stack_st_SSL_COMP>?, ptr: CValuesRef<SSL_COMP>?): Int {
    memScoped {
        return kniBridge3991(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_unshift(sk: CValuesRef<stack_st_SSL_COMP>?, ptr: CValuesRef<SSL_COMP>?): Int {
    memScoped {
        return kniBridge3992(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_pop(sk: CValuesRef<stack_st_SSL_COMP>?): CPointer<SSL_COMP>? {
    memScoped {
        return interpretCPointer<SSL_COMP>(kniBridge3993(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_COMP_shift(sk: CValuesRef<stack_st_SSL_COMP>?): CPointer<SSL_COMP>? {
    memScoped {
        return interpretCPointer<SSL_COMP>(kniBridge3994(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_COMP_pop_free(sk: CValuesRef<stack_st_SSL_COMP>?, freefunc: sk_SSL_COMP_freefunc?): Unit {
    memScoped {
        return kniBridge3995(sk?.getPointer(memScope).rawValue, freefunc.rawValue)
    }
}

fun sk_SSL_COMP_insert(sk: CValuesRef<stack_st_SSL_COMP>?, ptr: CValuesRef<SSL_COMP>?, idx: Int): Int {
    memScoped {
        return kniBridge3996(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue, idx)
    }
}

fun sk_SSL_COMP_set(sk: CValuesRef<stack_st_SSL_COMP>?, idx: Int, ptr: CValuesRef<SSL_COMP>?): CPointer<SSL_COMP>? {
    memScoped {
        return interpretCPointer<SSL_COMP>(kniBridge3997(sk?.getPointer(memScope).rawValue, idx, ptr?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_COMP_find(sk: CValuesRef<stack_st_SSL_COMP>?, ptr: CValuesRef<SSL_COMP>?): Int {
    memScoped {
        return kniBridge3998(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_find_ex(sk: CValuesRef<stack_st_SSL_COMP>?, ptr: CValuesRef<SSL_COMP>?): Int {
    memScoped {
        return kniBridge3999(sk?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_sort(sk: CValuesRef<stack_st_SSL_COMP>?): Unit {
    memScoped {
        return kniBridge4000(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_is_sorted(sk: CValuesRef<stack_st_SSL_COMP>?): Int {
    memScoped {
        return kniBridge4001(sk?.getPointer(memScope).rawValue)
    }
}

fun sk_SSL_COMP_dup(sk: CValuesRef<stack_st_SSL_COMP>?): CPointer<stack_st_SSL_COMP>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_COMP>(kniBridge4002(sk?.getPointer(memScope).rawValue))
    }
}

fun sk_SSL_COMP_deep_copy(sk: CValuesRef<stack_st_SSL_COMP>?, copyfunc: sk_SSL_COMP_copyfunc?, freefunc: sk_SSL_COMP_freefunc?): CPointer<stack_st_SSL_COMP>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_COMP>(kniBridge4003(sk?.getPointer(memScope).rawValue, copyfunc.rawValue, freefunc.rawValue))
    }
}

fun sk_SSL_COMP_set_cmp_func(sk: CValuesRef<stack_st_SSL_COMP>?, compare: sk_SSL_COMP_compfunc?): sk_SSL_COMP_compfunc? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<CPointerVar<SSL_COMP>>?, CPointer<CPointerVar<SSL_COMP>>?) -> Int>>(kniBridge4004(sk?.getPointer(memScope).rawValue, compare.rawValue))
    }
}

fun SSL_set_debug(s: CValuesRef<SSL>?, debug: Int): Unit {
    memScoped {
        return kniBridge4005(s?.getPointer(memScope).rawValue, debug)
    }
}

fun SSL_in_init(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4006(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_in_before(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4007(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_is_init_finished(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4008(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_finished(s: CValuesRef<SSL>?, buf: CValuesRef<*>?, count: size_t): size_t {
    memScoped {
        return kniBridge4009(s?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, count)
    }
}

fun SSL_get_peer_finished(s: CValuesRef<SSL>?, buf: CValuesRef<*>?, count: size_t): size_t {
    memScoped {
        return kniBridge4010(s?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, count)
    }
}

fun PEM_read_bio_SSL_SESSION(bp: CValuesRef<BIO>?, x: CValuesRef<CPointerVar<SSL_SESSION>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<SSL_SESSION>? {
    memScoped {
        return interpretCPointer<SSL_SESSION>(kniBridge4011(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_read_SSL_SESSION(fp: CValuesRef<FILE>?, x: CValuesRef<CPointerVar<SSL_SESSION>>?, cb: CPointer<pem_password_cb>?, u: CValuesRef<*>?): CPointer<SSL_SESSION>? {
    memScoped {
        return interpretCPointer<SSL_SESSION>(kniBridge4012(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue, cb.rawValue, u?.getPointer(memScope).rawValue))
    }
}

fun PEM_write_bio_SSL_SESSION(bp: CValuesRef<BIO>?, x: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4013(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun PEM_write_SSL_SESSION(fp: CValuesRef<FILE>?, x: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4014(fp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun BIO_f_ssl(): CPointer<BIO_METHOD>? {
    return interpretCPointer<BIO_METHOD>(kniBridge4015())
}

fun BIO_new_ssl(ctx: CValuesRef<SSL_CTX>?, client: Int): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge4016(ctx?.getPointer(memScope).rawValue, client))
    }
}

fun BIO_new_ssl_connect(ctx: CValuesRef<SSL_CTX>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge4017(ctx?.getPointer(memScope).rawValue))
    }
}

fun BIO_new_buffer_ssl_connect(ctx: CValuesRef<SSL_CTX>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge4018(ctx?.getPointer(memScope).rawValue))
    }
}

fun BIO_ssl_copy_session_id(to: CValuesRef<BIO>?, from: CValuesRef<BIO>?): Int {
    memScoped {
        return kniBridge4019(to?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue)
    }
}

fun BIO_ssl_shutdown(ssl_bio: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge4020(ssl_bio?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_cipher_list(arg0: CValuesRef<SSL_CTX>?, str: String?): Int {
    memScoped {
        return kniBridge4021(arg0?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_new(meth: CValuesRef<SSL_METHOD>?): CPointer<SSL_CTX>? {
    memScoped {
        return interpretCPointer<SSL_CTX>(kniBridge4022(meth?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_up_ref(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4023(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_free(arg0: CValuesRef<SSL_CTX>?): Unit {
    memScoped {
        return kniBridge4024(arg0?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_timeout(ctx: CValuesRef<SSL_CTX>?, t: Long): Long {
    memScoped {
        return kniBridge4025(ctx?.getPointer(memScope).rawValue, t)
    }
}

fun SSL_CTX_get_timeout(ctx: CValuesRef<SSL_CTX>?): Long {
    memScoped {
        return kniBridge4026(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get_cert_store(arg0: CValuesRef<SSL_CTX>?): CPointer<X509_STORE>? {
    memScoped {
        return interpretCPointer<X509_STORE>(kniBridge4027(arg0?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_cert_store(arg0: CValuesRef<SSL_CTX>?, arg1: CValuesRef<X509_STORE>?): Unit {
    memScoped {
        return kniBridge4028(arg0?.getPointer(memScope).rawValue, arg1?.getPointer(memScope).rawValue)
    }
}

fun SSL_want(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4029(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_clear(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4030(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_flush_sessions(ctx: CValuesRef<SSL_CTX>?, tm: Long): Unit {
    memScoped {
        return kniBridge4031(ctx?.getPointer(memScope).rawValue, tm)
    }
}

fun SSL_get_current_cipher(s: CValuesRef<SSL>?): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge4032(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CIPHER_get_bits(c: CValuesRef<SSL_CIPHER>?, alg_bits: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge4033(c?.getPointer(memScope).rawValue, alg_bits?.getPointer(memScope).rawValue)
    }
}

fun SSL_CIPHER_get_version(c: CValuesRef<SSL_CIPHER>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4034(c?.getPointer(memScope).rawValue))
    }
}

fun SSL_CIPHER_get_name(c: CValuesRef<SSL_CIPHER>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4035(c?.getPointer(memScope).rawValue))
    }
}

fun SSL_CIPHER_get_id(c: CValuesRef<SSL_CIPHER>?): uint32_t {
    memScoped {
        return kniBridge4036(c?.getPointer(memScope).rawValue)
    }
}

fun SSL_CIPHER_get_kx_nid(c: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge4037(c?.getPointer(memScope).rawValue)
    }
}

fun SSL_CIPHER_get_auth_nid(c: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge4038(c?.getPointer(memScope).rawValue)
    }
}

fun SSL_CIPHER_is_aead(c: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge4039(c?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_fd(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4040(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_rfd(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4041(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_wfd(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4042(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_cipher_list(s: CValuesRef<SSL>?, n: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4043(s?.getPointer(memScope).rawValue, n))
    }
}

fun SSL_get_shared_ciphers(s: CValuesRef<SSL>?, buf: CValuesRef<ByteVar>?, len: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4044(s?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len))
    }
}

fun SSL_get_read_ahead(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4045(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_pending(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4046(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_has_pending(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4047(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_fd(s: CValuesRef<SSL>?, fd: Int): Int {
    memScoped {
        return kniBridge4048(s?.getPointer(memScope).rawValue, fd)
    }
}

fun SSL_set_rfd(s: CValuesRef<SSL>?, fd: Int): Int {
    memScoped {
        return kniBridge4049(s?.getPointer(memScope).rawValue, fd)
    }
}

fun SSL_set_wfd(s: CValuesRef<SSL>?, fd: Int): Int {
    memScoped {
        return kniBridge4050(s?.getPointer(memScope).rawValue, fd)
    }
}

fun SSL_set0_rbio(s: CValuesRef<SSL>?, rbio: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge4051(s?.getPointer(memScope).rawValue, rbio?.getPointer(memScope).rawValue)
    }
}

fun SSL_set0_wbio(s: CValuesRef<SSL>?, wbio: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge4052(s?.getPointer(memScope).rawValue, wbio?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_bio(s: CValuesRef<SSL>?, rbio: CValuesRef<BIO>?, wbio: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge4053(s?.getPointer(memScope).rawValue, rbio?.getPointer(memScope).rawValue, wbio?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_rbio(s: CValuesRef<SSL>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge4054(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_wbio(s: CValuesRef<SSL>?): CPointer<BIO>? {
    memScoped {
        return interpretCPointer<BIO>(kniBridge4055(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_cipher_list(s: CValuesRef<SSL>?, str: String?): Int {
    memScoped {
        return kniBridge4056(s?.getPointer(memScope).rawValue, str?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_read_ahead(s: CValuesRef<SSL>?, yes: Int): Unit {
    memScoped {
        return kniBridge4057(s?.getPointer(memScope).rawValue, yes)
    }
}

fun SSL_get_verify_mode(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4058(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_verify_depth(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4059(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_verify_callback(s: CValuesRef<SSL>?): SSL_verify_cb? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge4060(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_verify(s: CValuesRef<SSL>?, mode: Int, callback: SSL_verify_cb?): Unit {
    memScoped {
        return kniBridge4061(s?.getPointer(memScope).rawValue, mode, callback.rawValue)
    }
}

fun SSL_set_verify_depth(s: CValuesRef<SSL>?, depth: Int): Unit {
    memScoped {
        return kniBridge4062(s?.getPointer(memScope).rawValue, depth)
    }
}

fun SSL_set_cert_cb(s: CValuesRef<SSL>?, cb: CPointer<CFunction<(CPointer<SSL>?, COpaquePointer?) -> Int>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4063(s?.getPointer(memScope).rawValue, cb.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_use_RSAPrivateKey(ssl: CValuesRef<SSL>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge4064(ssl?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun SSL_use_RSAPrivateKey_ASN1(ssl: CValuesRef<SSL>?, d: CValuesRef<UByteVar>?, len: Long): Int {
    memScoped {
        return kniBridge4065(ssl?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, len)
    }
}

fun SSL_use_PrivateKey(ssl: CValuesRef<SSL>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge4066(ssl?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun SSL_use_PrivateKey_ASN1(pk: Int, ssl: CValuesRef<SSL>?, d: CValuesRef<UByteVar>?, len: Long): Int {
    memScoped {
        return kniBridge4067(pk, ssl?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, len)
    }
}

fun SSL_use_certificate(ssl: CValuesRef<SSL>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge4068(ssl?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun SSL_use_certificate_ASN1(ssl: CValuesRef<SSL>?, d: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge4069(ssl?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, len)
    }
}

fun SSL_CTX_use_serverinfo(ctx: CValuesRef<SSL_CTX>?, serverinfo: CValuesRef<UByteVar>?, serverinfo_length: size_t): Int {
    memScoped {
        return kniBridge4070(ctx?.getPointer(memScope).rawValue, serverinfo?.getPointer(memScope).rawValue, serverinfo_length)
    }
}

fun SSL_CTX_use_serverinfo_file(ctx: CValuesRef<SSL_CTX>?, file: String?): Int {
    memScoped {
        return kniBridge4071(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_use_RSAPrivateKey_file(ssl: CValuesRef<SSL>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge4072(ssl?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun SSL_use_PrivateKey_file(ssl: CValuesRef<SSL>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge4073(ssl?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun SSL_use_certificate_file(ssl: CValuesRef<SSL>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge4074(ssl?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun SSL_CTX_use_RSAPrivateKey_file(ctx: CValuesRef<SSL_CTX>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge4075(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun SSL_CTX_use_PrivateKey_file(ctx: CValuesRef<SSL_CTX>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge4076(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun SSL_CTX_use_certificate_file(ctx: CValuesRef<SSL_CTX>?, file: String?, type: Int): Int {
    memScoped {
        return kniBridge4077(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, type)
    }
}

fun SSL_CTX_use_certificate_chain_file(ctx: CValuesRef<SSL_CTX>?, file: String?): Int {
    memScoped {
        return kniBridge4078(ctx?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_use_certificate_chain_file(ssl: CValuesRef<SSL>?, file: String?): Int {
    memScoped {
        return kniBridge4079(ssl?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_load_client_CA_file(file: String?): CPointer<stack_st_X509_NAME>? {
    memScoped {
        return interpretCPointer<stack_st_X509_NAME>(kniBridge4080(file?.cstr?.getPointer(memScope).rawValue))
    }
}

fun SSL_add_file_cert_subjects_to_stack(stackCAs: CValuesRef<stack_st_X509_NAME>?, file: String?): Int {
    memScoped {
        return kniBridge4081(stackCAs?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_add_dir_cert_subjects_to_stack(stackCAs: CValuesRef<stack_st_X509_NAME>?, dir: String?): Int {
    memScoped {
        return kniBridge4082(stackCAs?.getPointer(memScope).rawValue, dir?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_state_string(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4083(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_rstate_string(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4084(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_state_string_long(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4085(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_rstate_string_long(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4086(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_SESSION_get_time(s: CValuesRef<SSL_SESSION>?): Long {
    memScoped {
        return kniBridge4087(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_set_time(s: CValuesRef<SSL_SESSION>?, t: Long): Long {
    memScoped {
        return kniBridge4088(s?.getPointer(memScope).rawValue, t)
    }
}

fun SSL_SESSION_get_timeout(s: CValuesRef<SSL_SESSION>?): Long {
    memScoped {
        return kniBridge4089(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_set_timeout(s: CValuesRef<SSL_SESSION>?, t: Long): Long {
    memScoped {
        return kniBridge4090(s?.getPointer(memScope).rawValue, t)
    }
}

fun SSL_SESSION_get_protocol_version(s: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4091(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_get0_hostname(s: CValuesRef<SSL_SESSION>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4092(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_SESSION_get0_cipher(s: CValuesRef<SSL_SESSION>?): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge4093(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_SESSION_has_ticket(s: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4094(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_get_ticket_lifetime_hint(s: CValuesRef<SSL_SESSION>?): ULong {
    memScoped {
        return kniBridge4095(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_get0_ticket(s: CValuesRef<SSL_SESSION>?, tick: CValuesRef<CPointerVar<UByteVar>>?, len: CValuesRef<size_tVar>?): Unit {
    memScoped {
        return kniBridge4096(s?.getPointer(memScope).rawValue, tick?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun SSL_copy_session_id(to: CValuesRef<SSL>?, from: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4097(to?.getPointer(memScope).rawValue, from?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_get0_peer(s: CValuesRef<SSL_SESSION>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge4098(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_SESSION_set1_id_context(s: CValuesRef<SSL_SESSION>?, sid_ctx: CValuesRef<UByteVar>?, sid_ctx_len: UInt): Int {
    memScoped {
        return kniBridge4099(s?.getPointer(memScope).rawValue, sid_ctx?.getPointer(memScope).rawValue, sid_ctx_len)
    }
}

fun SSL_SESSION_set1_id(s: CValuesRef<SSL_SESSION>?, sid: CValuesRef<UByteVar>?, sid_len: UInt): Int {
    memScoped {
        return kniBridge4100(s?.getPointer(memScope).rawValue, sid?.getPointer(memScope).rawValue, sid_len)
    }
}

fun SSL_SESSION_new(): CPointer<SSL_SESSION>? {
    return interpretCPointer<SSL_SESSION>(kniBridge4101())
}

fun SSL_SESSION_get_id(s: CValuesRef<SSL_SESSION>?, len: CValuesRef<UIntVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge4102(s?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue))
    }
}

fun SSL_SESSION_get0_id_context(s: CValuesRef<SSL_SESSION>?, len: CValuesRef<UIntVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge4103(s?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue))
    }
}

fun SSL_SESSION_get_compress_id(s: CValuesRef<SSL_SESSION>?): UInt {
    memScoped {
        return kniBridge4104(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_print_fp(fp: CValuesRef<FILE>?, ses: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4105(fp?.getPointer(memScope).rawValue, ses?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_print(fp: CValuesRef<BIO>?, ses: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4106(fp?.getPointer(memScope).rawValue, ses?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_print_keylog(bp: CValuesRef<BIO>?, x: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4107(bp?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_up_ref(ses: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4108(ses?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_free(ses: CValuesRef<SSL_SESSION>?): Unit {
    memScoped {
        return kniBridge4109(ses?.getPointer(memScope).rawValue)
    }
}

fun i2d_SSL_SESSION(`in`: CValuesRef<SSL_SESSION>?, pp: CValuesRef<CPointerVar<UByteVar>>?): Int {
    memScoped {
        return kniBridge4110(`in`?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_session(to: CValuesRef<SSL>?, session: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4111(to?.getPointer(memScope).rawValue, session?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_add_session(s: CValuesRef<SSL_CTX>?, c: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4112(s?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_remove_session(arg0: CValuesRef<SSL_CTX>?, c: CValuesRef<SSL_SESSION>?): Int {
    memScoped {
        return kniBridge4113(arg0?.getPointer(memScope).rawValue, c?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_generate_session_id(arg0: CValuesRef<SSL_CTX>?, arg1: GEN_SESSION_CB?): Int {
    memScoped {
        return kniBridge4114(arg0?.getPointer(memScope).rawValue, arg1.rawValue)
    }
}

fun SSL_set_generate_session_id(arg0: CValuesRef<SSL>?, arg1: GEN_SESSION_CB?): Int {
    memScoped {
        return kniBridge4115(arg0?.getPointer(memScope).rawValue, arg1.rawValue)
    }
}

fun SSL_has_matching_session_id(ssl: CValuesRef<SSL>?, id: CValuesRef<UByteVar>?, id_len: UInt): Int {
    memScoped {
        return kniBridge4116(ssl?.getPointer(memScope).rawValue, id?.getPointer(memScope).rawValue, id_len)
    }
}

fun d2i_SSL_SESSION(a: CValuesRef<CPointerVar<SSL_SESSION>>?, pp: CValuesRef<CPointerVar<UByteVar>>?, length: Long): CPointer<SSL_SESSION>? {
    memScoped {
        return interpretCPointer<SSL_SESSION>(kniBridge4117(a?.getPointer(memScope).rawValue, pp?.getPointer(memScope).rawValue, length))
    }
}

fun SSL_get_peer_certificate(s: CValuesRef<SSL>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge4118(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_peer_cert_chain(s: CValuesRef<SSL>?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge4119(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_get_verify_mode(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4120(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get_verify_depth(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4121(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get_verify_callback(ctx: CValuesRef<SSL_CTX>?): SSL_verify_cb? {
    memScoped {
        return interpretCPointer<CFunction<(Int, CPointer<X509_STORE_CTX>?) -> Int>>(kniBridge4122(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_verify(ctx: CValuesRef<SSL_CTX>?, mode: Int, callback: SSL_verify_cb?): Unit {
    memScoped {
        return kniBridge4123(ctx?.getPointer(memScope).rawValue, mode, callback.rawValue)
    }
}

fun SSL_CTX_set_verify_depth(ctx: CValuesRef<SSL_CTX>?, depth: Int): Unit {
    memScoped {
        return kniBridge4124(ctx?.getPointer(memScope).rawValue, depth)
    }
}

fun SSL_CTX_set_cert_verify_callback(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<X509_STORE_CTX>?, COpaquePointer?) -> Int>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4125(ctx?.getPointer(memScope).rawValue, cb.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_cert_cb(c: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, COpaquePointer?) -> Int>>?, arg: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4126(c?.getPointer(memScope).rawValue, cb.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_use_RSAPrivateKey(ctx: CValuesRef<SSL_CTX>?, rsa: CValuesRef<RSA>?): Int {
    memScoped {
        return kniBridge4127(ctx?.getPointer(memScope).rawValue, rsa?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_use_RSAPrivateKey_ASN1(ctx: CValuesRef<SSL_CTX>?, d: CValuesRef<UByteVar>?, len: Long): Int {
    memScoped {
        return kniBridge4128(ctx?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, len)
    }
}

fun SSL_CTX_use_PrivateKey(ctx: CValuesRef<SSL_CTX>?, pkey: CValuesRef<EVP_PKEY>?): Int {
    memScoped {
        return kniBridge4129(ctx?.getPointer(memScope).rawValue, pkey?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_use_PrivateKey_ASN1(pk: Int, ctx: CValuesRef<SSL_CTX>?, d: CValuesRef<UByteVar>?, len: Long): Int {
    memScoped {
        return kniBridge4130(pk, ctx?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue, len)
    }
}

fun SSL_CTX_use_certificate(ctx: CValuesRef<SSL_CTX>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge4131(ctx?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_use_certificate_ASN1(ctx: CValuesRef<SSL_CTX>?, len: Int, d: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4132(ctx?.getPointer(memScope).rawValue, len, d?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_default_passwd_cb(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<pem_password_cb>?): Unit {
    memScoped {
        return kniBridge4133(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_CTX_set_default_passwd_cb_userdata(ctx: CValuesRef<SSL_CTX>?, u: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4134(ctx?.getPointer(memScope).rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get_default_passwd_cb(ctx: CValuesRef<SSL_CTX>?): CPointer<pem_password_cb>? {
    memScoped {
        return interpretCPointer<pem_password_cb>(kniBridge4135(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_get_default_passwd_cb_userdata(ctx: CValuesRef<SSL_CTX>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4136(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_default_passwd_cb(s: CValuesRef<SSL>?, cb: CPointer<pem_password_cb>?): Unit {
    memScoped {
        return kniBridge4137(s?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_set_default_passwd_cb_userdata(s: CValuesRef<SSL>?, u: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4138(s?.getPointer(memScope).rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_default_passwd_cb(s: CValuesRef<SSL>?): CPointer<pem_password_cb>? {
    memScoped {
        return interpretCPointer<pem_password_cb>(kniBridge4139(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_default_passwd_cb_userdata(s: CValuesRef<SSL>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4140(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_check_private_key(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4141(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_check_private_key(ctx: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4142(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_session_id_context(ctx: CValuesRef<SSL_CTX>?, sid_ctx: CValuesRef<UByteVar>?, sid_ctx_len: UInt): Int {
    memScoped {
        return kniBridge4143(ctx?.getPointer(memScope).rawValue, sid_ctx?.getPointer(memScope).rawValue, sid_ctx_len)
    }
}

fun SSL_new(ctx: CValuesRef<SSL_CTX>?): CPointer<SSL>? {
    memScoped {
        return interpretCPointer<SSL>(kniBridge4144(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_up_ref(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4145(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_is_dtls(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4146(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_session_id_context(ssl: CValuesRef<SSL>?, sid_ctx: CValuesRef<UByteVar>?, sid_ctx_len: UInt): Int {
    memScoped {
        return kniBridge4147(ssl?.getPointer(memScope).rawValue, sid_ctx?.getPointer(memScope).rawValue, sid_ctx_len)
    }
}

fun SSL_CTX_set_purpose(s: CValuesRef<SSL_CTX>?, purpose: Int): Int {
    memScoped {
        return kniBridge4148(s?.getPointer(memScope).rawValue, purpose)
    }
}

fun SSL_set_purpose(s: CValuesRef<SSL>?, purpose: Int): Int {
    memScoped {
        return kniBridge4149(s?.getPointer(memScope).rawValue, purpose)
    }
}

fun SSL_CTX_set_trust(s: CValuesRef<SSL_CTX>?, trust: Int): Int {
    memScoped {
        return kniBridge4150(s?.getPointer(memScope).rawValue, trust)
    }
}

fun SSL_set_trust(s: CValuesRef<SSL>?, trust: Int): Int {
    memScoped {
        return kniBridge4151(s?.getPointer(memScope).rawValue, trust)
    }
}

fun SSL_set1_host(s: CValuesRef<SSL>?, hostname: String?): Int {
    memScoped {
        return kniBridge4152(s?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_add1_host(s: CValuesRef<SSL>?, hostname: String?): Int {
    memScoped {
        return kniBridge4153(s?.getPointer(memScope).rawValue, hostname?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_get0_peername(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4154(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_hostflags(s: CValuesRef<SSL>?, flags: UInt): Unit {
    memScoped {
        return kniBridge4155(s?.getPointer(memScope).rawValue, flags)
    }
}

fun SSL_CTX_dane_enable(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4156(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_dane_mtype_set(ctx: CValuesRef<SSL_CTX>?, md: CValuesRef<EVP_MD>?, mtype: uint8_t, ord: uint8_t): Int {
    memScoped {
        return kniBridge4157(ctx?.getPointer(memScope).rawValue, md?.getPointer(memScope).rawValue, mtype, ord)
    }
}

fun SSL_dane_enable(s: CValuesRef<SSL>?, basedomain: String?): Int {
    memScoped {
        return kniBridge4158(s?.getPointer(memScope).rawValue, basedomain?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_dane_tlsa_add(s: CValuesRef<SSL>?, usage: uint8_t, selector: uint8_t, mtype: uint8_t, data: CValuesRef<UByteVar>?, dlen: size_t): Int {
    memScoped {
        return kniBridge4159(s?.getPointer(memScope).rawValue, usage, selector, mtype, data?.getPointer(memScope).rawValue, dlen)
    }
}

fun SSL_get0_dane_authority(s: CValuesRef<SSL>?, mcert: CValuesRef<CPointerVar<X509>>?, mspki: CValuesRef<CPointerVar<EVP_PKEY>>?): Int {
    memScoped {
        return kniBridge4160(s?.getPointer(memScope).rawValue, mcert?.getPointer(memScope).rawValue, mspki?.getPointer(memScope).rawValue)
    }
}

fun SSL_get0_dane_tlsa(s: CValuesRef<SSL>?, usage: CValuesRef<uint8_tVar>?, selector: CValuesRef<uint8_tVar>?, mtype: CValuesRef<uint8_tVar>?, data: CValuesRef<CPointerVar<UByteVar>>?, dlen: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge4161(s?.getPointer(memScope).rawValue, usage?.getPointer(memScope).rawValue, selector?.getPointer(memScope).rawValue, mtype?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, dlen?.getPointer(memScope).rawValue)
    }
}

fun SSL_get0_dane(ssl: CValuesRef<SSL>?): CPointer<SSL_DANE>? {
    memScoped {
        return interpretCPointer<SSL_DANE>(kniBridge4162(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_dane_set_flags(ctx: CValuesRef<SSL_CTX>?, flags: ULong): ULong {
    memScoped {
        return kniBridge4163(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun SSL_CTX_dane_clear_flags(ctx: CValuesRef<SSL_CTX>?, flags: ULong): ULong {
    memScoped {
        return kniBridge4164(ctx?.getPointer(memScope).rawValue, flags)
    }
}

fun SSL_dane_set_flags(ssl: CValuesRef<SSL>?, flags: ULong): ULong {
    memScoped {
        return kniBridge4165(ssl?.getPointer(memScope).rawValue, flags)
    }
}

fun SSL_dane_clear_flags(ssl: CValuesRef<SSL>?, flags: ULong): ULong {
    memScoped {
        return kniBridge4166(ssl?.getPointer(memScope).rawValue, flags)
    }
}

fun SSL_CTX_set1_param(ctx: CValuesRef<SSL_CTX>?, vpm: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge4167(ctx?.getPointer(memScope).rawValue, vpm?.getPointer(memScope).rawValue)
    }
}

fun SSL_set1_param(ssl: CValuesRef<SSL>?, vpm: CValuesRef<X509_VERIFY_PARAM>?): Int {
    memScoped {
        return kniBridge4168(ssl?.getPointer(memScope).rawValue, vpm?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get0_param(ctx: CValuesRef<SSL_CTX>?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge4169(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_get0_param(ssl: CValuesRef<SSL>?): CPointer<X509_VERIFY_PARAM>? {
    memScoped {
        return interpretCPointer<X509_VERIFY_PARAM>(kniBridge4170(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_srp_username(ctx: CValuesRef<SSL_CTX>?, name: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge4171(ctx?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_srp_password(ctx: CValuesRef<SSL_CTX>?, password: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge4172(ctx?.getPointer(memScope).rawValue, password?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_srp_strength(ctx: CValuesRef<SSL_CTX>?, strength: Int): Int {
    memScoped {
        return kniBridge4173(ctx?.getPointer(memScope).rawValue, strength)
    }
}

fun SSL_CTX_set_srp_client_pwd_callback(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, COpaquePointer?) -> CPointer<ByteVar>?>>?): Int {
    memScoped {
        return kniBridge4174(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_CTX_set_srp_verify_param_callback(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, COpaquePointer?) -> Int>>?): Int {
    memScoped {
        return kniBridge4175(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_CTX_set_srp_username_callback(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<IntVar>?, COpaquePointer?) -> Int>>?): Int {
    memScoped {
        return kniBridge4176(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_CTX_set_srp_cb_arg(ctx: CValuesRef<SSL_CTX>?, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4177(ctx?.getPointer(memScope).rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_srp_server_param(s: CValuesRef<SSL>?, N: CValuesRef<BIGNUM>?, g: CValuesRef<BIGNUM>?, sa: CValuesRef<BIGNUM>?, v: CValuesRef<BIGNUM>?, info: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge4178(s?.getPointer(memScope).rawValue, N?.getPointer(memScope).rawValue, g?.getPointer(memScope).rawValue, sa?.getPointer(memScope).rawValue, v?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_srp_server_param_pw(s: CValuesRef<SSL>?, user: String?, pass: String?, grp: String?): Int {
    memScoped {
        return kniBridge4179(s?.getPointer(memScope).rawValue, user?.cstr?.getPointer(memScope).rawValue, pass?.cstr?.getPointer(memScope).rawValue, grp?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_srp_g(s: CValuesRef<SSL>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge4180(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_srp_N(s: CValuesRef<SSL>?): CPointer<BIGNUM>? {
    memScoped {
        return interpretCPointer<BIGNUM>(kniBridge4181(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_srp_username(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4182(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_srp_userinfo(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4183(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_certs_clear(s: CValuesRef<SSL>?): Unit {
    memScoped {
        return kniBridge4184(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_free(ssl: CValuesRef<SSL>?): Unit {
    memScoped {
        return kniBridge4185(ssl?.getPointer(memScope).rawValue)
    }
}

fun SSL_waiting_for_async(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4186(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_all_async_fds(s: CValuesRef<SSL>?, fds: CValuesRef<IntVar>?, numfds: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge4187(s?.getPointer(memScope).rawValue, fds?.getPointer(memScope).rawValue, numfds?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_changed_async_fds(s: CValuesRef<SSL>?, addfd: CValuesRef<IntVar>?, numaddfds: CValuesRef<size_tVar>?, delfd: CValuesRef<IntVar>?, numdelfds: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge4188(s?.getPointer(memScope).rawValue, addfd?.getPointer(memScope).rawValue, numaddfds?.getPointer(memScope).rawValue, delfd?.getPointer(memScope).rawValue, numdelfds?.getPointer(memScope).rawValue)
    }
}

fun SSL_accept(ssl: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4189(ssl?.getPointer(memScope).rawValue)
    }
}

fun SSL_connect(ssl: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4190(ssl?.getPointer(memScope).rawValue)
    }
}

fun SSL_read(ssl: CValuesRef<SSL>?, buf: CValuesRef<*>?, num: Int): Int {
    memScoped {
        return kniBridge4191(ssl?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, num)
    }
}

fun SSL_peek(ssl: CValuesRef<SSL>?, buf: CValuesRef<*>?, num: Int): Int {
    memScoped {
        return kniBridge4192(ssl?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, num)
    }
}

fun SSL_write(ssl: CValuesRef<SSL>?, buf: CValuesRef<*>?, num: Int): Int {
    memScoped {
        return kniBridge4193(ssl?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, num)
    }
}

fun SSL_ctrl(ssl: CValuesRef<SSL>?, cmd: Int, larg: Long, parg: CValuesRef<*>?): Long {
    memScoped {
        return kniBridge4194(ssl?.getPointer(memScope).rawValue, cmd, larg, parg?.getPointer(memScope).rawValue)
    }
}

fun SSL_callback_ctrl(arg0: CValuesRef<SSL>?, arg1: Int, arg2: CPointer<CFunction<() -> Unit>>?): Long {
    memScoped {
        return kniBridge4195(arg0?.getPointer(memScope).rawValue, arg1, arg2.rawValue)
    }
}

fun SSL_CTX_ctrl(ctx: CValuesRef<SSL_CTX>?, cmd: Int, larg: Long, parg: CValuesRef<*>?): Long {
    memScoped {
        return kniBridge4196(ctx?.getPointer(memScope).rawValue, cmd, larg, parg?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_callback_ctrl(arg0: CValuesRef<SSL_CTX>?, arg1: Int, arg2: CPointer<CFunction<() -> Unit>>?): Long {
    memScoped {
        return kniBridge4197(arg0?.getPointer(memScope).rawValue, arg1, arg2.rawValue)
    }
}

fun SSL_get_error(s: CValuesRef<SSL>?, ret_code: Int): Int {
    memScoped {
        return kniBridge4198(s?.getPointer(memScope).rawValue, ret_code)
    }
}

fun SSL_get_version(s: CValuesRef<SSL>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4199(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_ssl_version(ctx: CValuesRef<SSL_CTX>?, meth: CValuesRef<SSL_METHOD>?): Int {
    memScoped {
        return kniBridge4200(ctx?.getPointer(memScope).rawValue, meth?.getPointer(memScope).rawValue)
    }
}

fun TLS_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4201())
}

fun TLS_server_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4202())
}

fun TLS_client_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4203())
}

fun TLSv1_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4204())
}

fun TLSv1_server_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4205())
}

fun TLSv1_client_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4206())
}

fun TLSv1_1_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4207())
}

fun TLSv1_1_server_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4208())
}

fun TLSv1_1_client_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4209())
}

fun TLSv1_2_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4210())
}

fun TLSv1_2_server_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4211())
}

fun TLSv1_2_client_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4212())
}

fun DTLSv1_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4213())
}

fun DTLSv1_server_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4214())
}

fun DTLSv1_client_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4215())
}

fun DTLSv1_2_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4216())
}

fun DTLSv1_2_server_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4217())
}

fun DTLSv1_2_client_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4218())
}

fun DTLS_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4219())
}

fun DTLS_server_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4220())
}

fun DTLS_client_method(): CPointer<SSL_METHOD>? {
    return interpretCPointer<SSL_METHOD>(kniBridge4221())
}

fun SSL_get_ciphers(s: CValuesRef<SSL>?): CPointer<stack_st_SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_CIPHER>(kniBridge4222(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_get_ciphers(ctx: CValuesRef<SSL_CTX>?): CPointer<stack_st_SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_CIPHER>(kniBridge4223(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_client_ciphers(s: CValuesRef<SSL>?): CPointer<stack_st_SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_CIPHER>(kniBridge4224(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get1_supported_ciphers(s: CValuesRef<SSL>?): CPointer<stack_st_SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_CIPHER>(kniBridge4225(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_do_handshake(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4226(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_renegotiate(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4227(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_renegotiate_abbreviated(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4228(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_renegotiate_pending(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4229(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_shutdown(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4230(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get_ssl_method(ctx: CValuesRef<SSL_CTX>?): CPointer<SSL_METHOD>? {
    memScoped {
        return interpretCPointer<SSL_METHOD>(kniBridge4231(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_ssl_method(s: CValuesRef<SSL>?): CPointer<SSL_METHOD>? {
    memScoped {
        return interpretCPointer<SSL_METHOD>(kniBridge4232(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_ssl_method(s: CValuesRef<SSL>?, method: CValuesRef<SSL_METHOD>?): Int {
    memScoped {
        return kniBridge4233(s?.getPointer(memScope).rawValue, method?.getPointer(memScope).rawValue)
    }
}

fun SSL_alert_type_string_long(value: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge4234(value))
}

fun SSL_alert_type_string(value: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge4235(value))
}

fun SSL_alert_desc_string_long(value: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge4236(value))
}

fun SSL_alert_desc_string(value: Int): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge4237(value))
}

fun SSL_set_client_CA_list(s: CValuesRef<SSL>?, name_list: CValuesRef<stack_st_X509_NAME>?): Unit {
    memScoped {
        return kniBridge4238(s?.getPointer(memScope).rawValue, name_list?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_client_CA_list(ctx: CValuesRef<SSL_CTX>?, name_list: CValuesRef<stack_st_X509_NAME>?): Unit {
    memScoped {
        return kniBridge4239(ctx?.getPointer(memScope).rawValue, name_list?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_client_CA_list(s: CValuesRef<SSL>?): CPointer<stack_st_X509_NAME>? {
    memScoped {
        return interpretCPointer<stack_st_X509_NAME>(kniBridge4240(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_get_client_CA_list(s: CValuesRef<SSL_CTX>?): CPointer<stack_st_X509_NAME>? {
    memScoped {
        return interpretCPointer<stack_st_X509_NAME>(kniBridge4241(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_add_client_CA(ssl: CValuesRef<SSL>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge4242(ssl?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_add_client_CA(ctx: CValuesRef<SSL_CTX>?, x: CValuesRef<X509>?): Int {
    memScoped {
        return kniBridge4243(ctx?.getPointer(memScope).rawValue, x?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_connect_state(s: CValuesRef<SSL>?): Unit {
    memScoped {
        return kniBridge4244(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_accept_state(s: CValuesRef<SSL>?): Unit {
    memScoped {
        return kniBridge4245(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_default_timeout(s: CValuesRef<SSL>?): Long {
    memScoped {
        return kniBridge4246(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CIPHER_description(arg0: CValuesRef<SSL_CIPHER>?, buf: CValuesRef<ByteVar>?, size: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4247(arg0?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, size))
    }
}

fun SSL_dup_CA_list(sk: CValuesRef<stack_st_X509_NAME>?): CPointer<stack_st_X509_NAME>? {
    memScoped {
        return interpretCPointer<stack_st_X509_NAME>(kniBridge4248(sk?.getPointer(memScope).rawValue))
    }
}

fun SSL_dup(ssl: CValuesRef<SSL>?): CPointer<SSL>? {
    memScoped {
        return interpretCPointer<SSL>(kniBridge4249(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_certificate(ssl: CValuesRef<SSL>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge4250(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_privatekey(ssl: CValuesRef<SSL>?): CPointer<evp_pkey_st>? {
    memScoped {
        return interpretCPointer<evp_pkey_st>(kniBridge4251(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_get0_certificate(ctx: CValuesRef<SSL_CTX>?): CPointer<X509>? {
    memScoped {
        return interpretCPointer<X509>(kniBridge4252(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_get0_privatekey(ctx: CValuesRef<SSL_CTX>?): CPointer<EVP_PKEY>? {
    memScoped {
        return interpretCPointer<EVP_PKEY>(kniBridge4253(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_quiet_shutdown(ctx: CValuesRef<SSL_CTX>?, mode: Int): Unit {
    memScoped {
        return kniBridge4254(ctx?.getPointer(memScope).rawValue, mode)
    }
}

fun SSL_CTX_get_quiet_shutdown(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4255(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_quiet_shutdown(ssl: CValuesRef<SSL>?, mode: Int): Unit {
    memScoped {
        return kniBridge4256(ssl?.getPointer(memScope).rawValue, mode)
    }
}

fun SSL_get_quiet_shutdown(ssl: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4257(ssl?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_shutdown(ssl: CValuesRef<SSL>?, mode: Int): Unit {
    memScoped {
        return kniBridge4258(ssl?.getPointer(memScope).rawValue, mode)
    }
}

fun SSL_get_shutdown(ssl: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4259(ssl?.getPointer(memScope).rawValue)
    }
}

fun SSL_version(ssl: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4260(ssl?.getPointer(memScope).rawValue)
    }
}

fun SSL_client_version(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4261(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_default_verify_paths(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4262(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_default_verify_dir(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4263(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_default_verify_file(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4264(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_load_verify_locations(ctx: CValuesRef<SSL_CTX>?, CAfile: String?, CApath: String?): Int {
    memScoped {
        return kniBridge4265(ctx?.getPointer(memScope).rawValue, CAfile?.cstr?.getPointer(memScope).rawValue, CApath?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_session(ssl: CValuesRef<SSL>?): CPointer<SSL_SESSION>? {
    memScoped {
        return interpretCPointer<SSL_SESSION>(kniBridge4266(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_get1_session(ssl: CValuesRef<SSL>?): CPointer<SSL_SESSION>? {
    memScoped {
        return interpretCPointer<SSL_SESSION>(kniBridge4267(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_SSL_CTX(ssl: CValuesRef<SSL>?): CPointer<SSL_CTX>? {
    memScoped {
        return interpretCPointer<SSL_CTX>(kniBridge4268(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_SSL_CTX(ssl: CValuesRef<SSL>?, ctx: CValuesRef<SSL_CTX>?): CPointer<SSL_CTX>? {
    memScoped {
        return interpretCPointer<SSL_CTX>(kniBridge4269(ssl?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_info_callback(ssl: CValuesRef<SSL>?, cb: CPointer<CFunction<(CPointer<SSL>?, Int, Int) -> Unit>>?): Unit {
    memScoped {
        return kniBridge4270(ssl?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_get_info_callback(ssl: CValuesRef<SSL>?): CPointer<CFunction<(CPointer<SSL>?, Int, Int) -> Unit>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<SSL>?, Int, Int) -> Unit>>(kniBridge4271(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_state(ssl: CValuesRef<SSL>?): OSSL_HANDSHAKE_STATE {
    memScoped {
        return OSSL_HANDSHAKE_STATE.byValue(kniBridge4272(ssl?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_verify_result(ssl: CValuesRef<SSL>?, v: Long): Unit {
    memScoped {
        return kniBridge4273(ssl?.getPointer(memScope).rawValue, v)
    }
}

fun SSL_get_verify_result(ssl: CValuesRef<SSL>?): Long {
    memScoped {
        return kniBridge4274(ssl?.getPointer(memScope).rawValue)
    }
}

fun SSL_get0_verified_chain(s: CValuesRef<SSL>?): CPointer<stack_st_X509>? {
    memScoped {
        return interpretCPointer<stack_st_X509>(kniBridge4275(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_client_random(ssl: CValuesRef<SSL>?, out: CValuesRef<UByteVar>?, outlen: size_t): size_t {
    memScoped {
        return kniBridge4276(ssl?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outlen)
    }
}

fun SSL_get_server_random(ssl: CValuesRef<SSL>?, out: CValuesRef<UByteVar>?, outlen: size_t): size_t {
    memScoped {
        return kniBridge4277(ssl?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outlen)
    }
}

fun SSL_SESSION_get_master_key(ssl: CValuesRef<SSL_SESSION>?, out: CValuesRef<UByteVar>?, outlen: size_t): size_t {
    memScoped {
        return kniBridge4278(ssl?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, outlen)
    }
}

fun SSL_set_ex_data(ssl: CValuesRef<SSL>?, idx: Int, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4279(ssl?.getPointer(memScope).rawValue, idx, data?.getPointer(memScope).rawValue)
    }
}

fun SSL_get_ex_data(ssl: CValuesRef<SSL>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4280(ssl?.getPointer(memScope).rawValue, idx))
    }
}

fun SSL_SESSION_set_ex_data(ss: CValuesRef<SSL_SESSION>?, idx: Int, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4281(ss?.getPointer(memScope).rawValue, idx, data?.getPointer(memScope).rawValue)
    }
}

fun SSL_SESSION_get_ex_data(ss: CValuesRef<SSL_SESSION>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4282(ss?.getPointer(memScope).rawValue, idx))
    }
}

fun SSL_CTX_set_ex_data(ssl: CValuesRef<SSL_CTX>?, idx: Int, data: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4283(ssl?.getPointer(memScope).rawValue, idx, data?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get_ex_data(ssl: CValuesRef<SSL_CTX>?, idx: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4284(ssl?.getPointer(memScope).rawValue, idx))
    }
}

fun SSL_get_ex_data_X509_STORE_CTX_idx(): Int {
    return kniBridge4285()
}

fun SSL_CTX_set_default_read_buffer_len(ctx: CValuesRef<SSL_CTX>?, len: size_t): Unit {
    memScoped {
        return kniBridge4286(ctx?.getPointer(memScope).rawValue, len)
    }
}

fun SSL_set_default_read_buffer_len(s: CValuesRef<SSL>?, len: size_t): Unit {
    memScoped {
        return kniBridge4287(s?.getPointer(memScope).rawValue, len)
    }
}

fun SSL_CTX_set_tmp_dh_callback(ctx: CValuesRef<SSL_CTX>?, dh: CPointer<CFunction<(CPointer<SSL>?, Int, Int) -> CPointer<DH>?>>?): Unit {
    memScoped {
        return kniBridge4288(ctx?.getPointer(memScope).rawValue, dh.rawValue)
    }
}

fun SSL_set_tmp_dh_callback(ssl: CValuesRef<SSL>?, dh: CPointer<CFunction<(CPointer<SSL>?, Int, Int) -> CPointer<DH>?>>?): Unit {
    memScoped {
        return kniBridge4289(ssl?.getPointer(memScope).rawValue, dh.rawValue)
    }
}

fun SSL_get_current_compression(s: CValuesRef<SSL>?): CPointer<COMP_METHOD>? {
    memScoped {
        return interpretCPointer<COMP_METHOD>(kniBridge4290(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_get_current_expansion(s: CValuesRef<SSL>?): CPointer<COMP_METHOD>? {
    memScoped {
        return interpretCPointer<COMP_METHOD>(kniBridge4291(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_COMP_get_name(comp: CValuesRef<COMP_METHOD>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4292(comp?.getPointer(memScope).rawValue))
    }
}

fun SSL_COMP_get0_name(comp: CValuesRef<SSL_COMP>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4293(comp?.getPointer(memScope).rawValue))
    }
}

fun SSL_COMP_get_id(comp: CValuesRef<SSL_COMP>?): Int {
    memScoped {
        return kniBridge4294(comp?.getPointer(memScope).rawValue)
    }
}

fun SSL_COMP_get_compression_methods(): CPointer<stack_st_SSL_COMP>? {
    return interpretCPointer<stack_st_SSL_COMP>(kniBridge4295())
}

fun SSL_COMP_set0_compression_methods(meths: CValuesRef<stack_st_SSL_COMP>?): CPointer<stack_st_SSL_COMP>? {
    memScoped {
        return interpretCPointer<stack_st_SSL_COMP>(kniBridge4296(meths?.getPointer(memScope).rawValue))
    }
}

fun SSL_COMP_add_compression_method(id: Int, cm: CValuesRef<COMP_METHOD>?): Int {
    memScoped {
        return kniBridge4297(id, cm?.getPointer(memScope).rawValue)
    }
}

fun SSL_CIPHER_find(ssl: CValuesRef<SSL>?, ptr: CValuesRef<UByteVar>?): CPointer<SSL_CIPHER>? {
    memScoped {
        return interpretCPointer<SSL_CIPHER>(kniBridge4298(ssl?.getPointer(memScope).rawValue, ptr?.getPointer(memScope).rawValue))
    }
}

fun SSL_CIPHER_get_cipher_nid(c: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge4299(c?.getPointer(memScope).rawValue)
    }
}

fun SSL_CIPHER_get_digest_nid(c: CValuesRef<SSL_CIPHER>?): Int {
    memScoped {
        return kniBridge4300(c?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_session_ticket_ext(s: CValuesRef<SSL>?, ext_data: CValuesRef<*>?, ext_len: Int): Int {
    memScoped {
        return kniBridge4301(s?.getPointer(memScope).rawValue, ext_data?.getPointer(memScope).rawValue, ext_len)
    }
}

fun SSL_set_session_ticket_ext_cb(s: CValuesRef<SSL>?, cb: tls_session_ticket_ext_cb_fn?, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4302(s?.getPointer(memScope).rawValue, cb.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_session_secret_cb(s: CValuesRef<SSL>?, tls_session_secret_cb: tls_session_secret_cb_fn?, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4303(s?.getPointer(memScope).rawValue, tls_session_secret_cb.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_not_resumable_session_callback(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, Int) -> Int>>?): Unit {
    memScoped {
        return kniBridge4304(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_set_not_resumable_session_callback(ssl: CValuesRef<SSL>?, cb: CPointer<CFunction<(CPointer<SSL>?, Int) -> Int>>?): Unit {
    memScoped {
        return kniBridge4305(ssl?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_session_reused(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4306(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_is_server(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4307(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CONF_CTX_new(): CPointer<SSL_CONF_CTX>? {
    return interpretCPointer<SSL_CONF_CTX>(kniBridge4308())
}

fun SSL_CONF_CTX_finish(cctx: CValuesRef<SSL_CONF_CTX>?): Int {
    memScoped {
        return kniBridge4309(cctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CONF_CTX_free(cctx: CValuesRef<SSL_CONF_CTX>?): Unit {
    memScoped {
        return kniBridge4310(cctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CONF_CTX_set_flags(cctx: CValuesRef<SSL_CONF_CTX>?, flags: UInt): UInt {
    memScoped {
        return kniBridge4311(cctx?.getPointer(memScope).rawValue, flags)
    }
}

fun SSL_CONF_CTX_clear_flags(cctx: CValuesRef<SSL_CONF_CTX>?, flags: UInt): UInt {
    memScoped {
        return kniBridge4312(cctx?.getPointer(memScope).rawValue, flags)
    }
}

fun SSL_CONF_CTX_set1_prefix(cctx: CValuesRef<SSL_CONF_CTX>?, pre: String?): Int {
    memScoped {
        return kniBridge4313(cctx?.getPointer(memScope).rawValue, pre?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_CONF_CTX_set_ssl(cctx: CValuesRef<SSL_CONF_CTX>?, ssl: CValuesRef<SSL>?): Unit {
    memScoped {
        return kniBridge4314(cctx?.getPointer(memScope).rawValue, ssl?.getPointer(memScope).rawValue)
    }
}

fun SSL_CONF_CTX_set_ssl_ctx(cctx: CValuesRef<SSL_CONF_CTX>?, ctx: CValuesRef<SSL_CTX>?): Unit {
    memScoped {
        return kniBridge4315(cctx?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CONF_cmd(cctx: CValuesRef<SSL_CONF_CTX>?, cmd: String?, value: String?): Int {
    memScoped {
        return kniBridge4316(cctx?.getPointer(memScope).rawValue, cmd?.cstr?.getPointer(memScope).rawValue, value?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_CONF_cmd_argv(cctx: CValuesRef<SSL_CONF_CTX>?, pargc: CValuesRef<IntVar>?, pargv: CValuesRef<CPointerVar<CPointerVar<ByteVar>>>?): Int {
    memScoped {
        return kniBridge4317(cctx?.getPointer(memScope).rawValue, pargc?.getPointer(memScope).rawValue, pargv?.getPointer(memScope).rawValue)
    }
}

fun SSL_CONF_cmd_value_type(cctx: CValuesRef<SSL_CONF_CTX>?, cmd: String?): Int {
    memScoped {
        return kniBridge4318(cctx?.getPointer(memScope).rawValue, cmd?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_add_ssl_module(): Unit {
    return kniBridge4319()
}

fun SSL_config(s: CValuesRef<SSL>?, name: String?): Int {
    memScoped {
        return kniBridge4320(s?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_config(ctx: CValuesRef<SSL_CTX>?, name: String?): Int {
    memScoped {
        return kniBridge4321(ctx?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue)
    }
}

fun DTLSv1_listen(s: CValuesRef<SSL>?, client: CValuesRef<BIO_ADDR>?): Int {
    memScoped {
        return kniBridge4322(s?.getPointer(memScope).rawValue, client?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_ct_validation_callback(s: CValuesRef<SSL>?, callback: ssl_ct_validation_cb?, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4323(s?.getPointer(memScope).rawValue, callback.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_ct_validation_callback(ctx: CValuesRef<SSL_CTX>?, callback: ssl_ct_validation_cb?, arg: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4324(ctx?.getPointer(memScope).rawValue, callback.rawValue, arg?.getPointer(memScope).rawValue)
    }
}

fun SSL_enable_ct(s: CValuesRef<SSL>?, validation_mode: Int): Int {
    memScoped {
        return kniBridge4325(s?.getPointer(memScope).rawValue, validation_mode)
    }
}

fun SSL_CTX_enable_ct(ctx: CValuesRef<SSL_CTX>?, validation_mode: Int): Int {
    memScoped {
        return kniBridge4326(ctx?.getPointer(memScope).rawValue, validation_mode)
    }
}

fun SSL_ct_is_enabled(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4327(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_ct_is_enabled(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4328(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_get0_peer_scts(s: CValuesRef<SSL>?): CPointer<stack_st_SCT>? {
    memScoped {
        return interpretCPointer<stack_st_SCT>(kniBridge4329(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_default_ctlog_list_file(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4330(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_ctlog_list_file(ctx: CValuesRef<SSL_CTX>?, path: String?): Int {
    memScoped {
        return kniBridge4331(ctx?.getPointer(memScope).rawValue, path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set0_ctlog_store(ctx: CValuesRef<SSL_CTX>?, logs: CValuesRef<CTLOG_STORE>?): Unit {
    memScoped {
        return kniBridge4332(ctx?.getPointer(memScope).rawValue, logs?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get0_ctlog_store(ctx: CValuesRef<SSL_CTX>?): CPointer<CTLOG_STORE>? {
    memScoped {
        return interpretCPointer<CTLOG_STORE>(kniBridge4333(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_set_security_level(s: CValuesRef<SSL>?, level: Int): Unit {
    memScoped {
        return kniBridge4334(s?.getPointer(memScope).rawValue, level)
    }
}

fun SSL_get_security_level(s: CValuesRef<SSL>?): Int {
    memScoped {
        return kniBridge4335(s?.getPointer(memScope).rawValue)
    }
}

fun SSL_set_security_callback(s: CValuesRef<SSL>?, cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<SSL_CTX>?, Int, Int, Int, COpaquePointer?, COpaquePointer?) -> Int>>?): Unit {
    memScoped {
        return kniBridge4336(s?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_get_security_callback(s: CValuesRef<SSL>?): CPointer<CFunction<(CPointer<SSL>?, CPointer<SSL_CTX>?, Int, Int, Int, COpaquePointer?, COpaquePointer?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<SSL>?, CPointer<SSL_CTX>?, Int, Int, Int, COpaquePointer?, COpaquePointer?) -> Int>>(kniBridge4337(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_set0_security_ex_data(s: CValuesRef<SSL>?, ex: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4338(s?.getPointer(memScope).rawValue, ex?.getPointer(memScope).rawValue)
    }
}

fun SSL_get0_security_ex_data(s: CValuesRef<SSL>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4339(s?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set_security_level(ctx: CValuesRef<SSL_CTX>?, level: Int): Unit {
    memScoped {
        return kniBridge4340(ctx?.getPointer(memScope).rawValue, level)
    }
}

fun SSL_CTX_get_security_level(ctx: CValuesRef<SSL_CTX>?): Int {
    memScoped {
        return kniBridge4341(ctx?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_set_security_callback(ctx: CValuesRef<SSL_CTX>?, cb: CPointer<CFunction<(CPointer<SSL>?, CPointer<SSL_CTX>?, Int, Int, Int, COpaquePointer?, COpaquePointer?) -> Int>>?): Unit {
    memScoped {
        return kniBridge4342(ctx?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun SSL_CTX_get_security_callback(ctx: CValuesRef<SSL_CTX>?): CPointer<CFunction<(CPointer<SSL>?, CPointer<SSL_CTX>?, Int, Int, Int, COpaquePointer?, COpaquePointer?) -> Int>>? {
    memScoped {
        return interpretCPointer<CFunction<(CPointer<SSL>?, CPointer<SSL_CTX>?, Int, Int, Int, COpaquePointer?, COpaquePointer?) -> Int>>(kniBridge4343(ctx?.getPointer(memScope).rawValue))
    }
}

fun SSL_CTX_set0_security_ex_data(ctx: CValuesRef<SSL_CTX>?, ex: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4344(ctx?.getPointer(memScope).rawValue, ex?.getPointer(memScope).rawValue)
    }
}

fun SSL_CTX_get0_security_ex_data(ctx: CValuesRef<SSL_CTX>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4345(ctx?.getPointer(memScope).rawValue))
    }
}

fun OPENSSL_init_ssl(opts: uint64_t, settings: CValuesRef<OPENSSL_INIT_SETTINGS>?): Int {
    memScoped {
        return kniBridge4346(opts, settings?.getPointer(memScope).rawValue)
    }
}

fun SSL_test_functions(): CPointer<openssl_ssl_test_functions>? {
    return interpretCPointer<openssl_ssl_test_functions>(kniBridge4347())
}

fun ERR_load_SSL_strings(): Int {
    return kniBridge4348()
}

fun __errno_location(): CPointer<IntVar>? {
    return interpretCPointer<IntVar>(kniBridge4349())
}

fun lh_ERR_STRING_DATA_new(hfn: CPointer<CFunction<(CPointer<ERR_STRING_DATA>?) -> ULong>>?, cfn: CPointer<CFunction<(CPointer<ERR_STRING_DATA>?, CPointer<ERR_STRING_DATA>?) -> Int>>?): CPointer<lhash_st_ERR_STRING_DATA>? {
    return interpretCPointer<lhash_st_ERR_STRING_DATA>(kniBridge4350(hfn.rawValue, cfn.rawValue))
}

fun lh_ERR_STRING_DATA_free(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?): Unit {
    memScoped {
        return kniBridge4351(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_ERR_STRING_DATA_insert(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?, d: CValuesRef<ERR_STRING_DATA>?): CPointer<ERR_STRING_DATA>? {
    memScoped {
        return interpretCPointer<ERR_STRING_DATA>(kniBridge4352(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_ERR_STRING_DATA_delete(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?, d: CValuesRef<ERR_STRING_DATA>?): CPointer<ERR_STRING_DATA>? {
    memScoped {
        return interpretCPointer<ERR_STRING_DATA>(kniBridge4353(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_ERR_STRING_DATA_retrieve(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?, d: CValuesRef<ERR_STRING_DATA>?): CPointer<ERR_STRING_DATA>? {
    memScoped {
        return interpretCPointer<ERR_STRING_DATA>(kniBridge4354(lh?.getPointer(memScope).rawValue, d?.getPointer(memScope).rawValue))
    }
}

fun lh_ERR_STRING_DATA_error(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?): Int {
    memScoped {
        return kniBridge4355(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_ERR_STRING_DATA_num_items(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?): ULong {
    memScoped {
        return kniBridge4356(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_ERR_STRING_DATA_node_stats_bio(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge4357(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_ERR_STRING_DATA_node_usage_stats_bio(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge4358(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_ERR_STRING_DATA_stats_bio(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?, out: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge4359(lh?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue)
    }
}

fun lh_ERR_STRING_DATA_get_down_load(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?): ULong {
    memScoped {
        return kniBridge4360(lh?.getPointer(memScope).rawValue)
    }
}

fun lh_ERR_STRING_DATA_set_down_load(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?, dl: ULong): Unit {
    memScoped {
        return kniBridge4361(lh?.getPointer(memScope).rawValue, dl)
    }
}

fun lh_ERR_STRING_DATA_doall(lh: CValuesRef<lhash_st_ERR_STRING_DATA>?, doall: CPointer<CFunction<(CPointer<ERR_STRING_DATA>?) -> Unit>>?): Unit {
    memScoped {
        return kniBridge4362(lh?.getPointer(memScope).rawValue, doall.rawValue)
    }
}

fun ERR_put_error(lib: Int, func: Int, reason: Int, file: String?, line: Int): Unit {
    memScoped {
        return kniBridge4363(lib, func, reason, file?.cstr?.getPointer(memScope).rawValue, line)
    }
}

fun ERR_set_error_data(data: CValuesRef<ByteVar>?, flags: Int): Unit {
    memScoped {
        return kniBridge4364(data?.getPointer(memScope).rawValue, flags)
    }
}

fun ERR_get_error(): ULong {
    return kniBridge4365()
}

fun ERR_get_error_line(file: CValuesRef<CPointerVar<ByteVar>>?, line: CValuesRef<IntVar>?): ULong {
    memScoped {
        return kniBridge4366(file?.getPointer(memScope).rawValue, line?.getPointer(memScope).rawValue)
    }
}

fun ERR_get_error_line_data(file: CValuesRef<CPointerVar<ByteVar>>?, line: CValuesRef<IntVar>?, data: CValuesRef<CPointerVar<ByteVar>>?, flags: CValuesRef<IntVar>?): ULong {
    memScoped {
        return kniBridge4367(file?.getPointer(memScope).rawValue, line?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue)
    }
}

fun ERR_peek_error(): ULong {
    return kniBridge4368()
}

fun ERR_peek_error_line(file: CValuesRef<CPointerVar<ByteVar>>?, line: CValuesRef<IntVar>?): ULong {
    memScoped {
        return kniBridge4369(file?.getPointer(memScope).rawValue, line?.getPointer(memScope).rawValue)
    }
}

fun ERR_peek_error_line_data(file: CValuesRef<CPointerVar<ByteVar>>?, line: CValuesRef<IntVar>?, data: CValuesRef<CPointerVar<ByteVar>>?, flags: CValuesRef<IntVar>?): ULong {
    memScoped {
        return kniBridge4370(file?.getPointer(memScope).rawValue, line?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue)
    }
}

fun ERR_peek_last_error(): ULong {
    return kniBridge4371()
}

fun ERR_peek_last_error_line(file: CValuesRef<CPointerVar<ByteVar>>?, line: CValuesRef<IntVar>?): ULong {
    memScoped {
        return kniBridge4372(file?.getPointer(memScope).rawValue, line?.getPointer(memScope).rawValue)
    }
}

fun ERR_peek_last_error_line_data(file: CValuesRef<CPointerVar<ByteVar>>?, line: CValuesRef<IntVar>?, data: CValuesRef<CPointerVar<ByteVar>>?, flags: CValuesRef<IntVar>?): ULong {
    memScoped {
        return kniBridge4373(file?.getPointer(memScope).rawValue, line?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue)
    }
}

fun ERR_clear_error(): Unit {
    return kniBridge4374()
}

fun ERR_error_string(e: ULong, buf: CValuesRef<ByteVar>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4375(e, buf?.getPointer(memScope).rawValue))
    }
}

fun ERR_error_string_n(e: ULong, buf: CValuesRef<ByteVar>?, len: size_t): Unit {
    memScoped {
        return kniBridge4376(e, buf?.getPointer(memScope).rawValue, len)
    }
}

fun ERR_lib_error_string(e: ULong): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge4377(e))
}

fun ERR_func_error_string(e: ULong): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge4378(e))
}

fun ERR_reason_error_string(e: ULong): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge4379(e))
}

fun ERR_print_errors_cb(cb: CPointer<CFunction<(CPointer<ByteVar>?, size_t, COpaquePointer?) -> Int>>?, u: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4380(cb.rawValue, u?.getPointer(memScope).rawValue)
    }
}

fun ERR_print_errors_fp(fp: CValuesRef<FILE>?): Unit {
    memScoped {
        return kniBridge4381(fp?.getPointer(memScope).rawValue)
    }
}

fun ERR_print_errors(bp: CValuesRef<BIO>?): Unit {
    memScoped {
        return kniBridge4382(bp?.getPointer(memScope).rawValue)
    }
}

fun ERR_add_error_data(num: Int, vararg variadicArguments: Any?): Unit {
    memScoped {
        callWithVarargs(kniBridge4383(), nativeNullPtr, FFI_TYPE_KIND_VOID, arrayOf(num), variadicArguments, memScope)
    }
}

fun ERR_add_error_vdata(num: Int, args: va_list?): Unit {
    return kniBridge4384(num, args.rawValue)
}

fun ERR_load_strings(lib: Int, str: CValuesRef<ERR_STRING_DATA>?): Int {
    memScoped {
        return kniBridge4385(lib, str?.getPointer(memScope).rawValue)
    }
}

fun ERR_unload_strings(lib: Int, str: CValuesRef<ERR_STRING_DATA>?): Int {
    memScoped {
        return kniBridge4386(lib, str?.getPointer(memScope).rawValue)
    }
}

fun ERR_load_ERR_strings(): Int {
    return kniBridge4387()
}

fun ERR_remove_thread_state(arg0: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4388(arg0?.getPointer(memScope).rawValue)
    }
}

fun ERR_remove_state(pid: ULong): Unit {
    return kniBridge4389(pid)
}

fun ERR_get_state(): CPointer<ERR_STATE>? {
    return interpretCPointer<ERR_STATE>(kniBridge4390())
}

fun ERR_get_next_error_library(): Int {
    return kniBridge4391()
}

fun ERR_set_mark(): Int {
    return kniBridge4392()
}

fun ERR_pop_to_mark(): Int {
    return kniBridge4393()
}

fun _lws_log(filter: Int, format: String?, vararg variadicArguments: Any?): Unit {
    memScoped {
        callWithVarargs(kniBridge4394(), nativeNullPtr, FFI_TYPE_KIND_VOID, arrayOf(filter, format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
    }
}

fun _lws_logv(filter: Int, format: String?, vl: va_list?): Unit {
    memScoped {
        return kniBridge4395(filter, format?.cstr?.getPointer(memScope).rawValue, vl.rawValue)
    }
}

fun lwsl_timestamp(level: Int, p: CValuesRef<ByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge4396(level, p?.getPointer(memScope).rawValue, len)
    }
}

fun lwsl_hexdump_level(level: Int, vbuf: CValuesRef<*>?, len: size_t): Unit {
    memScoped {
        return kniBridge4397(level, vbuf?.getPointer(memScope).rawValue, len)
    }
}

fun lwsl_hexdump(buf: CValuesRef<*>?, len: size_t): Unit {
    memScoped {
        return kniBridge4398(buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_is_be(): Int {
    return kniBridge4399()
}

fun lws_set_log_level(level: Int, log_emit_function: CPointer<CFunction<(Int, CPointer<ByteVar>?) -> Unit>>?): Unit {
    return kniBridge4400(level, log_emit_function.rawValue)
}

fun lwsl_emit_syslog(level: Int, line: String?): Unit {
    memScoped {
        return kniBridge4401(level, line?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lwsl_emit_stderr(level: Int, line: String?): Unit {
    memScoped {
        return kniBridge4402(level, line?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lwsl_emit_stderr_notimestamp(level: Int, line: String?): Unit {
    memScoped {
        return kniBridge4403(level, line?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lwsl_visible(level: Int): Int {
    return kniBridge4404(level)
}

fun lws_close_reason(wsi: CValuesRef<lws>?, status: lws_close_status, buf: CValuesRef<UByteVar>?, len: size_t): Unit {
    memScoped {
        return kniBridge4405(wsi?.getPointer(memScope).rawValue, status, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_send_pipe_choked(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4406(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_is_final_fragment(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4407(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_is_first_fragment(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4408(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_get_reserved_bits(wsi: CValuesRef<lws>?): UByte {
    memScoped {
        return kniBridge4409(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_partial_buffered(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4410(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_frame_is_binary(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4411(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_set_extension_option(wsi: CValuesRef<lws>?, ext_name: String?, opt_name: String?, opt_val: String?): Int {
    memScoped {
        return kniBridge4412(wsi?.getPointer(memScope).rawValue, ext_name?.cstr?.getPointer(memScope).rawValue, opt_name?.cstr?.getPointer(memScope).rawValue, opt_val?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lws_ext_parse_options(ext: CValuesRef<lws_extension>?, wsi: CValuesRef<lws>?, ext_user: CValuesRef<*>?, opts: CValuesRef<lws_ext_options>?, o: String?, len: Int): Int {
    memScoped {
        return kniBridge4413(ext?.getPointer(memScope).rawValue, wsi?.getPointer(memScope).rawValue, ext_user?.getPointer(memScope).rawValue, opts?.getPointer(memScope).rawValue, o?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun lws_extension_callback_pm_deflate(context: CValuesRef<lws_context>?, ext: CValuesRef<lws_extension>?, wsi: CValuesRef<lws>?, reason: lws_extension_callback_reasons, user: CValuesRef<*>?, `in`: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge4414(context?.getPointer(memScope).rawValue, ext?.getPointer(memScope).rawValue, wsi?.getPointer(memScope).rawValue, reason, user?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len)
    }
}

fun lws_vhost_name_to_protocol(vh: CValuesRef<lws_vhost>?, name: String?): CPointer<lws_protocols>? {
    memScoped {
        return interpretCPointer<lws_protocols>(kniBridge4415(vh?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun lws_get_protocol(wsi: CValuesRef<lws>?): CPointer<lws_protocols>? {
    memScoped {
        return interpretCPointer<lws_protocols>(kniBridge4416(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_protocol_get(wsi: CValuesRef<lws>?): CPointer<lws_protocols>? {
    memScoped {
        return interpretCPointer<lws_protocols>(kniBridge4417(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_protocol_vh_priv_zalloc(vhost: CValuesRef<lws_vhost>?, prot: CValuesRef<lws_protocols>?, size: Int): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4418(vhost?.getPointer(memScope).rawValue, prot?.getPointer(memScope).rawValue, size))
    }
}

fun lws_protocol_vh_priv_get(vhost: CValuesRef<lws_vhost>?, prot: CValuesRef<lws_protocols>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4419(vhost?.getPointer(memScope).rawValue, prot?.getPointer(memScope).rawValue))
    }
}

fun lws_adjust_protocol_psds(wsi: CValuesRef<lws>?, new_size: size_t): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4420(wsi?.getPointer(memScope).rawValue, new_size))
    }
}

fun lws_finalize_startup(context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4421(context?.getPointer(memScope).rawValue)
    }
}

fun lws_pvo_search(pvo: CValuesRef<lws_protocol_vhost_options>?, name: String?): CPointer<lws_protocol_vhost_options>? {
    memScoped {
        return interpretCPointer<lws_protocol_vhost_options>(kniBridge4422(pvo?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue))
    }
}

fun lws_pvo_get_str(`in`: CValuesRef<*>?, name: String?, result: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge4423(`in`?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue)
    }
}

fun lws_protocol_init(context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4424(context?.getPointer(memScope).rawValue)
    }
}

fun lws_create_context(info: CValuesRef<lws_context_creation_info>?): CPointer<lws_context>? {
    memScoped {
        return interpretCPointer<lws_context>(kniBridge4425(info?.getPointer(memScope).rawValue))
    }
}

fun lws_context_destroy(context: CValuesRef<lws_context>?): Unit {
    memScoped {
        return kniBridge4426(context?.getPointer(memScope).rawValue)
    }
}

fun lws_context_deprecate(context: CValuesRef<lws_context>?, cb: lws_reload_func?): Unit {
    memScoped {
        return kniBridge4427(context?.getPointer(memScope).rawValue, cb.rawValue)
    }
}

fun lws_context_is_deprecated(context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4428(context?.getPointer(memScope).rawValue)
    }
}

fun lws_set_proxy(vhost: CValuesRef<lws_vhost>?, proxy: String?): Int {
    memScoped {
        return kniBridge4429(vhost?.getPointer(memScope).rawValue, proxy?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lws_set_socks(vhost: CValuesRef<lws_vhost>?, socks: String?): Int {
    memScoped {
        return kniBridge4430(vhost?.getPointer(memScope).rawValue, socks?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lws_create_vhost(context: CValuesRef<lws_context>?, info: CValuesRef<lws_context_creation_info>?): CPointer<lws_vhost>? {
    memScoped {
        return interpretCPointer<lws_vhost>(kniBridge4431(context?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue))
    }
}

fun lws_vhost_destroy(vh: CValuesRef<lws_vhost>?): Unit {
    memScoped {
        return kniBridge4432(vh?.getPointer(memScope).rawValue)
    }
}

fun lwsws_get_config_globals(info: CValuesRef<lws_context_creation_info>?, d: String?, config_strings: CValuesRef<CPointerVar<ByteVar>>?, len: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge4433(info?.getPointer(memScope).rawValue, d?.cstr?.getPointer(memScope).rawValue, config_strings?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun lwsws_get_config_vhosts(context: CValuesRef<lws_context>?, info: CValuesRef<lws_context_creation_info>?, d: String?, config_strings: CValuesRef<CPointerVar<ByteVar>>?, len: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge4434(context?.getPointer(memScope).rawValue, info?.getPointer(memScope).rawValue, d?.cstr?.getPointer(memScope).rawValue, config_strings?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun lws_get_vhost(wsi: CValuesRef<lws>?): CPointer<lws_vhost>? {
    memScoped {
        return interpretCPointer<lws_vhost>(kniBridge4435(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_get_vhost_name(vhost: CValuesRef<lws_vhost>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4436(vhost?.getPointer(memScope).rawValue))
    }
}

fun lws_get_vhost_port(vhost: CValuesRef<lws_vhost>?): Int {
    memScoped {
        return kniBridge4437(vhost?.getPointer(memScope).rawValue)
    }
}

fun lws_get_vhost_user(vhost: CValuesRef<lws_vhost>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4438(vhost?.getPointer(memScope).rawValue))
    }
}

fun lws_get_vhost_iface(vhost: CValuesRef<lws_vhost>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4439(vhost?.getPointer(memScope).rawValue))
    }
}

fun lws_json_dump_vhost(vh: CValuesRef<lws_vhost>?, buf: CValuesRef<ByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge4440(vh?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_json_dump_context(context: CValuesRef<lws_context>?, buf: CValuesRef<ByteVar>?, len: Int, hide_vhosts: Int): Int {
    memScoped {
        return kniBridge4441(context?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len, hide_vhosts)
    }
}

fun lws_vhost_user(vhost: CValuesRef<lws_vhost>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4442(vhost?.getPointer(memScope).rawValue))
    }
}

fun lws_context_user(context: CValuesRef<lws_context>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4443(context?.getPointer(memScope).rawValue))
    }
}

fun lws_client_connect_via_info(ccinfo: CValuesRef<lws_client_connect_info>?): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4444(ccinfo?.getPointer(memScope).rawValue))
    }
}

fun lws_init_vhost_client_ssl(info: CValuesRef<lws_context_creation_info>?, vhost: CValuesRef<lws_vhost>?): Int {
    memScoped {
        return kniBridge4445(info?.getPointer(memScope).rawValue, vhost?.getPointer(memScope).rawValue)
    }
}

fun lws_http_client_read(wsi: CValuesRef<lws>?, buf: CValuesRef<CPointerVar<ByteVar>>?, len: CValuesRef<IntVar>?): Int {
    memScoped {
        return kniBridge4446(wsi?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun lws_http_client_http_response(wsi: CValuesRef<lws>?): UInt {
    memScoped {
        return kniBridge4447(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_client_http_body_pending(wsi: CValuesRef<lws>?, something_left_to_send: Int): Unit {
    memScoped {
        return kniBridge4448(wsi?.getPointer(memScope).rawValue, something_left_to_send)
    }
}

fun lws_get_mimetype(file: String?, m: CValuesRef<lws_http_mount>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4449(file?.cstr?.getPointer(memScope).rawValue, m?.getPointer(memScope).rawValue))
    }
}

fun lws_serve_http_file(wsi: CValuesRef<lws>?, file: String?, content_type: String?, other_headers: String?, other_headers_len: Int): Int {
    memScoped {
        return kniBridge4450(wsi?.getPointer(memScope).rawValue, file?.cstr?.getPointer(memScope).rawValue, content_type?.cstr?.getPointer(memScope).rawValue, other_headers?.cstr?.getPointer(memScope).rawValue, other_headers_len)
    }
}

fun lws_serve_http_file_fragment(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4451(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_chunked_html_process(args: CValuesRef<lws_process_html_args>?, s: CValuesRef<lws_process_html_state>?): Int {
    memScoped {
        return kniBridge4452(args?.getPointer(memScope).rawValue, s?.getPointer(memScope).rawValue)
    }
}

fun lws_token_to_string(token: lws_token_indexes): CPointer<UByteVar>? {
    return interpretCPointer<UByteVar>(kniBridge4453(token))
}

fun lws_hdr_total_length(wsi: CValuesRef<lws>?, h: lws_token_indexes): Int {
    memScoped {
        return kniBridge4454(wsi?.getPointer(memScope).rawValue, h)
    }
}

fun lws_hdr_fragment_length(wsi: CValuesRef<lws>?, h: lws_token_indexes, frag_idx: Int): Int {
    memScoped {
        return kniBridge4455(wsi?.getPointer(memScope).rawValue, h, frag_idx)
    }
}

fun lws_hdr_copy(wsi: CValuesRef<lws>?, dest: CValuesRef<ByteVar>?, len: Int, h: lws_token_indexes): Int {
    memScoped {
        return kniBridge4456(wsi?.getPointer(memScope).rawValue, dest?.getPointer(memScope).rawValue, len, h)
    }
}

fun lws_hdr_copy_fragment(wsi: CValuesRef<lws>?, dest: CValuesRef<ByteVar>?, len: Int, h: lws_token_indexes, frag_idx: Int): Int {
    memScoped {
        return kniBridge4457(wsi?.getPointer(memScope).rawValue, dest?.getPointer(memScope).rawValue, len, h, frag_idx)
    }
}

fun lws_get_urlarg_by_name(wsi: CValuesRef<lws>?, name: String?, buf: CValuesRef<ByteVar>?, len: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4458(wsi?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len))
    }
}

fun lws_add_http_header_status(wsi: CValuesRef<lws>?, code: UInt, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4459(wsi?.getPointer(memScope).rawValue, code, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_add_http_header_by_name(wsi: CValuesRef<lws>?, name: CValuesRef<UByteVar>?, value: CValuesRef<UByteVar>?, length: Int, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4460(wsi?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue, value?.getPointer(memScope).rawValue, length, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_add_http_header_by_token(wsi: CValuesRef<lws>?, token: lws_token_indexes, value: CValuesRef<UByteVar>?, length: Int, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4461(wsi?.getPointer(memScope).rawValue, token, value?.getPointer(memScope).rawValue, length, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_add_http_header_content_length(wsi: CValuesRef<lws>?, content_length: lws_filepos_t, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4462(wsi?.getPointer(memScope).rawValue, content_length, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_finalize_http_header(wsi: CValuesRef<lws>?, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4463(wsi?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_finalize_write_http_header(wsi: CValuesRef<lws>?, start: CValuesRef<UByteVar>?, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4464(wsi?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_add_http_common_headers(wsi: CValuesRef<lws>?, code: UInt, content_type: String?, content_len: lws_filepos_t, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4465(wsi?.getPointer(memScope).rawValue, code, content_type?.cstr?.getPointer(memScope).rawValue, content_len, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_urlencode(escaped: CValuesRef<ByteVar>?, string: String?, len: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4466(escaped?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun lws_urldecode(string: CValuesRef<ByteVar>?, escaped: String?, len: Int): Int {
    memScoped {
        return kniBridge4467(string?.getPointer(memScope).rawValue, escaped?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun lws_return_http_status(wsi: CValuesRef<lws>?, code: UInt, html_body: String?): Int {
    memScoped {
        return kniBridge4468(wsi?.getPointer(memScope).rawValue, code, html_body?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lws_http_redirect(wsi: CValuesRef<lws>?, code: Int, loc: CValuesRef<UByteVar>?, len: Int, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?): Int {
    memScoped {
        return kniBridge4469(wsi?.getPointer(memScope).rawValue, code, loc?.getPointer(memScope).rawValue, len, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_http_transaction_completed(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4470(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_http_compression_apply(wsi: CValuesRef<lws>?, name: String?, p: CValuesRef<CPointerVar<UByteVar>>?, end: CValuesRef<UByteVar>?, decomp: Byte): Int {
    memScoped {
        return kniBridge4471(wsi?.getPointer(memScope).rawValue, name?.cstr?.getPointer(memScope).rawValue, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue, decomp)
    }
}

fun lws_spa_create(wsi: CValuesRef<lws>?, param_names: CValuesRef<CPointerVar<ByteVar>>?, count_params: Int, max_storage: Int, opt_cb: lws_spa_fileupload_cb?, opt_data: CValuesRef<*>?): CPointer<lws_spa>? {
    memScoped {
        return interpretCPointer<lws_spa>(kniBridge4472(wsi?.getPointer(memScope).rawValue, param_names?.getPointer(memScope).rawValue, count_params, max_storage, opt_cb.rawValue, opt_data?.getPointer(memScope).rawValue))
    }
}

fun lws_spa_process(spa: CValuesRef<lws_spa>?, `in`: String?, len: Int): Int {
    memScoped {
        return kniBridge4473(spa?.getPointer(memScope).rawValue, `in`?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun lws_spa_finalize(spa: CValuesRef<lws_spa>?): Int {
    memScoped {
        return kniBridge4474(spa?.getPointer(memScope).rawValue)
    }
}

fun lws_spa_get_length(spa: CValuesRef<lws_spa>?, n: Int): Int {
    memScoped {
        return kniBridge4475(spa?.getPointer(memScope).rawValue, n)
    }
}

fun lws_spa_get_string(spa: CValuesRef<lws_spa>?, n: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4476(spa?.getPointer(memScope).rawValue, n))
    }
}

fun lws_spa_destroy(spa: CValuesRef<lws_spa>?): Int {
    memScoped {
        return kniBridge4477(spa?.getPointer(memScope).rawValue)
    }
}

fun lws_sql_purify(escaped: CValuesRef<ByteVar>?, string: String?, len: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4478(escaped?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun lws_json_purify(escaped: CValuesRef<ByteVar>?, string: String?, len: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4479(escaped?.getPointer(memScope).rawValue, string?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun lws_filename_purify_inplace(filename: CValuesRef<ByteVar>?): Unit {
    memScoped {
        return kniBridge4480(filename?.getPointer(memScope).rawValue)
    }
}

fun lws_plat_write_cert(vhost: CValuesRef<lws_vhost>?, is_key: Int, fd: Int, buf: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge4481(vhost?.getPointer(memScope).rawValue, is_key, fd, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_plat_write_file(filename: String?, buf: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge4482(filename?.cstr?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_plat_read_file(filename: String?, buf: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge4483(filename?.cstr?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_plat_recommended_rsa_bits(): Int {
    return kniBridge4484()
}

fun lws_time_in_microseconds(): uint64_t {
    return kniBridge4485()
}

fun lws_set_timeout(wsi: CValuesRef<lws>?, reason: pending_timeout, secs: Int): Unit {
    memScoped {
        return kniBridge4486(wsi?.getPointer(memScope).rawValue, reason, secs)
    }
}

fun lws_set_timer_usecs(wsi: CValuesRef<lws>?, usecs: lws_usec_t): Unit {
    memScoped {
        return kniBridge4487(wsi?.getPointer(memScope).rawValue, usecs)
    }
}

fun lws_timed_callback_vh_protocol(vh: CValuesRef<lws_vhost>?, prot: CValuesRef<lws_protocols>?, reason: Int, secs: Int): Int {
    memScoped {
        return kniBridge4488(vh?.getPointer(memScope).rawValue, prot?.getPointer(memScope).rawValue, reason, secs)
    }
}

fun lws_service(context: CValuesRef<lws_context>?, timeout_ms: Int): Int {
    memScoped {
        return kniBridge4489(context?.getPointer(memScope).rawValue, timeout_ms)
    }
}

fun lws_service_tsi(context: CValuesRef<lws_context>?, timeout_ms: Int, tsi: Int): Int {
    memScoped {
        return kniBridge4490(context?.getPointer(memScope).rawValue, timeout_ms, tsi)
    }
}

fun lws_cancel_service_pt(wsi: CValuesRef<lws>?): Unit {
    memScoped {
        return kniBridge4491(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_cancel_service(context: CValuesRef<lws_context>?): Unit {
    memScoped {
        return kniBridge4492(context?.getPointer(memScope).rawValue)
    }
}

fun lws_service_fd(context: CValuesRef<lws_context>?, pollfd: CValuesRef<pollfd>?): Int {
    memScoped {
        return kniBridge4493(context?.getPointer(memScope).rawValue, pollfd?.getPointer(memScope).rawValue)
    }
}

fun lws_service_fd_tsi(context: CValuesRef<lws_context>?, pollfd: CValuesRef<pollfd>?, tsi: Int): Int {
    memScoped {
        return kniBridge4494(context?.getPointer(memScope).rawValue, pollfd?.getPointer(memScope).rawValue, tsi)
    }
}

fun lws_service_adjust_timeout(context: CValuesRef<lws_context>?, timeout_ms: Int, tsi: Int): Int {
    memScoped {
        return kniBridge4495(context?.getPointer(memScope).rawValue, timeout_ms, tsi)
    }
}

fun lws_handle_POLLOUT_event(wsi: CValuesRef<lws>?, pollfd: CValuesRef<pollfd>?): Int {
    memScoped {
        return kniBridge4496(wsi?.getPointer(memScope).rawValue, pollfd?.getPointer(memScope).rawValue)
    }
}

fun lws_write(wsi: CValuesRef<lws>?, buf: CValuesRef<UByteVar>?, len: size_t, protocol: lws_write_protocol): Int {
    memScoped {
        return kniBridge4497(wsi?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len, protocol)
    }
}

fun lws_write_ws_flags(initial: Int, is_start: Int, is_end: Int): Int {
    return kniBridge4498(initial, is_start, is_end)
}

fun lws_raw_transaction_completed(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4499(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_callback_on_writable(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4500(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_callback_on_writable_all_protocol(context: CValuesRef<lws_context>?, protocol: CValuesRef<lws_protocols>?): Int {
    memScoped {
        return kniBridge4501(context?.getPointer(memScope).rawValue, protocol?.getPointer(memScope).rawValue)
    }
}

fun lws_callback_on_writable_all_protocol_vhost(vhost: CValuesRef<lws_vhost>?, protocol: CValuesRef<lws_protocols>?): Int {
    memScoped {
        return kniBridge4502(vhost?.getPointer(memScope).rawValue, protocol?.getPointer(memScope).rawValue)
    }
}

fun lws_callback_all_protocol(context: CValuesRef<lws_context>?, protocol: CValuesRef<lws_protocols>?, reason: Int): Int {
    memScoped {
        return kniBridge4503(context?.getPointer(memScope).rawValue, protocol?.getPointer(memScope).rawValue, reason)
    }
}

fun lws_callback_all_protocol_vhost(vh: CValuesRef<lws_vhost>?, protocol: CValuesRef<lws_protocols>?, reason: Int): Int {
    memScoped {
        return kniBridge4504(vh?.getPointer(memScope).rawValue, protocol?.getPointer(memScope).rawValue, reason)
    }
}

fun lws_callback_all_protocol_vhost_args(vh: CValuesRef<lws_vhost>?, protocol: CValuesRef<lws_protocols>?, reason: Int, argp: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge4505(vh?.getPointer(memScope).rawValue, protocol?.getPointer(memScope).rawValue, reason, argp?.getPointer(memScope).rawValue, len)
    }
}

fun lws_callback_vhost_protocols(wsi: CValuesRef<lws>?, reason: Int, `in`: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge4506(wsi?.getPointer(memScope).rawValue, reason, `in`?.getPointer(memScope).rawValue, len)
    }
}

fun lws_callback_vhost_protocols_vhost(vh: CValuesRef<lws_vhost>?, reason: Int, `in`: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge4507(vh?.getPointer(memScope).rawValue, reason, `in`?.getPointer(memScope).rawValue, len)
    }
}

fun lws_callback_http_dummy(wsi: CValuesRef<lws>?, reason: lws_callback_reasons, user: CValuesRef<*>?, `in`: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge4508(wsi?.getPointer(memScope).rawValue, reason, user?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len)
    }
}

fun lws_get_socket_fd(wsi: CValuesRef<lws>?): lws_sockfd_type {
    memScoped {
        return kniBridge4509(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_get_peer_write_allowance(wsi: CValuesRef<lws>?): lws_fileofs_t {
    memScoped {
        return kniBridge4510(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_adopt_socket(context: CValuesRef<lws_context>?, accept_fd: lws_sockfd_type): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4511(context?.getPointer(memScope).rawValue, accept_fd))
    }
}

fun lws_adopt_socket_vhost(vh: CValuesRef<lws_vhost>?, accept_fd: lws_sockfd_type): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4512(vh?.getPointer(memScope).rawValue, accept_fd))
    }
}

fun lws_adopt_descriptor_vhost(vh: CValuesRef<lws_vhost>?, type: lws_adoption_type, fd: CValue<lws_sock_file_fd_type>, vh_prot_name: String?, parent: CValuesRef<lws>?): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4513(vh?.getPointer(memScope).rawValue, type, fd.getPointer(memScope).rawValue, vh_prot_name?.cstr?.getPointer(memScope).rawValue, parent?.getPointer(memScope).rawValue))
    }
}

fun lws_adopt_socket_readbuf(context: CValuesRef<lws_context>?, accept_fd: lws_sockfd_type, readbuf: String?, len: size_t): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4514(context?.getPointer(memScope).rawValue, accept_fd, readbuf?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun lws_adopt_socket_vhost_readbuf(vhost: CValuesRef<lws_vhost>?, accept_fd: lws_sockfd_type, readbuf: String?, len: size_t): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4515(vhost?.getPointer(memScope).rawValue, accept_fd, readbuf?.cstr?.getPointer(memScope).rawValue, len))
    }
}

fun lws_create_adopt_udp(vhost: CValuesRef<lws_vhost>?, port: Int, flags: Int, protocol_name: String?, parent_wsi: CValuesRef<lws>?): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4516(vhost?.getPointer(memScope).rawValue, port, flags, protocol_name?.cstr?.getPointer(memScope).rawValue, parent_wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_canonical_hostname(context: CValuesRef<lws_context>?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4517(context?.getPointer(memScope).rawValue))
    }
}

fun lws_get_peer_addresses(wsi: CValuesRef<lws>?, fd: lws_sockfd_type, name: CValuesRef<ByteVar>?, name_len: Int, rip: CValuesRef<ByteVar>?, rip_len: Int): Unit {
    memScoped {
        return kniBridge4518(wsi?.getPointer(memScope).rawValue, fd, name?.getPointer(memScope).rawValue, name_len, rip?.getPointer(memScope).rawValue, rip_len)
    }
}

fun lws_get_peer_simple(wsi: CValuesRef<lws>?, name: CValuesRef<ByteVar>?, namelen: Int): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4519(wsi?.getPointer(memScope).rawValue, name?.getPointer(memScope).rawValue, namelen))
    }
}

fun lws_interface_to_sa(ipv6: Int, ifname: String?, addr: CValuesRef<sockaddr_in>?, addrlen: size_t): Int {
    memScoped {
        return kniBridge4520(ipv6, ifname?.cstr?.getPointer(memScope).rawValue, addr?.getPointer(memScope).rawValue, addrlen)
    }
}

fun lws_dll_add_front(d: CValuesRef<lws_dll>?, phead: CValuesRef<lws_dll>?): Unit {
    memScoped {
        return kniBridge4521(d?.getPointer(memScope).rawValue, phead?.getPointer(memScope).rawValue)
    }
}

fun lws_dll_remove(d: CValuesRef<lws_dll>?): Unit {
    memScoped {
        return kniBridge4522(d?.getPointer(memScope).rawValue)
    }
}

fun lws_dll_lws_add_front(_a: CValuesRef<lws_dll_lws>?, _head: CValuesRef<lws_dll_lws>?): Unit {
    memScoped {
        return kniBridge4523(_a?.getPointer(memScope).rawValue, _head?.getPointer(memScope).rawValue)
    }
}

fun lws_dll_lws_remove(_a: CValuesRef<lws_dll_lws>?): Unit {
    memScoped {
        return kniBridge4524(_a?.getPointer(memScope).rawValue)
    }
}

fun lws_buflist_append_segment(head: CValuesRef<CPointerVar<lws_buflist>>?, buf: CValuesRef<uint8_tVar>?, len: size_t): Int {
    memScoped {
        return kniBridge4525(head?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_buflist_next_segment_len(head: CValuesRef<CPointerVar<lws_buflist>>?, buf: CValuesRef<CPointerVar<uint8_tVar>>?): size_t {
    memScoped {
        return kniBridge4526(head?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue)
    }
}

fun lws_buflist_use_segment(head: CValuesRef<CPointerVar<lws_buflist>>?, len: size_t): Int {
    memScoped {
        return kniBridge4527(head?.getPointer(memScope).rawValue, len)
    }
}

fun lws_buflist_destroy_all_segments(head: CValuesRef<CPointerVar<lws_buflist>>?): Unit {
    memScoped {
        return kniBridge4528(head?.getPointer(memScope).rawValue)
    }
}

fun lws_buflist_describe(head: CValuesRef<CPointerVar<lws_buflist>>?, id: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4529(head?.getPointer(memScope).rawValue, id?.getPointer(memScope).rawValue)
    }
}

fun lws_snprintf(str: CValuesRef<ByteVar>?, size: size_t, format: String?, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge4530(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(str?.getPointer(memScope), size, format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun lws_strncpy(dest: CValuesRef<ByteVar>?, src: String?, size: size_t): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4531(dest?.getPointer(memScope).rawValue, src?.cstr?.getPointer(memScope).rawValue, size))
    }
}

fun lws_timingsafe_bcmp(a: CValuesRef<*>?, b: CValuesRef<*>?, len: uint32_t): Int {
    memScoped {
        return kniBridge4532(a?.getPointer(memScope).rawValue, b?.getPointer(memScope).rawValue, len)
    }
}

fun lws_get_random(context: CValuesRef<lws_context>?, buf: CValuesRef<*>?, len: Int): Int {
    memScoped {
        return kniBridge4533(context?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_daemonize(_lock_path: String?): Int {
    memScoped {
        return kniBridge4534(_lock_path?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lws_get_library_version(): CPointer<ByteVar>? {
    return interpretCPointer<ByteVar>(kniBridge4535())
}

fun lws_wsi_user(wsi: CValuesRef<lws>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4536(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_set_wsi_user(wsi: CValuesRef<lws>?, user: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4537(wsi?.getPointer(memScope).rawValue, user?.getPointer(memScope).rawValue)
    }
}

fun lws_parse_uri(p: CValuesRef<ByteVar>?, prot: CValuesRef<CPointerVar<ByteVar>>?, ads: CValuesRef<CPointerVar<ByteVar>>?, port: CValuesRef<IntVar>?, path: CValuesRef<CPointerVar<ByteVar>>?): Int {
    memScoped {
        return kniBridge4538(p?.getPointer(memScope).rawValue, prot?.getPointer(memScope).rawValue, ads?.getPointer(memScope).rawValue, port?.getPointer(memScope).rawValue, path?.getPointer(memScope).rawValue)
    }
}

fun lws_cmdline_option(argc: Int, argv: CValuesRef<CPointerVar<ByteVar>>?, `val`: String?): CPointer<ByteVar>? {
    memScoped {
        return interpretCPointer<ByteVar>(kniBridge4539(argc, argv?.getPointer(memScope).rawValue, `val`?.cstr?.getPointer(memScope).rawValue))
    }
}

fun lws_now_secs(): ULong {
    return kniBridge4540()
}

fun lws_now_usecs(): lws_usec_t {
    return kniBridge4541()
}

fun lws_compare_time_t(context: CValuesRef<lws_context>?, t1: time_t, t2: time_t): Int {
    memScoped {
        return kniBridge4542(context?.getPointer(memScope).rawValue, t1, t2)
    }
}

fun lws_get_context(wsi: CValuesRef<lws>?): CPointer<lws_context>? {
    memScoped {
        return interpretCPointer<lws_context>(kniBridge4543(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_get_vhost_listen_port(vhost: CValuesRef<lws_vhost>?): Int {
    memScoped {
        return kniBridge4544(vhost?.getPointer(memScope).rawValue)
    }
}

fun lws_get_count_threads(context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4545(context?.getPointer(memScope).rawValue)
    }
}

fun lws_get_parent(wsi: CValuesRef<lws>?): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4546(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_get_child(wsi: CValuesRef<lws>?): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4547(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_get_effective_uid_gid(context: CValuesRef<lws_context>?, uid: CValuesRef<IntVar>?, gid: CValuesRef<IntVar>?): Unit {
    memScoped {
        return kniBridge4548(context?.getPointer(memScope).rawValue, uid?.getPointer(memScope).rawValue, gid?.getPointer(memScope).rawValue)
    }
}

fun lws_get_udp(wsi: CValuesRef<lws>?): CPointer<lws_udp>? {
    memScoped {
        return interpretCPointer<lws_udp>(kniBridge4549(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_get_opaque_parent_data(wsi: CValuesRef<lws>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4550(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_set_opaque_parent_data(wsi: CValuesRef<lws>?, data: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4551(wsi?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun lws_get_opaque_user_data(wsi: CValuesRef<lws>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4552(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_set_opaque_user_data(wsi: CValuesRef<lws>?, data: CValuesRef<*>?): Unit {
    memScoped {
        return kniBridge4553(wsi?.getPointer(memScope).rawValue, data?.getPointer(memScope).rawValue)
    }
}

fun lws_get_child_pending_on_writable(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4554(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_clear_child_pending_on_writable(wsi: CValuesRef<lws>?): Unit {
    memScoped {
        return kniBridge4555(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_get_close_length(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4556(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_get_close_payload(wsi: CValuesRef<lws>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge4557(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_get_network_wsi(wsi: CValuesRef<lws>?): CPointer<lws>? {
    memScoped {
        return interpretCPointer<lws>(kniBridge4558(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_set_allocator(realloc: CPointer<CFunction<(COpaquePointer?, size_t, CPointer<ByteVar>?) -> COpaquePointer?>>?): Unit {
    return kniBridge4559(realloc.rawValue)
}

fun lws_rx_flow_control(wsi: CValuesRef<lws>?, enable: Int): Int {
    memScoped {
        return kniBridge4560(wsi?.getPointer(memScope).rawValue, enable)
    }
}

fun lws_rx_flow_allow_all_protocol(context: CValuesRef<lws_context>?, protocol: CValuesRef<lws_protocols>?): Unit {
    memScoped {
        return kniBridge4561(context?.getPointer(memScope).rawValue, protocol?.getPointer(memScope).rawValue)
    }
}

fun lws_remaining_packet_payload(wsi: CValuesRef<lws>?): size_t {
    memScoped {
        return kniBridge4562(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_is_ssl(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4563(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_is_cgi(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4564(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_open(__file: String?, __oflag: Int, vararg variadicArguments: Any?): Int {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<IntVar>(typeOf<IntVar>())
        callWithVarargs(kniBridge4565(), kniResult.rawPtr, FFI_TYPE_KIND_SINT32, arrayOf(__file?.cstr?.getPointer(memScope), __oflag), variadicArguments, memScope)
        return kniResult.value
    }
}

fun lws_get_ssl(wsi: CValuesRef<lws>?): CPointer<SSL>? {
    memScoped {
        return interpretCPointer<SSL>(kniBridge4566(wsi?.getPointer(memScope).rawValue))
    }
}

fun lws_explicit_bzero(p: CValuesRef<*>?, len: size_t): Unit {
    memScoped {
        return kniBridge4567(p?.getPointer(memScope).rawValue, len)
    }
}

fun lws_ring_create(element_len: size_t, count: size_t, destroy_element: CPointer<CFunction<(COpaquePointer?) -> Unit>>?): CPointer<lws_ring>? {
    return interpretCPointer<lws_ring>(kniBridge4568(element_len, count, destroy_element.rawValue))
}

fun lws_ring_destroy(ring: CValuesRef<lws_ring>?): Unit {
    memScoped {
        return kniBridge4569(ring?.getPointer(memScope).rawValue)
    }
}

fun lws_ring_get_count_free_elements(ring: CValuesRef<lws_ring>?): size_t {
    memScoped {
        return kniBridge4570(ring?.getPointer(memScope).rawValue)
    }
}

fun lws_ring_get_count_waiting_elements(ring: CValuesRef<lws_ring>?, tail: CValuesRef<uint32_tVar>?): size_t {
    memScoped {
        return kniBridge4571(ring?.getPointer(memScope).rawValue, tail?.getPointer(memScope).rawValue)
    }
}

fun lws_ring_insert(ring: CValuesRef<lws_ring>?, src: CValuesRef<*>?, max_count: size_t): size_t {
    memScoped {
        return kniBridge4572(ring?.getPointer(memScope).rawValue, src?.getPointer(memScope).rawValue, max_count)
    }
}

fun lws_ring_consume(ring: CValuesRef<lws_ring>?, tail: CValuesRef<uint32_tVar>?, dest: CValuesRef<*>?, max_count: size_t): size_t {
    memScoped {
        return kniBridge4573(ring?.getPointer(memScope).rawValue, tail?.getPointer(memScope).rawValue, dest?.getPointer(memScope).rawValue, max_count)
    }
}

fun lws_ring_get_element(ring: CValuesRef<lws_ring>?, tail: CValuesRef<uint32_tVar>?): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4574(ring?.getPointer(memScope).rawValue, tail?.getPointer(memScope).rawValue))
    }
}

fun lws_ring_update_oldest_tail(ring: CValuesRef<lws_ring>?, tail: uint32_t): Unit {
    memScoped {
        return kniBridge4575(ring?.getPointer(memScope).rawValue, tail)
    }
}

fun lws_ring_get_oldest_tail(ring: CValuesRef<lws_ring>?): uint32_t {
    memScoped {
        return kniBridge4576(ring?.getPointer(memScope).rawValue)
    }
}

fun lws_ring_next_linear_insert_range(ring: CValuesRef<lws_ring>?, start: CValuesRef<COpaquePointerVar>?, bytes: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge4577(ring?.getPointer(memScope).rawValue, start?.getPointer(memScope).rawValue, bytes?.getPointer(memScope).rawValue)
    }
}

fun lws_ring_bump_head(ring: CValuesRef<lws_ring>?, bytes: size_t): Unit {
    memScoped {
        return kniBridge4578(ring?.getPointer(memScope).rawValue, bytes)
    }
}

fun lws_ring_dump(ring: CValuesRef<lws_ring>?, tail: CValuesRef<uint32_tVar>?): Unit {
    memScoped {
        return kniBridge4579(ring?.getPointer(memScope).rawValue, tail?.getPointer(memScope).rawValue)
    }
}

fun lws_SHA1(d: CValuesRef<UByteVar>?, n: size_t, md: CValuesRef<UByteVar>?): CPointer<UByteVar>? {
    memScoped {
        return interpretCPointer<UByteVar>(kniBridge4580(d?.getPointer(memScope).rawValue, n, md?.getPointer(memScope).rawValue))
    }
}

fun lws_b64_encode_string(`in`: String?, in_len: Int, out: CValuesRef<ByteVar>?, out_size: Int): Int {
    memScoped {
        return kniBridge4581(`in`?.cstr?.getPointer(memScope).rawValue, in_len, out?.getPointer(memScope).rawValue, out_size)
    }
}

fun lws_b64_encode_string_url(`in`: String?, in_len: Int, out: CValuesRef<ByteVar>?, out_size: Int): Int {
    memScoped {
        return kniBridge4582(`in`?.cstr?.getPointer(memScope).rawValue, in_len, out?.getPointer(memScope).rawValue, out_size)
    }
}

fun lws_b64_decode_string(`in`: String?, out: CValuesRef<ByteVar>?, out_size: Int): Int {
    memScoped {
        return kniBridge4583(`in`?.cstr?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, out_size)
    }
}

fun lws_b64_decode_string_len(`in`: String?, in_len: Int, out: CValuesRef<ByteVar>?, out_size: Int): Int {
    memScoped {
        return kniBridge4584(`in`?.cstr?.getPointer(memScope).rawValue, in_len, out?.getPointer(memScope).rawValue, out_size)
    }
}

fun lws_tls_peer_cert_info(wsi: CValuesRef<lws>?, type: lws_tls_cert_info, buf: CValuesRef<lws_tls_cert_info_results>?, len: size_t): Int {
    memScoped {
        return kniBridge4585(wsi?.getPointer(memScope).rawValue, type.value, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_tls_vhost_cert_info(vhost: CValuesRef<lws_vhost>?, type: lws_tls_cert_info, buf: CValuesRef<lws_tls_cert_info_results>?, len: size_t): Int {
    memScoped {
        return kniBridge4586(vhost?.getPointer(memScope).rawValue, type.value, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_tls_acme_sni_cert_create(vhost: CValuesRef<lws_vhost>?, san_a: String?, san_b: String?): Int {
    memScoped {
        return kniBridge4587(vhost?.getPointer(memScope).rawValue, san_a?.cstr?.getPointer(memScope).rawValue, san_b?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lws_tls_acme_sni_csr_create(context: CValuesRef<lws_context>?, elements: CValuesRef<CPointerVar<ByteVar>>?, csr: CValuesRef<uint8_tVar>?, csr_len: size_t, privkey_pem: CValuesRef<CPointerVar<ByteVar>>?, privkey_len: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge4588(context?.getPointer(memScope).rawValue, elements?.getPointer(memScope).rawValue, csr?.getPointer(memScope).rawValue, csr_len, privkey_pem?.getPointer(memScope).rawValue, privkey_len?.getPointer(memScope).rawValue)
    }
}

fun lws_tls_cert_updated(context: CValuesRef<lws_context>?, certpath: String?, keypath: String?, mem_cert: String?, len_mem_cert: size_t, mem_privkey: String?, len_mem_privkey: size_t): Int {
    memScoped {
        return kniBridge4589(context?.getPointer(memScope).rawValue, certpath?.cstr?.getPointer(memScope).rawValue, keypath?.cstr?.getPointer(memScope).rawValue, mem_cert?.cstr?.getPointer(memScope).rawValue, len_mem_cert, mem_privkey?.cstr?.getPointer(memScope).rawValue, len_mem_privkey)
    }
}

fun lws_get_fops(context: CValuesRef<lws_context>?): CPointer<lws_plat_file_ops>? {
    memScoped {
        return interpretCPointer<lws_plat_file_ops>(kniBridge4590(context?.getPointer(memScope).rawValue))
    }
}

fun lws_set_fops(context: CValuesRef<lws_context>?, fops: CValuesRef<lws_plat_file_ops>?): Unit {
    memScoped {
        return kniBridge4591(context?.getPointer(memScope).rawValue, fops?.getPointer(memScope).rawValue)
    }
}

fun lws_vfs_tell(fop_fd: lws_fop_fd_t?): lws_filepos_t {
    return kniBridge4592(fop_fd.rawValue)
}

fun lws_vfs_get_length(fop_fd: lws_fop_fd_t?): lws_filepos_t {
    return kniBridge4593(fop_fd.rawValue)
}

fun lws_vfs_get_mod_time(fop_fd: lws_fop_fd_t?): uint32_t {
    return kniBridge4594(fop_fd.rawValue)
}

fun lws_vfs_file_seek_set(fop_fd: lws_fop_fd_t?, offset: lws_fileofs_t): lws_fileofs_t {
    return kniBridge4595(fop_fd.rawValue, offset)
}

fun lws_vfs_file_seek_end(fop_fd: lws_fop_fd_t?, offset: lws_fileofs_t): lws_fileofs_t {
    return kniBridge4596(fop_fd.rawValue, offset)
}

fun lws_vfs_file_open(fops: CValuesRef<lws_plat_file_ops>?, vfs_path: String?, flags: CValuesRef<lws_fop_flags_tVar>?): lws_fop_fd_t? {
    memScoped {
        return interpretCPointer<lws_fop_fd>(kniBridge4597(fops?.getPointer(memScope).rawValue, vfs_path?.cstr?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue))
    }
}

fun lws_vfs_file_close(fop_fd: CValuesRef<lws_fop_fd_tVar>?): Int {
    memScoped {
        return kniBridge4598(fop_fd?.getPointer(memScope).rawValue)
    }
}

fun lws_vfs_file_seek_cur(fop_fd: lws_fop_fd_t?, offset: lws_fileofs_t): lws_fileofs_t {
    return kniBridge4599(fop_fd.rawValue, offset)
}

fun lws_vfs_file_read(fop_fd: lws_fop_fd_t?, amount: CValuesRef<lws_filepos_tVar>?, buf: CValuesRef<uint8_tVar>?, len: lws_filepos_t): Int {
    memScoped {
        return kniBridge4600(fop_fd.rawValue, amount?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_vfs_file_write(fop_fd: lws_fop_fd_t?, amount: CValuesRef<lws_filepos_tVar>?, buf: CValuesRef<uint8_tVar>?, len: lws_filepos_t): Int {
    memScoped {
        return kniBridge4601(fop_fd.rawValue, amount?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun _lws_plat_file_open(fops: CValuesRef<lws_plat_file_ops>?, filename: String?, vpath: String?, flags: CValuesRef<lws_fop_flags_tVar>?): lws_fop_fd_t? {
    memScoped {
        return interpretCPointer<lws_fop_fd>(kniBridge4602(fops?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, vpath?.cstr?.getPointer(memScope).rawValue, flags?.getPointer(memScope).rawValue))
    }
}

fun _lws_plat_file_close(fop_fd: CValuesRef<lws_fop_fd_tVar>?): Int {
    memScoped {
        return kniBridge4603(fop_fd?.getPointer(memScope).rawValue)
    }
}

fun _lws_plat_file_seek_cur(fop_fd: lws_fop_fd_t?, offset: lws_fileofs_t): lws_fileofs_t {
    return kniBridge4604(fop_fd.rawValue, offset)
}

fun _lws_plat_file_read(fop_fd: lws_fop_fd_t?, amount: CValuesRef<lws_filepos_tVar>?, buf: CValuesRef<uint8_tVar>?, len: lws_filepos_t): Int {
    memScoped {
        return kniBridge4605(fop_fd.rawValue, amount?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun _lws_plat_file_write(fop_fd: lws_fop_fd_t?, amount: CValuesRef<lws_filepos_tVar>?, buf: CValuesRef<uint8_tVar>?, len: lws_filepos_t): Int {
    memScoped {
        return kniBridge4606(fop_fd.rawValue, amount?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, len)
    }
}

fun lws_alloc_vfs_file(context: CValuesRef<lws_context>?, filename: String?, buf: CValuesRef<CPointerVar<uint8_tVar>>?, amount: CValuesRef<lws_filepos_tVar>?): Int {
    memScoped {
        return kniBridge4607(context?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, buf?.getPointer(memScope).rawValue, amount?.getPointer(memScope).rawValue)
    }
}

fun _lejp_callback(ctx: CValuesRef<lejp_ctx>?, reason: Byte): Byte {
    memScoped {
        return kniBridge4608(ctx?.getPointer(memScope).rawValue, reason)
    }
}

fun lejp_construct(ctx: CValuesRef<lejp_ctx>?, callback: CPointer<CFunction<(CPointer<lejp_ctx>?, Byte) -> Byte>>?, user: CValuesRef<*>?, paths: CValuesRef<CPointerVar<ByteVar>>?, paths_count: UByte): Unit {
    memScoped {
        return kniBridge4609(ctx?.getPointer(memScope).rawValue, callback.rawValue, user?.getPointer(memScope).rawValue, paths?.getPointer(memScope).rawValue, paths_count)
    }
}

fun lejp_destruct(ctx: CValuesRef<lejp_ctx>?): Unit {
    memScoped {
        return kniBridge4610(ctx?.getPointer(memScope).rawValue)
    }
}

fun lejp_parse(ctx: CValuesRef<lejp_ctx>?, json: CValuesRef<UByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge4611(ctx?.getPointer(memScope).rawValue, json?.getPointer(memScope).rawValue, len)
    }
}

fun lejp_change_callback(ctx: CValuesRef<lejp_ctx>?, callback: CPointer<CFunction<(CPointer<lejp_ctx>?, Byte) -> Byte>>?): Unit {
    memScoped {
        return kniBridge4612(ctx?.getPointer(memScope).rawValue, callback.rawValue)
    }
}

fun lejp_check_path_match(ctx: CValuesRef<lejp_ctx>?): Unit {
    memScoped {
        return kniBridge4613(ctx?.getPointer(memScope).rawValue)
    }
}

fun lejp_get_wildcard(ctx: CValuesRef<lejp_ctx>?, wildcard: Int, dest: CValuesRef<ByteVar>?, len: Int): Int {
    memScoped {
        return kniBridge4614(ctx?.getPointer(memScope).rawValue, wildcard, dest?.getPointer(memScope).rawValue, len)
    }
}

fun lws_stats_get(context: CValuesRef<lws_context>?, index: Int): uint64_t {
    memScoped {
        return kniBridge4615(context?.getPointer(memScope).rawValue, index)
    }
}

fun lws_stats_log_dump(context: CValuesRef<lws_context>?): Unit {
    memScoped {
        return kniBridge4616(context?.getPointer(memScope).rawValue)
    }
}

fun lws_threadpool_create(context: CValuesRef<lws_context>?, args: CValuesRef<lws_threadpool_create_args>?, format: String?, vararg variadicArguments: Any?): CPointer<lws_threadpool>? {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<CPointerVar<lws_threadpool>>(typeOf<CPointerVar<lws_threadpool>>())
        callWithVarargs(kniBridge4617(), kniResult.rawPtr, FFI_TYPE_KIND_POINTER, arrayOf(context?.getPointer(memScope), args?.getPointer(memScope), format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun lws_threadpool_finish(tp: CValuesRef<lws_threadpool>?): Unit {
    memScoped {
        return kniBridge4618(tp?.getPointer(memScope).rawValue)
    }
}

fun lws_threadpool_destroy(tp: CValuesRef<lws_threadpool>?): Unit {
    memScoped {
        return kniBridge4619(tp?.getPointer(memScope).rawValue)
    }
}

fun lws_threadpool_enqueue(tp: CValuesRef<lws_threadpool>?, args: CValuesRef<lws_threadpool_task_args>?, format: String?, vararg variadicArguments: Any?): CPointer<lws_threadpool_task>? {
    memScoped {
        val kniResult = allocFfiReturnValueBuffer<CPointerVar<lws_threadpool_task>>(typeOf<CPointerVar<lws_threadpool_task>>())
        callWithVarargs(kniBridge4620(), kniResult.rawPtr, FFI_TYPE_KIND_POINTER, arrayOf(tp?.getPointer(memScope), args?.getPointer(memScope), format?.cstr?.getPointer(memScope)), variadicArguments, memScope)
        return kniResult.value
    }
}

fun lws_threadpool_dequeue(wsi: CValuesRef<lws>?): Int {
    memScoped {
        return kniBridge4621(wsi?.getPointer(memScope).rawValue)
    }
}

fun lws_threadpool_task_status_wsi(wsi: CValuesRef<lws>?, task: CValuesRef<CPointerVar<lws_threadpool_task>>?, user: CValuesRef<COpaquePointerVar>?): lws_threadpool_task_status {
    memScoped {
        return lws_threadpool_task_status.byValue(kniBridge4622(wsi?.getPointer(memScope).rawValue, task?.getPointer(memScope).rawValue, user?.getPointer(memScope).rawValue))
    }
}

fun lws_threadpool_task_sync(task: CValuesRef<lws_threadpool_task>?, stop: Int): Unit {
    memScoped {
        return kniBridge4623(task?.getPointer(memScope).rawValue, stop)
    }
}

fun lws_threadpool_dump(tp: CValuesRef<lws_threadpool>?): Unit {
    memScoped {
        return kniBridge4624(tp?.getPointer(memScope).rawValue)
    }
}

fun lws_tokenize_init(ts: CValuesRef<lws_tokenize>?, start: String?, flags: Int): Unit {
    memScoped {
        return kniBridge4625(ts?.getPointer(memScope).rawValue, start?.cstr?.getPointer(memScope).rawValue, flags)
    }
}

fun lws_tokenize(ts: CValuesRef<lws_tokenize>?): lws_tokenize_elem {
    memScoped {
        return kniBridge4626(ts?.getPointer(memScope).rawValue)
    }
}

fun lws_tokenize_cstr(ts: CValuesRef<lws_tokenize>?, str: CValuesRef<ByteVar>?, max: Int): Int {
    memScoped {
        return kniBridge4627(ts?.getPointer(memScope).rawValue, str?.getPointer(memScope).rawValue, max)
    }
}

fun lws_list_ptr_insert(phead: CValuesRef<lws_list_ptrVar>?, add: CValuesRef<lws_list_ptrVar>?, sort: lws_list_ptr_sort_func_t?): Unit {
    memScoped {
        return kniBridge4628(phead?.getPointer(memScope).rawValue, add?.getPointer(memScope).rawValue, sort.rawValue)
    }
}

fun lwsac_use(head: CValuesRef<CPointerVar<lwsac>>?, ensure: size_t, chunk_size: size_t): COpaquePointer? {
    memScoped {
        return interpretCPointer<COpaque>(kniBridge4629(head?.getPointer(memScope).rawValue, ensure, chunk_size))
    }
}

fun lwsac_free(head: CValuesRef<CPointerVar<lwsac>>?): Unit {
    memScoped {
        return kniBridge4630(head?.getPointer(memScope).rawValue)
    }
}

fun lwsac_detach(head: CValuesRef<CPointerVar<lwsac>>?): Unit {
    memScoped {
        return kniBridge4631(head?.getPointer(memScope).rawValue)
    }
}

fun lwsac_reference(head: CValuesRef<lwsac>?): Unit {
    memScoped {
        return kniBridge4632(head?.getPointer(memScope).rawValue)
    }
}

fun lwsac_unreference(head: CValuesRef<CPointerVar<lwsac>>?): Unit {
    memScoped {
        return kniBridge4633(head?.getPointer(memScope).rawValue)
    }
}

fun lwsac_use_cached_file_start(cache: lwsac_cached_file_t?): Unit {
    return kniBridge4634(cache.rawValue)
}

fun lwsac_use_cached_file_end(cache: CValuesRef<lwsac_cached_file_tVar>?): Unit {
    memScoped {
        return kniBridge4635(cache?.getPointer(memScope).rawValue)
    }
}

fun lwsac_use_cached_file_detach(cache: CValuesRef<lwsac_cached_file_tVar>?): Unit {
    memScoped {
        return kniBridge4636(cache?.getPointer(memScope).rawValue)
    }
}

fun lwsac_cached_file(filepath: String?, cache: CValuesRef<lwsac_cached_file_tVar>?, len: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge4637(filepath?.cstr?.getPointer(memScope).rawValue, cache?.getPointer(memScope).rawValue, len?.getPointer(memScope).rawValue)
    }
}

fun lwsac_sizeof(): size_t {
    return kniBridge4638()
}

fun lwsac_get_tail_pos(lac: CValuesRef<lwsac>?): size_t {
    memScoped {
        return kniBridge4639(lac?.getPointer(memScope).rawValue)
    }
}

fun lwsac_get_next(lac: CValuesRef<lwsac>?): CPointer<lwsac>? {
    memScoped {
        return interpretCPointer<lwsac>(kniBridge4640(lac?.getPointer(memScope).rawValue))
    }
}

fun lwsac_align(length: size_t): size_t {
    return kniBridge4641(length)
}

fun lwsac_info(head: CValuesRef<lwsac>?): Unit {
    memScoped {
        return kniBridge4642(head?.getPointer(memScope).rawValue)
    }
}

fun lwsac_total_alloc(head: CValuesRef<lwsac>?): uint64_t {
    memScoped {
        return kniBridge4643(head?.getPointer(memScope).rawValue)
    }
}

fun lws_fts_create(fd: Int): CPointer<lws_fts>? {
    return interpretCPointer<lws_fts>(kniBridge4644(fd))
}

fun lws_fts_destroy(trie: CValuesRef<CPointerVar<lws_fts>>?): Unit {
    memScoped {
        return kniBridge4645(trie?.getPointer(memScope).rawValue)
    }
}

fun lws_fts_file_index(t: CValuesRef<lws_fts>?, filepath: String?, filepath_len: Int, priority: Int): Int {
    memScoped {
        return kniBridge4646(t?.getPointer(memScope).rawValue, filepath?.cstr?.getPointer(memScope).rawValue, filepath_len, priority)
    }
}

fun lws_fts_fill(t: CValuesRef<lws_fts>?, file_index: uint32_t, buf: String?, len: size_t): Int {
    memScoped {
        return kniBridge4647(t?.getPointer(memScope).rawValue, file_index, buf?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun lws_fts_serialize(t: CValuesRef<lws_fts>?): Int {
    memScoped {
        return kniBridge4648(t?.getPointer(memScope).rawValue)
    }
}

fun lws_fts_open(filepath: String?): CPointer<lws_fts_file>? {
    memScoped {
        return interpretCPointer<lws_fts_file>(kniBridge4649(filepath?.cstr?.getPointer(memScope).rawValue))
    }
}

fun lws_fts_search(jtf: CValuesRef<lws_fts_file>?, ftsp: CValuesRef<lws_fts_search_params>?): CPointer<lws_fts_result>? {
    memScoped {
        return interpretCPointer<lws_fts_result>(kniBridge4650(jtf?.getPointer(memScope).rawValue, ftsp?.getPointer(memScope).rawValue))
    }
}

fun lws_fts_close(jtf: CValuesRef<lws_fts_file>?): Unit {
    memScoped {
        return kniBridge4651(jtf?.getPointer(memScope).rawValue)
    }
}

fun lws_diskcache_create(cache_dir_base: String?, cache_size_limit: uint64_t): CPointer<lws_diskcache_scan>? {
    memScoped {
        return interpretCPointer<lws_diskcache_scan>(kniBridge4652(cache_dir_base?.cstr?.getPointer(memScope).rawValue, cache_size_limit))
    }
}

fun lws_diskcache_destroy(lds: CValuesRef<CPointerVar<lws_diskcache_scan>>?): Unit {
    memScoped {
        return kniBridge4653(lds?.getPointer(memScope).rawValue)
    }
}

fun lws_diskcache_prepare(cache_base_dir: String?, mode: Int, uid: Int): Int {
    memScoped {
        return kniBridge4654(cache_base_dir?.cstr?.getPointer(memScope).rawValue, mode, uid)
    }
}

fun lws_diskcache_query(lds: CValuesRef<lws_diskcache_scan>?, is_bot: Int, hash_hex: String?, _fd: CValuesRef<IntVar>?, cache: CValuesRef<ByteVar>?, cache_len: Int, extant_cache_len: CValuesRef<size_tVar>?): Int {
    memScoped {
        return kniBridge4655(lds?.getPointer(memScope).rawValue, is_bot, hash_hex?.cstr?.getPointer(memScope).rawValue, _fd?.getPointer(memScope).rawValue, cache?.getPointer(memScope).rawValue, cache_len, extant_cache_len?.getPointer(memScope).rawValue)
    }
}

fun lws_diskcache_finalize_name(cache: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge4656(cache?.getPointer(memScope).rawValue)
    }
}

fun lws_diskcache_trim(lds: CValuesRef<lws_diskcache_scan>?): Int {
    memScoped {
        return kniBridge4657(lds?.getPointer(memScope).rawValue)
    }
}

fun lws_diskcache_secs_to_idle(lds: CValuesRef<lws_diskcache_scan>?): Int {
    memScoped {
        return kniBridge4658(lds?.getPointer(memScope).rawValue)
    }
}

fun lws_genhash_size(type: lws_genhash_types): size_t {
    return kniBridge4659(type.value)
}

fun lws_genhmac_size(type: lws_genhmac_types): size_t {
    return kniBridge4660(type.value)
}

fun lws_genhash_init(ctx: CValuesRef<lws_genhash_ctx>?, type: lws_genhash_types): Int {
    memScoped {
        return kniBridge4661(ctx?.getPointer(memScope).rawValue, type.value)
    }
}

fun lws_genhash_update(ctx: CValuesRef<lws_genhash_ctx>?, `in`: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge4662(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len)
    }
}

fun lws_genhash_destroy(ctx: CValuesRef<lws_genhash_ctx>?, result: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4663(ctx?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue)
    }
}

fun lws_genhmac_init(ctx: CValuesRef<lws_genhmac_ctx>?, type: lws_genhmac_types, key: CValuesRef<uint8_tVar>?, key_len: size_t): Int {
    memScoped {
        return kniBridge4664(ctx?.getPointer(memScope).rawValue, type.value, key?.getPointer(memScope).rawValue, key_len)
    }
}

fun lws_genhmac_update(ctx: CValuesRef<lws_genhmac_ctx>?, `in`: CValuesRef<*>?, len: size_t): Int {
    memScoped {
        return kniBridge4665(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len)
    }
}

fun lws_genhmac_destroy(ctx: CValuesRef<lws_genhmac_ctx>?, result: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4666(ctx?.getPointer(memScope).rawValue, result?.getPointer(memScope).rawValue)
    }
}

fun lws_genrsa_create(ctx: CValuesRef<lws_genrsa_ctx>?, el: CValuesRef<lws_gencrypto_keyelem>?, context: CValuesRef<lws_context>?, mode: enum_genrsa_mode): Int {
    memScoped {
        return kniBridge4667(ctx?.getPointer(memScope).rawValue, el?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, mode.value)
    }
}

fun lws_genrsa_destroy_elements(el: CValuesRef<lws_gencrypto_keyelem>?): Unit {
    memScoped {
        return kniBridge4668(el?.getPointer(memScope).rawValue)
    }
}

fun lws_genrsa_new_keypair(context: CValuesRef<lws_context>?, ctx: CValuesRef<lws_genrsa_ctx>?, mode: enum_genrsa_mode, el: CValuesRef<lws_gencrypto_keyelem>?, bits: Int): Int {
    memScoped {
        return kniBridge4669(context?.getPointer(memScope).rawValue, ctx?.getPointer(memScope).rawValue, mode.value, el?.getPointer(memScope).rawValue, bits)
    }
}

fun lws_genrsa_public_encrypt(ctx: CValuesRef<lws_genrsa_ctx>?, `in`: CValuesRef<uint8_tVar>?, in_len: size_t, out: CValuesRef<uint8_tVar>?): Int {
    memScoped {
        return kniBridge4670(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, in_len, out?.getPointer(memScope).rawValue)
    }
}

fun lws_genrsa_private_encrypt(ctx: CValuesRef<lws_genrsa_ctx>?, `in`: CValuesRef<uint8_tVar>?, in_len: size_t, out: CValuesRef<uint8_tVar>?): Int {
    memScoped {
        return kniBridge4671(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, in_len, out?.getPointer(memScope).rawValue)
    }
}

fun lws_genrsa_public_decrypt(ctx: CValuesRef<lws_genrsa_ctx>?, `in`: CValuesRef<uint8_tVar>?, in_len: size_t, out: CValuesRef<uint8_tVar>?, out_max: size_t): Int {
    memScoped {
        return kniBridge4672(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, in_len, out?.getPointer(memScope).rawValue, out_max)
    }
}

fun lws_genrsa_private_decrypt(ctx: CValuesRef<lws_genrsa_ctx>?, `in`: CValuesRef<uint8_tVar>?, in_len: size_t, out: CValuesRef<uint8_tVar>?, out_max: size_t): Int {
    memScoped {
        return kniBridge4673(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, in_len, out?.getPointer(memScope).rawValue, out_max)
    }
}

fun lws_genrsa_hash_sig_verify(ctx: CValuesRef<lws_genrsa_ctx>?, `in`: CValuesRef<uint8_tVar>?, hash_type: lws_genhash_types, sig: CValuesRef<uint8_tVar>?, sig_len: size_t): Int {
    memScoped {
        return kniBridge4674(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, hash_type.value, sig?.getPointer(memScope).rawValue, sig_len)
    }
}

fun lws_genrsa_hash_sign(ctx: CValuesRef<lws_genrsa_ctx>?, `in`: CValuesRef<uint8_tVar>?, hash_type: lws_genhash_types, sig: CValuesRef<uint8_tVar>?, sig_len: size_t): Int {
    memScoped {
        return kniBridge4675(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, hash_type.value, sig?.getPointer(memScope).rawValue, sig_len)
    }
}

fun lws_genrsa_destroy(ctx: CValuesRef<lws_genrsa_ctx>?): Unit {
    memScoped {
        return kniBridge4676(ctx?.getPointer(memScope).rawValue)
    }
}

fun lws_genrsa_render_pkey_asn1(ctx: CValuesRef<lws_genrsa_ctx>?, _private: Int, pkey_asn1: CValuesRef<uint8_tVar>?, pkey_asn1_len: size_t): Int {
    memScoped {
        return kniBridge4677(ctx?.getPointer(memScope).rawValue, _private, pkey_asn1?.getPointer(memScope).rawValue, pkey_asn1_len)
    }
}

fun lws_genaes_create(ctx: CValuesRef<lws_genaes_ctx>?, op: enum_aes_operation, mode: enum_aes_modes, el: CValuesRef<lws_gencrypto_keyelem>?, padding: enum_aes_padding, engine: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4678(ctx?.getPointer(memScope).rawValue, op.value, mode.value, el?.getPointer(memScope).rawValue, padding.value, engine?.getPointer(memScope).rawValue)
    }
}

fun lws_genaes_destroy(ctx: CValuesRef<lws_genaes_ctx>?, tag: CValuesRef<UByteVar>?, tlen: size_t): Int {
    memScoped {
        return kniBridge4679(ctx?.getPointer(memScope).rawValue, tag?.getPointer(memScope).rawValue, tlen)
    }
}

fun lws_genaes_crypt(ctx: CValuesRef<lws_genaes_ctx>?, `in`: CValuesRef<uint8_tVar>?, len: size_t, out: CValuesRef<uint8_tVar>?, iv_or_nonce_ctr_or_data_unit_16: CValuesRef<uint8_tVar>?, stream_block_16: CValuesRef<uint8_tVar>?, nc_or_iv_off: CValuesRef<size_tVar>?, taglen: Int): Int {
    memScoped {
        return kniBridge4680(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, len, out?.getPointer(memScope).rawValue, iv_or_nonce_ctr_or_data_unit_16?.getPointer(memScope).rawValue, stream_block_16?.getPointer(memScope).rawValue, nc_or_iv_off?.getPointer(memScope).rawValue, taglen)
    }
}

fun lws_genecdh_create(ctx: CValuesRef<lws_genec_ctx>?, context: CValuesRef<lws_context>?, curve_table: CValuesRef<lws_ec_curves>?): Int {
    memScoped {
        return kniBridge4681(ctx?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, curve_table?.getPointer(memScope).rawValue)
    }
}

fun lws_genecdh_set_key(ctx: CValuesRef<lws_genec_ctx>?, el: CValuesRef<lws_gencrypto_keyelem>?, side: enum_lws_dh_side): Int {
    memScoped {
        return kniBridge4682(ctx?.getPointer(memScope).rawValue, el?.getPointer(memScope).rawValue, side.value)
    }
}

fun lws_genecdh_new_keypair(ctx: CValuesRef<lws_genec_ctx>?, side: enum_lws_dh_side, curve_name: String?, el: CValuesRef<lws_gencrypto_keyelem>?): Int {
    memScoped {
        return kniBridge4683(ctx?.getPointer(memScope).rawValue, side.value, curve_name?.cstr?.getPointer(memScope).rawValue, el?.getPointer(memScope).rawValue)
    }
}

fun lws_genecdsa_create(ctx: CValuesRef<lws_genec_ctx>?, context: CValuesRef<lws_context>?, curve_table: CValuesRef<lws_ec_curves>?): Int {
    memScoped {
        return kniBridge4684(ctx?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue, curve_table?.getPointer(memScope).rawValue)
    }
}

fun lws_genecdsa_new_keypair(ctx: CValuesRef<lws_genec_ctx>?, curve_name: String?, el: CValuesRef<lws_gencrypto_keyelem>?): Int {
    memScoped {
        return kniBridge4685(ctx?.getPointer(memScope).rawValue, curve_name?.cstr?.getPointer(memScope).rawValue, el?.getPointer(memScope).rawValue)
    }
}

fun lws_genecdsa_set_key(ctx: CValuesRef<lws_genec_ctx>?, el: CValuesRef<lws_gencrypto_keyelem>?): Int {
    memScoped {
        return kniBridge4686(ctx?.getPointer(memScope).rawValue, el?.getPointer(memScope).rawValue)
    }
}

fun lws_genecdsa_hash_sig_verify_jws(ctx: CValuesRef<lws_genec_ctx>?, `in`: CValuesRef<uint8_tVar>?, hash_type: lws_genhash_types, keybits: Int, sig: CValuesRef<uint8_tVar>?, sig_len: size_t): Int {
    memScoped {
        return kniBridge4687(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, hash_type.value, keybits, sig?.getPointer(memScope).rawValue, sig_len)
    }
}

fun lws_genecdsa_hash_sign_jws(ctx: CValuesRef<lws_genec_ctx>?, `in`: CValuesRef<uint8_tVar>?, hash_type: lws_genhash_types, keybits: Int, sig: CValuesRef<uint8_tVar>?, sig_len: size_t): Int {
    memScoped {
        return kniBridge4688(ctx?.getPointer(memScope).rawValue, `in`?.getPointer(memScope).rawValue, hash_type.value, keybits, sig?.getPointer(memScope).rawValue, sig_len)
    }
}

fun lws_genec_destroy(ctx: CValuesRef<lws_genec_ctx>?): Unit {
    memScoped {
        return kniBridge4689(ctx?.getPointer(memScope).rawValue)
    }
}

fun lws_genec_destroy_elements(el: CValuesRef<lws_gencrypto_keyelem>?): Unit {
    memScoped {
        return kniBridge4690(el?.getPointer(memScope).rawValue)
    }
}

fun lws_genec_dump(el: CValuesRef<lws_gencrypto_keyelem>?): Int {
    memScoped {
        return kniBridge4691(el?.getPointer(memScope).rawValue)
    }
}

fun lws_jwk_import(s: CValuesRef<lws_jwk>?, cb: lws_jwk_key_import_callback?, user: CValuesRef<*>?, `in`: String?, len: size_t): Int {
    memScoped {
        return kniBridge4692(s?.getPointer(memScope).rawValue, cb.rawValue, user?.getPointer(memScope).rawValue, `in`?.cstr?.getPointer(memScope).rawValue, len)
    }
}

fun lws_jwk_destroy(s: CValuesRef<lws_jwk>?): Unit {
    memScoped {
        return kniBridge4693(s?.getPointer(memScope).rawValue)
    }
}

fun lws_jwk_export(s: CValuesRef<lws_jwk>?, _private: Int, p: CValuesRef<ByteVar>?, len: size_t): Int {
    memScoped {
        return kniBridge4694(s?.getPointer(memScope).rawValue, _private, p?.getPointer(memScope).rawValue, len)
    }
}

fun lws_jwk_load(s: CValuesRef<lws_jwk>?, filename: String?, cb: lws_jwk_key_import_callback?, user: CValuesRef<*>?): Int {
    memScoped {
        return kniBridge4695(s?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue, cb.rawValue, user?.getPointer(memScope).rawValue)
    }
}

fun lws_jwk_save(s: CValuesRef<lws_jwk>?, filename: String?): Int {
    memScoped {
        return kniBridge4696(s?.getPointer(memScope).rawValue, filename?.cstr?.getPointer(memScope).rawValue)
    }
}

fun lws_jwk_rfc7638_fingerprint(s: CValuesRef<lws_jwk>?, digest32: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge4697(s?.getPointer(memScope).rawValue, digest32?.getPointer(memScope).rawValue)
    }
}

fun lws_jwk_dump(s: CValuesRef<lws_jwk>?): Int {
    memScoped {
        return kniBridge4698(s?.getPointer(memScope).rawValue)
    }
}

fun lws_jose_init(jose: CValuesRef<lws_jose>?): Unit {
    memScoped {
        return kniBridge4699(jose?.getPointer(memScope).rawValue)
    }
}

fun lws_jose_destroy(jose: CValuesRef<lws_jose>?): Unit {
    memScoped {
        return kniBridge4700(jose?.getPointer(memScope).rawValue)
    }
}

fun lws_gencrypto_jws_alg_to_definition(alg: String?, jose: CValuesRef<CPointerVar<lws_jose_jwe_alg>>?): Int {
    memScoped {
        return kniBridge4701(alg?.cstr?.getPointer(memScope).rawValue, jose?.getPointer(memScope).rawValue)
    }
}

fun lws_gencrypto_jwe_alg_to_definition(alg: String?, jose: CValuesRef<CPointerVar<lws_jose_jwe_alg>>?): Int {
    memScoped {
        return kniBridge4702(alg?.cstr?.getPointer(memScope).rawValue, jose?.getPointer(memScope).rawValue)
    }
}

fun lws_gencrypto_jwe_enc_to_definition(enc: String?, jose: CValuesRef<CPointerVar<lws_jose_jwe_alg>>?): Int {
    memScoped {
        return kniBridge4703(enc?.cstr?.getPointer(memScope).rawValue, jose?.getPointer(memScope).rawValue)
    }
}

fun lws_jws_parse_jose(jose: CValuesRef<lws_jose>?, buf: String?, len: Int, temp: CValuesRef<uint8_tVar>?, temp_len: Int): Int {
    memScoped {
        return kniBridge4704(jose?.getPointer(memScope).rawValue, buf?.cstr?.getPointer(memScope).rawValue, len, temp?.getPointer(memScope).rawValue, temp_len)
    }
}

fun lws_jwe_parse_jose(jose: CValuesRef<lws_jose>?, buf: String?, len: Int, temp: CValuesRef<uint8_tVar>?, temp_len: Int): Int {
    memScoped {
        return kniBridge4705(jose?.getPointer(memScope).rawValue, buf?.cstr?.getPointer(memScope).rawValue, len, temp?.getPointer(memScope).rawValue, temp_len)
    }
}

fun lws_jws_sig_confirm_compact(map: CValuesRef<lws_jws_concat_map>?, jwk: CValuesRef<lws_jwk>?, context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4706(map?.getPointer(memScope).rawValue, jwk?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue)
    }
}

fun lws_jws_sig_confirm_compact_b64_map(map_b64: CValuesRef<lws_jws_concat_map>?, jwk: CValuesRef<lws_jwk>?, context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4707(map_b64?.getPointer(memScope).rawValue, jwk?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue)
    }
}

fun lws_jws_sig_confirm_compact_b64(`in`: String?, len: size_t, jwk: CValuesRef<lws_jwk>?, context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4708(`in`?.cstr?.getPointer(memScope).rawValue, len, jwk?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue)
    }
}

fun lws_jws_sig_confirm(map_b64: CValuesRef<lws_jws_concat_map>?, map: CValuesRef<lws_jws_concat_map>?, jwk: CValuesRef<lws_jwk>?, context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4709(map_b64?.getPointer(memScope).rawValue, map?.getPointer(memScope).rawValue, jwk?.getPointer(memScope).rawValue, context?.getPointer(memScope).rawValue)
    }
}

fun lws_jws_b64_concat_map(`in`: String?, len: Int, map: CValuesRef<lws_jws_concat_map>?): Int {
    memScoped {
        return kniBridge4710(`in`?.cstr?.getPointer(memScope).rawValue, len, map?.getPointer(memScope).rawValue)
    }
}

fun lws_jws_sign_from_b64(jose: CValuesRef<lws_jose>?, jws: CValuesRef<lws_jws>?, b64_sig: CValuesRef<ByteVar>?, sig_len: size_t): Int {
    memScoped {
        return kniBridge4711(jose?.getPointer(memScope).rawValue, jws?.getPointer(memScope).rawValue, b64_sig?.getPointer(memScope).rawValue, sig_len)
    }
}

fun lws_jws_write_flattened_json(jws: CValuesRef<lws_jws>?, flattened: CValuesRef<ByteVar>?, len: size_t): Int {
    memScoped {
        return kniBridge4712(jws?.getPointer(memScope).rawValue, flattened?.getPointer(memScope).rawValue, len)
    }
}

fun lws_jws_compact_decode(`in`: String?, len: Int, map: CValuesRef<lws_jws_concat_map>?, map_b64: CValuesRef<lws_jws_concat_map>?, out: CValuesRef<ByteVar>?, out_len: Int): Int {
    memScoped {
        return kniBridge4713(`in`?.cstr?.getPointer(memScope).rawValue, len, map?.getPointer(memScope).rawValue, map_b64?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, out_len)
    }
}

fun lws_jws_base64_enc(`in`: String?, in_len: size_t, out: CValuesRef<ByteVar>?, out_max: size_t): Int {
    memScoped {
        return kniBridge4714(`in`?.cstr?.getPointer(memScope).rawValue, in_len, out?.getPointer(memScope).rawValue, out_max)
    }
}

fun lws_jws_encode_section(`in`: String?, in_len: size_t, first: Int, p: CValuesRef<CPointerVar<ByteVar>>?, end: CValuesRef<ByteVar>?): Int {
    memScoped {
        return kniBridge4715(`in`?.cstr?.getPointer(memScope).rawValue, in_len, first, p?.getPointer(memScope).rawValue, end?.getPointer(memScope).rawValue)
    }
}

fun lws_jwe_create_packet(jose: CValuesRef<lws_jose>?, jwk: CValuesRef<lws_jwk>?, payload: String?, len: size_t, nonce: String?, out: CValuesRef<ByteVar>?, out_len: size_t, context: CValuesRef<lws_context>?): Int {
    memScoped {
        return kniBridge4716(jose?.getPointer(memScope).rawValue, jwk?.getPointer(memScope).rawValue, payload?.cstr?.getPointer(memScope).rawValue, len, nonce?.cstr?.getPointer(memScope).rawValue, out?.getPointer(memScope).rawValue, out_len, context?.getPointer(memScope).rawValue)
    }
}

fun lws_jwe_be64(c: uint64_t, p8: CValuesRef<uint8_tVar>?): Unit {
    memScoped {
        return kniBridge4717(c, p8?.getPointer(memScope).rawValue)
    }
}

fun lws_jwe_authenticate_and_decrypt(jose: CValuesRef<lws_jose>?, jws: CValuesRef<lws_jws>?): Int {
    memScoped {
        return kniBridge4718(jose?.getPointer(memScope).rawValue, jws?.getPointer(memScope).rawValue)
    }
}

fun lws_jwe_a_cbc_hs_decrypt(jose: CValuesRef<lws_jose>?, jws: CValuesRef<lws_jws>?, enc_cek: CValuesRef<uint8_tVar>?, aad: CValuesRef<uint8_tVar>?, aad_len: Int): Int {
    memScoped {
        return kniBridge4719(jose?.getPointer(memScope).rawValue, jws?.getPointer(memScope).rawValue, enc_cek?.getPointer(memScope).rawValue, aad?.getPointer(memScope).rawValue, aad_len)
    }
}

fun lws_jwa_concat_kdf(jose: CValuesRef<lws_jose>?, jws: CValuesRef<lws_jws>?, direct: Int, out: CValuesRef<uint8_tVar>?, shared_secret: CValuesRef<uint8_tVar>?, sslen: Int): Int {
    memScoped {
        return kniBridge4720(jose?.getPointer(memScope).rawValue, jws?.getPointer(memScope).rawValue, direct, out?.getPointer(memScope).rawValue, shared_secret?.getPointer(memScope).rawValue, sslen)
    }
}

fun lws_jwe_encrypt(jose: CValuesRef<lws_jose>?, jws: CValuesRef<lws_jws>?, temp: CValuesRef<uint8_tVar>?, temp_len: Int): Int {
    memScoped {
        return kniBridge4721(jose?.getPointer(memScope).rawValue, jws?.getPointer(memScope).rawValue, temp?.getPointer(memScope).rawValue, temp_len)
    }
}

const val _STRING_H: Int = 1

const val _FEATURES_H: Int = 1

const val _DEFAULT_SOURCE: Int = 1

const val __USE_ISOC11: Int = 1

const val __USE_ISOC99: Int = 1

const val __USE_ISOC95: Int = 1

const val __USE_POSIX_IMPLICITLY: Int = 1

const val _POSIX_SOURCE: Int = 1

const val _POSIX_C_SOURCE: Long = 200809

const val __USE_POSIX: Int = 1

const val __USE_POSIX2: Int = 1

const val __USE_POSIX199309: Int = 1

const val __USE_POSIX199506: Int = 1

const val __USE_XOPEN2K: Int = 1

const val __USE_XOPEN2K8: Int = 1

const val _ATFILE_SOURCE: Int = 1

const val __USE_MISC: Int = 1

const val __USE_ATFILE: Int = 1

const val __USE_FORTIFY_LEVEL: Int = 0

const val __GLIBC_USE_DEPRECATED_GETS: Int = 0

const val _STDC_PREDEF_H: Int = 1

const val __STDC_IEC_559__: Int = 1

const val __STDC_IEC_559_COMPLEX__: Int = 1

const val __STDC_ISO_10646__: Long = 201706

const val __STDC_NO_THREADS__: Int = 1

const val __GNU_LIBRARY__: Int = 6

const val __GLIBC__: Int = 2

const val __GLIBC_MINOR__: Int = 27

const val _SYS_CDEFS_H: Int = 1

const val __glibc_c99_flexarr_available: Int = 1

const val __WORDSIZE: Int = 64

const val __WORDSIZE_TIME64_COMPAT32: Int = 1

const val __SYSCALL_WORDSIZE: Int = 64

const val __HAVE_GENERIC_SELECTION: Int = 1

const val __GLIBC_USE_LIB_EXT2: Int = 0

const val __GLIBC_USE_IEC_60559_BFP_EXT: Int = 0

const val __GLIBC_USE_IEC_60559_FUNCS_EXT: Int = 0

const val __GLIBC_USE_IEC_60559_TYPES_EXT: Int = 0

const val _BITS_TYPES_LOCALE_T_H: Int = 1

const val _BITS_TYPES___LOCALE_T_H: Int = 1

const val _STRINGS_H: Int = 1

const val _STDLIB_H: Int = 1

const val WNOHANG: Int = 1

const val WUNTRACED: Int = 2

const val WSTOPPED: Int = 2

const val WEXITED: Int = 4

const val WCONTINUED: Int = 8

const val WNOWAIT: Int = 16777216

const val __WNOTHREAD: Int = 536870912

const val __WALL: Int = 1073741824

const val __WCLONE: UInt = 2147483648u

const val __ENUM_IDTYPE_T: Int = 1

const val __W_CONTINUED: Int = 65535

const val __WCOREFLAG: Int = 128

const val __HAVE_FLOAT128: Int = 0

const val __HAVE_DISTINCT_FLOAT128: Int = 0

const val __HAVE_FLOAT64X: Int = 1

const val __HAVE_FLOAT64X_LONG_DOUBLE: Int = 1

const val __HAVE_FLOAT16: Int = 0

const val __HAVE_FLOAT32: Int = 1

const val __HAVE_FLOAT64: Int = 1

const val __HAVE_FLOAT32X: Int = 1

const val __HAVE_FLOAT128X: Int = 0

const val __HAVE_DISTINCT_FLOAT16: Int = 0

const val __HAVE_DISTINCT_FLOAT32: Int = 0

const val __HAVE_DISTINCT_FLOAT64: Int = 0

const val __HAVE_DISTINCT_FLOAT32X: Int = 0

const val __HAVE_DISTINCT_FLOAT64X: Int = 0

const val __HAVE_DISTINCT_FLOAT128X: Int = 0

const val __HAVE_FLOATN_NOT_TYPEDEF: Int = 0

const val __ldiv_t_defined: Int = 1

const val __lldiv_t_defined: Int = 1

const val RAND_MAX: Int = 2147483647

const val EXIT_FAILURE: Int = 1

const val EXIT_SUCCESS: Int = 0

const val _SYS_TYPES_H: Int = 1

const val _BITS_TYPES_H: Int = 1

const val _BITS_TYPESIZES_H: Int = 1

const val __OFF_T_MATCHES_OFF64_T: Int = 1

const val __INO_T_MATCHES_INO64_T: Int = 1

const val __RLIM_T_MATCHES_RLIM64_T: Int = 1

const val __FD_SETSIZE: Int = 1024

const val __clock_t_defined: Int = 1

const val __clockid_t_defined: Int = 1

const val __time_t_defined: Int = 1

const val __timer_t_defined: Int = 1

const val _BITS_STDINT_INTN_H: Int = 1

const val __BIT_TYPES_DEFINED__: Int = 1

const val _ENDIAN_H: Int = 1

const val __LITTLE_ENDIAN: Int = 1234

const val __BIG_ENDIAN: Int = 4321

const val __PDP_ENDIAN: Int = 3412

const val __BYTE_ORDER: Int = 1234

const val __FLOAT_WORD_ORDER: Int = 1234

const val LITTLE_ENDIAN: Int = 1234

const val BIG_ENDIAN: Int = 4321

const val PDP_ENDIAN: Int = 3412

const val BYTE_ORDER: Int = 1234

const val _BITS_BYTESWAP_H: Int = 1

const val _BITS_UINTN_IDENTITY_H: Int = 1

const val _SYS_SELECT_H: Int = 1

val __FD_ZERO_STOS: String get() = "stosq"

const val __sigset_t_defined: Int = 1

const val _SIGSET_NWORDS: ULong = 16u

const val __timeval_defined: Int = 1

const val __timespec_defined: Int = 1

const val __NFDBITS: Int = 64

const val FD_SETSIZE: Int = 1024

const val NFDBITS: Int = 64

const val _SYS_SYSMACROS_H: Int = 1

const val _BITS_SYSMACROS_H: Int = 1

const val _BITS_PTHREADTYPES_COMMON_H: Int = 1

const val _THREAD_SHARED_TYPES_H: Int = 1

const val _BITS_PTHREADTYPES_ARCH_H: Int = 1

const val __SIZEOF_PTHREAD_MUTEX_T: Int = 40

const val __SIZEOF_PTHREAD_ATTR_T: Int = 56

const val __SIZEOF_PTHREAD_RWLOCK_T: Int = 56

const val __SIZEOF_PTHREAD_BARRIER_T: Int = 32

const val __SIZEOF_PTHREAD_MUTEXATTR_T: Int = 4

const val __SIZEOF_PTHREAD_COND_T: Int = 48

const val __SIZEOF_PTHREAD_CONDATTR_T: Int = 4

const val __SIZEOF_PTHREAD_RWLOCKATTR_T: Int = 8

const val __SIZEOF_PTHREAD_BARRIERATTR_T: Int = 4

const val __PTHREAD_MUTEX_LOCK_ELISION: Int = 1

const val __PTHREAD_MUTEX_NUSERS_AFTER_KIND: Int = 0

const val __PTHREAD_MUTEX_USE_UNION: Int = 0

const val __PTHREAD_RWLOCK_INT_FLAGS_SHARED: Int = 1

const val __PTHREAD_MUTEX_HAVE_PREV: Int = 1

const val __have_pthread_attr_t: Int = 1

const val _ALLOCA_H: Int = 1

val LWS_INSTALL_DATADIR: String get() = "\u002Fusr\u002Flocal\u002Fshare"

const val LWS_LIBRARY_VERSION_MAJOR: Int = 3

const val LWS_LIBRARY_VERSION_MINOR: Int = 1

const val LWS_LIBRARY_VERSION_PATCH: Int = 99

const val LWS_LIBRARY_VERSION_NUMBER: Int = 3001099

const val LWS_MAX_SMP: Int = 1

val LWS_BUILD_HASH: String get() = "v3.1.0\u002D20\u002Dg456ad29b"

val LWS_LIBRARY_VERSION: String get() = "3.1.99"

val LWS_OPENSSL_CLIENT_CERTS: String get() = "..\u002Fshare"

const val _STDINT_H: Int = 1

const val _BITS_WCHAR_H: Int = 1

const val __WCHAR_MAX: Int = 2147483647

const val __WCHAR_MIN: Int = -2147483648

const val _BITS_STDINT_UINTN_H: Int = 1

const val INT8_MIN: Int = -128

const val INT16_MIN: Int = -32768

const val INT32_MIN: Int = -2147483648

const val INT64_MIN: Long = -9223372036854775807 - 1

const val INT8_MAX: Int = 127

const val INT16_MAX: Int = 32767

const val INT32_MAX: Int = 2147483647

const val INT64_MAX: Long = 9223372036854775807

const val UINT8_MAX: Int = 255

const val UINT16_MAX: Int = 65535

const val UINT32_MAX: UInt = 4294967295u

const val UINT64_MAX: ULong = 18446744073709551615u

const val INT_LEAST8_MIN: Int = -128

const val INT_LEAST16_MIN: Int = -32768

const val INT_LEAST32_MIN: Int = -2147483648

const val INT_LEAST64_MIN: Long = -9223372036854775807 - 1

const val INT_LEAST8_MAX: Int = 127

const val INT_LEAST16_MAX: Int = 32767

const val INT_LEAST32_MAX: Int = 2147483647

const val INT_LEAST64_MAX: Long = 9223372036854775807

const val UINT_LEAST8_MAX: Int = 255

const val UINT_LEAST16_MAX: Int = 65535

const val UINT_LEAST32_MAX: UInt = 4294967295u

const val UINT_LEAST64_MAX: ULong = 18446744073709551615u

const val INT_FAST8_MIN: Int = -128

const val INT_FAST16_MIN: Long = -9223372036854775807 - 1

const val INT_FAST32_MIN: Long = -9223372036854775807 - 1

const val INT_FAST64_MIN: Long = -9223372036854775807 - 1

const val INT_FAST8_MAX: Int = 127

const val INT_FAST16_MAX: Long = 9223372036854775807

const val INT_FAST32_MAX: Long = 9223372036854775807

const val INT_FAST64_MAX: Long = 9223372036854775807

const val UINT_FAST8_MAX: Int = 255

const val UINT_FAST16_MAX: ULong = 18446744073709551615u

const val UINT_FAST32_MAX: ULong = 18446744073709551615u

const val UINT_FAST64_MAX: ULong = 18446744073709551615u

const val INTPTR_MIN: Long = -9223372036854775807 - 1

const val INTPTR_MAX: Long = 9223372036854775807

const val UINTPTR_MAX: ULong = 18446744073709551615u

const val INTMAX_MIN: Long = -9223372036854775807 - 1

const val INTMAX_MAX: Long = 9223372036854775807

const val UINTMAX_MAX: ULong = 18446744073709551615u

const val PTRDIFF_MIN: Long = -9223372036854775807 - 1

const val PTRDIFF_MAX: Long = 9223372036854775807

const val SIG_ATOMIC_MIN: Int = -2147483648

const val SIG_ATOMIC_MAX: Int = 2147483647

const val SIZE_MAX: ULong = 18446744073709551615u

const val WCHAR_MIN: Int = -2147483648

const val WCHAR_MAX: Int = 2147483647

const val WINT_MIN: UInt = 0u

const val WINT_MAX: UInt = 4294967295u

const val _UNISTD_H: Int = 1

const val _POSIX_VERSION: Long = 200809

const val __POSIX2_THIS_VERSION: Long = 200809

const val _POSIX2_VERSION: Long = 200809

const val _POSIX2_C_VERSION: Long = 200809

const val _POSIX2_C_BIND: Long = 200809

const val _POSIX2_C_DEV: Long = 200809

const val _POSIX2_SW_DEV: Long = 200809

const val _POSIX2_LOCALEDEF: Long = 200809

const val _XOPEN_VERSION: Int = 700

const val _XOPEN_XCU_VERSION: Int = 4

const val _XOPEN_XPG2: Int = 1

const val _XOPEN_XPG3: Int = 1

const val _XOPEN_XPG4: Int = 1

const val _XOPEN_UNIX: Int = 1

const val _XOPEN_CRYPT: Int = 1

const val _XOPEN_ENH_I18N: Int = 1

const val _XOPEN_LEGACY: Int = 1

const val _BITS_POSIX_OPT_H: Int = 1

const val _POSIX_JOB_CONTROL: Int = 1

const val _POSIX_SAVED_IDS: Int = 1

const val _POSIX_PRIORITY_SCHEDULING: Long = 200809

const val _POSIX_SYNCHRONIZED_IO: Long = 200809

const val _POSIX_FSYNC: Long = 200809

const val _POSIX_MAPPED_FILES: Long = 200809

const val _POSIX_MEMLOCK: Long = 200809

const val _POSIX_MEMLOCK_RANGE: Long = 200809

const val _POSIX_MEMORY_PROTECTION: Long = 200809

const val _POSIX_CHOWN_RESTRICTED: Int = 0

const val _POSIX_VDISABLE: Int = 0

const val _POSIX_NO_TRUNC: Int = 1

const val _XOPEN_REALTIME: Int = 1

const val _XOPEN_REALTIME_THREADS: Int = 1

const val _XOPEN_SHM: Int = 1

const val _POSIX_THREADS: Long = 200809

const val _POSIX_REENTRANT_FUNCTIONS: Int = 1

const val _POSIX_THREAD_SAFE_FUNCTIONS: Long = 200809

const val _POSIX_THREAD_PRIORITY_SCHEDULING: Long = 200809

const val _POSIX_THREAD_ATTR_STACKSIZE: Long = 200809

const val _POSIX_THREAD_ATTR_STACKADDR: Long = 200809

const val _POSIX_THREAD_PRIO_INHERIT: Long = 200809

const val _POSIX_THREAD_PRIO_PROTECT: Long = 200809

const val _POSIX_THREAD_ROBUST_PRIO_INHERIT: Long = 200809

const val _POSIX_THREAD_ROBUST_PRIO_PROTECT: Int = -1

const val _POSIX_SEMAPHORES: Long = 200809

const val _POSIX_REALTIME_SIGNALS: Long = 200809

const val _POSIX_ASYNCHRONOUS_IO: Long = 200809

const val _POSIX_ASYNC_IO: Int = 1

const val _LFS_ASYNCHRONOUS_IO: Int = 1

const val _POSIX_PRIORITIZED_IO: Long = 200809

const val _LFS64_ASYNCHRONOUS_IO: Int = 1

const val _LFS_LARGEFILE: Int = 1

const val _LFS64_LARGEFILE: Int = 1

const val _LFS64_STDIO: Int = 1

const val _POSIX_SHARED_MEMORY_OBJECTS: Long = 200809

const val _POSIX_CPUTIME: Int = 0

const val _POSIX_THREAD_CPUTIME: Int = 0

const val _POSIX_REGEXP: Int = 1

const val _POSIX_READER_WRITER_LOCKS: Long = 200809

const val _POSIX_SHELL: Int = 1

const val _POSIX_TIMEOUTS: Long = 200809

const val _POSIX_SPIN_LOCKS: Long = 200809

const val _POSIX_SPAWN: Long = 200809

const val _POSIX_TIMERS: Long = 200809

const val _POSIX_BARRIERS: Long = 200809

const val _POSIX_MESSAGE_PASSING: Long = 200809

const val _POSIX_THREAD_PROCESS_SHARED: Long = 200809

const val _POSIX_MONOTONIC_CLOCK: Int = 0

const val _POSIX_CLOCK_SELECTION: Long = 200809

const val _POSIX_ADVISORY_INFO: Long = 200809

const val _POSIX_IPV6: Long = 200809

const val _POSIX_RAW_SOCKETS: Long = 200809

const val _POSIX2_CHAR_TERM: Long = 200809

const val _POSIX_SPORADIC_SERVER: Int = -1

const val _POSIX_THREAD_SPORADIC_SERVER: Int = -1

const val _POSIX_TRACE: Int = -1

const val _POSIX_TRACE_EVENT_FILTER: Int = -1

const val _POSIX_TRACE_INHERIT: Int = -1

const val _POSIX_TRACE_LOG: Int = -1

const val _POSIX_TYPED_MEMORY_OBJECTS: Int = -1

const val _POSIX_V7_LPBIG_OFFBIG: Int = -1

const val _POSIX_V6_LPBIG_OFFBIG: Int = -1

const val _XBS5_LPBIG_OFFBIG: Int = -1

const val _POSIX_V7_LP64_OFF64: Int = 1

const val _POSIX_V6_LP64_OFF64: Int = 1

const val _XBS5_LP64_OFF64: Int = 1

val __ILP32_OFF32_CFLAGS: String get() = "\u002Dm32"

val __ILP32_OFF32_LDFLAGS: String get() = "\u002Dm32"

val __ILP32_OFFBIG_CFLAGS: String get() = "\u002Dm32 \u002DD_LARGEFILE_SOURCE \u002DD_FILE_OFFSET_BITS=64"

val __ILP32_OFFBIG_LDFLAGS: String get() = "\u002Dm32"

val __LP64_OFF64_CFLAGS: String get() = "\u002Dm64"

val __LP64_OFF64_LDFLAGS: String get() = "\u002Dm64"

const val STDIN_FILENO: Int = 0

const val STDOUT_FILENO: Int = 1

const val STDERR_FILENO: Int = 2

const val R_OK: Int = 4

const val W_OK: Int = 2

const val X_OK: Int = 1

const val F_OK: Int = 0

const val SEEK_SET: Int = 0

const val SEEK_CUR: Int = 1

const val SEEK_END: Int = 2

const val L_SET: Int = 0

const val L_INCR: Int = 1

const val L_XTND: Int = 2

const val _PC_LINK_MAX: Int = 0

const val _PC_MAX_CANON: Int = 1

const val _PC_MAX_INPUT: Int = 2

const val _PC_NAME_MAX: Int = 3

const val _PC_PATH_MAX: Int = 4

const val _PC_PIPE_BUF: Int = 5

const val _PC_CHOWN_RESTRICTED: Int = 6

const val _PC_NO_TRUNC: Int = 7

const val _PC_VDISABLE: Int = 8

const val _PC_SYNC_IO: Int = 9

const val _PC_ASYNC_IO: Int = 10

const val _PC_PRIO_IO: Int = 11

const val _PC_SOCK_MAXBUF: Int = 12

const val _PC_FILESIZEBITS: Int = 13

const val _PC_REC_INCR_XFER_SIZE: Int = 14

const val _PC_REC_MAX_XFER_SIZE: Int = 15

const val _PC_REC_MIN_XFER_SIZE: Int = 16

const val _PC_REC_XFER_ALIGN: Int = 17

const val _PC_ALLOC_SIZE_MIN: Int = 18

const val _PC_SYMLINK_MAX: Int = 19

const val _PC_2_SYMLINKS: Int = 20

const val _SC_ARG_MAX: Int = 0

const val _SC_CHILD_MAX: Int = 1

const val _SC_CLK_TCK: Int = 2

const val _SC_NGROUPS_MAX: Int = 3

const val _SC_OPEN_MAX: Int = 4

const val _SC_STREAM_MAX: Int = 5

const val _SC_TZNAME_MAX: Int = 6

const val _SC_JOB_CONTROL: Int = 7

const val _SC_SAVED_IDS: Int = 8

const val _SC_REALTIME_SIGNALS: Int = 9

const val _SC_PRIORITY_SCHEDULING: Int = 10

const val _SC_TIMERS: Int = 11

const val _SC_ASYNCHRONOUS_IO: Int = 12

const val _SC_PRIORITIZED_IO: Int = 13

const val _SC_SYNCHRONIZED_IO: Int = 14

const val _SC_FSYNC: Int = 15

const val _SC_MAPPED_FILES: Int = 16

const val _SC_MEMLOCK: Int = 17

const val _SC_MEMLOCK_RANGE: Int = 18

const val _SC_MEMORY_PROTECTION: Int = 19

const val _SC_MESSAGE_PASSING: Int = 20

const val _SC_SEMAPHORES: Int = 21

const val _SC_SHARED_MEMORY_OBJECTS: Int = 22

const val _SC_AIO_LISTIO_MAX: Int = 23

const val _SC_AIO_MAX: Int = 24

const val _SC_AIO_PRIO_DELTA_MAX: Int = 25

const val _SC_DELAYTIMER_MAX: Int = 26

const val _SC_MQ_OPEN_MAX: Int = 27

const val _SC_MQ_PRIO_MAX: Int = 28

const val _SC_VERSION: Int = 29

const val _SC_PAGESIZE: Int = 30

const val _SC_PAGE_SIZE: Int = 30

const val _SC_RTSIG_MAX: Int = 31

const val _SC_SEM_NSEMS_MAX: Int = 32

const val _SC_SEM_VALUE_MAX: Int = 33

const val _SC_SIGQUEUE_MAX: Int = 34

const val _SC_TIMER_MAX: Int = 35

const val _SC_BC_BASE_MAX: Int = 36

const val _SC_BC_DIM_MAX: Int = 37

const val _SC_BC_SCALE_MAX: Int = 38

const val _SC_BC_STRING_MAX: Int = 39

const val _SC_COLL_WEIGHTS_MAX: Int = 40

const val _SC_EQUIV_CLASS_MAX: Int = 41

const val _SC_EXPR_NEST_MAX: Int = 42

const val _SC_LINE_MAX: Int = 43

const val _SC_RE_DUP_MAX: Int = 44

const val _SC_CHARCLASS_NAME_MAX: Int = 45

const val _SC_2_VERSION: Int = 46

const val _SC_2_C_BIND: Int = 47

const val _SC_2_C_DEV: Int = 48

const val _SC_2_FORT_DEV: Int = 49

const val _SC_2_FORT_RUN: Int = 50

const val _SC_2_SW_DEV: Int = 51

const val _SC_2_LOCALEDEF: Int = 52

const val _SC_PII: Int = 53

const val _SC_PII_XTI: Int = 54

const val _SC_PII_SOCKET: Int = 55

const val _SC_PII_INTERNET: Int = 56

const val _SC_PII_OSI: Int = 57

const val _SC_POLL: Int = 58

const val _SC_SELECT: Int = 59

const val _SC_UIO_MAXIOV: Int = 60

const val _SC_IOV_MAX: Int = 60

const val _SC_PII_INTERNET_STREAM: Int = 61

const val _SC_PII_INTERNET_DGRAM: Int = 62

const val _SC_PII_OSI_COTS: Int = 63

const val _SC_PII_OSI_CLTS: Int = 64

const val _SC_PII_OSI_M: Int = 65

const val _SC_T_IOV_MAX: Int = 66

const val _SC_THREADS: Int = 67

const val _SC_THREAD_SAFE_FUNCTIONS: Int = 68

const val _SC_GETGR_R_SIZE_MAX: Int = 69

const val _SC_GETPW_R_SIZE_MAX: Int = 70

const val _SC_LOGIN_NAME_MAX: Int = 71

const val _SC_TTY_NAME_MAX: Int = 72

const val _SC_THREAD_DESTRUCTOR_ITERATIONS: Int = 73

const val _SC_THREAD_KEYS_MAX: Int = 74

const val _SC_THREAD_STACK_MIN: Int = 75

const val _SC_THREAD_THREADS_MAX: Int = 76

const val _SC_THREAD_ATTR_STACKADDR: Int = 77

const val _SC_THREAD_ATTR_STACKSIZE: Int = 78

const val _SC_THREAD_PRIORITY_SCHEDULING: Int = 79

const val _SC_THREAD_PRIO_INHERIT: Int = 80

const val _SC_THREAD_PRIO_PROTECT: Int = 81

const val _SC_THREAD_PROCESS_SHARED: Int = 82

const val _SC_NPROCESSORS_CONF: Int = 83

const val _SC_NPROCESSORS_ONLN: Int = 84

const val _SC_PHYS_PAGES: Int = 85

const val _SC_AVPHYS_PAGES: Int = 86

const val _SC_ATEXIT_MAX: Int = 87

const val _SC_PASS_MAX: Int = 88

const val _SC_XOPEN_VERSION: Int = 89

const val _SC_XOPEN_XCU_VERSION: Int = 90

const val _SC_XOPEN_UNIX: Int = 91

const val _SC_XOPEN_CRYPT: Int = 92

const val _SC_XOPEN_ENH_I18N: Int = 93

const val _SC_XOPEN_SHM: Int = 94

const val _SC_2_CHAR_TERM: Int = 95

const val _SC_2_C_VERSION: Int = 96

const val _SC_2_UPE: Int = 97

const val _SC_XOPEN_XPG2: Int = 98

const val _SC_XOPEN_XPG3: Int = 99

const val _SC_XOPEN_XPG4: Int = 100

const val _SC_CHAR_BIT: Int = 101

const val _SC_CHAR_MAX: Int = 102

const val _SC_CHAR_MIN: Int = 103

const val _SC_INT_MAX: Int = 104

const val _SC_INT_MIN: Int = 105

const val _SC_LONG_BIT: Int = 106

const val _SC_WORD_BIT: Int = 107

const val _SC_MB_LEN_MAX: Int = 108

const val _SC_NZERO: Int = 109

const val _SC_SSIZE_MAX: Int = 110

const val _SC_SCHAR_MAX: Int = 111

const val _SC_SCHAR_MIN: Int = 112

const val _SC_SHRT_MAX: Int = 113

const val _SC_SHRT_MIN: Int = 114

const val _SC_UCHAR_MAX: Int = 115

const val _SC_UINT_MAX: Int = 116

const val _SC_ULONG_MAX: Int = 117

const val _SC_USHRT_MAX: Int = 118

const val _SC_NL_ARGMAX: Int = 119

const val _SC_NL_LANGMAX: Int = 120

const val _SC_NL_MSGMAX: Int = 121

const val _SC_NL_NMAX: Int = 122

const val _SC_NL_SETMAX: Int = 123

const val _SC_NL_TEXTMAX: Int = 124

const val _SC_XBS5_ILP32_OFF32: Int = 125

const val _SC_XBS5_ILP32_OFFBIG: Int = 126

const val _SC_XBS5_LP64_OFF64: Int = 127

const val _SC_XBS5_LPBIG_OFFBIG: Int = 128

const val _SC_XOPEN_LEGACY: Int = 129

const val _SC_XOPEN_REALTIME: Int = 130

const val _SC_XOPEN_REALTIME_THREADS: Int = 131

const val _SC_ADVISORY_INFO: Int = 132

const val _SC_BARRIERS: Int = 133

const val _SC_BASE: Int = 134

const val _SC_C_LANG_SUPPORT: Int = 135

const val _SC_C_LANG_SUPPORT_R: Int = 136

const val _SC_CLOCK_SELECTION: Int = 137

const val _SC_CPUTIME: Int = 138

const val _SC_THREAD_CPUTIME: Int = 139

const val _SC_DEVICE_IO: Int = 140

const val _SC_DEVICE_SPECIFIC: Int = 141

const val _SC_DEVICE_SPECIFIC_R: Int = 142

const val _SC_FD_MGMT: Int = 143

const val _SC_FIFO: Int = 144

const val _SC_PIPE: Int = 145

const val _SC_FILE_ATTRIBUTES: Int = 146

const val _SC_FILE_LOCKING: Int = 147

const val _SC_FILE_SYSTEM: Int = 148

const val _SC_MONOTONIC_CLOCK: Int = 149

const val _SC_MULTI_PROCESS: Int = 150

const val _SC_SINGLE_PROCESS: Int = 151

const val _SC_NETWORKING: Int = 152

const val _SC_READER_WRITER_LOCKS: Int = 153

const val _SC_SPIN_LOCKS: Int = 154

const val _SC_REGEXP: Int = 155

const val _SC_REGEX_VERSION: Int = 156

const val _SC_SHELL: Int = 157

const val _SC_SIGNALS: Int = 158

const val _SC_SPAWN: Int = 159

const val _SC_SPORADIC_SERVER: Int = 160

const val _SC_THREAD_SPORADIC_SERVER: Int = 161

const val _SC_SYSTEM_DATABASE: Int = 162

const val _SC_SYSTEM_DATABASE_R: Int = 163

const val _SC_TIMEOUTS: Int = 164

const val _SC_TYPED_MEMORY_OBJECTS: Int = 165

const val _SC_USER_GROUPS: Int = 166

const val _SC_USER_GROUPS_R: Int = 167

const val _SC_2_PBS: Int = 168

const val _SC_2_PBS_ACCOUNTING: Int = 169

const val _SC_2_PBS_LOCATE: Int = 170

const val _SC_2_PBS_MESSAGE: Int = 171

const val _SC_2_PBS_TRACK: Int = 172

const val _SC_SYMLOOP_MAX: Int = 173

const val _SC_STREAMS: Int = 174

const val _SC_2_PBS_CHECKPOINT: Int = 175

const val _SC_V6_ILP32_OFF32: Int = 176

const val _SC_V6_ILP32_OFFBIG: Int = 177

const val _SC_V6_LP64_OFF64: Int = 178

const val _SC_V6_LPBIG_OFFBIG: Int = 179

const val _SC_HOST_NAME_MAX: Int = 180

const val _SC_TRACE: Int = 181

const val _SC_TRACE_EVENT_FILTER: Int = 182

const val _SC_TRACE_INHERIT: Int = 183

const val _SC_TRACE_LOG: Int = 184

const val _SC_LEVEL1_ICACHE_SIZE: Int = 185

const val _SC_LEVEL1_ICACHE_ASSOC: Int = 186

const val _SC_LEVEL1_ICACHE_LINESIZE: Int = 187

const val _SC_LEVEL1_DCACHE_SIZE: Int = 188

const val _SC_LEVEL1_DCACHE_ASSOC: Int = 189

const val _SC_LEVEL1_DCACHE_LINESIZE: Int = 190

const val _SC_LEVEL2_CACHE_SIZE: Int = 191

const val _SC_LEVEL2_CACHE_ASSOC: Int = 192

const val _SC_LEVEL2_CACHE_LINESIZE: Int = 193

const val _SC_LEVEL3_CACHE_SIZE: Int = 194

const val _SC_LEVEL3_CACHE_ASSOC: Int = 195

const val _SC_LEVEL3_CACHE_LINESIZE: Int = 196

const val _SC_LEVEL4_CACHE_SIZE: Int = 197

const val _SC_LEVEL4_CACHE_ASSOC: Int = 198

const val _SC_LEVEL4_CACHE_LINESIZE: Int = 199

const val _SC_IPV6: Int = 235

const val _SC_RAW_SOCKETS: Int = 236

const val _SC_V7_ILP32_OFF32: Int = 237

const val _SC_V7_ILP32_OFFBIG: Int = 238

const val _SC_V7_LP64_OFF64: Int = 239

const val _SC_V7_LPBIG_OFFBIG: Int = 240

const val _SC_SS_REPL_MAX: Int = 241

const val _SC_TRACE_EVENT_NAME_MAX: Int = 242

const val _SC_TRACE_NAME_MAX: Int = 243

const val _SC_TRACE_SYS_MAX: Int = 244

const val _SC_TRACE_USER_EVENT_MAX: Int = 245

const val _SC_XOPEN_STREAMS: Int = 246

const val _SC_THREAD_ROBUST_PRIO_INHERIT: Int = 247

const val _SC_THREAD_ROBUST_PRIO_PROTECT: Int = 248

const val _CS_PATH: Int = 0

const val _CS_V6_WIDTH_RESTRICTED_ENVS: Int = 1

const val _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: Int = 1

const val _CS_GNU_LIBC_VERSION: Int = 2

const val _CS_GNU_LIBPTHREAD_VERSION: Int = 3

const val _CS_V5_WIDTH_RESTRICTED_ENVS: Int = 4

const val _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS: Int = 4

const val _CS_V7_WIDTH_RESTRICTED_ENVS: Int = 5

const val _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS: Int = 5

const val _CS_LFS_CFLAGS: Int = 1000

const val _CS_LFS_LDFLAGS: Int = 1001

const val _CS_LFS_LIBS: Int = 1002

const val _CS_LFS_LINTFLAGS: Int = 1003

const val _CS_LFS64_CFLAGS: Int = 1004

const val _CS_LFS64_LDFLAGS: Int = 1005

const val _CS_LFS64_LIBS: Int = 1006

const val _CS_LFS64_LINTFLAGS: Int = 1007

const val _CS_XBS5_ILP32_OFF32_CFLAGS: Int = 1100

const val _CS_XBS5_ILP32_OFF32_LDFLAGS: Int = 1101

const val _CS_XBS5_ILP32_OFF32_LIBS: Int = 1102

const val _CS_XBS5_ILP32_OFF32_LINTFLAGS: Int = 1103

const val _CS_XBS5_ILP32_OFFBIG_CFLAGS: Int = 1104

const val _CS_XBS5_ILP32_OFFBIG_LDFLAGS: Int = 1105

const val _CS_XBS5_ILP32_OFFBIG_LIBS: Int = 1106

const val _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: Int = 1107

const val _CS_XBS5_LP64_OFF64_CFLAGS: Int = 1108

const val _CS_XBS5_LP64_OFF64_LDFLAGS: Int = 1109

const val _CS_XBS5_LP64_OFF64_LIBS: Int = 1110

const val _CS_XBS5_LP64_OFF64_LINTFLAGS: Int = 1111

const val _CS_XBS5_LPBIG_OFFBIG_CFLAGS: Int = 1112

const val _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: Int = 1113

const val _CS_XBS5_LPBIG_OFFBIG_LIBS: Int = 1114

const val _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: Int = 1115

const val _CS_POSIX_V6_ILP32_OFF32_CFLAGS: Int = 1116

const val _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: Int = 1117

const val _CS_POSIX_V6_ILP32_OFF32_LIBS: Int = 1118

const val _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: Int = 1119

const val _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: Int = 1120

const val _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: Int = 1121

const val _CS_POSIX_V6_ILP32_OFFBIG_LIBS: Int = 1122

const val _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: Int = 1123

const val _CS_POSIX_V6_LP64_OFF64_CFLAGS: Int = 1124

const val _CS_POSIX_V6_LP64_OFF64_LDFLAGS: Int = 1125

const val _CS_POSIX_V6_LP64_OFF64_LIBS: Int = 1126

const val _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: Int = 1127

const val _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: Int = 1128

const val _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: Int = 1129

const val _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: Int = 1130

const val _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: Int = 1131

const val _CS_POSIX_V7_ILP32_OFF32_CFLAGS: Int = 1132

const val _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: Int = 1133

const val _CS_POSIX_V7_ILP32_OFF32_LIBS: Int = 1134

const val _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: Int = 1135

const val _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: Int = 1136

const val _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: Int = 1137

const val _CS_POSIX_V7_ILP32_OFFBIG_LIBS: Int = 1138

const val _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: Int = 1139

const val _CS_POSIX_V7_LP64_OFF64_CFLAGS: Int = 1140

const val _CS_POSIX_V7_LP64_OFF64_LDFLAGS: Int = 1141

const val _CS_POSIX_V7_LP64_OFF64_LIBS: Int = 1142

const val _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: Int = 1143

const val _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: Int = 1144

const val _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: Int = 1145

const val _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: Int = 1146

const val _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: Int = 1147

const val _CS_V6_ENV: Int = 1148

const val _CS_V7_ENV: Int = 1149

const val _GETOPT_POSIX_H: Int = 1

const val _GETOPT_CORE_H: Int = 1

const val F_ULOCK: Int = 0

const val F_LOCK: Int = 1

const val F_TLOCK: Int = 2

const val F_TEST: Int = 3

const val __BITS_PER_LONG: Int = 64

const val _LINUX_CAPABILITY_VERSION_1: Int = 429392688

const val _LINUX_CAPABILITY_U32S_1: Int = 1

const val _LINUX_CAPABILITY_VERSION_2: Int = 537333798

const val _LINUX_CAPABILITY_U32S_2: Int = 2

const val _LINUX_CAPABILITY_VERSION_3: Int = 537396514

const val _LINUX_CAPABILITY_U32S_3: Int = 2

const val VFS_CAP_REVISION_MASK: UInt = 4278190080u

const val VFS_CAP_REVISION_SHIFT: Int = 24

const val VFS_CAP_FLAGS_MASK: UInt = 16777215u

const val VFS_CAP_FLAGS_EFFECTIVE: Int = 1

const val VFS_CAP_REVISION_1: Int = 16777216

const val VFS_CAP_U32_1: Int = 1

const val XATTR_CAPS_SZ_1: ULong = 12u

const val VFS_CAP_REVISION_2: Int = 33554432

const val VFS_CAP_U32_2: Int = 2

const val XATTR_CAPS_SZ_2: ULong = 20u

const val VFS_CAP_REVISION_3: Int = 50331648

const val VFS_CAP_U32_3: Int = 2

const val XATTR_CAPS_SZ_3: ULong = 24u

const val XATTR_CAPS_SZ: ULong = 24u

const val VFS_CAP_U32: Int = 2

const val VFS_CAP_REVISION: Int = 50331648

const val _LINUX_CAPABILITY_VERSION: Int = 429392688

const val _LINUX_CAPABILITY_U32S: Int = 1

const val CAP_CHOWN: Int = 0

const val CAP_DAC_OVERRIDE: Int = 1

const val CAP_DAC_READ_SEARCH: Int = 2

const val CAP_FOWNER: Int = 3

const val CAP_FSETID: Int = 4

const val CAP_KILL: Int = 5

const val CAP_SETGID: Int = 6

const val CAP_SETUID: Int = 7

const val CAP_SETPCAP: Int = 8

const val CAP_LINUX_IMMUTABLE: Int = 9

const val CAP_NET_BIND_SERVICE: Int = 10

const val CAP_NET_BROADCAST: Int = 11

const val CAP_NET_ADMIN: Int = 12

const val CAP_NET_RAW: Int = 13

const val CAP_IPC_LOCK: Int = 14

const val CAP_IPC_OWNER: Int = 15

const val CAP_SYS_MODULE: Int = 16

const val CAP_SYS_RAWIO: Int = 17

const val CAP_SYS_CHROOT: Int = 18

const val CAP_SYS_PTRACE: Int = 19

const val CAP_SYS_PACCT: Int = 20

const val CAP_SYS_ADMIN: Int = 21

const val CAP_SYS_BOOT: Int = 22

const val CAP_SYS_NICE: Int = 23

const val CAP_SYS_RESOURCE: Int = 24

const val CAP_SYS_TIME: Int = 25

const val CAP_SYS_TTY_CONFIG: Int = 26

const val CAP_MKNOD: Int = 27

const val CAP_LEASE: Int = 28

const val CAP_AUDIT_WRITE: Int = 29

const val CAP_AUDIT_CONTROL: Int = 30

const val CAP_SETFCAP: Int = 31

const val CAP_MAC_OVERRIDE: Int = 32

const val CAP_MAC_ADMIN: Int = 33

const val CAP_SYSLOG: Int = 34

const val CAP_WAKE_ALARM: Int = 35

const val CAP_BLOCK_SUSPEND: Int = 36

const val CAP_AUDIT_READ: Int = 37

const val CAP_LAST_CAP: Int = 37

const val _SYS_POLL_H: Int = 1

const val POLLIN: Int = 1

const val POLLPRI: Int = 2

const val POLLOUT: Int = 4

const val POLLRDNORM: Int = 64

const val POLLRDBAND: Int = 128

const val POLLWRNORM: Int = 256

const val POLLWRBAND: Int = 512

const val POLLERR: Int = 8

const val POLLHUP: Int = 16

const val POLLNVAL: Int = 32

const val _NETDB_H: Int = 1

const val _NETINET_IN_H: Int = 1

const val _SYS_SOCKET_H: Int = 1

const val __iovec_defined: Int = 1

const val SOCK_STREAM: Int = 1

const val SOCK_DGRAM: Int = 2

const val SOCK_RAW: Int = 3

const val SOCK_RDM: Int = 4

const val SOCK_SEQPACKET: Int = 5

const val SOCK_DCCP: Int = 6

const val SOCK_PACKET: Int = 10

const val SOCK_CLOEXEC: Int = 524288

const val SOCK_NONBLOCK: Int = 2048

const val PF_UNSPEC: Int = 0

const val PF_LOCAL: Int = 1

const val PF_UNIX: Int = 1

const val PF_FILE: Int = 1

const val PF_INET: Int = 2

const val PF_AX25: Int = 3

const val PF_IPX: Int = 4

const val PF_APPLETALK: Int = 5

const val PF_NETROM: Int = 6

const val PF_BRIDGE: Int = 7

const val PF_ATMPVC: Int = 8

const val PF_X25: Int = 9

const val PF_INET6: Int = 10

const val PF_ROSE: Int = 11

const val PF_DECnet: Int = 12

const val PF_NETBEUI: Int = 13

const val PF_SECURITY: Int = 14

const val PF_KEY: Int = 15

const val PF_NETLINK: Int = 16

const val PF_ROUTE: Int = 16

const val PF_PACKET: Int = 17

const val PF_ASH: Int = 18

const val PF_ECONET: Int = 19

const val PF_ATMSVC: Int = 20

const val PF_RDS: Int = 21

const val PF_SNA: Int = 22

const val PF_IRDA: Int = 23

const val PF_PPPOX: Int = 24

const val PF_WANPIPE: Int = 25

const val PF_LLC: Int = 26

const val PF_IB: Int = 27

const val PF_MPLS: Int = 28

const val PF_CAN: Int = 29

const val PF_TIPC: Int = 30

const val PF_BLUETOOTH: Int = 31

const val PF_IUCV: Int = 32

const val PF_RXRPC: Int = 33

const val PF_ISDN: Int = 34

const val PF_PHONET: Int = 35

const val PF_IEEE802154: Int = 36

const val PF_CAIF: Int = 37

const val PF_ALG: Int = 38

const val PF_NFC: Int = 39

const val PF_VSOCK: Int = 40

const val PF_KCM: Int = 41

const val PF_QIPCRTR: Int = 42

const val PF_SMC: Int = 43

const val PF_MAX: Int = 44

const val AF_UNSPEC: Int = 0

const val AF_LOCAL: Int = 1

const val AF_UNIX: Int = 1

const val AF_FILE: Int = 1

const val AF_INET: Int = 2

const val AF_AX25: Int = 3

const val AF_IPX: Int = 4

const val AF_APPLETALK: Int = 5

const val AF_NETROM: Int = 6

const val AF_BRIDGE: Int = 7

const val AF_ATMPVC: Int = 8

const val AF_X25: Int = 9

const val AF_INET6: Int = 10

const val AF_ROSE: Int = 11

const val AF_DECnet: Int = 12

const val AF_NETBEUI: Int = 13

const val AF_SECURITY: Int = 14

const val AF_KEY: Int = 15

const val AF_NETLINK: Int = 16

const val AF_ROUTE: Int = 16

const val AF_PACKET: Int = 17

const val AF_ASH: Int = 18

const val AF_ECONET: Int = 19

const val AF_ATMSVC: Int = 20

const val AF_RDS: Int = 21

const val AF_SNA: Int = 22

const val AF_IRDA: Int = 23

const val AF_PPPOX: Int = 24

const val AF_WANPIPE: Int = 25

const val AF_LLC: Int = 26

const val AF_IB: Int = 27

const val AF_MPLS: Int = 28

const val AF_CAN: Int = 29

const val AF_TIPC: Int = 30

const val AF_BLUETOOTH: Int = 31

const val AF_IUCV: Int = 32

const val AF_RXRPC: Int = 33

const val AF_ISDN: Int = 34

const val AF_PHONET: Int = 35

const val AF_IEEE802154: Int = 36

const val AF_CAIF: Int = 37

const val AF_ALG: Int = 38

const val AF_NFC: Int = 39

const val AF_VSOCK: Int = 40

const val AF_KCM: Int = 41

const val AF_QIPCRTR: Int = 42

const val AF_SMC: Int = 43

const val AF_MAX: Int = 44

const val SOL_RAW: Int = 255

const val SOL_DECNET: Int = 261

const val SOL_X25: Int = 262

const val SOL_PACKET: Int = 263

const val SOL_ATM: Int = 264

const val SOL_AAL: Int = 265

const val SOL_IRDA: Int = 266

const val SOL_NETBEUI: Int = 267

const val SOL_LLC: Int = 268

const val SOL_DCCP: Int = 269

const val SOL_NETLINK: Int = 270

const val SOL_TIPC: Int = 271

const val SOL_RXRPC: Int = 272

const val SOL_PPPOL2TP: Int = 273

const val SOL_BLUETOOTH: Int = 274

const val SOL_PNPIPE: Int = 275

const val SOL_RDS: Int = 276

const val SOL_IUCV: Int = 277

const val SOL_CAIF: Int = 278

const val SOL_ALG: Int = 279

const val SOL_NFC: Int = 280

const val SOL_KCM: Int = 281

const val SOL_TLS: Int = 282

const val SOMAXCONN: Int = 128

const val _BITS_SOCKADDR_H: Int = 1

const val __SOCKADDR_COMMON_SIZE: ULong = 2u

const val _SS_SIZE: Int = 128

const val _SS_PADSIZE: ULong = 118u

const val MSG_OOB: Int = 1

const val MSG_PEEK: Int = 2

const val MSG_DONTROUTE: Int = 4

const val MSG_CTRUNC: Int = 8

const val MSG_PROXY: Int = 16

const val MSG_TRUNC: Int = 32

const val MSG_DONTWAIT: Int = 64

const val MSG_EOR: Int = 128

const val MSG_WAITALL: Int = 256

const val MSG_FIN: Int = 512

const val MSG_SYN: Int = 1024

const val MSG_CONFIRM: Int = 2048

const val MSG_RST: Int = 4096

const val MSG_ERRQUEUE: Int = 8192

const val MSG_NOSIGNAL: Int = 16384

const val MSG_MORE: Int = 32768

const val MSG_WAITFORONE: Int = 65536

const val MSG_BATCH: Int = 262144

const val MSG_ZEROCOPY: Int = 67108864

const val MSG_FASTOPEN: Int = 536870912

const val MSG_CMSG_CLOEXEC: Int = 1073741824

const val SCM_RIGHTS: Int = 1

const val FIOSETOWN: Int = 35073

const val SIOCSPGRP: Int = 35074

const val FIOGETOWN: Int = 35075

const val SIOCGPGRP: Int = 35076

const val SIOCATMARK: Int = 35077

const val SIOCGSTAMP: Int = 35078

const val SIOCGSTAMPNS: Int = 35079

const val SOL_SOCKET: Int = 1

const val SO_DEBUG: Int = 1

const val SO_REUSEADDR: Int = 2

const val SO_TYPE: Int = 3

const val SO_ERROR: Int = 4

const val SO_DONTROUTE: Int = 5

const val SO_BROADCAST: Int = 6

const val SO_SNDBUF: Int = 7

const val SO_RCVBUF: Int = 8

const val SO_SNDBUFFORCE: Int = 32

const val SO_RCVBUFFORCE: Int = 33

const val SO_KEEPALIVE: Int = 9

const val SO_OOBINLINE: Int = 10

const val SO_NO_CHECK: Int = 11

const val SO_PRIORITY: Int = 12

const val SO_LINGER: Int = 13

const val SO_BSDCOMPAT: Int = 14

const val SO_REUSEPORT: Int = 15

const val SO_PASSCRED: Int = 16

const val SO_PEERCRED: Int = 17

const val SO_RCVLOWAT: Int = 18

const val SO_SNDLOWAT: Int = 19

const val SO_RCVTIMEO: Int = 20

const val SO_SNDTIMEO: Int = 21

const val SO_SECURITY_AUTHENTICATION: Int = 22

const val SO_SECURITY_ENCRYPTION_TRANSPORT: Int = 23

const val SO_SECURITY_ENCRYPTION_NETWORK: Int = 24

const val SO_BINDTODEVICE: Int = 25

const val SO_ATTACH_FILTER: Int = 26

const val SO_DETACH_FILTER: Int = 27

const val SO_GET_FILTER: Int = 26

const val SO_PEERNAME: Int = 28

const val SO_TIMESTAMP: Int = 29

const val SCM_TIMESTAMP: Int = 29

const val SO_ACCEPTCONN: Int = 30

const val SO_PEERSEC: Int = 31

const val SO_PASSSEC: Int = 34

const val SO_TIMESTAMPNS: Int = 35

const val SCM_TIMESTAMPNS: Int = 35

const val SO_MARK: Int = 36

const val SO_TIMESTAMPING: Int = 37

const val SCM_TIMESTAMPING: Int = 37

const val SO_PROTOCOL: Int = 38

const val SO_DOMAIN: Int = 39

const val SO_RXQ_OVFL: Int = 40

const val SO_WIFI_STATUS: Int = 41

const val SCM_WIFI_STATUS: Int = 41

const val SO_PEEK_OFF: Int = 42

const val SO_NOFCS: Int = 43

const val SO_LOCK_FILTER: Int = 44

const val SO_SELECT_ERR_QUEUE: Int = 45

const val SO_BUSY_POLL: Int = 46

const val SO_MAX_PACING_RATE: Int = 47

const val SO_BPF_EXTENSIONS: Int = 48

const val SO_INCOMING_CPU: Int = 49

const val SO_ATTACH_BPF: Int = 50

const val SO_DETACH_BPF: Int = 27

const val SO_ATTACH_REUSEPORT_CBPF: Int = 51

const val SO_ATTACH_REUSEPORT_EBPF: Int = 52

const val SO_CNX_ADVICE: Int = 53

const val SCM_TIMESTAMPING_OPT_STATS: Int = 54

const val SO_MEMINFO: Int = 55

const val SO_INCOMING_NAPI_ID: Int = 56

const val SO_COOKIE: Int = 57

const val SCM_TIMESTAMPING_PKTINFO: Int = 58

const val SO_PEERGROUPS: Int = 59

const val SO_ZEROCOPY: Int = 60

const val __osockaddr_defined: Int = 1

const val SHUT_RD: Int = 0

const val SHUT_WR: Int = 1

const val SHUT_RDWR: Int = 2

const val __USE_KERNEL_IPV6_DEFS: Int = 0

const val IP_OPTIONS: Int = 4

const val IP_HDRINCL: Int = 3

const val IP_TOS: Int = 1

const val IP_TTL: Int = 2

const val IP_RECVOPTS: Int = 6

const val IP_RECVRETOPTS: Int = 7

const val IP_RETOPTS: Int = 7

const val IP_MULTICAST_IF: Int = 32

const val IP_MULTICAST_TTL: Int = 33

const val IP_MULTICAST_LOOP: Int = 34

const val IP_ADD_MEMBERSHIP: Int = 35

const val IP_DROP_MEMBERSHIP: Int = 36

const val IP_UNBLOCK_SOURCE: Int = 37

const val IP_BLOCK_SOURCE: Int = 38

const val IP_ADD_SOURCE_MEMBERSHIP: Int = 39

const val IP_DROP_SOURCE_MEMBERSHIP: Int = 40

const val IP_MSFILTER: Int = 41

const val MCAST_JOIN_GROUP: Int = 42

const val MCAST_BLOCK_SOURCE: Int = 43

const val MCAST_UNBLOCK_SOURCE: Int = 44

const val MCAST_LEAVE_GROUP: Int = 45

const val MCAST_JOIN_SOURCE_GROUP: Int = 46

const val MCAST_LEAVE_SOURCE_GROUP: Int = 47

const val MCAST_MSFILTER: Int = 48

const val IP_MULTICAST_ALL: Int = 49

const val IP_UNICAST_IF: Int = 50

const val MCAST_EXCLUDE: Int = 0

const val MCAST_INCLUDE: Int = 1

const val IP_ROUTER_ALERT: Int = 5

const val IP_PKTINFO: Int = 8

const val IP_PKTOPTIONS: Int = 9

const val IP_PMTUDISC: Int = 10

const val IP_MTU_DISCOVER: Int = 10

const val IP_RECVERR: Int = 11

const val IP_RECVTTL: Int = 12

const val IP_RECVTOS: Int = 13

const val IP_MTU: Int = 14

const val IP_FREEBIND: Int = 15

const val IP_IPSEC_POLICY: Int = 16

const val IP_XFRM_POLICY: Int = 17

const val IP_PASSSEC: Int = 18

const val IP_TRANSPARENT: Int = 19

const val IP_ORIGDSTADDR: Int = 20

const val IP_RECVORIGDSTADDR: Int = 20

const val IP_MINTTL: Int = 21

const val IP_NODEFRAG: Int = 22

const val IP_CHECKSUM: Int = 23

const val IP_BIND_ADDRESS_NO_PORT: Int = 24

const val IP_RECVFRAGSIZE: Int = 25

const val IP_PMTUDISC_DONT: Int = 0

const val IP_PMTUDISC_WANT: Int = 1

const val IP_PMTUDISC_DO: Int = 2

const val IP_PMTUDISC_PROBE: Int = 3

const val IP_PMTUDISC_INTERFACE: Int = 4

const val IP_PMTUDISC_OMIT: Int = 5

const val SOL_IP: Int = 0

const val IP_DEFAULT_MULTICAST_TTL: Int = 1

const val IP_DEFAULT_MULTICAST_LOOP: Int = 1

const val IP_MAX_MEMBERSHIPS: Int = 20

const val IPV6_ADDRFORM: Int = 1

const val IPV6_2292PKTINFO: Int = 2

const val IPV6_2292HOPOPTS: Int = 3

const val IPV6_2292DSTOPTS: Int = 4

const val IPV6_2292RTHDR: Int = 5

const val IPV6_2292PKTOPTIONS: Int = 6

const val IPV6_CHECKSUM: Int = 7

const val IPV6_2292HOPLIMIT: Int = 8

const val IPV6_NEXTHOP: Int = 9

const val IPV6_AUTHHDR: Int = 10

const val IPV6_UNICAST_HOPS: Int = 16

const val IPV6_MULTICAST_IF: Int = 17

const val IPV6_MULTICAST_HOPS: Int = 18

const val IPV6_MULTICAST_LOOP: Int = 19

const val IPV6_JOIN_GROUP: Int = 20

const val IPV6_LEAVE_GROUP: Int = 21

const val IPV6_ROUTER_ALERT: Int = 22

const val IPV6_MTU_DISCOVER: Int = 23

const val IPV6_MTU: Int = 24

const val IPV6_RECVERR: Int = 25

const val IPV6_V6ONLY: Int = 26

const val IPV6_JOIN_ANYCAST: Int = 27

const val IPV6_LEAVE_ANYCAST: Int = 28

const val IPV6_IPSEC_POLICY: Int = 34

const val IPV6_XFRM_POLICY: Int = 35

const val IPV6_HDRINCL: Int = 36

const val IPV6_RECVPKTINFO: Int = 49

const val IPV6_PKTINFO: Int = 50

const val IPV6_RECVHOPLIMIT: Int = 51

const val IPV6_HOPLIMIT: Int = 52

const val IPV6_RECVHOPOPTS: Int = 53

const val IPV6_HOPOPTS: Int = 54

const val IPV6_RTHDRDSTOPTS: Int = 55

const val IPV6_RECVRTHDR: Int = 56

const val IPV6_RTHDR: Int = 57

const val IPV6_RECVDSTOPTS: Int = 58

const val IPV6_DSTOPTS: Int = 59

const val IPV6_RECVPATHMTU: Int = 60

const val IPV6_PATHMTU: Int = 61

const val IPV6_DONTFRAG: Int = 62

const val IPV6_RECVTCLASS: Int = 66

const val IPV6_TCLASS: Int = 67

const val IPV6_AUTOFLOWLABEL: Int = 70

const val IPV6_ADDR_PREFERENCES: Int = 72

const val IPV6_MINHOPCOUNT: Int = 73

const val IPV6_ORIGDSTADDR: Int = 74

const val IPV6_RECVORIGDSTADDR: Int = 74

const val IPV6_TRANSPARENT: Int = 75

const val IPV6_UNICAST_IF: Int = 76

const val IPV6_RECVFRAGSIZE: Int = 77

const val IPV6_ADD_MEMBERSHIP: Int = 20

const val IPV6_DROP_MEMBERSHIP: Int = 21

const val IPV6_RXHOPOPTS: Int = 54

const val IPV6_RXDSTOPTS: Int = 59

const val IPV6_PMTUDISC_DONT: Int = 0

const val IPV6_PMTUDISC_WANT: Int = 1

const val IPV6_PMTUDISC_DO: Int = 2

const val IPV6_PMTUDISC_PROBE: Int = 3

const val IPV6_PMTUDISC_INTERFACE: Int = 4

const val IPV6_PMTUDISC_OMIT: Int = 5

const val SOL_IPV6: Int = 41

const val SOL_ICMPV6: Int = 58

const val IPV6_RTHDR_LOOSE: Int = 0

const val IPV6_RTHDR_STRICT: Int = 1

const val IPV6_RTHDR_TYPE_0: Int = 0

const val IPPROTO_IP: Int = 0

const val IPPROTO_ICMP: Int = 1

const val IPPROTO_IGMP: Int = 2

const val IPPROTO_IPIP: Int = 4

const val IPPROTO_TCP: Int = 6

const val IPPROTO_EGP: Int = 8

const val IPPROTO_PUP: Int = 12

const val IPPROTO_UDP: Int = 17

const val IPPROTO_IDP: Int = 22

const val IPPROTO_TP: Int = 29

const val IPPROTO_DCCP: Int = 33

const val IPPROTO_IPV6: Int = 41

const val IPPROTO_RSVP: Int = 46

const val IPPROTO_GRE: Int = 47

const val IPPROTO_ESP: Int = 50

const val IPPROTO_AH: Int = 51

const val IPPROTO_MTP: Int = 92

const val IPPROTO_BEETPH: Int = 94

const val IPPROTO_ENCAP: Int = 98

const val IPPROTO_PIM: Int = 103

const val IPPROTO_COMP: Int = 108

const val IPPROTO_SCTP: Int = 132

const val IPPROTO_UDPLITE: Int = 136

const val IPPROTO_MPLS: Int = 137

const val IPPROTO_RAW: Int = 255

const val IPPROTO_HOPOPTS: Int = 0

const val IPPROTO_ROUTING: Int = 43

const val IPPROTO_FRAGMENT: Int = 44

const val IPPROTO_ICMPV6: Int = 58

const val IPPROTO_NONE: Int = 59

const val IPPROTO_DSTOPTS: Int = 60

const val IPPROTO_MH: Int = 135

const val IN_CLASSA_NET: UInt = 4278190080u

const val IN_CLASSA_NSHIFT: Int = 24

const val IN_CLASSA_HOST: UInt = 16777215u

const val IN_CLASSA_MAX: Int = 128

const val IN_CLASSB_NET: UInt = 4294901760u

const val IN_CLASSB_NSHIFT: Int = 16

const val IN_CLASSB_HOST: UInt = 65535u

const val IN_CLASSB_MAX: Int = 65536

const val IN_CLASSC_NET: UInt = 4294967040u

const val IN_CLASSC_NSHIFT: Int = 8

const val IN_CLASSC_HOST: UInt = 255u

const val INADDR_ANY: in_addr_t = 0u

const val INADDR_BROADCAST: in_addr_t = 4294967295u

const val INADDR_NONE: in_addr_t = 4294967295u

const val IN_LOOPBACKNET: Int = 127

const val INADDR_LOOPBACK: in_addr_t = 2130706433u

const val INADDR_UNSPEC_GROUP: in_addr_t = 3758096384u

const val INADDR_ALLHOSTS_GROUP: in_addr_t = 3758096385u

const val INADDR_ALLRTRS_GROUP: in_addr_t = 3758096386u

const val INADDR_MAX_LOCAL_GROUP: in_addr_t = 3758096639u

const val INET_ADDRSTRLEN: Int = 16

const val INET6_ADDRSTRLEN: Int = 46

const val _RPC_NETDB_H: Int = 1

val _PATH_HEQUIV: String get() = "\u002Fetc\u002Fhosts.equiv"

val _PATH_HOSTS: String get() = "\u002Fetc\u002Fhosts"

val _PATH_NETWORKS: String get() = "\u002Fetc\u002Fnetworks"

val _PATH_NSSWITCH_CONF: String get() = "\u002Fetc\u002Fnsswitch.conf"

val _PATH_PROTOCOLS: String get() = "\u002Fetc\u002Fprotocols"

val _PATH_SERVICES: String get() = "\u002Fetc\u002Fservices"

const val HOST_NOT_FOUND: Int = 1

const val TRY_AGAIN: Int = 2

const val NO_RECOVERY: Int = 3

const val NO_DATA: Int = 4

const val NETDB_INTERNAL: Int = -1

const val NETDB_SUCCESS: Int = 0

const val NO_ADDRESS: Int = 4

const val IPPORT_RESERVED: Int = 1024

const val AI_PASSIVE: Int = 1

const val AI_CANONNAME: Int = 2

const val AI_NUMERICHOST: Int = 4

const val AI_V4MAPPED: Int = 8

const val AI_ALL: Int = 16

const val AI_ADDRCONFIG: Int = 32

const val AI_NUMERICSERV: Int = 1024

const val EAI_BADFLAGS: Int = -1

const val EAI_NONAME: Int = -2

const val EAI_AGAIN: Int = -3

const val EAI_FAIL: Int = -4

const val EAI_FAMILY: Int = -6

const val EAI_SOCKTYPE: Int = -7

const val EAI_SERVICE: Int = -8

const val EAI_MEMORY: Int = -10

const val EAI_SYSTEM: Int = -11

const val EAI_OVERFLOW: Int = -12

const val NI_MAXHOST: Int = 1025

const val NI_MAXSERV: Int = 32

const val NI_NUMERICHOST: Int = 1

const val NI_NUMERICSERV: Int = 2

const val NI_NOFQDN: Int = 4

const val NI_NAMEREQD: Int = 8

const val NI_DGRAM: Int = 16

const val LWS_INVALID_FILE: Int = -1

const val _SYS_TIME_H: Int = 1

const val ITIMER_REAL: Int = 0

const val ITIMER_VIRTUAL: Int = 1

const val ITIMER_PROF: Int = 2

val OPENSSL_FILE: String get() = "\u002Ftmp\u002Ftmp5195703323054091833.c"

const val OPENSSL_LINE: Int = 1

const val OPENSSL_MIN_API: Int = 0

const val OPENSSL_API_COMPAT: Int = 0

const val _INTTYPES_H: Int = 1

const val ____gwchar_t_defined: Int = 1

val __PRI64_PREFIX: String get() = "l"

val __PRIPTR_PREFIX: String get() = "l"

val PRId8: String get() = "d"

val PRId16: String get() = "d"

val PRId32: String get() = "d"

val PRId64: String get() = "ld"

val PRIdLEAST8: String get() = "d"

val PRIdLEAST16: String get() = "d"

val PRIdLEAST32: String get() = "d"

val PRIdLEAST64: String get() = "ld"

val PRIdFAST8: String get() = "d"

val PRIdFAST16: String get() = "ld"

val PRIdFAST32: String get() = "ld"

val PRIdFAST64: String get() = "ld"

val PRIi8: String get() = "i"

val PRIi16: String get() = "i"

val PRIi32: String get() = "i"

val PRIi64: String get() = "li"

val PRIiLEAST8: String get() = "i"

val PRIiLEAST16: String get() = "i"

val PRIiLEAST32: String get() = "i"

val PRIiLEAST64: String get() = "li"

val PRIiFAST8: String get() = "i"

val PRIiFAST16: String get() = "li"

val PRIiFAST32: String get() = "li"

val PRIiFAST64: String get() = "li"

val PRIo8: String get() = "o"

val PRIo16: String get() = "o"

val PRIo32: String get() = "o"

val PRIo64: String get() = "lo"

val PRIoLEAST8: String get() = "o"

val PRIoLEAST16: String get() = "o"

val PRIoLEAST32: String get() = "o"

val PRIoLEAST64: String get() = "lo"

val PRIoFAST8: String get() = "o"

val PRIoFAST16: String get() = "lo"

val PRIoFAST32: String get() = "lo"

val PRIoFAST64: String get() = "lo"

val PRIu8: String get() = "u"

val PRIu16: String get() = "u"

val PRIu32: String get() = "u"

val PRIu64: String get() = "lu"

val PRIuLEAST8: String get() = "u"

val PRIuLEAST16: String get() = "u"

val PRIuLEAST32: String get() = "u"

val PRIuLEAST64: String get() = "lu"

val PRIuFAST8: String get() = "u"

val PRIuFAST16: String get() = "lu"

val PRIuFAST32: String get() = "lu"

val PRIuFAST64: String get() = "lu"

val PRIx8: String get() = "x"

val PRIx16: String get() = "x"

val PRIx32: String get() = "x"

val PRIx64: String get() = "lx"

val PRIxLEAST8: String get() = "x"

val PRIxLEAST16: String get() = "x"

val PRIxLEAST32: String get() = "x"

val PRIxLEAST64: String get() = "lx"

val PRIxFAST8: String get() = "x"

val PRIxFAST16: String get() = "lx"

val PRIxFAST32: String get() = "lx"

val PRIxFAST64: String get() = "lx"

val PRIX8: String get() = "X"

val PRIX16: String get() = "X"

val PRIX32: String get() = "X"

val PRIX64: String get() = "lX"

val PRIXLEAST8: String get() = "X"

val PRIXLEAST16: String get() = "X"

val PRIXLEAST32: String get() = "X"

val PRIXLEAST64: String get() = "lX"

val PRIXFAST8: String get() = "X"

val PRIXFAST16: String get() = "lX"

val PRIXFAST32: String get() = "lX"

val PRIXFAST64: String get() = "lX"

val PRIdMAX: String get() = "ld"

val PRIiMAX: String get() = "li"

val PRIoMAX: String get() = "lo"

val PRIuMAX: String get() = "lu"

val PRIxMAX: String get() = "lx"

val PRIXMAX: String get() = "lX"

val PRIdPTR: String get() = "ld"

val PRIiPTR: String get() = "li"

val PRIoPTR: String get() = "lo"

val PRIuPTR: String get() = "lu"

val PRIxPTR: String get() = "lx"

val PRIXPTR: String get() = "lX"

val SCNd8: String get() = "hhd"

val SCNd16: String get() = "hd"

val SCNd32: String get() = "d"

val SCNd64: String get() = "ld"

val SCNdLEAST8: String get() = "hhd"

val SCNdLEAST16: String get() = "hd"

val SCNdLEAST32: String get() = "d"

val SCNdLEAST64: String get() = "ld"

val SCNdFAST8: String get() = "hhd"

val SCNdFAST16: String get() = "ld"

val SCNdFAST32: String get() = "ld"

val SCNdFAST64: String get() = "ld"

val SCNi8: String get() = "hhi"

val SCNi16: String get() = "hi"

val SCNi32: String get() = "i"

val SCNi64: String get() = "li"

val SCNiLEAST8: String get() = "hhi"

val SCNiLEAST16: String get() = "hi"

val SCNiLEAST32: String get() = "i"

val SCNiLEAST64: String get() = "li"

val SCNiFAST8: String get() = "hhi"

val SCNiFAST16: String get() = "li"

val SCNiFAST32: String get() = "li"

val SCNiFAST64: String get() = "li"

val SCNu8: String get() = "hhu"

val SCNu16: String get() = "hu"

val SCNu32: String get() = "u"

val SCNu64: String get() = "lu"

val SCNuLEAST8: String get() = "hhu"

val SCNuLEAST16: String get() = "hu"

val SCNuLEAST32: String get() = "u"

val SCNuLEAST64: String get() = "lu"

val SCNuFAST8: String get() = "hhu"

val SCNuFAST16: String get() = "lu"

val SCNuFAST32: String get() = "lu"

val SCNuFAST64: String get() = "lu"

val SCNo8: String get() = "hho"

val SCNo16: String get() = "ho"

val SCNo32: String get() = "o"

val SCNo64: String get() = "lo"

val SCNoLEAST8: String get() = "hho"

val SCNoLEAST16: String get() = "ho"

val SCNoLEAST32: String get() = "o"

val SCNoLEAST64: String get() = "lo"

val SCNoFAST8: String get() = "hho"

val SCNoFAST16: String get() = "lo"

val SCNoFAST32: String get() = "lo"

val SCNoFAST64: String get() = "lo"

val SCNx8: String get() = "hhx"

val SCNx16: String get() = "hx"

val SCNx32: String get() = "x"

val SCNx64: String get() = "lx"

val SCNxLEAST8: String get() = "hhx"

val SCNxLEAST16: String get() = "hx"

val SCNxLEAST32: String get() = "x"

val SCNxLEAST64: String get() = "lx"

val SCNxFAST8: String get() = "hhx"

val SCNxFAST16: String get() = "lx"

val SCNxFAST32: String get() = "lx"

val SCNxFAST64: String get() = "lx"

val SCNdMAX: String get() = "ld"

val SCNiMAX: String get() = "li"

val SCNoMAX: String get() = "lo"

val SCNuMAX: String get() = "lu"

val SCNxMAX: String get() = "lx"

val SCNdPTR: String get() = "ld"

val SCNiPTR: String get() = "li"

val SCNoPTR: String get() = "lo"

val SCNuPTR: String get() = "lu"

val SCNxPTR: String get() = "lx"

const val _TIME_H: Int = 1

const val _BITS_TIME_H: Int = 1

const val CLOCKS_PER_SEC: __clock_t = 1000000

const val CLOCK_REALTIME: Int = 0

const val CLOCK_MONOTONIC: Int = 1

const val CLOCK_PROCESS_CPUTIME_ID: Int = 2

const val CLOCK_THREAD_CPUTIME_ID: Int = 3

const val CLOCK_MONOTONIC_RAW: Int = 4

const val CLOCK_REALTIME_COARSE: Int = 5

const val CLOCK_MONOTONIC_COARSE: Int = 6

const val CLOCK_BOOTTIME: Int = 7

const val CLOCK_REALTIME_ALARM: Int = 8

const val CLOCK_BOOTTIME_ALARM: Int = 9

const val CLOCK_TAI: Int = 11

const val TIMER_ABSTIME: Int = 1

const val __struct_tm_defined: Int = 1

const val __itimerspec_defined: Int = 1

const val TIME_UTC: Int = 1

const val _STDIO_H: Int = 1

const val ____FILE_defined: Int = 1

const val __FILE_defined: Int = 1

const val _BITS_LIBIO_H: Int = 1

const val _BITS_G_CONFIG_H: Int = 1

const val ____mbstate_t_defined: Int = 1

const val _G_HAVE_MMAP: Int = 1

const val _G_HAVE_MREMAP: Int = 1

const val _G_IO_IO_FILE_VERSION: Int = 131073

const val _G_BUFSIZ: Int = 8192

const val _IO_BUFSIZ: Int = 8192

const val _IO_UNIFIED_JUMPTABLES: Int = 1

const val EOF: Int = -1

const val _IOS_INPUT: Int = 1

const val _IOS_OUTPUT: Int = 2

const val _IOS_ATEND: Int = 4

const val _IOS_APPEND: Int = 8

const val _IOS_TRUNC: Int = 16

const val _IOS_NOCREATE: Int = 32

const val _IOS_NOREPLACE: Int = 64

const val _IOS_BIN: Int = 128

const val _IO_MAGIC: UInt = 4222418944u

const val _OLD_STDIO_MAGIC: UInt = 4206624768u

const val _IO_MAGIC_MASK: UInt = 4294901760u

const val _IO_USER_BUF: Int = 1

const val _IO_UNBUFFERED: Int = 2

const val _IO_NO_READS: Int = 4

const val _IO_NO_WRITES: Int = 8

const val _IO_EOF_SEEN: Int = 16

const val _IO_ERR_SEEN: Int = 32

const val _IO_DELETE_DONT_CLOSE: Int = 64

const val _IO_LINKED: Int = 128

const val _IO_IN_BACKUP: Int = 256

const val _IO_LINE_BUF: Int = 512

const val _IO_TIED_PUT_GET: Int = 1024

const val _IO_CURRENTLY_PUTTING: Int = 2048

const val _IO_IS_APPENDING: Int = 4096

const val _IO_IS_FILEBUF: Int = 8192

const val _IO_BAD_SEEN: Int = 16384

const val _IO_USER_LOCK: Int = 32768

const val _IO_FLAGS2_MMAP: Int = 1

const val _IO_FLAGS2_NOTCANCEL: Int = 2

const val _IO_FLAGS2_USER_WBUF: Int = 8

const val _IO_SKIPWS: Int = 1

const val _IO_LEFT: Int = 2

const val _IO_RIGHT: Int = 4

const val _IO_INTERNAL: Int = 8

const val _IO_DEC: Int = 16

const val _IO_OCT: Int = 32

const val _IO_HEX: Int = 64

const val _IO_SHOWBASE: Int = 128

const val _IO_SHOWPOINT: Int = 256

const val _IO_UPPERCASE: Int = 512

const val _IO_SHOWPOS: Int = 1024

const val _IO_SCIENTIFIC: Int = 2048

const val _IO_FIXED: Int = 4096

const val _IO_UNITBUF: Int = 8192

const val _IO_STDIO: Int = 16384

const val _IO_DONT_CLOSE: Int = 32768

const val _IO_BOOLALPHA: Int = 65536

const val _IOFBF: Int = 0

const val _IOLBF: Int = 1

const val _IONBF: Int = 2

const val BUFSIZ: Int = 8192

val P_tmpdir: String get() = "\u002Ftmp"

const val _BITS_STDIO_LIM_H: Int = 1

const val L_tmpnam: Int = 20

const val TMP_MAX: Int = 238328

const val FILENAME_MAX: Int = 4096

const val L_ctermid: Int = 9

const val FOPEN_MAX: Int = 16

const val OPENSSL_VERSION_NUMBER: Long = 269484159

val OPENSSL_VERSION_TEXT: String get() = "OpenSSL 1.1.0g  2 Nov 2017"

val SHLIB_VERSION_HISTORY: String get() = ""

val SHLIB_VERSION_NUMBER: String get() = "1.1"

const val _LIBC_LIMITS_H_: Int = 1

const val MB_LEN_MAX: Int = 16

const val _BITS_POSIX1_LIM_H: Int = 1

const val _POSIX_AIO_LISTIO_MAX: Int = 2

const val _POSIX_AIO_MAX: Int = 1

const val _POSIX_ARG_MAX: Int = 4096

const val _POSIX_CHILD_MAX: Int = 25

const val _POSIX_DELAYTIMER_MAX: Int = 32

const val _POSIX_HOST_NAME_MAX: Int = 255

const val _POSIX_LINK_MAX: Int = 8

const val _POSIX_LOGIN_NAME_MAX: Int = 9

const val _POSIX_MAX_CANON: Int = 255

const val _POSIX_MAX_INPUT: Int = 255

const val _POSIX_MQ_OPEN_MAX: Int = 8

const val _POSIX_MQ_PRIO_MAX: Int = 32

const val _POSIX_NAME_MAX: Int = 14

const val _POSIX_NGROUPS_MAX: Int = 8

const val _POSIX_OPEN_MAX: Int = 20

const val _POSIX_PATH_MAX: Int = 256

const val _POSIX_PIPE_BUF: Int = 512

const val _POSIX_RE_DUP_MAX: Int = 255

const val _POSIX_RTSIG_MAX: Int = 8

const val _POSIX_SEM_NSEMS_MAX: Int = 256

const val _POSIX_SEM_VALUE_MAX: Int = 32767

const val _POSIX_SIGQUEUE_MAX: Int = 32

const val _POSIX_SSIZE_MAX: Int = 32767

const val _POSIX_STREAM_MAX: Int = 8

const val _POSIX_SYMLINK_MAX: Int = 255

const val _POSIX_SYMLOOP_MAX: Int = 8

const val _POSIX_TIMER_MAX: Int = 32

const val _POSIX_TTY_NAME_MAX: Int = 9

const val _POSIX_TZNAME_MAX: Int = 6

const val _POSIX_CLOCKRES_MIN: Int = 20000000

const val NGROUPS_MAX: Int = 65536

const val MAX_CANON: Int = 255

const val MAX_INPUT: Int = 255

const val NAME_MAX: Int = 255

const val PATH_MAX: Int = 4096

const val PIPE_BUF: Int = 4096

const val XATTR_NAME_MAX: Int = 255

const val XATTR_SIZE_MAX: Int = 65536

const val XATTR_LIST_MAX: Int = 65536

const val RTSIG_MAX: Int = 32

const val _POSIX_THREAD_KEYS_MAX: Int = 128

const val PTHREAD_KEYS_MAX: Int = 1024

const val _POSIX_THREAD_DESTRUCTOR_ITERATIONS: Int = 4

const val PTHREAD_DESTRUCTOR_ITERATIONS: Int = 4

const val _POSIX_THREAD_THREADS_MAX: Int = 64

const val AIO_PRIO_DELTA_MAX: Int = 20

const val PTHREAD_STACK_MIN: Int = 16384

const val DELAYTIMER_MAX: Int = 2147483647

const val TTY_NAME_MAX: Int = 32

const val LOGIN_NAME_MAX: Int = 256

const val HOST_NAME_MAX: Int = 64

const val MQ_PRIO_MAX: Int = 32768

const val SEM_VALUE_MAX: Int = 2147483647

const val SSIZE_MAX: Long = 9223372036854775807

const val _BITS_POSIX2_LIM_H: Int = 1

const val _POSIX2_BC_BASE_MAX: Int = 99

const val _POSIX2_BC_DIM_MAX: Int = 2048

const val _POSIX2_BC_SCALE_MAX: Int = 99

const val _POSIX2_BC_STRING_MAX: Int = 1000

const val _POSIX2_COLL_WEIGHTS_MAX: Int = 2

const val _POSIX2_EXPR_NEST_MAX: Int = 32

const val _POSIX2_LINE_MAX: Int = 2048

const val _POSIX2_RE_DUP_MAX: Int = 255

const val _POSIX2_CHARCLASS_NAME_MAX: Int = 14

const val BC_BASE_MAX: Int = 99

const val BC_DIM_MAX: Int = 2048

const val BC_SCALE_MAX: Int = 99

const val BC_STRING_MAX: Int = 1000

const val COLL_WEIGHTS_MAX: Int = 255

const val EXPR_NEST_MAX: Int = 32

const val LINE_MAX: Int = 2048

const val CHARCLASS_NAME_MAX: Int = 2048

const val RE_DUP_MAX: Int = 32767

const val SSLEAY_VERSION_NUMBER: Long = 269484159

const val SSLEAY_VERSION: Int = 0

const val SSLEAY_CFLAGS: Int = 1

const val SSLEAY_BUILT_ON: Int = 2

const val SSLEAY_PLATFORM: Int = 3

const val SSLEAY_DIR: Int = 4

const val CRYPTO_MEM_CHECK_OFF: Int = 0

const val CRYPTO_MEM_CHECK_ON: Int = 1

const val CRYPTO_MEM_CHECK_ENABLE: Int = 2

const val CRYPTO_MEM_CHECK_DISABLE: Int = 3

const val CRYPTO_EX_INDEX_SSL: Int = 0

const val CRYPTO_EX_INDEX_SSL_CTX: Int = 1

const val CRYPTO_EX_INDEX_SSL_SESSION: Int = 2

const val CRYPTO_EX_INDEX_X509: Int = 3

const val CRYPTO_EX_INDEX_X509_STORE: Int = 4

const val CRYPTO_EX_INDEX_X509_STORE_CTX: Int = 5

const val CRYPTO_EX_INDEX_DH: Int = 6

const val CRYPTO_EX_INDEX_DSA: Int = 7

const val CRYPTO_EX_INDEX_EC_KEY: Int = 8

const val CRYPTO_EX_INDEX_RSA: Int = 9

const val CRYPTO_EX_INDEX_ENGINE: Int = 10

const val CRYPTO_EX_INDEX_UI: Int = 11

const val CRYPTO_EX_INDEX_BIO: Int = 12

const val CRYPTO_EX_INDEX_APP: Int = 13

const val CRYPTO_EX_INDEX__COUNT: Int = 14

const val OPENSSL_VERSION: Int = 0

const val OPENSSL_CFLAGS: Int = 1

const val OPENSSL_BUILT_ON: Int = 2

const val OPENSSL_PLATFORM: Int = 3

const val OPENSSL_DIR: Int = 4

const val OPENSSL_ENGINES_DIR: Int = 5

const val CRYPTO_LOCK: Int = 1

const val CRYPTO_UNLOCK: Int = 2

const val CRYPTO_READ: Int = 4

const val CRYPTO_WRITE: Int = 8

const val OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS: Long = 1

const val OPENSSL_INIT_LOAD_CRYPTO_STRINGS: Long = 2

const val OPENSSL_INIT_ADD_ALL_CIPHERS: Long = 4

const val OPENSSL_INIT_ADD_ALL_DIGESTS: Long = 8

const val OPENSSL_INIT_NO_ADD_ALL_CIPHERS: Long = 16

const val OPENSSL_INIT_NO_ADD_ALL_DIGESTS: Long = 32

const val OPENSSL_INIT_LOAD_CONFIG: Long = 64

const val OPENSSL_INIT_NO_LOAD_CONFIG: Long = 128

const val OPENSSL_INIT_ASYNC: Long = 256

const val OPENSSL_INIT_ENGINE_RDRAND: Long = 512

const val OPENSSL_INIT_ENGINE_DYNAMIC: Long = 1024

const val OPENSSL_INIT_ENGINE_OPENSSL: Long = 2048

const val OPENSSL_INIT_ENGINE_CRYPTODEV: Long = 4096

const val OPENSSL_INIT_ENGINE_CAPI: Long = 8192

const val OPENSSL_INIT_ENGINE_PADLOCK: Long = 16384

const val OPENSSL_INIT_ENGINE_AFALG: Long = 32768

const val OPENSSL_INIT_ENGINE_ALL_BUILTIN: Long = 30208

const val _PTHREAD_H: Int = 1

const val _SCHED_H: Int = 1

const val _BITS_SCHED_H: Int = 1

const val SCHED_OTHER: Int = 0

const val SCHED_FIFO: Int = 1

const val SCHED_RR: Int = 2

const val _BITS_CPU_SET_H: Int = 1

const val __CPU_SETSIZE: Int = 1024

const val __NCPUBITS: ULong = 64u

const val _BITS_SETJMP_H: Int = 1

const val PTHREAD_CREATE_JOINABLE: Int = 0

const val PTHREAD_CREATE_DETACHED: Int = 1

const val PTHREAD_INHERIT_SCHED: Int = 0

const val PTHREAD_EXPLICIT_SCHED: Int = 1

const val PTHREAD_SCOPE_SYSTEM: Int = 0

const val PTHREAD_SCOPE_PROCESS: Int = 1

const val PTHREAD_PROCESS_PRIVATE: Int = 0

const val PTHREAD_PROCESS_SHARED: Int = 1

const val PTHREAD_CANCEL_ENABLE: Int = 0

const val PTHREAD_CANCEL_DISABLE: Int = 1

const val PTHREAD_CANCEL_DEFERRED: Int = 0

const val PTHREAD_CANCEL_ASYNCHRONOUS: Int = 1

const val PTHREAD_ONCE_INIT: Int = 0

const val PTHREAD_BARRIER_SERIAL_THREAD: Int = -1

const val CRYPTO_ONCE_STATIC_INIT: Int = 0

const val CRYPTO_F_CRYPTO_DUP_EX_DATA: Int = 110

const val CRYPTO_F_CRYPTO_FREE_EX_DATA: Int = 111

const val CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX: Int = 100

const val CRYPTO_F_CRYPTO_MEMDUP: Int = 115

const val CRYPTO_F_CRYPTO_NEW_EX_DATA: Int = 112

const val CRYPTO_F_CRYPTO_SET_EX_DATA: Int = 102

const val CRYPTO_F_FIPS_MODE_SET: Int = 109

const val CRYPTO_F_GET_AND_LOCK: Int = 113

const val CRYPTO_F_OPENSSL_BUF2HEXSTR: Int = 117

const val CRYPTO_F_OPENSSL_HEXSTR2BUF: Int = 118

const val CRYPTO_F_OPENSSL_INIT_CRYPTO: Int = 116

const val CRYPTO_R_FIPS_MODE_NOT_SUPPORTED: Int = 101

const val CRYPTO_R_ILLEGAL_HEX_DIGIT: Int = 102

const val CRYPTO_R_ODD_NUMBER_OF_DIGITS: Int = 103

const val COMP_F_BIO_ZLIB_FLUSH: Int = 99

const val COMP_F_BIO_ZLIB_NEW: Int = 100

const val COMP_F_BIO_ZLIB_READ: Int = 101

const val COMP_F_BIO_ZLIB_WRITE: Int = 102

const val COMP_R_ZLIB_DEFLATE_ERROR: Int = 99

const val COMP_R_ZLIB_INFLATE_ERROR: Int = 100

const val COMP_R_ZLIB_NOT_SUPPORTED: Int = 101

const val BIO_TYPE_DESCRIPTOR: Int = 256

const val BIO_TYPE_FILTER: Int = 512

const val BIO_TYPE_SOURCE_SINK: Int = 1024

const val BIO_TYPE_NONE: Int = 0

const val BIO_TYPE_MEM: Int = 1025

const val BIO_TYPE_FILE: Int = 1026

const val BIO_TYPE_FD: Int = 1284

const val BIO_TYPE_SOCKET: Int = 1285

const val BIO_TYPE_NULL: Int = 1030

const val BIO_TYPE_SSL: Int = 519

const val BIO_TYPE_MD: Int = 520

const val BIO_TYPE_BUFFER: Int = 521

const val BIO_TYPE_CIPHER: Int = 522

const val BIO_TYPE_BASE64: Int = 523

const val BIO_TYPE_CONNECT: Int = 1292

const val BIO_TYPE_ACCEPT: Int = 1293

const val BIO_TYPE_NBIO_TEST: Int = 528

const val BIO_TYPE_NULL_FILTER: Int = 529

const val BIO_TYPE_BIO: Int = 1043

const val BIO_TYPE_LINEBUFFER: Int = 532

const val BIO_TYPE_DGRAM: Int = 1301

const val BIO_TYPE_ASN1: Int = 534

const val BIO_TYPE_COMP: Int = 535

const val BIO_TYPE_START: Int = 128

const val BIO_NOCLOSE: Int = 0

const val BIO_CLOSE: Int = 1

const val BIO_CTRL_RESET: Int = 1

const val BIO_CTRL_EOF: Int = 2

const val BIO_CTRL_INFO: Int = 3

const val BIO_CTRL_SET: Int = 4

const val BIO_CTRL_GET: Int = 5

const val BIO_CTRL_PUSH: Int = 6

const val BIO_CTRL_POP: Int = 7

const val BIO_CTRL_GET_CLOSE: Int = 8

const val BIO_CTRL_SET_CLOSE: Int = 9

const val BIO_CTRL_PENDING: Int = 10

const val BIO_CTRL_FLUSH: Int = 11

const val BIO_CTRL_DUP: Int = 12

const val BIO_CTRL_WPENDING: Int = 13

const val BIO_CTRL_SET_CALLBACK: Int = 14

const val BIO_CTRL_GET_CALLBACK: Int = 15

const val BIO_CTRL_SET_FILENAME: Int = 30

const val BIO_CTRL_DGRAM_CONNECT: Int = 31

const val BIO_CTRL_DGRAM_SET_CONNECTED: Int = 32

const val BIO_CTRL_DGRAM_SET_RECV_TIMEOUT: Int = 33

const val BIO_CTRL_DGRAM_GET_RECV_TIMEOUT: Int = 34

const val BIO_CTRL_DGRAM_SET_SEND_TIMEOUT: Int = 35

const val BIO_CTRL_DGRAM_GET_SEND_TIMEOUT: Int = 36

const val BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP: Int = 37

const val BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP: Int = 38

const val BIO_CTRL_DGRAM_MTU_DISCOVER: Int = 39

const val BIO_CTRL_DGRAM_QUERY_MTU: Int = 40

const val BIO_CTRL_DGRAM_GET_FALLBACK_MTU: Int = 47

const val BIO_CTRL_DGRAM_GET_MTU: Int = 41

const val BIO_CTRL_DGRAM_SET_MTU: Int = 42

const val BIO_CTRL_DGRAM_MTU_EXCEEDED: Int = 43

const val BIO_CTRL_DGRAM_GET_PEER: Int = 46

const val BIO_CTRL_DGRAM_SET_PEER: Int = 44

const val BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT: Int = 45

const val BIO_CTRL_DGRAM_SET_DONT_FRAG: Int = 48

const val BIO_CTRL_DGRAM_GET_MTU_OVERHEAD: Int = 49

const val BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE: Int = 50

const val BIO_CTRL_DGRAM_SET_PEEK_MODE: Int = 71

const val BIO_FP_READ: Int = 2

const val BIO_FP_WRITE: Int = 4

const val BIO_FP_APPEND: Int = 8

const val BIO_FP_TEXT: Int = 16

const val BIO_FLAGS_READ: Int = 1

const val BIO_FLAGS_WRITE: Int = 2

const val BIO_FLAGS_IO_SPECIAL: Int = 4

const val BIO_FLAGS_RWS: Int = 7

const val BIO_FLAGS_SHOULD_RETRY: Int = 8

const val BIO_FLAGS_UPLINK: Int = 0

const val BIO_FLAGS_BASE64_NO_NL: Int = 256

const val BIO_FLAGS_MEM_RDONLY: Int = 512

const val BIO_FLAGS_NONCLEAR_RST: Int = 1024

const val BIO_RR_SSL_X509_LOOKUP: Int = 1

const val BIO_RR_CONNECT: Int = 2

const val BIO_RR_ACCEPT: Int = 3

const val BIO_CB_FREE: Int = 1

const val BIO_CB_READ: Int = 2

const val BIO_CB_WRITE: Int = 3

const val BIO_CB_PUTS: Int = 4

const val BIO_CB_GETS: Int = 5

const val BIO_CB_CTRL: Int = 6

const val BIO_CB_RETURN: Int = 128

const val BIO_C_SET_CONNECT: Int = 100

const val BIO_C_DO_STATE_MACHINE: Int = 101

const val BIO_C_SET_NBIO: Int = 102

const val BIO_C_SET_FD: Int = 104

const val BIO_C_GET_FD: Int = 105

const val BIO_C_SET_FILE_PTR: Int = 106

const val BIO_C_GET_FILE_PTR: Int = 107

const val BIO_C_SET_FILENAME: Int = 108

const val BIO_C_SET_SSL: Int = 109

const val BIO_C_GET_SSL: Int = 110

const val BIO_C_SET_MD: Int = 111

const val BIO_C_GET_MD: Int = 112

const val BIO_C_GET_CIPHER_STATUS: Int = 113

const val BIO_C_SET_BUF_MEM: Int = 114

const val BIO_C_GET_BUF_MEM_PTR: Int = 115

const val BIO_C_GET_BUFF_NUM_LINES: Int = 116

const val BIO_C_SET_BUFF_SIZE: Int = 117

const val BIO_C_SET_ACCEPT: Int = 118

const val BIO_C_SSL_MODE: Int = 119

const val BIO_C_GET_MD_CTX: Int = 120

const val BIO_C_SET_BUFF_READ_DATA: Int = 122

const val BIO_C_GET_CONNECT: Int = 123

const val BIO_C_GET_ACCEPT: Int = 124

const val BIO_C_SET_SSL_RENEGOTIATE_BYTES: Int = 125

const val BIO_C_GET_SSL_NUM_RENEGOTIATES: Int = 126

const val BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT: Int = 127

const val BIO_C_FILE_SEEK: Int = 128

const val BIO_C_GET_CIPHER_CTX: Int = 129

const val BIO_C_SET_BUF_MEM_EOF_RETURN: Int = 130

const val BIO_C_SET_BIND_MODE: Int = 131

const val BIO_C_GET_BIND_MODE: Int = 132

const val BIO_C_FILE_TELL: Int = 133

const val BIO_C_GET_SOCKS: Int = 134

const val BIO_C_SET_SOCKS: Int = 135

const val BIO_C_SET_WRITE_BUF_SIZE: Int = 136

const val BIO_C_GET_WRITE_BUF_SIZE: Int = 137

const val BIO_C_MAKE_BIO_PAIR: Int = 138

const val BIO_C_DESTROY_BIO_PAIR: Int = 139

const val BIO_C_GET_WRITE_GUARANTEE: Int = 140

const val BIO_C_GET_READ_REQUEST: Int = 141

const val BIO_C_SHUTDOWN_WR: Int = 142

const val BIO_C_NREAD0: Int = 143

const val BIO_C_NREAD: Int = 144

const val BIO_C_NWRITE0: Int = 145

const val BIO_C_NWRITE: Int = 146

const val BIO_C_RESET_READ_REQUEST: Int = 147

const val BIO_C_SET_MD_CTX: Int = 148

const val BIO_C_SET_PREFIX: Int = 149

const val BIO_C_GET_PREFIX: Int = 150

const val BIO_C_SET_SUFFIX: Int = 151

const val BIO_C_GET_SUFFIX: Int = 152

const val BIO_C_SET_EX_ARG: Int = 153

const val BIO_C_GET_EX_ARG: Int = 154

const val BIO_C_SET_CONNECT_MODE: Int = 155

const val BIO_FAMILY_IPV4: Int = 4

const val BIO_FAMILY_IPV6: Int = 6

const val BIO_FAMILY_IPANY: Int = 256

const val BIO_BIND_NORMAL: Int = 0

const val BIO_BIND_REUSEADDR: Int = 1

const val BIO_BIND_REUSEADDR_IF_UNUSED: Int = 1

const val BIO_SOCK_REUSEADDR: Int = 1

const val BIO_SOCK_V6_ONLY: Int = 2

const val BIO_SOCK_KEEPALIVE: Int = 4

const val BIO_SOCK_NONBLOCK: Int = 8

const val BIO_SOCK_NODELAY: Int = 16

const val BIO_F_ACPT_STATE: Int = 100

const val BIO_F_ADDR_STRINGS: Int = 134

const val BIO_F_BIO_ACCEPT: Int = 101

const val BIO_F_BIO_ACCEPT_EX: Int = 137

const val BIO_F_BIO_ADDR_NEW: Int = 144

const val BIO_F_BIO_CALLBACK_CTRL: Int = 131

const val BIO_F_BIO_CONNECT: Int = 138

const val BIO_F_BIO_CTRL: Int = 103

const val BIO_F_BIO_GETS: Int = 104

const val BIO_F_BIO_GET_HOST_IP: Int = 106

const val BIO_F_BIO_GET_NEW_INDEX: Int = 102

const val BIO_F_BIO_GET_PORT: Int = 107

const val BIO_F_BIO_LISTEN: Int = 139

const val BIO_F_BIO_LOOKUP: Int = 135

const val BIO_F_BIO_MAKE_PAIR: Int = 121

const val BIO_F_BIO_NEW: Int = 108

const val BIO_F_BIO_NEW_FILE: Int = 109

const val BIO_F_BIO_NEW_MEM_BUF: Int = 126

const val BIO_F_BIO_NREAD: Int = 123

const val BIO_F_BIO_NREAD0: Int = 124

const val BIO_F_BIO_NWRITE: Int = 125

const val BIO_F_BIO_NWRITE0: Int = 122

const val BIO_F_BIO_PARSE_HOSTSERV: Int = 136

const val BIO_F_BIO_PUTS: Int = 110

const val BIO_F_BIO_READ: Int = 111

const val BIO_F_BIO_SOCKET: Int = 140

const val BIO_F_BIO_SOCKET_NBIO: Int = 142

const val BIO_F_BIO_SOCK_INFO: Int = 141

const val BIO_F_BIO_SOCK_INIT: Int = 112

const val BIO_F_BIO_WRITE: Int = 113

const val BIO_F_BUFFER_CTRL: Int = 114

const val BIO_F_CONN_CTRL: Int = 127

const val BIO_F_CONN_STATE: Int = 115

const val BIO_F_DGRAM_SCTP_READ: Int = 132

const val BIO_F_DGRAM_SCTP_WRITE: Int = 133

const val BIO_F_FILE_CTRL: Int = 116

const val BIO_F_FILE_READ: Int = 130

const val BIO_F_LINEBUFFER_CTRL: Int = 129

const val BIO_F_MEM_WRITE: Int = 117

const val BIO_F_SSL_NEW: Int = 118

const val BIO_R_ACCEPT_ERROR: Int = 100

const val BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET: Int = 141

const val BIO_R_AMBIGUOUS_HOST_OR_SERVICE: Int = 129

const val BIO_R_BAD_FOPEN_MODE: Int = 101

const val BIO_R_BROKEN_PIPE: Int = 124

const val BIO_R_CONNECT_ERROR: Int = 103

const val BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET: Int = 107

const val BIO_R_GETSOCKNAME_ERROR: Int = 132

const val BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS: Int = 133

const val BIO_R_GETTING_SOCKTYPE: Int = 134

const val BIO_R_INVALID_ARGUMENT: Int = 125

const val BIO_R_INVALID_SOCKET: Int = 135

const val BIO_R_IN_USE: Int = 123

const val BIO_R_LISTEN_V6_ONLY: Int = 136

const val BIO_R_LOOKUP_RETURNED_NOTHING: Int = 142

const val BIO_R_MALFORMED_HOST_OR_SERVICE: Int = 130

const val BIO_R_NBIO_CONNECT_ERROR: Int = 110

const val BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED: Int = 143

const val BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED: Int = 144

const val BIO_R_NO_PORT_DEFINED: Int = 113

const val BIO_R_NO_SUCH_FILE: Int = 128

const val BIO_R_NULL_PARAMETER: Int = 115

const val BIO_R_UNABLE_TO_BIND_SOCKET: Int = 117

const val BIO_R_UNABLE_TO_CREATE_SOCKET: Int = 118

const val BIO_R_UNABLE_TO_KEEPALIVE: Int = 137

const val BIO_R_UNABLE_TO_LISTEN_SOCKET: Int = 119

const val BIO_R_UNABLE_TO_NODELAY: Int = 138

const val BIO_R_UNABLE_TO_REUSEADDR: Int = 139

const val BIO_R_UNAVAILABLE_IP_FAMILY: Int = 145

const val BIO_R_UNINITIALIZED: Int = 120

const val BIO_R_UNKNOWN_INFO_TYPE: Int = 140

const val BIO_R_UNSUPPORTED_IP_FAMILY: Int = 146

const val BIO_R_UNSUPPORTED_METHOD: Int = 121

const val BIO_R_UNSUPPORTED_PROTOCOL_FAMILY: Int = 131

const val BIO_R_WRITE_TO_READ_ONLY_BIO: Int = 126

const val BIO_R_WSASTARTUP: Int = 122

const val BUF_MEM_FLAG_SECURE: Int = 1

const val BUF_F_BUF_MEM_GROW: Int = 100

const val BUF_F_BUF_MEM_GROW_CLEAN: Int = 105

const val BUF_F_BUF_MEM_NEW: Int = 101

const val EVP_MAX_MD_SIZE: Int = 64

const val EVP_MAX_KEY_LENGTH: Int = 64

const val EVP_MAX_IV_LENGTH: Int = 16

const val EVP_MAX_BLOCK_LENGTH: Int = 32

const val PKCS5_SALT_LEN: Int = 8

const val PKCS5_DEFAULT_ITER: Int = 2048

val SN_undef: String get() = "UNDEF"

val LN_undef: String get() = "undefined"

const val NID_undef: Int = 0

const val OBJ_undef: Long = 0

val SN_itu_t: String get() = "ITU\u002DT"

val LN_itu_t: String get() = "itu\u002Dt"

const val NID_itu_t: Int = 645

const val OBJ_itu_t: Long = 0

const val NID_ccitt: Int = 404

const val OBJ_ccitt: Long = 0

val SN_iso: String get() = "ISO"

val LN_iso: String get() = "iso"

const val NID_iso: Int = 181

const val OBJ_iso: Long = 1

val SN_joint_iso_itu_t: String get() = "JOINT\u002DISO\u002DITU\u002DT"

val LN_joint_iso_itu_t: String get() = "joint\u002Diso\u002Ditu\u002Dt"

const val NID_joint_iso_itu_t: Int = 646

const val OBJ_joint_iso_itu_t: Long = 2

const val NID_joint_iso_ccitt: Int = 393

const val OBJ_joint_iso_ccitt: Long = 2

val SN_member_body: String get() = "member\u002Dbody"

val LN_member_body: String get() = "ISO Member Body"

const val NID_member_body: Int = 182

val SN_identified_organization: String get() = "identified\u002Dorganization"

const val NID_identified_organization: Int = 676

val SN_hmac_md5: String get() = "HMAC\u002DMD5"

val LN_hmac_md5: String get() = "hmac\u002Dmd5"

const val NID_hmac_md5: Int = 780

val SN_hmac_sha1: String get() = "HMAC\u002DSHA1"

val LN_hmac_sha1: String get() = "hmac\u002Dsha1"

const val NID_hmac_sha1: Int = 781

val SN_certicom_arc: String get() = "certicom\u002Darc"

const val NID_certicom_arc: Int = 677

val SN_international_organizations: String get() = "international\u002Dorganizations"

val LN_international_organizations: String get() = "International Organizations"

const val NID_international_organizations: Int = 647

val SN_wap: String get() = "wap"

const val NID_wap: Int = 678

val SN_wap_wsg: String get() = "wap\u002Dwsg"

const val NID_wap_wsg: Int = 679

val SN_selected_attribute_types: String get() = "selected\u002Dattribute\u002Dtypes"

val LN_selected_attribute_types: String get() = "Selected Attribute Types"

const val NID_selected_attribute_types: Int = 394

val SN_clearance: String get() = "clearance"

const val NID_clearance: Int = 395

val SN_ISO_US: String get() = "ISO\u002DUS"

val LN_ISO_US: String get() = "ISO US Member Body"

const val NID_ISO_US: Int = 183

val SN_X9_57: String get() = "X9\u002D57"

val LN_X9_57: String get() = "X9.57"

const val NID_X9_57: Int = 184

val SN_X9cm: String get() = "X9cm"

val LN_X9cm: String get() = "X9.57 CM \u003F"

const val NID_X9cm: Int = 185

val SN_dsa: String get() = "DSA"

val LN_dsa: String get() = "dsaEncryption"

const val NID_dsa: Int = 116

val SN_dsaWithSHA1: String get() = "DSA\u002DSHA1"

val LN_dsaWithSHA1: String get() = "dsaWithSHA1"

const val NID_dsaWithSHA1: Int = 113

val SN_ansi_X9_62: String get() = "ansi\u002DX9\u002D62"

val LN_ansi_X9_62: String get() = "ANSI X9.62"

const val NID_ansi_X9_62: Int = 405

val SN_X9_62_prime_field: String get() = "prime\u002Dfield"

const val NID_X9_62_prime_field: Int = 406

val SN_X9_62_characteristic_two_field: String get() = "characteristic\u002Dtwo\u002Dfield"

const val NID_X9_62_characteristic_two_field: Int = 407

val SN_X9_62_id_characteristic_two_basis: String get() = "id\u002Dcharacteristic\u002Dtwo\u002Dbasis"

const val NID_X9_62_id_characteristic_two_basis: Int = 680

val SN_X9_62_onBasis: String get() = "onBasis"

const val NID_X9_62_onBasis: Int = 681

val SN_X9_62_tpBasis: String get() = "tpBasis"

const val NID_X9_62_tpBasis: Int = 682

val SN_X9_62_ppBasis: String get() = "ppBasis"

const val NID_X9_62_ppBasis: Int = 683

val SN_X9_62_id_ecPublicKey: String get() = "id\u002DecPublicKey"

const val NID_X9_62_id_ecPublicKey: Int = 408

val SN_X9_62_c2pnb163v1: String get() = "c2pnb163v1"

const val NID_X9_62_c2pnb163v1: Int = 684

val SN_X9_62_c2pnb163v2: String get() = "c2pnb163v2"

const val NID_X9_62_c2pnb163v2: Int = 685

val SN_X9_62_c2pnb163v3: String get() = "c2pnb163v3"

const val NID_X9_62_c2pnb163v3: Int = 686

val SN_X9_62_c2pnb176v1: String get() = "c2pnb176v1"

const val NID_X9_62_c2pnb176v1: Int = 687

val SN_X9_62_c2tnb191v1: String get() = "c2tnb191v1"

const val NID_X9_62_c2tnb191v1: Int = 688

val SN_X9_62_c2tnb191v2: String get() = "c2tnb191v2"

const val NID_X9_62_c2tnb191v2: Int = 689

val SN_X9_62_c2tnb191v3: String get() = "c2tnb191v3"

const val NID_X9_62_c2tnb191v3: Int = 690

val SN_X9_62_c2onb191v4: String get() = "c2onb191v4"

const val NID_X9_62_c2onb191v4: Int = 691

val SN_X9_62_c2onb191v5: String get() = "c2onb191v5"

const val NID_X9_62_c2onb191v5: Int = 692

val SN_X9_62_c2pnb208w1: String get() = "c2pnb208w1"

const val NID_X9_62_c2pnb208w1: Int = 693

val SN_X9_62_c2tnb239v1: String get() = "c2tnb239v1"

const val NID_X9_62_c2tnb239v1: Int = 694

val SN_X9_62_c2tnb239v2: String get() = "c2tnb239v2"

const val NID_X9_62_c2tnb239v2: Int = 695

val SN_X9_62_c2tnb239v3: String get() = "c2tnb239v3"

const val NID_X9_62_c2tnb239v3: Int = 696

val SN_X9_62_c2onb239v4: String get() = "c2onb239v4"

const val NID_X9_62_c2onb239v4: Int = 697

val SN_X9_62_c2onb239v5: String get() = "c2onb239v5"

const val NID_X9_62_c2onb239v5: Int = 698

val SN_X9_62_c2pnb272w1: String get() = "c2pnb272w1"

const val NID_X9_62_c2pnb272w1: Int = 699

val SN_X9_62_c2pnb304w1: String get() = "c2pnb304w1"

const val NID_X9_62_c2pnb304w1: Int = 700

val SN_X9_62_c2tnb359v1: String get() = "c2tnb359v1"

const val NID_X9_62_c2tnb359v1: Int = 701

val SN_X9_62_c2pnb368w1: String get() = "c2pnb368w1"

const val NID_X9_62_c2pnb368w1: Int = 702

val SN_X9_62_c2tnb431r1: String get() = "c2tnb431r1"

const val NID_X9_62_c2tnb431r1: Int = 703

val SN_X9_62_prime192v1: String get() = "prime192v1"

const val NID_X9_62_prime192v1: Int = 409

val SN_X9_62_prime192v2: String get() = "prime192v2"

const val NID_X9_62_prime192v2: Int = 410

val SN_X9_62_prime192v3: String get() = "prime192v3"

const val NID_X9_62_prime192v3: Int = 411

val SN_X9_62_prime239v1: String get() = "prime239v1"

const val NID_X9_62_prime239v1: Int = 412

val SN_X9_62_prime239v2: String get() = "prime239v2"

const val NID_X9_62_prime239v2: Int = 413

val SN_X9_62_prime239v3: String get() = "prime239v3"

const val NID_X9_62_prime239v3: Int = 414

val SN_X9_62_prime256v1: String get() = "prime256v1"

const val NID_X9_62_prime256v1: Int = 415

val SN_ecdsa_with_SHA1: String get() = "ecdsa\u002Dwith\u002DSHA1"

const val NID_ecdsa_with_SHA1: Int = 416

val SN_ecdsa_with_Recommended: String get() = "ecdsa\u002Dwith\u002DRecommended"

const val NID_ecdsa_with_Recommended: Int = 791

val SN_ecdsa_with_Specified: String get() = "ecdsa\u002Dwith\u002DSpecified"

const val NID_ecdsa_with_Specified: Int = 792

val SN_ecdsa_with_SHA224: String get() = "ecdsa\u002Dwith\u002DSHA224"

const val NID_ecdsa_with_SHA224: Int = 793

val SN_ecdsa_with_SHA256: String get() = "ecdsa\u002Dwith\u002DSHA256"

const val NID_ecdsa_with_SHA256: Int = 794

val SN_ecdsa_with_SHA384: String get() = "ecdsa\u002Dwith\u002DSHA384"

const val NID_ecdsa_with_SHA384: Int = 795

val SN_ecdsa_with_SHA512: String get() = "ecdsa\u002Dwith\u002DSHA512"

const val NID_ecdsa_with_SHA512: Int = 796

val SN_secp112r1: String get() = "secp112r1"

const val NID_secp112r1: Int = 704

val SN_secp112r2: String get() = "secp112r2"

const val NID_secp112r2: Int = 705

val SN_secp128r1: String get() = "secp128r1"

const val NID_secp128r1: Int = 706

val SN_secp128r2: String get() = "secp128r2"

const val NID_secp128r2: Int = 707

val SN_secp160k1: String get() = "secp160k1"

const val NID_secp160k1: Int = 708

val SN_secp160r1: String get() = "secp160r1"

const val NID_secp160r1: Int = 709

val SN_secp160r2: String get() = "secp160r2"

const val NID_secp160r2: Int = 710

val SN_secp192k1: String get() = "secp192k1"

const val NID_secp192k1: Int = 711

val SN_secp224k1: String get() = "secp224k1"

const val NID_secp224k1: Int = 712

val SN_secp224r1: String get() = "secp224r1"

const val NID_secp224r1: Int = 713

val SN_secp256k1: String get() = "secp256k1"

const val NID_secp256k1: Int = 714

val SN_secp384r1: String get() = "secp384r1"

const val NID_secp384r1: Int = 715

val SN_secp521r1: String get() = "secp521r1"

const val NID_secp521r1: Int = 716

val SN_sect113r1: String get() = "sect113r1"

const val NID_sect113r1: Int = 717

val SN_sect113r2: String get() = "sect113r2"

const val NID_sect113r2: Int = 718

val SN_sect131r1: String get() = "sect131r1"

const val NID_sect131r1: Int = 719

val SN_sect131r2: String get() = "sect131r2"

const val NID_sect131r2: Int = 720

val SN_sect163k1: String get() = "sect163k1"

const val NID_sect163k1: Int = 721

val SN_sect163r1: String get() = "sect163r1"

const val NID_sect163r1: Int = 722

val SN_sect163r2: String get() = "sect163r2"

const val NID_sect163r2: Int = 723

val SN_sect193r1: String get() = "sect193r1"

const val NID_sect193r1: Int = 724

val SN_sect193r2: String get() = "sect193r2"

const val NID_sect193r2: Int = 725

val SN_sect233k1: String get() = "sect233k1"

const val NID_sect233k1: Int = 726

val SN_sect233r1: String get() = "sect233r1"

const val NID_sect233r1: Int = 727

val SN_sect239k1: String get() = "sect239k1"

const val NID_sect239k1: Int = 728

val SN_sect283k1: String get() = "sect283k1"

const val NID_sect283k1: Int = 729

val SN_sect283r1: String get() = "sect283r1"

const val NID_sect283r1: Int = 730

val SN_sect409k1: String get() = "sect409k1"

const val NID_sect409k1: Int = 731

val SN_sect409r1: String get() = "sect409r1"

const val NID_sect409r1: Int = 732

val SN_sect571k1: String get() = "sect571k1"

const val NID_sect571k1: Int = 733

val SN_sect571r1: String get() = "sect571r1"

const val NID_sect571r1: Int = 734

val SN_wap_wsg_idm_ecid_wtls1: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls1"

const val NID_wap_wsg_idm_ecid_wtls1: Int = 735

val SN_wap_wsg_idm_ecid_wtls3: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls3"

const val NID_wap_wsg_idm_ecid_wtls3: Int = 736

val SN_wap_wsg_idm_ecid_wtls4: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls4"

const val NID_wap_wsg_idm_ecid_wtls4: Int = 737

val SN_wap_wsg_idm_ecid_wtls5: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls5"

const val NID_wap_wsg_idm_ecid_wtls5: Int = 738

val SN_wap_wsg_idm_ecid_wtls6: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls6"

const val NID_wap_wsg_idm_ecid_wtls6: Int = 739

val SN_wap_wsg_idm_ecid_wtls7: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls7"

const val NID_wap_wsg_idm_ecid_wtls7: Int = 740

val SN_wap_wsg_idm_ecid_wtls8: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls8"

const val NID_wap_wsg_idm_ecid_wtls8: Int = 741

val SN_wap_wsg_idm_ecid_wtls9: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls9"

const val NID_wap_wsg_idm_ecid_wtls9: Int = 742

val SN_wap_wsg_idm_ecid_wtls10: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls10"

const val NID_wap_wsg_idm_ecid_wtls10: Int = 743

val SN_wap_wsg_idm_ecid_wtls11: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls11"

const val NID_wap_wsg_idm_ecid_wtls11: Int = 744

val SN_wap_wsg_idm_ecid_wtls12: String get() = "wap\u002Dwsg\u002Didm\u002Decid\u002Dwtls12"

const val NID_wap_wsg_idm_ecid_wtls12: Int = 745

val SN_cast5_cbc: String get() = "CAST5\u002DCBC"

val LN_cast5_cbc: String get() = "cast5\u002Dcbc"

const val NID_cast5_cbc: Int = 108

val SN_cast5_ecb: String get() = "CAST5\u002DECB"

val LN_cast5_ecb: String get() = "cast5\u002Decb"

const val NID_cast5_ecb: Int = 109

val SN_cast5_cfb64: String get() = "CAST5\u002DCFB"

val LN_cast5_cfb64: String get() = "cast5\u002Dcfb"

const val NID_cast5_cfb64: Int = 110

val SN_cast5_ofb64: String get() = "CAST5\u002DOFB"

val LN_cast5_ofb64: String get() = "cast5\u002Dofb"

const val NID_cast5_ofb64: Int = 111

val LN_pbeWithMD5AndCast5_CBC: String get() = "pbeWithMD5AndCast5CBC"

const val NID_pbeWithMD5AndCast5_CBC: Int = 112

val SN_id_PasswordBasedMAC: String get() = "id\u002DPasswordBasedMAC"

val LN_id_PasswordBasedMAC: String get() = "password based MAC"

const val NID_id_PasswordBasedMAC: Int = 782

val SN_id_DHBasedMac: String get() = "id\u002DDHBasedMac"

val LN_id_DHBasedMac: String get() = "Diffie\u002DHellman based MAC"

const val NID_id_DHBasedMac: Int = 783

val SN_rsadsi: String get() = "rsadsi"

val LN_rsadsi: String get() = "RSA Data Security, Inc."

const val NID_rsadsi: Int = 1

val SN_pkcs: String get() = "pkcs"

val LN_pkcs: String get() = "RSA Data Security, Inc. PKCS"

const val NID_pkcs: Int = 2

val SN_pkcs1: String get() = "pkcs1"

const val NID_pkcs1: Int = 186

val LN_rsaEncryption: String get() = "rsaEncryption"

const val NID_rsaEncryption: Int = 6

val SN_md2WithRSAEncryption: String get() = "RSA\u002DMD2"

val LN_md2WithRSAEncryption: String get() = "md2WithRSAEncryption"

const val NID_md2WithRSAEncryption: Int = 7

val SN_md4WithRSAEncryption: String get() = "RSA\u002DMD4"

val LN_md4WithRSAEncryption: String get() = "md4WithRSAEncryption"

const val NID_md4WithRSAEncryption: Int = 396

val SN_md5WithRSAEncryption: String get() = "RSA\u002DMD5"

val LN_md5WithRSAEncryption: String get() = "md5WithRSAEncryption"

const val NID_md5WithRSAEncryption: Int = 8

val SN_sha1WithRSAEncryption: String get() = "RSA\u002DSHA1"

val LN_sha1WithRSAEncryption: String get() = "sha1WithRSAEncryption"

const val NID_sha1WithRSAEncryption: Int = 65

val SN_rsaesOaep: String get() = "RSAES\u002DOAEP"

val LN_rsaesOaep: String get() = "rsaesOaep"

const val NID_rsaesOaep: Int = 919

val SN_mgf1: String get() = "MGF1"

val LN_mgf1: String get() = "mgf1"

const val NID_mgf1: Int = 911

val SN_pSpecified: String get() = "PSPECIFIED"

val LN_pSpecified: String get() = "pSpecified"

const val NID_pSpecified: Int = 935

val SN_rsassaPss: String get() = "RSASSA\u002DPSS"

val LN_rsassaPss: String get() = "rsassaPss"

const val NID_rsassaPss: Int = 912

val SN_sha256WithRSAEncryption: String get() = "RSA\u002DSHA256"

val LN_sha256WithRSAEncryption: String get() = "sha256WithRSAEncryption"

const val NID_sha256WithRSAEncryption: Int = 668

val SN_sha384WithRSAEncryption: String get() = "RSA\u002DSHA384"

val LN_sha384WithRSAEncryption: String get() = "sha384WithRSAEncryption"

const val NID_sha384WithRSAEncryption: Int = 669

val SN_sha512WithRSAEncryption: String get() = "RSA\u002DSHA512"

val LN_sha512WithRSAEncryption: String get() = "sha512WithRSAEncryption"

const val NID_sha512WithRSAEncryption: Int = 670

val SN_sha224WithRSAEncryption: String get() = "RSA\u002DSHA224"

val LN_sha224WithRSAEncryption: String get() = "sha224WithRSAEncryption"

const val NID_sha224WithRSAEncryption: Int = 671

val SN_pkcs3: String get() = "pkcs3"

const val NID_pkcs3: Int = 27

val LN_dhKeyAgreement: String get() = "dhKeyAgreement"

const val NID_dhKeyAgreement: Int = 28

val SN_pkcs5: String get() = "pkcs5"

const val NID_pkcs5: Int = 187

val SN_pbeWithMD2AndDES_CBC: String get() = "PBE\u002DMD2\u002DDES"

val LN_pbeWithMD2AndDES_CBC: String get() = "pbeWithMD2AndDES\u002DCBC"

const val NID_pbeWithMD2AndDES_CBC: Int = 9

val SN_pbeWithMD5AndDES_CBC: String get() = "PBE\u002DMD5\u002DDES"

val LN_pbeWithMD5AndDES_CBC: String get() = "pbeWithMD5AndDES\u002DCBC"

const val NID_pbeWithMD5AndDES_CBC: Int = 10

val SN_pbeWithMD2AndRC2_CBC: String get() = "PBE\u002DMD2\u002DRC2\u002D64"

val LN_pbeWithMD2AndRC2_CBC: String get() = "pbeWithMD2AndRC2\u002DCBC"

const val NID_pbeWithMD2AndRC2_CBC: Int = 168

val SN_pbeWithMD5AndRC2_CBC: String get() = "PBE\u002DMD5\u002DRC2\u002D64"

val LN_pbeWithMD5AndRC2_CBC: String get() = "pbeWithMD5AndRC2\u002DCBC"

const val NID_pbeWithMD5AndRC2_CBC: Int = 169

val SN_pbeWithSHA1AndDES_CBC: String get() = "PBE\u002DSHA1\u002DDES"

val LN_pbeWithSHA1AndDES_CBC: String get() = "pbeWithSHA1AndDES\u002DCBC"

const val NID_pbeWithSHA1AndDES_CBC: Int = 170

val SN_pbeWithSHA1AndRC2_CBC: String get() = "PBE\u002DSHA1\u002DRC2\u002D64"

val LN_pbeWithSHA1AndRC2_CBC: String get() = "pbeWithSHA1AndRC2\u002DCBC"

const val NID_pbeWithSHA1AndRC2_CBC: Int = 68

val LN_id_pbkdf2: String get() = "PBKDF2"

const val NID_id_pbkdf2: Int = 69

val LN_pbes2: String get() = "PBES2"

const val NID_pbes2: Int = 161

val LN_pbmac1: String get() = "PBMAC1"

const val NID_pbmac1: Int = 162

val SN_pkcs7: String get() = "pkcs7"

const val NID_pkcs7: Int = 20

val LN_pkcs7_data: String get() = "pkcs7\u002Ddata"

const val NID_pkcs7_data: Int = 21

val LN_pkcs7_signed: String get() = "pkcs7\u002DsignedData"

const val NID_pkcs7_signed: Int = 22

val LN_pkcs7_enveloped: String get() = "pkcs7\u002DenvelopedData"

const val NID_pkcs7_enveloped: Int = 23

val LN_pkcs7_signedAndEnveloped: String get() = "pkcs7\u002DsignedAndEnvelopedData"

const val NID_pkcs7_signedAndEnveloped: Int = 24

val LN_pkcs7_digest: String get() = "pkcs7\u002DdigestData"

const val NID_pkcs7_digest: Int = 25

val LN_pkcs7_encrypted: String get() = "pkcs7\u002DencryptedData"

const val NID_pkcs7_encrypted: Int = 26

val SN_pkcs9: String get() = "pkcs9"

const val NID_pkcs9: Int = 47

val LN_pkcs9_emailAddress: String get() = "emailAddress"

const val NID_pkcs9_emailAddress: Int = 48

val LN_pkcs9_unstructuredName: String get() = "unstructuredName"

const val NID_pkcs9_unstructuredName: Int = 49

val LN_pkcs9_contentType: String get() = "contentType"

const val NID_pkcs9_contentType: Int = 50

val LN_pkcs9_messageDigest: String get() = "messageDigest"

const val NID_pkcs9_messageDigest: Int = 51

val LN_pkcs9_signingTime: String get() = "signingTime"

const val NID_pkcs9_signingTime: Int = 52

val LN_pkcs9_countersignature: String get() = "countersignature"

const val NID_pkcs9_countersignature: Int = 53

val LN_pkcs9_challengePassword: String get() = "challengePassword"

const val NID_pkcs9_challengePassword: Int = 54

val LN_pkcs9_unstructuredAddress: String get() = "unstructuredAddress"

const val NID_pkcs9_unstructuredAddress: Int = 55

val LN_pkcs9_extCertAttributes: String get() = "extendedCertificateAttributes"

const val NID_pkcs9_extCertAttributes: Int = 56

val SN_ext_req: String get() = "extReq"

val LN_ext_req: String get() = "Extension Request"

const val NID_ext_req: Int = 172

val SN_SMIMECapabilities: String get() = "SMIME\u002DCAPS"

val LN_SMIMECapabilities: String get() = "S\u002FMIME Capabilities"

const val NID_SMIMECapabilities: Int = 167

val SN_SMIME: String get() = "SMIME"

val LN_SMIME: String get() = "S\u002FMIME"

const val NID_SMIME: Int = 188

val SN_id_smime_mod: String get() = "id\u002Dsmime\u002Dmod"

const val NID_id_smime_mod: Int = 189

val SN_id_smime_ct: String get() = "id\u002Dsmime\u002Dct"

const val NID_id_smime_ct: Int = 190

val SN_id_smime_aa: String get() = "id\u002Dsmime\u002Daa"

const val NID_id_smime_aa: Int = 191

val SN_id_smime_alg: String get() = "id\u002Dsmime\u002Dalg"

const val NID_id_smime_alg: Int = 192

val SN_id_smime_cd: String get() = "id\u002Dsmime\u002Dcd"

const val NID_id_smime_cd: Int = 193

val SN_id_smime_spq: String get() = "id\u002Dsmime\u002Dspq"

const val NID_id_smime_spq: Int = 194

val SN_id_smime_cti: String get() = "id\u002Dsmime\u002Dcti"

const val NID_id_smime_cti: Int = 195

val SN_id_smime_mod_cms: String get() = "id\u002Dsmime\u002Dmod\u002Dcms"

const val NID_id_smime_mod_cms: Int = 196

val SN_id_smime_mod_ess: String get() = "id\u002Dsmime\u002Dmod\u002Dess"

const val NID_id_smime_mod_ess: Int = 197

val SN_id_smime_mod_oid: String get() = "id\u002Dsmime\u002Dmod\u002Doid"

const val NID_id_smime_mod_oid: Int = 198

val SN_id_smime_mod_msg_v3: String get() = "id\u002Dsmime\u002Dmod\u002Dmsg\u002Dv3"

const val NID_id_smime_mod_msg_v3: Int = 199

val SN_id_smime_mod_ets_eSignature_88: String get() = "id\u002Dsmime\u002Dmod\u002Dets\u002DeSignature\u002D88"

const val NID_id_smime_mod_ets_eSignature_88: Int = 200

val SN_id_smime_mod_ets_eSignature_97: String get() = "id\u002Dsmime\u002Dmod\u002Dets\u002DeSignature\u002D97"

const val NID_id_smime_mod_ets_eSignature_97: Int = 201

val SN_id_smime_mod_ets_eSigPolicy_88: String get() = "id\u002Dsmime\u002Dmod\u002Dets\u002DeSigPolicy\u002D88"

const val NID_id_smime_mod_ets_eSigPolicy_88: Int = 202

val SN_id_smime_mod_ets_eSigPolicy_97: String get() = "id\u002Dsmime\u002Dmod\u002Dets\u002DeSigPolicy\u002D97"

const val NID_id_smime_mod_ets_eSigPolicy_97: Int = 203

val SN_id_smime_ct_receipt: String get() = "id\u002Dsmime\u002Dct\u002Dreceipt"

const val NID_id_smime_ct_receipt: Int = 204

val SN_id_smime_ct_authData: String get() = "id\u002Dsmime\u002Dct\u002DauthData"

const val NID_id_smime_ct_authData: Int = 205

val SN_id_smime_ct_publishCert: String get() = "id\u002Dsmime\u002Dct\u002DpublishCert"

const val NID_id_smime_ct_publishCert: Int = 206

val SN_id_smime_ct_TSTInfo: String get() = "id\u002Dsmime\u002Dct\u002DTSTInfo"

const val NID_id_smime_ct_TSTInfo: Int = 207

val SN_id_smime_ct_TDTInfo: String get() = "id\u002Dsmime\u002Dct\u002DTDTInfo"

const val NID_id_smime_ct_TDTInfo: Int = 208

val SN_id_smime_ct_contentInfo: String get() = "id\u002Dsmime\u002Dct\u002DcontentInfo"

const val NID_id_smime_ct_contentInfo: Int = 209

val SN_id_smime_ct_DVCSRequestData: String get() = "id\u002Dsmime\u002Dct\u002DDVCSRequestData"

const val NID_id_smime_ct_DVCSRequestData: Int = 210

val SN_id_smime_ct_DVCSResponseData: String get() = "id\u002Dsmime\u002Dct\u002DDVCSResponseData"

const val NID_id_smime_ct_DVCSResponseData: Int = 211

val SN_id_smime_ct_compressedData: String get() = "id\u002Dsmime\u002Dct\u002DcompressedData"

const val NID_id_smime_ct_compressedData: Int = 786

val SN_id_smime_ct_contentCollection: String get() = "id\u002Dsmime\u002Dct\u002DcontentCollection"

const val NID_id_smime_ct_contentCollection: Int = 1058

val SN_id_smime_ct_authEnvelopedData: String get() = "id\u002Dsmime\u002Dct\u002DauthEnvelopedData"

const val NID_id_smime_ct_authEnvelopedData: Int = 1059

val SN_id_ct_asciiTextWithCRLF: String get() = "id\u002Dct\u002DasciiTextWithCRLF"

const val NID_id_ct_asciiTextWithCRLF: Int = 787

val SN_id_ct_xml: String get() = "id\u002Dct\u002Dxml"

const val NID_id_ct_xml: Int = 1060

val SN_id_smime_aa_receiptRequest: String get() = "id\u002Dsmime\u002Daa\u002DreceiptRequest"

const val NID_id_smime_aa_receiptRequest: Int = 212

val SN_id_smime_aa_securityLabel: String get() = "id\u002Dsmime\u002Daa\u002DsecurityLabel"

const val NID_id_smime_aa_securityLabel: Int = 213

val SN_id_smime_aa_mlExpandHistory: String get() = "id\u002Dsmime\u002Daa\u002DmlExpandHistory"

const val NID_id_smime_aa_mlExpandHistory: Int = 214

val SN_id_smime_aa_contentHint: String get() = "id\u002Dsmime\u002Daa\u002DcontentHint"

const val NID_id_smime_aa_contentHint: Int = 215

val SN_id_smime_aa_msgSigDigest: String get() = "id\u002Dsmime\u002Daa\u002DmsgSigDigest"

const val NID_id_smime_aa_msgSigDigest: Int = 216

val SN_id_smime_aa_encapContentType: String get() = "id\u002Dsmime\u002Daa\u002DencapContentType"

const val NID_id_smime_aa_encapContentType: Int = 217

val SN_id_smime_aa_contentIdentifier: String get() = "id\u002Dsmime\u002Daa\u002DcontentIdentifier"

const val NID_id_smime_aa_contentIdentifier: Int = 218

val SN_id_smime_aa_macValue: String get() = "id\u002Dsmime\u002Daa\u002DmacValue"

const val NID_id_smime_aa_macValue: Int = 219

val SN_id_smime_aa_equivalentLabels: String get() = "id\u002Dsmime\u002Daa\u002DequivalentLabels"

const val NID_id_smime_aa_equivalentLabels: Int = 220

val SN_id_smime_aa_contentReference: String get() = "id\u002Dsmime\u002Daa\u002DcontentReference"

const val NID_id_smime_aa_contentReference: Int = 221

val SN_id_smime_aa_encrypKeyPref: String get() = "id\u002Dsmime\u002Daa\u002DencrypKeyPref"

const val NID_id_smime_aa_encrypKeyPref: Int = 222

val SN_id_smime_aa_signingCertificate: String get() = "id\u002Dsmime\u002Daa\u002DsigningCertificate"

const val NID_id_smime_aa_signingCertificate: Int = 223

val SN_id_smime_aa_smimeEncryptCerts: String get() = "id\u002Dsmime\u002Daa\u002DsmimeEncryptCerts"

const val NID_id_smime_aa_smimeEncryptCerts: Int = 224

val SN_id_smime_aa_timeStampToken: String get() = "id\u002Dsmime\u002Daa\u002DtimeStampToken"

const val NID_id_smime_aa_timeStampToken: Int = 225

val SN_id_smime_aa_ets_sigPolicyId: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DsigPolicyId"

const val NID_id_smime_aa_ets_sigPolicyId: Int = 226

val SN_id_smime_aa_ets_commitmentType: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DcommitmentType"

const val NID_id_smime_aa_ets_commitmentType: Int = 227

val SN_id_smime_aa_ets_signerLocation: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DsignerLocation"

const val NID_id_smime_aa_ets_signerLocation: Int = 228

val SN_id_smime_aa_ets_signerAttr: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DsignerAttr"

const val NID_id_smime_aa_ets_signerAttr: Int = 229

val SN_id_smime_aa_ets_otherSigCert: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DotherSigCert"

const val NID_id_smime_aa_ets_otherSigCert: Int = 230

val SN_id_smime_aa_ets_contentTimestamp: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DcontentTimestamp"

const val NID_id_smime_aa_ets_contentTimestamp: Int = 231

val SN_id_smime_aa_ets_CertificateRefs: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DCertificateRefs"

const val NID_id_smime_aa_ets_CertificateRefs: Int = 232

val SN_id_smime_aa_ets_RevocationRefs: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DRevocationRefs"

const val NID_id_smime_aa_ets_RevocationRefs: Int = 233

val SN_id_smime_aa_ets_certValues: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DcertValues"

const val NID_id_smime_aa_ets_certValues: Int = 234

val SN_id_smime_aa_ets_revocationValues: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DrevocationValues"

const val NID_id_smime_aa_ets_revocationValues: Int = 235

val SN_id_smime_aa_ets_escTimeStamp: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DescTimeStamp"

const val NID_id_smime_aa_ets_escTimeStamp: Int = 236

val SN_id_smime_aa_ets_certCRLTimestamp: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DcertCRLTimestamp"

const val NID_id_smime_aa_ets_certCRLTimestamp: Int = 237

val SN_id_smime_aa_ets_archiveTimeStamp: String get() = "id\u002Dsmime\u002Daa\u002Dets\u002DarchiveTimeStamp"

const val NID_id_smime_aa_ets_archiveTimeStamp: Int = 238

val SN_id_smime_aa_signatureType: String get() = "id\u002Dsmime\u002Daa\u002DsignatureType"

const val NID_id_smime_aa_signatureType: Int = 239

val SN_id_smime_aa_dvcs_dvc: String get() = "id\u002Dsmime\u002Daa\u002Ddvcs\u002Ddvc"

const val NID_id_smime_aa_dvcs_dvc: Int = 240

val SN_id_smime_alg_ESDHwith3DES: String get() = "id\u002Dsmime\u002Dalg\u002DESDHwith3DES"

const val NID_id_smime_alg_ESDHwith3DES: Int = 241

val SN_id_smime_alg_ESDHwithRC2: String get() = "id\u002Dsmime\u002Dalg\u002DESDHwithRC2"

const val NID_id_smime_alg_ESDHwithRC2: Int = 242

val SN_id_smime_alg_3DESwrap: String get() = "id\u002Dsmime\u002Dalg\u002D3DESwrap"

const val NID_id_smime_alg_3DESwrap: Int = 243

val SN_id_smime_alg_RC2wrap: String get() = "id\u002Dsmime\u002Dalg\u002DRC2wrap"

const val NID_id_smime_alg_RC2wrap: Int = 244

val SN_id_smime_alg_ESDH: String get() = "id\u002Dsmime\u002Dalg\u002DESDH"

const val NID_id_smime_alg_ESDH: Int = 245

val SN_id_smime_alg_CMS3DESwrap: String get() = "id\u002Dsmime\u002Dalg\u002DCMS3DESwrap"

const val NID_id_smime_alg_CMS3DESwrap: Int = 246

val SN_id_smime_alg_CMSRC2wrap: String get() = "id\u002Dsmime\u002Dalg\u002DCMSRC2wrap"

const val NID_id_smime_alg_CMSRC2wrap: Int = 247

val SN_id_alg_PWRI_KEK: String get() = "id\u002Dalg\u002DPWRI\u002DKEK"

const val NID_id_alg_PWRI_KEK: Int = 893

val SN_id_smime_cd_ldap: String get() = "id\u002Dsmime\u002Dcd\u002Dldap"

const val NID_id_smime_cd_ldap: Int = 248

val SN_id_smime_spq_ets_sqt_uri: String get() = "id\u002Dsmime\u002Dspq\u002Dets\u002Dsqt\u002Duri"

const val NID_id_smime_spq_ets_sqt_uri: Int = 249

val SN_id_smime_spq_ets_sqt_unotice: String get() = "id\u002Dsmime\u002Dspq\u002Dets\u002Dsqt\u002Dunotice"

const val NID_id_smime_spq_ets_sqt_unotice: Int = 250

val SN_id_smime_cti_ets_proofOfOrigin: String get() = "id\u002Dsmime\u002Dcti\u002Dets\u002DproofOfOrigin"

const val NID_id_smime_cti_ets_proofOfOrigin: Int = 251

val SN_id_smime_cti_ets_proofOfReceipt: String get() = "id\u002Dsmime\u002Dcti\u002Dets\u002DproofOfReceipt"

const val NID_id_smime_cti_ets_proofOfReceipt: Int = 252

val SN_id_smime_cti_ets_proofOfDelivery: String get() = "id\u002Dsmime\u002Dcti\u002Dets\u002DproofOfDelivery"

const val NID_id_smime_cti_ets_proofOfDelivery: Int = 253

val SN_id_smime_cti_ets_proofOfSender: String get() = "id\u002Dsmime\u002Dcti\u002Dets\u002DproofOfSender"

const val NID_id_smime_cti_ets_proofOfSender: Int = 254

val SN_id_smime_cti_ets_proofOfApproval: String get() = "id\u002Dsmime\u002Dcti\u002Dets\u002DproofOfApproval"

const val NID_id_smime_cti_ets_proofOfApproval: Int = 255

val SN_id_smime_cti_ets_proofOfCreation: String get() = "id\u002Dsmime\u002Dcti\u002Dets\u002DproofOfCreation"

const val NID_id_smime_cti_ets_proofOfCreation: Int = 256

val LN_friendlyName: String get() = "friendlyName"

const val NID_friendlyName: Int = 156

val LN_localKeyID: String get() = "localKeyID"

const val NID_localKeyID: Int = 157

val SN_ms_csp_name: String get() = "CSPName"

val LN_ms_csp_name: String get() = "Microsoft CSP Name"

const val NID_ms_csp_name: Int = 417

val SN_LocalKeySet: String get() = "LocalKeySet"

val LN_LocalKeySet: String get() = "Microsoft Local Key set"

const val NID_LocalKeySet: Int = 856

val LN_x509Certificate: String get() = "x509Certificate"

const val NID_x509Certificate: Int = 158

val LN_sdsiCertificate: String get() = "sdsiCertificate"

const val NID_sdsiCertificate: Int = 159

val LN_x509Crl: String get() = "x509Crl"

const val NID_x509Crl: Int = 160

val SN_pbe_WithSHA1And128BitRC4: String get() = "PBE\u002DSHA1\u002DRC4\u002D128"

val LN_pbe_WithSHA1And128BitRC4: String get() = "pbeWithSHA1And128BitRC4"

const val NID_pbe_WithSHA1And128BitRC4: Int = 144

val SN_pbe_WithSHA1And40BitRC4: String get() = "PBE\u002DSHA1\u002DRC4\u002D40"

val LN_pbe_WithSHA1And40BitRC4: String get() = "pbeWithSHA1And40BitRC4"

const val NID_pbe_WithSHA1And40BitRC4: Int = 145

val SN_pbe_WithSHA1And3_Key_TripleDES_CBC: String get() = "PBE\u002DSHA1\u002D3DES"

val LN_pbe_WithSHA1And3_Key_TripleDES_CBC: String get() = "pbeWithSHA1And3\u002DKeyTripleDES\u002DCBC"

const val NID_pbe_WithSHA1And3_Key_TripleDES_CBC: Int = 146

val SN_pbe_WithSHA1And2_Key_TripleDES_CBC: String get() = "PBE\u002DSHA1\u002D2DES"

val LN_pbe_WithSHA1And2_Key_TripleDES_CBC: String get() = "pbeWithSHA1And2\u002DKeyTripleDES\u002DCBC"

const val NID_pbe_WithSHA1And2_Key_TripleDES_CBC: Int = 147

val SN_pbe_WithSHA1And128BitRC2_CBC: String get() = "PBE\u002DSHA1\u002DRC2\u002D128"

val LN_pbe_WithSHA1And128BitRC2_CBC: String get() = "pbeWithSHA1And128BitRC2\u002DCBC"

const val NID_pbe_WithSHA1And128BitRC2_CBC: Int = 148

val SN_pbe_WithSHA1And40BitRC2_CBC: String get() = "PBE\u002DSHA1\u002DRC2\u002D40"

val LN_pbe_WithSHA1And40BitRC2_CBC: String get() = "pbeWithSHA1And40BitRC2\u002DCBC"

const val NID_pbe_WithSHA1And40BitRC2_CBC: Int = 149

val LN_keyBag: String get() = "keyBag"

const val NID_keyBag: Int = 150

val LN_pkcs8ShroudedKeyBag: String get() = "pkcs8ShroudedKeyBag"

const val NID_pkcs8ShroudedKeyBag: Int = 151

val LN_certBag: String get() = "certBag"

const val NID_certBag: Int = 152

val LN_crlBag: String get() = "crlBag"

const val NID_crlBag: Int = 153

val LN_secretBag: String get() = "secretBag"

const val NID_secretBag: Int = 154

val LN_safeContentsBag: String get() = "safeContentsBag"

const val NID_safeContentsBag: Int = 155

val SN_md2: String get() = "MD2"

val LN_md2: String get() = "md2"

const val NID_md2: Int = 3

val SN_md4: String get() = "MD4"

val LN_md4: String get() = "md4"

const val NID_md4: Int = 257

val SN_md5: String get() = "MD5"

val LN_md5: String get() = "md5"

const val NID_md5: Int = 4

val SN_md5_sha1: String get() = "MD5\u002DSHA1"

val LN_md5_sha1: String get() = "md5\u002Dsha1"

const val NID_md5_sha1: Int = 114

val LN_hmacWithMD5: String get() = "hmacWithMD5"

const val NID_hmacWithMD5: Int = 797

val LN_hmacWithSHA1: String get() = "hmacWithSHA1"

const val NID_hmacWithSHA1: Int = 163

val LN_hmacWithSHA224: String get() = "hmacWithSHA224"

const val NID_hmacWithSHA224: Int = 798

val LN_hmacWithSHA256: String get() = "hmacWithSHA256"

const val NID_hmacWithSHA256: Int = 799

val LN_hmacWithSHA384: String get() = "hmacWithSHA384"

const val NID_hmacWithSHA384: Int = 800

val LN_hmacWithSHA512: String get() = "hmacWithSHA512"

const val NID_hmacWithSHA512: Int = 801

val SN_rc2_cbc: String get() = "RC2\u002DCBC"

val LN_rc2_cbc: String get() = "rc2\u002Dcbc"

const val NID_rc2_cbc: Int = 37

val SN_rc2_ecb: String get() = "RC2\u002DECB"

val LN_rc2_ecb: String get() = "rc2\u002Decb"

const val NID_rc2_ecb: Int = 38

val SN_rc2_cfb64: String get() = "RC2\u002DCFB"

val LN_rc2_cfb64: String get() = "rc2\u002Dcfb"

const val NID_rc2_cfb64: Int = 39

val SN_rc2_ofb64: String get() = "RC2\u002DOFB"

val LN_rc2_ofb64: String get() = "rc2\u002Dofb"

const val NID_rc2_ofb64: Int = 40

val SN_rc2_40_cbc: String get() = "RC2\u002D40\u002DCBC"

val LN_rc2_40_cbc: String get() = "rc2\u002D40\u002Dcbc"

const val NID_rc2_40_cbc: Int = 98

val SN_rc2_64_cbc: String get() = "RC2\u002D64\u002DCBC"

val LN_rc2_64_cbc: String get() = "rc2\u002D64\u002Dcbc"

const val NID_rc2_64_cbc: Int = 166

val SN_rc4: String get() = "RC4"

val LN_rc4: String get() = "rc4"

const val NID_rc4: Int = 5

val SN_rc4_40: String get() = "RC4\u002D40"

val LN_rc4_40: String get() = "rc4\u002D40"

const val NID_rc4_40: Int = 97

val SN_des_ede3_cbc: String get() = "DES\u002DEDE3\u002DCBC"

val LN_des_ede3_cbc: String get() = "des\u002Dede3\u002Dcbc"

const val NID_des_ede3_cbc: Int = 44

val SN_rc5_cbc: String get() = "RC5\u002DCBC"

val LN_rc5_cbc: String get() = "rc5\u002Dcbc"

const val NID_rc5_cbc: Int = 120

val SN_rc5_ecb: String get() = "RC5\u002DECB"

val LN_rc5_ecb: String get() = "rc5\u002Decb"

const val NID_rc5_ecb: Int = 121

val SN_rc5_cfb64: String get() = "RC5\u002DCFB"

val LN_rc5_cfb64: String get() = "rc5\u002Dcfb"

const val NID_rc5_cfb64: Int = 122

val SN_rc5_ofb64: String get() = "RC5\u002DOFB"

val LN_rc5_ofb64: String get() = "rc5\u002Dofb"

const val NID_rc5_ofb64: Int = 123

val SN_ms_ext_req: String get() = "msExtReq"

val LN_ms_ext_req: String get() = "Microsoft Extension Request"

const val NID_ms_ext_req: Int = 171

val SN_ms_code_ind: String get() = "msCodeInd"

val LN_ms_code_ind: String get() = "Microsoft Individual Code Signing"

const val NID_ms_code_ind: Int = 134

val SN_ms_code_com: String get() = "msCodeCom"

val LN_ms_code_com: String get() = "Microsoft Commercial Code Signing"

const val NID_ms_code_com: Int = 135

val SN_ms_ctl_sign: String get() = "msCTLSign"

val LN_ms_ctl_sign: String get() = "Microsoft Trust List Signing"

const val NID_ms_ctl_sign: Int = 136

val SN_ms_sgc: String get() = "msSGC"

val LN_ms_sgc: String get() = "Microsoft Server Gated Crypto"

const val NID_ms_sgc: Int = 137

val SN_ms_efs: String get() = "msEFS"

val LN_ms_efs: String get() = "Microsoft Encrypted File System"

const val NID_ms_efs: Int = 138

val SN_ms_smartcard_login: String get() = "msSmartcardLogin"

val LN_ms_smartcard_login: String get() = "Microsoft Smartcardlogin"

const val NID_ms_smartcard_login: Int = 648

val SN_ms_upn: String get() = "msUPN"

val LN_ms_upn: String get() = "Microsoft Universal Principal Name"

const val NID_ms_upn: Int = 649

val SN_idea_cbc: String get() = "IDEA\u002DCBC"

val LN_idea_cbc: String get() = "idea\u002Dcbc"

const val NID_idea_cbc: Int = 34

val SN_idea_ecb: String get() = "IDEA\u002DECB"

val LN_idea_ecb: String get() = "idea\u002Decb"

const val NID_idea_ecb: Int = 36

val SN_idea_cfb64: String get() = "IDEA\u002DCFB"

val LN_idea_cfb64: String get() = "idea\u002Dcfb"

const val NID_idea_cfb64: Int = 35

val SN_idea_ofb64: String get() = "IDEA\u002DOFB"

val LN_idea_ofb64: String get() = "idea\u002Dofb"

const val NID_idea_ofb64: Int = 46

val SN_bf_cbc: String get() = "BF\u002DCBC"

val LN_bf_cbc: String get() = "bf\u002Dcbc"

const val NID_bf_cbc: Int = 91

val SN_bf_ecb: String get() = "BF\u002DECB"

val LN_bf_ecb: String get() = "bf\u002Decb"

const val NID_bf_ecb: Int = 92

val SN_bf_cfb64: String get() = "BF\u002DCFB"

val LN_bf_cfb64: String get() = "bf\u002Dcfb"

const val NID_bf_cfb64: Int = 93

val SN_bf_ofb64: String get() = "BF\u002DOFB"

val LN_bf_ofb64: String get() = "bf\u002Dofb"

const val NID_bf_ofb64: Int = 94

val SN_id_pkix: String get() = "PKIX"

const val NID_id_pkix: Int = 127

val SN_id_pkix_mod: String get() = "id\u002Dpkix\u002Dmod"

const val NID_id_pkix_mod: Int = 258

val SN_id_pe: String get() = "id\u002Dpe"

const val NID_id_pe: Int = 175

val SN_id_qt: String get() = "id\u002Dqt"

const val NID_id_qt: Int = 259

val SN_id_kp: String get() = "id\u002Dkp"

const val NID_id_kp: Int = 128

val SN_id_it: String get() = "id\u002Dit"

const val NID_id_it: Int = 260

val SN_id_pkip: String get() = "id\u002Dpkip"

const val NID_id_pkip: Int = 261

val SN_id_alg: String get() = "id\u002Dalg"

const val NID_id_alg: Int = 262

val SN_id_cmc: String get() = "id\u002Dcmc"

const val NID_id_cmc: Int = 263

val SN_id_on: String get() = "id\u002Don"

const val NID_id_on: Int = 264

val SN_id_pda: String get() = "id\u002Dpda"

const val NID_id_pda: Int = 265

val SN_id_aca: String get() = "id\u002Daca"

const val NID_id_aca: Int = 266

val SN_id_qcs: String get() = "id\u002Dqcs"

const val NID_id_qcs: Int = 267

val SN_id_cct: String get() = "id\u002Dcct"

const val NID_id_cct: Int = 268

val SN_id_ppl: String get() = "id\u002Dppl"

const val NID_id_ppl: Int = 662

val SN_id_ad: String get() = "id\u002Dad"

const val NID_id_ad: Int = 176

val SN_id_pkix1_explicit_88: String get() = "id\u002Dpkix1\u002Dexplicit\u002D88"

const val NID_id_pkix1_explicit_88: Int = 269

val SN_id_pkix1_implicit_88: String get() = "id\u002Dpkix1\u002Dimplicit\u002D88"

const val NID_id_pkix1_implicit_88: Int = 270

val SN_id_pkix1_explicit_93: String get() = "id\u002Dpkix1\u002Dexplicit\u002D93"

const val NID_id_pkix1_explicit_93: Int = 271

val SN_id_pkix1_implicit_93: String get() = "id\u002Dpkix1\u002Dimplicit\u002D93"

const val NID_id_pkix1_implicit_93: Int = 272

val SN_id_mod_crmf: String get() = "id\u002Dmod\u002Dcrmf"

const val NID_id_mod_crmf: Int = 273

val SN_id_mod_cmc: String get() = "id\u002Dmod\u002Dcmc"

const val NID_id_mod_cmc: Int = 274

val SN_id_mod_kea_profile_88: String get() = "id\u002Dmod\u002Dkea\u002Dprofile\u002D88"

const val NID_id_mod_kea_profile_88: Int = 275

val SN_id_mod_kea_profile_93: String get() = "id\u002Dmod\u002Dkea\u002Dprofile\u002D93"

const val NID_id_mod_kea_profile_93: Int = 276

val SN_id_mod_cmp: String get() = "id\u002Dmod\u002Dcmp"

const val NID_id_mod_cmp: Int = 277

val SN_id_mod_qualified_cert_88: String get() = "id\u002Dmod\u002Dqualified\u002Dcert\u002D88"

const val NID_id_mod_qualified_cert_88: Int = 278

val SN_id_mod_qualified_cert_93: String get() = "id\u002Dmod\u002Dqualified\u002Dcert\u002D93"

const val NID_id_mod_qualified_cert_93: Int = 279

val SN_id_mod_attribute_cert: String get() = "id\u002Dmod\u002Dattribute\u002Dcert"

const val NID_id_mod_attribute_cert: Int = 280

val SN_id_mod_timestamp_protocol: String get() = "id\u002Dmod\u002Dtimestamp\u002Dprotocol"

const val NID_id_mod_timestamp_protocol: Int = 281

val SN_id_mod_ocsp: String get() = "id\u002Dmod\u002Docsp"

const val NID_id_mod_ocsp: Int = 282

val SN_id_mod_dvcs: String get() = "id\u002Dmod\u002Ddvcs"

const val NID_id_mod_dvcs: Int = 283

val SN_id_mod_cmp2000: String get() = "id\u002Dmod\u002Dcmp2000"

const val NID_id_mod_cmp2000: Int = 284

val SN_info_access: String get() = "authorityInfoAccess"

val LN_info_access: String get() = "Authority Information Access"

const val NID_info_access: Int = 177

val SN_biometricInfo: String get() = "biometricInfo"

val LN_biometricInfo: String get() = "Biometric Info"

const val NID_biometricInfo: Int = 285

val SN_qcStatements: String get() = "qcStatements"

const val NID_qcStatements: Int = 286

val SN_ac_auditEntity: String get() = "ac\u002DauditEntity"

const val NID_ac_auditEntity: Int = 287

val SN_ac_targeting: String get() = "ac\u002Dtargeting"

const val NID_ac_targeting: Int = 288

val SN_aaControls: String get() = "aaControls"

const val NID_aaControls: Int = 289

val SN_sbgp_ipAddrBlock: String get() = "sbgp\u002DipAddrBlock"

const val NID_sbgp_ipAddrBlock: Int = 290

val SN_sbgp_autonomousSysNum: String get() = "sbgp\u002DautonomousSysNum"

const val NID_sbgp_autonomousSysNum: Int = 291

val SN_sbgp_routerIdentifier: String get() = "sbgp\u002DrouterIdentifier"

const val NID_sbgp_routerIdentifier: Int = 292

val SN_ac_proxying: String get() = "ac\u002Dproxying"

const val NID_ac_proxying: Int = 397

val SN_sinfo_access: String get() = "subjectInfoAccess"

val LN_sinfo_access: String get() = "Subject Information Access"

const val NID_sinfo_access: Int = 398

val SN_proxyCertInfo: String get() = "proxyCertInfo"

val LN_proxyCertInfo: String get() = "Proxy Certificate Information"

const val NID_proxyCertInfo: Int = 663

val SN_tlsfeature: String get() = "tlsfeature"

val LN_tlsfeature: String get() = "TLS Feature"

const val NID_tlsfeature: Int = 1020

val SN_id_qt_cps: String get() = "id\u002Dqt\u002Dcps"

val LN_id_qt_cps: String get() = "Policy Qualifier CPS"

const val NID_id_qt_cps: Int = 164

val SN_id_qt_unotice: String get() = "id\u002Dqt\u002Dunotice"

val LN_id_qt_unotice: String get() = "Policy Qualifier User Notice"

const val NID_id_qt_unotice: Int = 165

val SN_textNotice: String get() = "textNotice"

const val NID_textNotice: Int = 293

val SN_server_auth: String get() = "serverAuth"

val LN_server_auth: String get() = "TLS Web Server Authentication"

const val NID_server_auth: Int = 129

val SN_client_auth: String get() = "clientAuth"

val LN_client_auth: String get() = "TLS Web Client Authentication"

const val NID_client_auth: Int = 130

val SN_code_sign: String get() = "codeSigning"

val LN_code_sign: String get() = "Code Signing"

const val NID_code_sign: Int = 131

val SN_email_protect: String get() = "emailProtection"

val LN_email_protect: String get() = "E\u002Dmail Protection"

const val NID_email_protect: Int = 132

val SN_ipsecEndSystem: String get() = "ipsecEndSystem"

val LN_ipsecEndSystem: String get() = "IPSec End System"

const val NID_ipsecEndSystem: Int = 294

val SN_ipsecTunnel: String get() = "ipsecTunnel"

val LN_ipsecTunnel: String get() = "IPSec Tunnel"

const val NID_ipsecTunnel: Int = 295

val SN_ipsecUser: String get() = "ipsecUser"

val LN_ipsecUser: String get() = "IPSec User"

const val NID_ipsecUser: Int = 296

val SN_time_stamp: String get() = "timeStamping"

val LN_time_stamp: String get() = "Time Stamping"

const val NID_time_stamp: Int = 133

val SN_OCSP_sign: String get() = "OCSPSigning"

val LN_OCSP_sign: String get() = "OCSP Signing"

const val NID_OCSP_sign: Int = 180

val SN_dvcs: String get() = "DVCS"

val LN_dvcs: String get() = "dvcs"

const val NID_dvcs: Int = 297

val SN_ipsec_IKE: String get() = "ipsecIKE"

val LN_ipsec_IKE: String get() = "ipsec Internet Key Exchange"

const val NID_ipsec_IKE: Int = 1022

val SN_capwapAC: String get() = "capwapAC"

val LN_capwapAC: String get() = "Ctrl\u002Fprovision WAP Access"

const val NID_capwapAC: Int = 1023

val SN_capwapWTP: String get() = "capwapWTP"

val LN_capwapWTP: String get() = "Ctrl\u002FProvision WAP Termination"

const val NID_capwapWTP: Int = 1024

val SN_sshClient: String get() = "secureShellClient"

val LN_sshClient: String get() = "SSH Client"

const val NID_sshClient: Int = 1025

val SN_sshServer: String get() = "secureShellServer"

val LN_sshServer: String get() = "SSH Server"

const val NID_sshServer: Int = 1026

val SN_sendRouter: String get() = "sendRouter"

val LN_sendRouter: String get() = "Send Router"

const val NID_sendRouter: Int = 1027

val SN_sendProxiedRouter: String get() = "sendProxiedRouter"

val LN_sendProxiedRouter: String get() = "Send Proxied Router"

const val NID_sendProxiedRouter: Int = 1028

val SN_sendOwner: String get() = "sendOwner"

val LN_sendOwner: String get() = "Send Owner"

const val NID_sendOwner: Int = 1029

val SN_sendProxiedOwner: String get() = "sendProxiedOwner"

val LN_sendProxiedOwner: String get() = "Send Proxied Owner"

const val NID_sendProxiedOwner: Int = 1030

val SN_id_it_caProtEncCert: String get() = "id\u002Dit\u002DcaProtEncCert"

const val NID_id_it_caProtEncCert: Int = 298

val SN_id_it_signKeyPairTypes: String get() = "id\u002Dit\u002DsignKeyPairTypes"

const val NID_id_it_signKeyPairTypes: Int = 299

val SN_id_it_encKeyPairTypes: String get() = "id\u002Dit\u002DencKeyPairTypes"

const val NID_id_it_encKeyPairTypes: Int = 300

val SN_id_it_preferredSymmAlg: String get() = "id\u002Dit\u002DpreferredSymmAlg"

const val NID_id_it_preferredSymmAlg: Int = 301

val SN_id_it_caKeyUpdateInfo: String get() = "id\u002Dit\u002DcaKeyUpdateInfo"

const val NID_id_it_caKeyUpdateInfo: Int = 302

val SN_id_it_currentCRL: String get() = "id\u002Dit\u002DcurrentCRL"

const val NID_id_it_currentCRL: Int = 303

val SN_id_it_unsupportedOIDs: String get() = "id\u002Dit\u002DunsupportedOIDs"

const val NID_id_it_unsupportedOIDs: Int = 304

val SN_id_it_subscriptionRequest: String get() = "id\u002Dit\u002DsubscriptionRequest"

const val NID_id_it_subscriptionRequest: Int = 305

val SN_id_it_subscriptionResponse: String get() = "id\u002Dit\u002DsubscriptionResponse"

const val NID_id_it_subscriptionResponse: Int = 306

val SN_id_it_keyPairParamReq: String get() = "id\u002Dit\u002DkeyPairParamReq"

const val NID_id_it_keyPairParamReq: Int = 307

val SN_id_it_keyPairParamRep: String get() = "id\u002Dit\u002DkeyPairParamRep"

const val NID_id_it_keyPairParamRep: Int = 308

val SN_id_it_revPassphrase: String get() = "id\u002Dit\u002DrevPassphrase"

const val NID_id_it_revPassphrase: Int = 309

val SN_id_it_implicitConfirm: String get() = "id\u002Dit\u002DimplicitConfirm"

const val NID_id_it_implicitConfirm: Int = 310

val SN_id_it_confirmWaitTime: String get() = "id\u002Dit\u002DconfirmWaitTime"

const val NID_id_it_confirmWaitTime: Int = 311

val SN_id_it_origPKIMessage: String get() = "id\u002Dit\u002DorigPKIMessage"

const val NID_id_it_origPKIMessage: Int = 312

val SN_id_it_suppLangTags: String get() = "id\u002Dit\u002DsuppLangTags"

const val NID_id_it_suppLangTags: Int = 784

val SN_id_regCtrl: String get() = "id\u002DregCtrl"

const val NID_id_regCtrl: Int = 313

val SN_id_regInfo: String get() = "id\u002DregInfo"

const val NID_id_regInfo: Int = 314

val SN_id_regCtrl_regToken: String get() = "id\u002DregCtrl\u002DregToken"

const val NID_id_regCtrl_regToken: Int = 315

val SN_id_regCtrl_authenticator: String get() = "id\u002DregCtrl\u002Dauthenticator"

const val NID_id_regCtrl_authenticator: Int = 316

val SN_id_regCtrl_pkiPublicationInfo: String get() = "id\u002DregCtrl\u002DpkiPublicationInfo"

const val NID_id_regCtrl_pkiPublicationInfo: Int = 317

val SN_id_regCtrl_pkiArchiveOptions: String get() = "id\u002DregCtrl\u002DpkiArchiveOptions"

const val NID_id_regCtrl_pkiArchiveOptions: Int = 318

val SN_id_regCtrl_oldCertID: String get() = "id\u002DregCtrl\u002DoldCertID"

const val NID_id_regCtrl_oldCertID: Int = 319

val SN_id_regCtrl_protocolEncrKey: String get() = "id\u002DregCtrl\u002DprotocolEncrKey"

const val NID_id_regCtrl_protocolEncrKey: Int = 320

val SN_id_regInfo_utf8Pairs: String get() = "id\u002DregInfo\u002Dutf8Pairs"

const val NID_id_regInfo_utf8Pairs: Int = 321

val SN_id_regInfo_certReq: String get() = "id\u002DregInfo\u002DcertReq"

const val NID_id_regInfo_certReq: Int = 322

val SN_id_alg_des40: String get() = "id\u002Dalg\u002Ddes40"

const val NID_id_alg_des40: Int = 323

val SN_id_alg_noSignature: String get() = "id\u002Dalg\u002DnoSignature"

const val NID_id_alg_noSignature: Int = 324

val SN_id_alg_dh_sig_hmac_sha1: String get() = "id\u002Dalg\u002Ddh\u002Dsig\u002Dhmac\u002Dsha1"

const val NID_id_alg_dh_sig_hmac_sha1: Int = 325

val SN_id_alg_dh_pop: String get() = "id\u002Dalg\u002Ddh\u002Dpop"

const val NID_id_alg_dh_pop: Int = 326

val SN_id_cmc_statusInfo: String get() = "id\u002Dcmc\u002DstatusInfo"

const val NID_id_cmc_statusInfo: Int = 327

val SN_id_cmc_identification: String get() = "id\u002Dcmc\u002Didentification"

const val NID_id_cmc_identification: Int = 328

val SN_id_cmc_identityProof: String get() = "id\u002Dcmc\u002DidentityProof"

const val NID_id_cmc_identityProof: Int = 329

val SN_id_cmc_dataReturn: String get() = "id\u002Dcmc\u002DdataReturn"

const val NID_id_cmc_dataReturn: Int = 330

val SN_id_cmc_transactionId: String get() = "id\u002Dcmc\u002DtransactionId"

const val NID_id_cmc_transactionId: Int = 331

val SN_id_cmc_senderNonce: String get() = "id\u002Dcmc\u002DsenderNonce"

const val NID_id_cmc_senderNonce: Int = 332

val SN_id_cmc_recipientNonce: String get() = "id\u002Dcmc\u002DrecipientNonce"

const val NID_id_cmc_recipientNonce: Int = 333

val SN_id_cmc_addExtensions: String get() = "id\u002Dcmc\u002DaddExtensions"

const val NID_id_cmc_addExtensions: Int = 334

val SN_id_cmc_encryptedPOP: String get() = "id\u002Dcmc\u002DencryptedPOP"

const val NID_id_cmc_encryptedPOP: Int = 335

val SN_id_cmc_decryptedPOP: String get() = "id\u002Dcmc\u002DdecryptedPOP"

const val NID_id_cmc_decryptedPOP: Int = 336

val SN_id_cmc_lraPOPWitness: String get() = "id\u002Dcmc\u002DlraPOPWitness"

const val NID_id_cmc_lraPOPWitness: Int = 337

val SN_id_cmc_getCert: String get() = "id\u002Dcmc\u002DgetCert"

const val NID_id_cmc_getCert: Int = 338

val SN_id_cmc_getCRL: String get() = "id\u002Dcmc\u002DgetCRL"

const val NID_id_cmc_getCRL: Int = 339

val SN_id_cmc_revokeRequest: String get() = "id\u002Dcmc\u002DrevokeRequest"

const val NID_id_cmc_revokeRequest: Int = 340

val SN_id_cmc_regInfo: String get() = "id\u002Dcmc\u002DregInfo"

const val NID_id_cmc_regInfo: Int = 341

val SN_id_cmc_responseInfo: String get() = "id\u002Dcmc\u002DresponseInfo"

const val NID_id_cmc_responseInfo: Int = 342

val SN_id_cmc_queryPending: String get() = "id\u002Dcmc\u002DqueryPending"

const val NID_id_cmc_queryPending: Int = 343

val SN_id_cmc_popLinkRandom: String get() = "id\u002Dcmc\u002DpopLinkRandom"

const val NID_id_cmc_popLinkRandom: Int = 344

val SN_id_cmc_popLinkWitness: String get() = "id\u002Dcmc\u002DpopLinkWitness"

const val NID_id_cmc_popLinkWitness: Int = 345

val SN_id_cmc_confirmCertAcceptance: String get() = "id\u002Dcmc\u002DconfirmCertAcceptance"

const val NID_id_cmc_confirmCertAcceptance: Int = 346

val SN_id_on_personalData: String get() = "id\u002Don\u002DpersonalData"

const val NID_id_on_personalData: Int = 347

val SN_id_on_permanentIdentifier: String get() = "id\u002Don\u002DpermanentIdentifier"

val LN_id_on_permanentIdentifier: String get() = "Permanent Identifier"

const val NID_id_on_permanentIdentifier: Int = 858

val SN_id_pda_dateOfBirth: String get() = "id\u002Dpda\u002DdateOfBirth"

const val NID_id_pda_dateOfBirth: Int = 348

val SN_id_pda_placeOfBirth: String get() = "id\u002Dpda\u002DplaceOfBirth"

const val NID_id_pda_placeOfBirth: Int = 349

val SN_id_pda_gender: String get() = "id\u002Dpda\u002Dgender"

const val NID_id_pda_gender: Int = 351

val SN_id_pda_countryOfCitizenship: String get() = "id\u002Dpda\u002DcountryOfCitizenship"

const val NID_id_pda_countryOfCitizenship: Int = 352

val SN_id_pda_countryOfResidence: String get() = "id\u002Dpda\u002DcountryOfResidence"

const val NID_id_pda_countryOfResidence: Int = 353

val SN_id_aca_authenticationInfo: String get() = "id\u002Daca\u002DauthenticationInfo"

const val NID_id_aca_authenticationInfo: Int = 354

val SN_id_aca_accessIdentity: String get() = "id\u002Daca\u002DaccessIdentity"

const val NID_id_aca_accessIdentity: Int = 355

val SN_id_aca_chargingIdentity: String get() = "id\u002Daca\u002DchargingIdentity"

const val NID_id_aca_chargingIdentity: Int = 356

val SN_id_aca_group: String get() = "id\u002Daca\u002Dgroup"

const val NID_id_aca_group: Int = 357

val SN_id_aca_role: String get() = "id\u002Daca\u002Drole"

const val NID_id_aca_role: Int = 358

val SN_id_aca_encAttrs: String get() = "id\u002Daca\u002DencAttrs"

const val NID_id_aca_encAttrs: Int = 399

val SN_id_qcs_pkixQCSyntax_v1: String get() = "id\u002Dqcs\u002DpkixQCSyntax\u002Dv1"

const val NID_id_qcs_pkixQCSyntax_v1: Int = 359

val SN_id_cct_crs: String get() = "id\u002Dcct\u002Dcrs"

const val NID_id_cct_crs: Int = 360

val SN_id_cct_PKIData: String get() = "id\u002Dcct\u002DPKIData"

const val NID_id_cct_PKIData: Int = 361

val SN_id_cct_PKIResponse: String get() = "id\u002Dcct\u002DPKIResponse"

const val NID_id_cct_PKIResponse: Int = 362

val SN_id_ppl_anyLanguage: String get() = "id\u002Dppl\u002DanyLanguage"

val LN_id_ppl_anyLanguage: String get() = "Any language"

const val NID_id_ppl_anyLanguage: Int = 664

val SN_id_ppl_inheritAll: String get() = "id\u002Dppl\u002DinheritAll"

val LN_id_ppl_inheritAll: String get() = "Inherit all"

const val NID_id_ppl_inheritAll: Int = 665

val SN_Independent: String get() = "id\u002Dppl\u002Dindependent"

val LN_Independent: String get() = "Independent"

const val NID_Independent: Int = 667

val SN_ad_OCSP: String get() = "OCSP"

val LN_ad_OCSP: String get() = "OCSP"

const val NID_ad_OCSP: Int = 178

val SN_ad_ca_issuers: String get() = "caIssuers"

val LN_ad_ca_issuers: String get() = "CA Issuers"

const val NID_ad_ca_issuers: Int = 179

val SN_ad_timeStamping: String get() = "ad_timestamping"

val LN_ad_timeStamping: String get() = "AD Time Stamping"

const val NID_ad_timeStamping: Int = 363

val SN_ad_dvcs: String get() = "AD_DVCS"

val LN_ad_dvcs: String get() = "ad dvcs"

const val NID_ad_dvcs: Int = 364

val SN_caRepository: String get() = "caRepository"

val LN_caRepository: String get() = "CA Repository"

const val NID_caRepository: Int = 785

val SN_id_pkix_OCSP_basic: String get() = "basicOCSPResponse"

val LN_id_pkix_OCSP_basic: String get() = "Basic OCSP Response"

const val NID_id_pkix_OCSP_basic: Int = 365

val SN_id_pkix_OCSP_Nonce: String get() = "Nonce"

val LN_id_pkix_OCSP_Nonce: String get() = "OCSP Nonce"

const val NID_id_pkix_OCSP_Nonce: Int = 366

val SN_id_pkix_OCSP_CrlID: String get() = "CrlID"

val LN_id_pkix_OCSP_CrlID: String get() = "OCSP CRL ID"

const val NID_id_pkix_OCSP_CrlID: Int = 367

val SN_id_pkix_OCSP_acceptableResponses: String get() = "acceptableResponses"

val LN_id_pkix_OCSP_acceptableResponses: String get() = "Acceptable OCSP Responses"

const val NID_id_pkix_OCSP_acceptableResponses: Int = 368

val SN_id_pkix_OCSP_noCheck: String get() = "noCheck"

val LN_id_pkix_OCSP_noCheck: String get() = "OCSP No Check"

const val NID_id_pkix_OCSP_noCheck: Int = 369

val SN_id_pkix_OCSP_archiveCutoff: String get() = "archiveCutoff"

val LN_id_pkix_OCSP_archiveCutoff: String get() = "OCSP Archive Cutoff"

const val NID_id_pkix_OCSP_archiveCutoff: Int = 370

val SN_id_pkix_OCSP_serviceLocator: String get() = "serviceLocator"

val LN_id_pkix_OCSP_serviceLocator: String get() = "OCSP Service Locator"

const val NID_id_pkix_OCSP_serviceLocator: Int = 371

val SN_id_pkix_OCSP_extendedStatus: String get() = "extendedStatus"

val LN_id_pkix_OCSP_extendedStatus: String get() = "Extended OCSP Status"

const val NID_id_pkix_OCSP_extendedStatus: Int = 372

val SN_id_pkix_OCSP_valid: String get() = "valid"

const val NID_id_pkix_OCSP_valid: Int = 373

val SN_id_pkix_OCSP_path: String get() = "path"

const val NID_id_pkix_OCSP_path: Int = 374

val SN_id_pkix_OCSP_trustRoot: String get() = "trustRoot"

val LN_id_pkix_OCSP_trustRoot: String get() = "Trust Root"

const val NID_id_pkix_OCSP_trustRoot: Int = 375

val SN_algorithm: String get() = "algorithm"

val LN_algorithm: String get() = "algorithm"

const val NID_algorithm: Int = 376

val SN_md5WithRSA: String get() = "RSA\u002DNP\u002DMD5"

val LN_md5WithRSA: String get() = "md5WithRSA"

const val NID_md5WithRSA: Int = 104

val SN_des_ecb: String get() = "DES\u002DECB"

val LN_des_ecb: String get() = "des\u002Decb"

const val NID_des_ecb: Int = 29

val SN_des_cbc: String get() = "DES\u002DCBC"

val LN_des_cbc: String get() = "des\u002Dcbc"

const val NID_des_cbc: Int = 31

val SN_des_ofb64: String get() = "DES\u002DOFB"

val LN_des_ofb64: String get() = "des\u002Dofb"

const val NID_des_ofb64: Int = 45

val SN_des_cfb64: String get() = "DES\u002DCFB"

val LN_des_cfb64: String get() = "des\u002Dcfb"

const val NID_des_cfb64: Int = 30

val SN_rsaSignature: String get() = "rsaSignature"

const val NID_rsaSignature: Int = 377

val SN_dsa_2: String get() = "DSA\u002Dold"

val LN_dsa_2: String get() = "dsaEncryption\u002Dold"

const val NID_dsa_2: Int = 67

val SN_dsaWithSHA: String get() = "DSA\u002DSHA"

val LN_dsaWithSHA: String get() = "dsaWithSHA"

const val NID_dsaWithSHA: Int = 66

val SN_shaWithRSAEncryption: String get() = "RSA\u002DSHA"

val LN_shaWithRSAEncryption: String get() = "shaWithRSAEncryption"

const val NID_shaWithRSAEncryption: Int = 42

val SN_des_ede_ecb: String get() = "DES\u002DEDE"

val LN_des_ede_ecb: String get() = "des\u002Dede"

const val NID_des_ede_ecb: Int = 32

val SN_des_ede3_ecb: String get() = "DES\u002DEDE3"

val LN_des_ede3_ecb: String get() = "des\u002Dede3"

const val NID_des_ede3_ecb: Int = 33

val SN_des_ede_cbc: String get() = "DES\u002DEDE\u002DCBC"

val LN_des_ede_cbc: String get() = "des\u002Dede\u002Dcbc"

const val NID_des_ede_cbc: Int = 43

val SN_des_ede_cfb64: String get() = "DES\u002DEDE\u002DCFB"

val LN_des_ede_cfb64: String get() = "des\u002Dede\u002Dcfb"

const val NID_des_ede_cfb64: Int = 60

val SN_des_ede3_cfb64: String get() = "DES\u002DEDE3\u002DCFB"

val LN_des_ede3_cfb64: String get() = "des\u002Dede3\u002Dcfb"

const val NID_des_ede3_cfb64: Int = 61

val SN_des_ede_ofb64: String get() = "DES\u002DEDE\u002DOFB"

val LN_des_ede_ofb64: String get() = "des\u002Dede\u002Dofb"

const val NID_des_ede_ofb64: Int = 62

val SN_des_ede3_ofb64: String get() = "DES\u002DEDE3\u002DOFB"

val LN_des_ede3_ofb64: String get() = "des\u002Dede3\u002Dofb"

const val NID_des_ede3_ofb64: Int = 63

val SN_desx_cbc: String get() = "DESX\u002DCBC"

val LN_desx_cbc: String get() = "desx\u002Dcbc"

const val NID_desx_cbc: Int = 80

val SN_sha: String get() = "SHA"

val LN_sha: String get() = "sha"

const val NID_sha: Int = 41

val SN_sha1: String get() = "SHA1"

val LN_sha1: String get() = "sha1"

const val NID_sha1: Int = 64

val SN_dsaWithSHA1_2: String get() = "DSA\u002DSHA1\u002Dold"

val LN_dsaWithSHA1_2: String get() = "dsaWithSHA1\u002Dold"

const val NID_dsaWithSHA1_2: Int = 70

val SN_sha1WithRSA: String get() = "RSA\u002DSHA1\u002D2"

val LN_sha1WithRSA: String get() = "sha1WithRSA"

const val NID_sha1WithRSA: Int = 115

val SN_ripemd160: String get() = "RIPEMD160"

val LN_ripemd160: String get() = "ripemd160"

const val NID_ripemd160: Int = 117

val SN_ripemd160WithRSA: String get() = "RSA\u002DRIPEMD160"

val LN_ripemd160WithRSA: String get() = "ripemd160WithRSA"

const val NID_ripemd160WithRSA: Int = 119

val SN_blake2b512: String get() = "BLAKE2b512"

val LN_blake2b512: String get() = "blake2b512"

const val NID_blake2b512: Int = 1056

val SN_blake2s256: String get() = "BLAKE2s256"

val LN_blake2s256: String get() = "blake2s256"

const val NID_blake2s256: Int = 1057

val SN_sxnet: String get() = "SXNetID"

val LN_sxnet: String get() = "Strong Extranet ID"

const val NID_sxnet: Int = 143

val SN_X500: String get() = "X500"

val LN_X500: String get() = "directory services \u0028X.500\u0029"

const val NID_X500: Int = 11

val SN_X509: String get() = "X509"

const val NID_X509: Int = 12

val SN_commonName: String get() = "CN"

val LN_commonName: String get() = "commonName"

const val NID_commonName: Int = 13

val SN_surname: String get() = "SN"

val LN_surname: String get() = "surname"

const val NID_surname: Int = 100

val LN_serialNumber: String get() = "serialNumber"

const val NID_serialNumber: Int = 105

val SN_countryName: String get() = "C"

val LN_countryName: String get() = "countryName"

const val NID_countryName: Int = 14

val SN_localityName: String get() = "L"

val LN_localityName: String get() = "localityName"

const val NID_localityName: Int = 15

val SN_stateOrProvinceName: String get() = "ST"

val LN_stateOrProvinceName: String get() = "stateOrProvinceName"

const val NID_stateOrProvinceName: Int = 16

val SN_streetAddress: String get() = "street"

val LN_streetAddress: String get() = "streetAddress"

const val NID_streetAddress: Int = 660

val SN_organizationName: String get() = "O"

val LN_organizationName: String get() = "organizationName"

const val NID_organizationName: Int = 17

val SN_organizationalUnitName: String get() = "OU"

val LN_organizationalUnitName: String get() = "organizationalUnitName"

const val NID_organizationalUnitName: Int = 18

val SN_title: String get() = "title"

val LN_title: String get() = "title"

const val NID_title: Int = 106

val LN_description: String get() = "description"

const val NID_description: Int = 107

val LN_searchGuide: String get() = "searchGuide"

const val NID_searchGuide: Int = 859

val LN_businessCategory: String get() = "businessCategory"

const val NID_businessCategory: Int = 860

val LN_postalAddress: String get() = "postalAddress"

const val NID_postalAddress: Int = 861

val LN_postalCode: String get() = "postalCode"

const val NID_postalCode: Int = 661

val LN_postOfficeBox: String get() = "postOfficeBox"

const val NID_postOfficeBox: Int = 862

val LN_physicalDeliveryOfficeName: String get() = "physicalDeliveryOfficeName"

const val NID_physicalDeliveryOfficeName: Int = 863

val LN_telephoneNumber: String get() = "telephoneNumber"

const val NID_telephoneNumber: Int = 864

val LN_telexNumber: String get() = "telexNumber"

const val NID_telexNumber: Int = 865

val LN_teletexTerminalIdentifier: String get() = "teletexTerminalIdentifier"

const val NID_teletexTerminalIdentifier: Int = 866

val LN_facsimileTelephoneNumber: String get() = "facsimileTelephoneNumber"

const val NID_facsimileTelephoneNumber: Int = 867

val LN_x121Address: String get() = "x121Address"

const val NID_x121Address: Int = 868

val LN_internationaliSDNNumber: String get() = "internationaliSDNNumber"

const val NID_internationaliSDNNumber: Int = 869

val LN_registeredAddress: String get() = "registeredAddress"

const val NID_registeredAddress: Int = 870

val LN_destinationIndicator: String get() = "destinationIndicator"

const val NID_destinationIndicator: Int = 871

val LN_preferredDeliveryMethod: String get() = "preferredDeliveryMethod"

const val NID_preferredDeliveryMethod: Int = 872

val LN_presentationAddress: String get() = "presentationAddress"

const val NID_presentationAddress: Int = 873

val LN_supportedApplicationContext: String get() = "supportedApplicationContext"

const val NID_supportedApplicationContext: Int = 874

val SN_member: String get() = "member"

const val NID_member: Int = 875

val SN_owner: String get() = "owner"

const val NID_owner: Int = 876

val LN_roleOccupant: String get() = "roleOccupant"

const val NID_roleOccupant: Int = 877

val SN_seeAlso: String get() = "seeAlso"

const val NID_seeAlso: Int = 878

val LN_userPassword: String get() = "userPassword"

const val NID_userPassword: Int = 879

val LN_userCertificate: String get() = "userCertificate"

const val NID_userCertificate: Int = 880

val LN_cACertificate: String get() = "cACertificate"

const val NID_cACertificate: Int = 881

val LN_authorityRevocationList: String get() = "authorityRevocationList"

const val NID_authorityRevocationList: Int = 882

val LN_certificateRevocationList: String get() = "certificateRevocationList"

const val NID_certificateRevocationList: Int = 883

val LN_crossCertificatePair: String get() = "crossCertificatePair"

const val NID_crossCertificatePair: Int = 884

val SN_name: String get() = "name"

val LN_name: String get() = "name"

const val NID_name: Int = 173

val SN_givenName: String get() = "GN"

val LN_givenName: String get() = "givenName"

const val NID_givenName: Int = 99

val SN_initials: String get() = "initials"

val LN_initials: String get() = "initials"

const val NID_initials: Int = 101

val LN_generationQualifier: String get() = "generationQualifier"

const val NID_generationQualifier: Int = 509

val LN_x500UniqueIdentifier: String get() = "x500UniqueIdentifier"

const val NID_x500UniqueIdentifier: Int = 503

val SN_dnQualifier: String get() = "dnQualifier"

val LN_dnQualifier: String get() = "dnQualifier"

const val NID_dnQualifier: Int = 174

val LN_enhancedSearchGuide: String get() = "enhancedSearchGuide"

const val NID_enhancedSearchGuide: Int = 885

val LN_protocolInformation: String get() = "protocolInformation"

const val NID_protocolInformation: Int = 886

val LN_distinguishedName: String get() = "distinguishedName"

const val NID_distinguishedName: Int = 887

val LN_uniqueMember: String get() = "uniqueMember"

const val NID_uniqueMember: Int = 888

val LN_houseIdentifier: String get() = "houseIdentifier"

const val NID_houseIdentifier: Int = 889

val LN_supportedAlgorithms: String get() = "supportedAlgorithms"

const val NID_supportedAlgorithms: Int = 890

val LN_deltaRevocationList: String get() = "deltaRevocationList"

const val NID_deltaRevocationList: Int = 891

val SN_dmdName: String get() = "dmdName"

const val NID_dmdName: Int = 892

val LN_pseudonym: String get() = "pseudonym"

const val NID_pseudonym: Int = 510

val SN_role: String get() = "role"

val LN_role: String get() = "role"

const val NID_role: Int = 400

val SN_X500algorithms: String get() = "X500algorithms"

val LN_X500algorithms: String get() = "directory services \u002D algorithms"

const val NID_X500algorithms: Int = 378

val SN_rsa: String get() = "RSA"

val LN_rsa: String get() = "rsa"

const val NID_rsa: Int = 19

val SN_mdc2WithRSA: String get() = "RSA\u002DMDC2"

val LN_mdc2WithRSA: String get() = "mdc2WithRSA"

const val NID_mdc2WithRSA: Int = 96

val SN_mdc2: String get() = "MDC2"

val LN_mdc2: String get() = "mdc2"

const val NID_mdc2: Int = 95

val SN_id_ce: String get() = "id\u002Dce"

const val NID_id_ce: Int = 81

val SN_subject_directory_attributes: String get() = "subjectDirectoryAttributes"

val LN_subject_directory_attributes: String get() = "X509v3 Subject Directory Attributes"

const val NID_subject_directory_attributes: Int = 769

val SN_subject_key_identifier: String get() = "subjectKeyIdentifier"

val LN_subject_key_identifier: String get() = "X509v3 Subject Key Identifier"

const val NID_subject_key_identifier: Int = 82

val SN_key_usage: String get() = "keyUsage"

val LN_key_usage: String get() = "X509v3 Key Usage"

const val NID_key_usage: Int = 83

val SN_private_key_usage_period: String get() = "privateKeyUsagePeriod"

val LN_private_key_usage_period: String get() = "X509v3 Private Key Usage Period"

const val NID_private_key_usage_period: Int = 84

val SN_subject_alt_name: String get() = "subjectAltName"

val LN_subject_alt_name: String get() = "X509v3 Subject Alternative Name"

const val NID_subject_alt_name: Int = 85

val SN_issuer_alt_name: String get() = "issuerAltName"

val LN_issuer_alt_name: String get() = "X509v3 Issuer Alternative Name"

const val NID_issuer_alt_name: Int = 86

val SN_basic_constraints: String get() = "basicConstraints"

val LN_basic_constraints: String get() = "X509v3 Basic Constraints"

const val NID_basic_constraints: Int = 87

val SN_crl_number: String get() = "crlNumber"

val LN_crl_number: String get() = "X509v3 CRL Number"

const val NID_crl_number: Int = 88

val SN_crl_reason: String get() = "CRLReason"

val LN_crl_reason: String get() = "X509v3 CRL Reason Code"

const val NID_crl_reason: Int = 141

val SN_invalidity_date: String get() = "invalidityDate"

val LN_invalidity_date: String get() = "Invalidity Date"

const val NID_invalidity_date: Int = 142

val SN_delta_crl: String get() = "deltaCRL"

val LN_delta_crl: String get() = "X509v3 Delta CRL Indicator"

const val NID_delta_crl: Int = 140

val SN_issuing_distribution_point: String get() = "issuingDistributionPoint"

val LN_issuing_distribution_point: String get() = "X509v3 Issuing Distribution Point"

const val NID_issuing_distribution_point: Int = 770

val SN_certificate_issuer: String get() = "certificateIssuer"

val LN_certificate_issuer: String get() = "X509v3 Certificate Issuer"

const val NID_certificate_issuer: Int = 771

val SN_name_constraints: String get() = "nameConstraints"

val LN_name_constraints: String get() = "X509v3 Name Constraints"

const val NID_name_constraints: Int = 666

val SN_crl_distribution_points: String get() = "crlDistributionPoints"

val LN_crl_distribution_points: String get() = "X509v3 CRL Distribution Points"

const val NID_crl_distribution_points: Int = 103

val SN_certificate_policies: String get() = "certificatePolicies"

val LN_certificate_policies: String get() = "X509v3 Certificate Policies"

const val NID_certificate_policies: Int = 89

val SN_any_policy: String get() = "anyPolicy"

val LN_any_policy: String get() = "X509v3 Any Policy"

const val NID_any_policy: Int = 746

val SN_policy_mappings: String get() = "policyMappings"

val LN_policy_mappings: String get() = "X509v3 Policy Mappings"

const val NID_policy_mappings: Int = 747

val SN_authority_key_identifier: String get() = "authorityKeyIdentifier"

val LN_authority_key_identifier: String get() = "X509v3 Authority Key Identifier"

const val NID_authority_key_identifier: Int = 90

val SN_policy_constraints: String get() = "policyConstraints"

val LN_policy_constraints: String get() = "X509v3 Policy Constraints"

const val NID_policy_constraints: Int = 401

val SN_ext_key_usage: String get() = "extendedKeyUsage"

val LN_ext_key_usage: String get() = "X509v3 Extended Key Usage"

const val NID_ext_key_usage: Int = 126

val SN_freshest_crl: String get() = "freshestCRL"

val LN_freshest_crl: String get() = "X509v3 Freshest CRL"

const val NID_freshest_crl: Int = 857

val SN_inhibit_any_policy: String get() = "inhibitAnyPolicy"

val LN_inhibit_any_policy: String get() = "X509v3 Inhibit Any Policy"

const val NID_inhibit_any_policy: Int = 748

val SN_target_information: String get() = "targetInformation"

val LN_target_information: String get() = "X509v3 AC Targeting"

const val NID_target_information: Int = 402

val SN_no_rev_avail: String get() = "noRevAvail"

val LN_no_rev_avail: String get() = "X509v3 No Revocation Available"

const val NID_no_rev_avail: Int = 403

val SN_anyExtendedKeyUsage: String get() = "anyExtendedKeyUsage"

val LN_anyExtendedKeyUsage: String get() = "Any Extended Key Usage"

const val NID_anyExtendedKeyUsage: Int = 910

val SN_netscape: String get() = "Netscape"

val LN_netscape: String get() = "Netscape Communications Corp."

const val NID_netscape: Int = 57

val SN_netscape_cert_extension: String get() = "nsCertExt"

val LN_netscape_cert_extension: String get() = "Netscape Certificate Extension"

const val NID_netscape_cert_extension: Int = 58

val SN_netscape_data_type: String get() = "nsDataType"

val LN_netscape_data_type: String get() = "Netscape Data Type"

const val NID_netscape_data_type: Int = 59

val SN_netscape_cert_type: String get() = "nsCertType"

val LN_netscape_cert_type: String get() = "Netscape Cert Type"

const val NID_netscape_cert_type: Int = 71

val SN_netscape_base_url: String get() = "nsBaseUrl"

val LN_netscape_base_url: String get() = "Netscape Base Url"

const val NID_netscape_base_url: Int = 72

val SN_netscape_revocation_url: String get() = "nsRevocationUrl"

val LN_netscape_revocation_url: String get() = "Netscape Revocation Url"

const val NID_netscape_revocation_url: Int = 73

val SN_netscape_ca_revocation_url: String get() = "nsCaRevocationUrl"

val LN_netscape_ca_revocation_url: String get() = "Netscape CA Revocation Url"

const val NID_netscape_ca_revocation_url: Int = 74

val SN_netscape_renewal_url: String get() = "nsRenewalUrl"

val LN_netscape_renewal_url: String get() = "Netscape Renewal Url"

const val NID_netscape_renewal_url: Int = 75

val SN_netscape_ca_policy_url: String get() = "nsCaPolicyUrl"

val LN_netscape_ca_policy_url: String get() = "Netscape CA Policy Url"

const val NID_netscape_ca_policy_url: Int = 76

val SN_netscape_ssl_server_name: String get() = "nsSslServerName"

val LN_netscape_ssl_server_name: String get() = "Netscape SSL Server Name"

const val NID_netscape_ssl_server_name: Int = 77

val SN_netscape_comment: String get() = "nsComment"

val LN_netscape_comment: String get() = "Netscape Comment"

const val NID_netscape_comment: Int = 78

val SN_netscape_cert_sequence: String get() = "nsCertSequence"

val LN_netscape_cert_sequence: String get() = "Netscape Certificate Sequence"

const val NID_netscape_cert_sequence: Int = 79

val SN_ns_sgc: String get() = "nsSGC"

val LN_ns_sgc: String get() = "Netscape Server Gated Crypto"

const val NID_ns_sgc: Int = 139

val SN_org: String get() = "ORG"

val LN_org: String get() = "org"

const val NID_org: Int = 379

val SN_dod: String get() = "DOD"

val LN_dod: String get() = "dod"

const val NID_dod: Int = 380

val SN_iana: String get() = "IANA"

val LN_iana: String get() = "iana"

const val NID_iana: Int = 381

val SN_Directory: String get() = "directory"

val LN_Directory: String get() = "Directory"

const val NID_Directory: Int = 382

val SN_Management: String get() = "mgmt"

val LN_Management: String get() = "Management"

const val NID_Management: Int = 383

val SN_Experimental: String get() = "experimental"

val LN_Experimental: String get() = "Experimental"

const val NID_Experimental: Int = 384

val SN_Private: String get() = "private"

val LN_Private: String get() = "Private"

const val NID_Private: Int = 385

val SN_Security: String get() = "security"

val LN_Security: String get() = "Security"

const val NID_Security: Int = 386

val SN_SNMPv2: String get() = "snmpv2"

val LN_SNMPv2: String get() = "SNMPv2"

const val NID_SNMPv2: Int = 387

val LN_Mail: String get() = "Mail"

const val NID_Mail: Int = 388

val SN_Enterprises: String get() = "enterprises"

val LN_Enterprises: String get() = "Enterprises"

const val NID_Enterprises: Int = 389

val SN_dcObject: String get() = "dcobject"

val LN_dcObject: String get() = "dcObject"

const val NID_dcObject: Int = 390

val SN_mime_mhs: String get() = "mime\u002Dmhs"

val LN_mime_mhs: String get() = "MIME MHS"

const val NID_mime_mhs: Int = 504

val SN_mime_mhs_headings: String get() = "mime\u002Dmhs\u002Dheadings"

val LN_mime_mhs_headings: String get() = "mime\u002Dmhs\u002Dheadings"

const val NID_mime_mhs_headings: Int = 505

val SN_mime_mhs_bodies: String get() = "mime\u002Dmhs\u002Dbodies"

val LN_mime_mhs_bodies: String get() = "mime\u002Dmhs\u002Dbodies"

const val NID_mime_mhs_bodies: Int = 506

val SN_id_hex_partial_message: String get() = "id\u002Dhex\u002Dpartial\u002Dmessage"

val LN_id_hex_partial_message: String get() = "id\u002Dhex\u002Dpartial\u002Dmessage"

const val NID_id_hex_partial_message: Int = 507

val SN_id_hex_multipart_message: String get() = "id\u002Dhex\u002Dmultipart\u002Dmessage"

val LN_id_hex_multipart_message: String get() = "id\u002Dhex\u002Dmultipart\u002Dmessage"

const val NID_id_hex_multipart_message: Int = 508

val SN_zlib_compression: String get() = "ZLIB"

val LN_zlib_compression: String get() = "zlib compression"

const val NID_zlib_compression: Int = 125

val SN_aes_128_ecb: String get() = "AES\u002D128\u002DECB"

val LN_aes_128_ecb: String get() = "aes\u002D128\u002Decb"

const val NID_aes_128_ecb: Int = 418

val SN_aes_128_cbc: String get() = "AES\u002D128\u002DCBC"

val LN_aes_128_cbc: String get() = "aes\u002D128\u002Dcbc"

const val NID_aes_128_cbc: Int = 419

val SN_aes_128_ofb128: String get() = "AES\u002D128\u002DOFB"

val LN_aes_128_ofb128: String get() = "aes\u002D128\u002Dofb"

const val NID_aes_128_ofb128: Int = 420

val SN_aes_128_cfb128: String get() = "AES\u002D128\u002DCFB"

val LN_aes_128_cfb128: String get() = "aes\u002D128\u002Dcfb"

const val NID_aes_128_cfb128: Int = 421

val SN_id_aes128_wrap: String get() = "id\u002Daes128\u002Dwrap"

const val NID_id_aes128_wrap: Int = 788

val SN_aes_128_gcm: String get() = "id\u002Daes128\u002DGCM"

val LN_aes_128_gcm: String get() = "aes\u002D128\u002Dgcm"

const val NID_aes_128_gcm: Int = 895

val SN_aes_128_ccm: String get() = "id\u002Daes128\u002DCCM"

val LN_aes_128_ccm: String get() = "aes\u002D128\u002Dccm"

const val NID_aes_128_ccm: Int = 896

val SN_id_aes128_wrap_pad: String get() = "id\u002Daes128\u002Dwrap\u002Dpad"

const val NID_id_aes128_wrap_pad: Int = 897

val SN_aes_192_ecb: String get() = "AES\u002D192\u002DECB"

val LN_aes_192_ecb: String get() = "aes\u002D192\u002Decb"

const val NID_aes_192_ecb: Int = 422

val SN_aes_192_cbc: String get() = "AES\u002D192\u002DCBC"

val LN_aes_192_cbc: String get() = "aes\u002D192\u002Dcbc"

const val NID_aes_192_cbc: Int = 423

val SN_aes_192_ofb128: String get() = "AES\u002D192\u002DOFB"

val LN_aes_192_ofb128: String get() = "aes\u002D192\u002Dofb"

const val NID_aes_192_ofb128: Int = 424

val SN_aes_192_cfb128: String get() = "AES\u002D192\u002DCFB"

val LN_aes_192_cfb128: String get() = "aes\u002D192\u002Dcfb"

const val NID_aes_192_cfb128: Int = 425

val SN_id_aes192_wrap: String get() = "id\u002Daes192\u002Dwrap"

const val NID_id_aes192_wrap: Int = 789

val SN_aes_192_gcm: String get() = "id\u002Daes192\u002DGCM"

val LN_aes_192_gcm: String get() = "aes\u002D192\u002Dgcm"

const val NID_aes_192_gcm: Int = 898

val SN_aes_192_ccm: String get() = "id\u002Daes192\u002DCCM"

val LN_aes_192_ccm: String get() = "aes\u002D192\u002Dccm"

const val NID_aes_192_ccm: Int = 899

val SN_id_aes192_wrap_pad: String get() = "id\u002Daes192\u002Dwrap\u002Dpad"

const val NID_id_aes192_wrap_pad: Int = 900

val SN_aes_256_ecb: String get() = "AES\u002D256\u002DECB"

val LN_aes_256_ecb: String get() = "aes\u002D256\u002Decb"

const val NID_aes_256_ecb: Int = 426

val SN_aes_256_cbc: String get() = "AES\u002D256\u002DCBC"

val LN_aes_256_cbc: String get() = "aes\u002D256\u002Dcbc"

const val NID_aes_256_cbc: Int = 427

val SN_aes_256_ofb128: String get() = "AES\u002D256\u002DOFB"

val LN_aes_256_ofb128: String get() = "aes\u002D256\u002Dofb"

const val NID_aes_256_ofb128: Int = 428

val SN_aes_256_cfb128: String get() = "AES\u002D256\u002DCFB"

val LN_aes_256_cfb128: String get() = "aes\u002D256\u002Dcfb"

const val NID_aes_256_cfb128: Int = 429

val SN_id_aes256_wrap: String get() = "id\u002Daes256\u002Dwrap"

const val NID_id_aes256_wrap: Int = 790

val SN_aes_256_gcm: String get() = "id\u002Daes256\u002DGCM"

val LN_aes_256_gcm: String get() = "aes\u002D256\u002Dgcm"

const val NID_aes_256_gcm: Int = 901

val SN_aes_256_ccm: String get() = "id\u002Daes256\u002DCCM"

val LN_aes_256_ccm: String get() = "aes\u002D256\u002Dccm"

const val NID_aes_256_ccm: Int = 902

val SN_id_aes256_wrap_pad: String get() = "id\u002Daes256\u002Dwrap\u002Dpad"

const val NID_id_aes256_wrap_pad: Int = 903

val SN_aes_128_cfb1: String get() = "AES\u002D128\u002DCFB1"

val LN_aes_128_cfb1: String get() = "aes\u002D128\u002Dcfb1"

const val NID_aes_128_cfb1: Int = 650

val SN_aes_192_cfb1: String get() = "AES\u002D192\u002DCFB1"

val LN_aes_192_cfb1: String get() = "aes\u002D192\u002Dcfb1"

const val NID_aes_192_cfb1: Int = 651

val SN_aes_256_cfb1: String get() = "AES\u002D256\u002DCFB1"

val LN_aes_256_cfb1: String get() = "aes\u002D256\u002Dcfb1"

const val NID_aes_256_cfb1: Int = 652

val SN_aes_128_cfb8: String get() = "AES\u002D128\u002DCFB8"

val LN_aes_128_cfb8: String get() = "aes\u002D128\u002Dcfb8"

const val NID_aes_128_cfb8: Int = 653

val SN_aes_192_cfb8: String get() = "AES\u002D192\u002DCFB8"

val LN_aes_192_cfb8: String get() = "aes\u002D192\u002Dcfb8"

const val NID_aes_192_cfb8: Int = 654

val SN_aes_256_cfb8: String get() = "AES\u002D256\u002DCFB8"

val LN_aes_256_cfb8: String get() = "aes\u002D256\u002Dcfb8"

const val NID_aes_256_cfb8: Int = 655

val SN_aes_128_ctr: String get() = "AES\u002D128\u002DCTR"

val LN_aes_128_ctr: String get() = "aes\u002D128\u002Dctr"

const val NID_aes_128_ctr: Int = 904

val SN_aes_192_ctr: String get() = "AES\u002D192\u002DCTR"

val LN_aes_192_ctr: String get() = "aes\u002D192\u002Dctr"

const val NID_aes_192_ctr: Int = 905

val SN_aes_256_ctr: String get() = "AES\u002D256\u002DCTR"

val LN_aes_256_ctr: String get() = "aes\u002D256\u002Dctr"

const val NID_aes_256_ctr: Int = 906

val SN_aes_128_ocb: String get() = "AES\u002D128\u002DOCB"

val LN_aes_128_ocb: String get() = "aes\u002D128\u002Docb"

const val NID_aes_128_ocb: Int = 958

val SN_aes_192_ocb: String get() = "AES\u002D192\u002DOCB"

val LN_aes_192_ocb: String get() = "aes\u002D192\u002Docb"

const val NID_aes_192_ocb: Int = 959

val SN_aes_256_ocb: String get() = "AES\u002D256\u002DOCB"

val LN_aes_256_ocb: String get() = "aes\u002D256\u002Docb"

const val NID_aes_256_ocb: Int = 960

val SN_aes_128_xts: String get() = "AES\u002D128\u002DXTS"

val LN_aes_128_xts: String get() = "aes\u002D128\u002Dxts"

const val NID_aes_128_xts: Int = 913

val SN_aes_256_xts: String get() = "AES\u002D256\u002DXTS"

val LN_aes_256_xts: String get() = "aes\u002D256\u002Dxts"

const val NID_aes_256_xts: Int = 914

val SN_des_cfb1: String get() = "DES\u002DCFB1"

val LN_des_cfb1: String get() = "des\u002Dcfb1"

const val NID_des_cfb1: Int = 656

val SN_des_cfb8: String get() = "DES\u002DCFB8"

val LN_des_cfb8: String get() = "des\u002Dcfb8"

const val NID_des_cfb8: Int = 657

val SN_des_ede3_cfb1: String get() = "DES\u002DEDE3\u002DCFB1"

val LN_des_ede3_cfb1: String get() = "des\u002Dede3\u002Dcfb1"

const val NID_des_ede3_cfb1: Int = 658

val SN_des_ede3_cfb8: String get() = "DES\u002DEDE3\u002DCFB8"

val LN_des_ede3_cfb8: String get() = "des\u002Dede3\u002Dcfb8"

const val NID_des_ede3_cfb8: Int = 659

val SN_sha256: String get() = "SHA256"

val LN_sha256: String get() = "sha256"

const val NID_sha256: Int = 672

val SN_sha384: String get() = "SHA384"

val LN_sha384: String get() = "sha384"

const val NID_sha384: Int = 673

val SN_sha512: String get() = "SHA512"

val LN_sha512: String get() = "sha512"

const val NID_sha512: Int = 674

val SN_sha224: String get() = "SHA224"

val LN_sha224: String get() = "sha224"

const val NID_sha224: Int = 675

val SN_dsa_with_SHA224: String get() = "dsa_with_SHA224"

const val NID_dsa_with_SHA224: Int = 802

val SN_dsa_with_SHA256: String get() = "dsa_with_SHA256"

const val NID_dsa_with_SHA256: Int = 803

val SN_hold_instruction_code: String get() = "holdInstructionCode"

val LN_hold_instruction_code: String get() = "Hold Instruction Code"

const val NID_hold_instruction_code: Int = 430

val SN_hold_instruction_none: String get() = "holdInstructionNone"

val LN_hold_instruction_none: String get() = "Hold Instruction None"

const val NID_hold_instruction_none: Int = 431

val SN_hold_instruction_call_issuer: String get() = "holdInstructionCallIssuer"

val LN_hold_instruction_call_issuer: String get() = "Hold Instruction Call Issuer"

const val NID_hold_instruction_call_issuer: Int = 432

val SN_hold_instruction_reject: String get() = "holdInstructionReject"

val LN_hold_instruction_reject: String get() = "Hold Instruction Reject"

const val NID_hold_instruction_reject: Int = 433

val SN_data: String get() = "data"

const val NID_data: Int = 434

val SN_pss: String get() = "pss"

const val NID_pss: Int = 435

val SN_ucl: String get() = "ucl"

const val NID_ucl: Int = 436

val SN_pilot: String get() = "pilot"

const val NID_pilot: Int = 437

val LN_pilotAttributeType: String get() = "pilotAttributeType"

const val NID_pilotAttributeType: Int = 438

val LN_pilotAttributeSyntax: String get() = "pilotAttributeSyntax"

const val NID_pilotAttributeSyntax: Int = 439

val LN_pilotObjectClass: String get() = "pilotObjectClass"

const val NID_pilotObjectClass: Int = 440

val LN_pilotGroups: String get() = "pilotGroups"

const val NID_pilotGroups: Int = 441

val LN_iA5StringSyntax: String get() = "iA5StringSyntax"

const val NID_iA5StringSyntax: Int = 442

val LN_caseIgnoreIA5StringSyntax: String get() = "caseIgnoreIA5StringSyntax"

const val NID_caseIgnoreIA5StringSyntax: Int = 443

val LN_pilotObject: String get() = "pilotObject"

const val NID_pilotObject: Int = 444

val LN_pilotPerson: String get() = "pilotPerson"

const val NID_pilotPerson: Int = 445

val SN_account: String get() = "account"

const val NID_account: Int = 446

val SN_document: String get() = "document"

const val NID_document: Int = 447

val SN_room: String get() = "room"

const val NID_room: Int = 448

val LN_documentSeries: String get() = "documentSeries"

const val NID_documentSeries: Int = 449

val SN_Domain: String get() = "domain"

val LN_Domain: String get() = "Domain"

const val NID_Domain: Int = 392

val LN_rFC822localPart: String get() = "rFC822localPart"

const val NID_rFC822localPart: Int = 450

val LN_dNSDomain: String get() = "dNSDomain"

const val NID_dNSDomain: Int = 451

val LN_domainRelatedObject: String get() = "domainRelatedObject"

const val NID_domainRelatedObject: Int = 452

val LN_friendlyCountry: String get() = "friendlyCountry"

const val NID_friendlyCountry: Int = 453

val LN_simpleSecurityObject: String get() = "simpleSecurityObject"

const val NID_simpleSecurityObject: Int = 454

val LN_pilotOrganization: String get() = "pilotOrganization"

const val NID_pilotOrganization: Int = 455

val LN_pilotDSA: String get() = "pilotDSA"

const val NID_pilotDSA: Int = 456

val LN_qualityLabelledData: String get() = "qualityLabelledData"

const val NID_qualityLabelledData: Int = 457

val SN_userId: String get() = "UID"

val LN_userId: String get() = "userId"

const val NID_userId: Int = 458

val LN_textEncodedORAddress: String get() = "textEncodedORAddress"

const val NID_textEncodedORAddress: Int = 459

val SN_rfc822Mailbox: String get() = "mail"

val LN_rfc822Mailbox: String get() = "rfc822Mailbox"

const val NID_rfc822Mailbox: Int = 460

val SN_info: String get() = "info"

const val NID_info: Int = 461

val LN_favouriteDrink: String get() = "favouriteDrink"

const val NID_favouriteDrink: Int = 462

val LN_roomNumber: String get() = "roomNumber"

const val NID_roomNumber: Int = 463

val SN_photo: String get() = "photo"

const val NID_photo: Int = 464

val LN_userClass: String get() = "userClass"

const val NID_userClass: Int = 465

val SN_host: String get() = "host"

const val NID_host: Int = 466

val SN_manager: String get() = "manager"

const val NID_manager: Int = 467

val LN_documentIdentifier: String get() = "documentIdentifier"

const val NID_documentIdentifier: Int = 468

val LN_documentTitle: String get() = "documentTitle"

const val NID_documentTitle: Int = 469

val LN_documentVersion: String get() = "documentVersion"

const val NID_documentVersion: Int = 470

val LN_documentAuthor: String get() = "documentAuthor"

const val NID_documentAuthor: Int = 471

val LN_documentLocation: String get() = "documentLocation"

const val NID_documentLocation: Int = 472

val LN_homeTelephoneNumber: String get() = "homeTelephoneNumber"

const val NID_homeTelephoneNumber: Int = 473

val SN_secretary: String get() = "secretary"

const val NID_secretary: Int = 474

val LN_otherMailbox: String get() = "otherMailbox"

const val NID_otherMailbox: Int = 475

val LN_lastModifiedTime: String get() = "lastModifiedTime"

const val NID_lastModifiedTime: Int = 476

val LN_lastModifiedBy: String get() = "lastModifiedBy"

const val NID_lastModifiedBy: Int = 477

val SN_domainComponent: String get() = "DC"

val LN_domainComponent: String get() = "domainComponent"

const val NID_domainComponent: Int = 391

val LN_aRecord: String get() = "aRecord"

const val NID_aRecord: Int = 478

val LN_pilotAttributeType27: String get() = "pilotAttributeType27"

const val NID_pilotAttributeType27: Int = 479

val LN_mXRecord: String get() = "mXRecord"

const val NID_mXRecord: Int = 480

val LN_nSRecord: String get() = "nSRecord"

const val NID_nSRecord: Int = 481

val LN_sOARecord: String get() = "sOARecord"

const val NID_sOARecord: Int = 482

val LN_cNAMERecord: String get() = "cNAMERecord"

const val NID_cNAMERecord: Int = 483

val LN_associatedDomain: String get() = "associatedDomain"

const val NID_associatedDomain: Int = 484

val LN_associatedName: String get() = "associatedName"

const val NID_associatedName: Int = 485

val LN_homePostalAddress: String get() = "homePostalAddress"

const val NID_homePostalAddress: Int = 486

val LN_personalTitle: String get() = "personalTitle"

const val NID_personalTitle: Int = 487

val LN_mobileTelephoneNumber: String get() = "mobileTelephoneNumber"

const val NID_mobileTelephoneNumber: Int = 488

val LN_pagerTelephoneNumber: String get() = "pagerTelephoneNumber"

const val NID_pagerTelephoneNumber: Int = 489

val LN_friendlyCountryName: String get() = "friendlyCountryName"

const val NID_friendlyCountryName: Int = 490

val SN_uniqueIdentifier: String get() = "uid"

val LN_uniqueIdentifier: String get() = "uniqueIdentifier"

const val NID_uniqueIdentifier: Int = 102

val LN_organizationalStatus: String get() = "organizationalStatus"

const val NID_organizationalStatus: Int = 491

val LN_janetMailbox: String get() = "janetMailbox"

const val NID_janetMailbox: Int = 492

val LN_mailPreferenceOption: String get() = "mailPreferenceOption"

const val NID_mailPreferenceOption: Int = 493

val LN_buildingName: String get() = "buildingName"

const val NID_buildingName: Int = 494

val LN_dSAQuality: String get() = "dSAQuality"

const val NID_dSAQuality: Int = 495

val LN_singleLevelQuality: String get() = "singleLevelQuality"

const val NID_singleLevelQuality: Int = 496

val LN_subtreeMinimumQuality: String get() = "subtreeMinimumQuality"

const val NID_subtreeMinimumQuality: Int = 497

val LN_subtreeMaximumQuality: String get() = "subtreeMaximumQuality"

const val NID_subtreeMaximumQuality: Int = 498

val LN_personalSignature: String get() = "personalSignature"

const val NID_personalSignature: Int = 499

val LN_dITRedirect: String get() = "dITRedirect"

const val NID_dITRedirect: Int = 500

val SN_audio: String get() = "audio"

const val NID_audio: Int = 501

val LN_documentPublisher: String get() = "documentPublisher"

const val NID_documentPublisher: Int = 502

val SN_id_set: String get() = "id\u002Dset"

val LN_id_set: String get() = "Secure Electronic Transactions"

const val NID_id_set: Int = 512

val SN_set_ctype: String get() = "set\u002Dctype"

val LN_set_ctype: String get() = "content types"

const val NID_set_ctype: Int = 513

val SN_set_msgExt: String get() = "set\u002DmsgExt"

val LN_set_msgExt: String get() = "message extensions"

const val NID_set_msgExt: Int = 514

val SN_set_attr: String get() = "set\u002Dattr"

const val NID_set_attr: Int = 515

val SN_set_policy: String get() = "set\u002Dpolicy"

const val NID_set_policy: Int = 516

val SN_set_certExt: String get() = "set\u002DcertExt"

val LN_set_certExt: String get() = "certificate extensions"

const val NID_set_certExt: Int = 517

val SN_set_brand: String get() = "set\u002Dbrand"

const val NID_set_brand: Int = 518

val SN_setct_PANData: String get() = "setct\u002DPANData"

const val NID_setct_PANData: Int = 519

val SN_setct_PANToken: String get() = "setct\u002DPANToken"

const val NID_setct_PANToken: Int = 520

val SN_setct_PANOnly: String get() = "setct\u002DPANOnly"

const val NID_setct_PANOnly: Int = 521

val SN_setct_OIData: String get() = "setct\u002DOIData"

const val NID_setct_OIData: Int = 522

val SN_setct_PI: String get() = "setct\u002DPI"

const val NID_setct_PI: Int = 523

val SN_setct_PIData: String get() = "setct\u002DPIData"

const val NID_setct_PIData: Int = 524

val SN_setct_PIDataUnsigned: String get() = "setct\u002DPIDataUnsigned"

const val NID_setct_PIDataUnsigned: Int = 525

val SN_setct_HODInput: String get() = "setct\u002DHODInput"

const val NID_setct_HODInput: Int = 526

val SN_setct_AuthResBaggage: String get() = "setct\u002DAuthResBaggage"

const val NID_setct_AuthResBaggage: Int = 527

val SN_setct_AuthRevReqBaggage: String get() = "setct\u002DAuthRevReqBaggage"

const val NID_setct_AuthRevReqBaggage: Int = 528

val SN_setct_AuthRevResBaggage: String get() = "setct\u002DAuthRevResBaggage"

const val NID_setct_AuthRevResBaggage: Int = 529

val SN_setct_CapTokenSeq: String get() = "setct\u002DCapTokenSeq"

const val NID_setct_CapTokenSeq: Int = 530

val SN_setct_PInitResData: String get() = "setct\u002DPInitResData"

const val NID_setct_PInitResData: Int = 531

val SN_setct_PI_TBS: String get() = "setct\u002DPI\u002DTBS"

const val NID_setct_PI_TBS: Int = 532

val SN_setct_PResData: String get() = "setct\u002DPResData"

const val NID_setct_PResData: Int = 533

val SN_setct_AuthReqTBS: String get() = "setct\u002DAuthReqTBS"

const val NID_setct_AuthReqTBS: Int = 534

val SN_setct_AuthResTBS: String get() = "setct\u002DAuthResTBS"

const val NID_setct_AuthResTBS: Int = 535

val SN_setct_AuthResTBSX: String get() = "setct\u002DAuthResTBSX"

const val NID_setct_AuthResTBSX: Int = 536

val SN_setct_AuthTokenTBS: String get() = "setct\u002DAuthTokenTBS"

const val NID_setct_AuthTokenTBS: Int = 537

val SN_setct_CapTokenData: String get() = "setct\u002DCapTokenData"

const val NID_setct_CapTokenData: Int = 538

val SN_setct_CapTokenTBS: String get() = "setct\u002DCapTokenTBS"

const val NID_setct_CapTokenTBS: Int = 539

val SN_setct_AcqCardCodeMsg: String get() = "setct\u002DAcqCardCodeMsg"

const val NID_setct_AcqCardCodeMsg: Int = 540

val SN_setct_AuthRevReqTBS: String get() = "setct\u002DAuthRevReqTBS"

const val NID_setct_AuthRevReqTBS: Int = 541

val SN_setct_AuthRevResData: String get() = "setct\u002DAuthRevResData"

const val NID_setct_AuthRevResData: Int = 542

val SN_setct_AuthRevResTBS: String get() = "setct\u002DAuthRevResTBS"

const val NID_setct_AuthRevResTBS: Int = 543

val SN_setct_CapReqTBS: String get() = "setct\u002DCapReqTBS"

const val NID_setct_CapReqTBS: Int = 544

val SN_setct_CapReqTBSX: String get() = "setct\u002DCapReqTBSX"

const val NID_setct_CapReqTBSX: Int = 545

val SN_setct_CapResData: String get() = "setct\u002DCapResData"

const val NID_setct_CapResData: Int = 546

val SN_setct_CapRevReqTBS: String get() = "setct\u002DCapRevReqTBS"

const val NID_setct_CapRevReqTBS: Int = 547

val SN_setct_CapRevReqTBSX: String get() = "setct\u002DCapRevReqTBSX"

const val NID_setct_CapRevReqTBSX: Int = 548

val SN_setct_CapRevResData: String get() = "setct\u002DCapRevResData"

const val NID_setct_CapRevResData: Int = 549

val SN_setct_CredReqTBS: String get() = "setct\u002DCredReqTBS"

const val NID_setct_CredReqTBS: Int = 550

val SN_setct_CredReqTBSX: String get() = "setct\u002DCredReqTBSX"

const val NID_setct_CredReqTBSX: Int = 551

val SN_setct_CredResData: String get() = "setct\u002DCredResData"

const val NID_setct_CredResData: Int = 552

val SN_setct_CredRevReqTBS: String get() = "setct\u002DCredRevReqTBS"

const val NID_setct_CredRevReqTBS: Int = 553

val SN_setct_CredRevReqTBSX: String get() = "setct\u002DCredRevReqTBSX"

const val NID_setct_CredRevReqTBSX: Int = 554

val SN_setct_CredRevResData: String get() = "setct\u002DCredRevResData"

const val NID_setct_CredRevResData: Int = 555

val SN_setct_PCertReqData: String get() = "setct\u002DPCertReqData"

const val NID_setct_PCertReqData: Int = 556

val SN_setct_PCertResTBS: String get() = "setct\u002DPCertResTBS"

const val NID_setct_PCertResTBS: Int = 557

val SN_setct_BatchAdminReqData: String get() = "setct\u002DBatchAdminReqData"

const val NID_setct_BatchAdminReqData: Int = 558

val SN_setct_BatchAdminResData: String get() = "setct\u002DBatchAdminResData"

const val NID_setct_BatchAdminResData: Int = 559

val SN_setct_CardCInitResTBS: String get() = "setct\u002DCardCInitResTBS"

const val NID_setct_CardCInitResTBS: Int = 560

val SN_setct_MeAqCInitResTBS: String get() = "setct\u002DMeAqCInitResTBS"

const val NID_setct_MeAqCInitResTBS: Int = 561

val SN_setct_RegFormResTBS: String get() = "setct\u002DRegFormResTBS"

const val NID_setct_RegFormResTBS: Int = 562

val SN_setct_CertReqData: String get() = "setct\u002DCertReqData"

const val NID_setct_CertReqData: Int = 563

val SN_setct_CertReqTBS: String get() = "setct\u002DCertReqTBS"

const val NID_setct_CertReqTBS: Int = 564

val SN_setct_CertResData: String get() = "setct\u002DCertResData"

const val NID_setct_CertResData: Int = 565

val SN_setct_CertInqReqTBS: String get() = "setct\u002DCertInqReqTBS"

const val NID_setct_CertInqReqTBS: Int = 566

val SN_setct_ErrorTBS: String get() = "setct\u002DErrorTBS"

const val NID_setct_ErrorTBS: Int = 567

val SN_setct_PIDualSignedTBE: String get() = "setct\u002DPIDualSignedTBE"

const val NID_setct_PIDualSignedTBE: Int = 568

val SN_setct_PIUnsignedTBE: String get() = "setct\u002DPIUnsignedTBE"

const val NID_setct_PIUnsignedTBE: Int = 569

val SN_setct_AuthReqTBE: String get() = "setct\u002DAuthReqTBE"

const val NID_setct_AuthReqTBE: Int = 570

val SN_setct_AuthResTBE: String get() = "setct\u002DAuthResTBE"

const val NID_setct_AuthResTBE: Int = 571

val SN_setct_AuthResTBEX: String get() = "setct\u002DAuthResTBEX"

const val NID_setct_AuthResTBEX: Int = 572

val SN_setct_AuthTokenTBE: String get() = "setct\u002DAuthTokenTBE"

const val NID_setct_AuthTokenTBE: Int = 573

val SN_setct_CapTokenTBE: String get() = "setct\u002DCapTokenTBE"

const val NID_setct_CapTokenTBE: Int = 574

val SN_setct_CapTokenTBEX: String get() = "setct\u002DCapTokenTBEX"

const val NID_setct_CapTokenTBEX: Int = 575

val SN_setct_AcqCardCodeMsgTBE: String get() = "setct\u002DAcqCardCodeMsgTBE"

const val NID_setct_AcqCardCodeMsgTBE: Int = 576

val SN_setct_AuthRevReqTBE: String get() = "setct\u002DAuthRevReqTBE"

const val NID_setct_AuthRevReqTBE: Int = 577

val SN_setct_AuthRevResTBE: String get() = "setct\u002DAuthRevResTBE"

const val NID_setct_AuthRevResTBE: Int = 578

val SN_setct_AuthRevResTBEB: String get() = "setct\u002DAuthRevResTBEB"

const val NID_setct_AuthRevResTBEB: Int = 579

val SN_setct_CapReqTBE: String get() = "setct\u002DCapReqTBE"

const val NID_setct_CapReqTBE: Int = 580

val SN_setct_CapReqTBEX: String get() = "setct\u002DCapReqTBEX"

const val NID_setct_CapReqTBEX: Int = 581

val SN_setct_CapResTBE: String get() = "setct\u002DCapResTBE"

const val NID_setct_CapResTBE: Int = 582

val SN_setct_CapRevReqTBE: String get() = "setct\u002DCapRevReqTBE"

const val NID_setct_CapRevReqTBE: Int = 583

val SN_setct_CapRevReqTBEX: String get() = "setct\u002DCapRevReqTBEX"

const val NID_setct_CapRevReqTBEX: Int = 584

val SN_setct_CapRevResTBE: String get() = "setct\u002DCapRevResTBE"

const val NID_setct_CapRevResTBE: Int = 585

val SN_setct_CredReqTBE: String get() = "setct\u002DCredReqTBE"

const val NID_setct_CredReqTBE: Int = 586

val SN_setct_CredReqTBEX: String get() = "setct\u002DCredReqTBEX"

const val NID_setct_CredReqTBEX: Int = 587

val SN_setct_CredResTBE: String get() = "setct\u002DCredResTBE"

const val NID_setct_CredResTBE: Int = 588

val SN_setct_CredRevReqTBE: String get() = "setct\u002DCredRevReqTBE"

const val NID_setct_CredRevReqTBE: Int = 589

val SN_setct_CredRevReqTBEX: String get() = "setct\u002DCredRevReqTBEX"

const val NID_setct_CredRevReqTBEX: Int = 590

val SN_setct_CredRevResTBE: String get() = "setct\u002DCredRevResTBE"

const val NID_setct_CredRevResTBE: Int = 591

val SN_setct_BatchAdminReqTBE: String get() = "setct\u002DBatchAdminReqTBE"

const val NID_setct_BatchAdminReqTBE: Int = 592

val SN_setct_BatchAdminResTBE: String get() = "setct\u002DBatchAdminResTBE"

const val NID_setct_BatchAdminResTBE: Int = 593

val SN_setct_RegFormReqTBE: String get() = "setct\u002DRegFormReqTBE"

const val NID_setct_RegFormReqTBE: Int = 594

val SN_setct_CertReqTBE: String get() = "setct\u002DCertReqTBE"

const val NID_setct_CertReqTBE: Int = 595

val SN_setct_CertReqTBEX: String get() = "setct\u002DCertReqTBEX"

const val NID_setct_CertReqTBEX: Int = 596

val SN_setct_CertResTBE: String get() = "setct\u002DCertResTBE"

const val NID_setct_CertResTBE: Int = 597

val SN_setct_CRLNotificationTBS: String get() = "setct\u002DCRLNotificationTBS"

const val NID_setct_CRLNotificationTBS: Int = 598

val SN_setct_CRLNotificationResTBS: String get() = "setct\u002DCRLNotificationResTBS"

const val NID_setct_CRLNotificationResTBS: Int = 599

val SN_setct_BCIDistributionTBS: String get() = "setct\u002DBCIDistributionTBS"

const val NID_setct_BCIDistributionTBS: Int = 600

val SN_setext_genCrypt: String get() = "setext\u002DgenCrypt"

val LN_setext_genCrypt: String get() = "generic cryptogram"

const val NID_setext_genCrypt: Int = 601

val SN_setext_miAuth: String get() = "setext\u002DmiAuth"

val LN_setext_miAuth: String get() = "merchant initiated auth"

const val NID_setext_miAuth: Int = 602

val SN_setext_pinSecure: String get() = "setext\u002DpinSecure"

const val NID_setext_pinSecure: Int = 603

val SN_setext_pinAny: String get() = "setext\u002DpinAny"

const val NID_setext_pinAny: Int = 604

val SN_setext_track2: String get() = "setext\u002Dtrack2"

const val NID_setext_track2: Int = 605

val SN_setext_cv: String get() = "setext\u002Dcv"

val LN_setext_cv: String get() = "additional verification"

const val NID_setext_cv: Int = 606

val SN_set_policy_root: String get() = "set\u002Dpolicy\u002Droot"

const val NID_set_policy_root: Int = 607

val SN_setCext_hashedRoot: String get() = "setCext\u002DhashedRoot"

const val NID_setCext_hashedRoot: Int = 608

val SN_setCext_certType: String get() = "setCext\u002DcertType"

const val NID_setCext_certType: Int = 609

val SN_setCext_merchData: String get() = "setCext\u002DmerchData"

const val NID_setCext_merchData: Int = 610

val SN_setCext_cCertRequired: String get() = "setCext\u002DcCertRequired"

const val NID_setCext_cCertRequired: Int = 611

val SN_setCext_tunneling: String get() = "setCext\u002Dtunneling"

const val NID_setCext_tunneling: Int = 612

val SN_setCext_setExt: String get() = "setCext\u002DsetExt"

const val NID_setCext_setExt: Int = 613

val SN_setCext_setQualf: String get() = "setCext\u002DsetQualf"

const val NID_setCext_setQualf: Int = 614

val SN_setCext_PGWYcapabilities: String get() = "setCext\u002DPGWYcapabilities"

const val NID_setCext_PGWYcapabilities: Int = 615

val SN_setCext_TokenIdentifier: String get() = "setCext\u002DTokenIdentifier"

const val NID_setCext_TokenIdentifier: Int = 616

val SN_setCext_Track2Data: String get() = "setCext\u002DTrack2Data"

const val NID_setCext_Track2Data: Int = 617

val SN_setCext_TokenType: String get() = "setCext\u002DTokenType"

const val NID_setCext_TokenType: Int = 618

val SN_setCext_IssuerCapabilities: String get() = "setCext\u002DIssuerCapabilities"

const val NID_setCext_IssuerCapabilities: Int = 619

val SN_setAttr_Cert: String get() = "setAttr\u002DCert"

const val NID_setAttr_Cert: Int = 620

val SN_setAttr_PGWYcap: String get() = "setAttr\u002DPGWYcap"

val LN_setAttr_PGWYcap: String get() = "payment gateway capabilities"

const val NID_setAttr_PGWYcap: Int = 621

val SN_setAttr_TokenType: String get() = "setAttr\u002DTokenType"

const val NID_setAttr_TokenType: Int = 622

val SN_setAttr_IssCap: String get() = "setAttr\u002DIssCap"

val LN_setAttr_IssCap: String get() = "issuer capabilities"

const val NID_setAttr_IssCap: Int = 623

val SN_set_rootKeyThumb: String get() = "set\u002DrootKeyThumb"

const val NID_set_rootKeyThumb: Int = 624

val SN_set_addPolicy: String get() = "set\u002DaddPolicy"

const val NID_set_addPolicy: Int = 625

val SN_setAttr_Token_EMV: String get() = "setAttr\u002DToken\u002DEMV"

const val NID_setAttr_Token_EMV: Int = 626

val SN_setAttr_Token_B0Prime: String get() = "setAttr\u002DToken\u002DB0Prime"

const val NID_setAttr_Token_B0Prime: Int = 627

val SN_setAttr_IssCap_CVM: String get() = "setAttr\u002DIssCap\u002DCVM"

const val NID_setAttr_IssCap_CVM: Int = 628

val SN_setAttr_IssCap_T2: String get() = "setAttr\u002DIssCap\u002DT2"

const val NID_setAttr_IssCap_T2: Int = 629

val SN_setAttr_IssCap_Sig: String get() = "setAttr\u002DIssCap\u002DSig"

const val NID_setAttr_IssCap_Sig: Int = 630

val SN_setAttr_GenCryptgrm: String get() = "setAttr\u002DGenCryptgrm"

val LN_setAttr_GenCryptgrm: String get() = "generate cryptogram"

const val NID_setAttr_GenCryptgrm: Int = 631

val SN_setAttr_T2Enc: String get() = "setAttr\u002DT2Enc"

val LN_setAttr_T2Enc: String get() = "encrypted track 2"

const val NID_setAttr_T2Enc: Int = 632

val SN_setAttr_T2cleartxt: String get() = "setAttr\u002DT2cleartxt"

val LN_setAttr_T2cleartxt: String get() = "cleartext track 2"

const val NID_setAttr_T2cleartxt: Int = 633

val SN_setAttr_TokICCsig: String get() = "setAttr\u002DTokICCsig"

val LN_setAttr_TokICCsig: String get() = "ICC or token signature"

const val NID_setAttr_TokICCsig: Int = 634

val SN_setAttr_SecDevSig: String get() = "setAttr\u002DSecDevSig"

val LN_setAttr_SecDevSig: String get() = "secure device signature"

const val NID_setAttr_SecDevSig: Int = 635

val SN_set_brand_IATA_ATA: String get() = "set\u002Dbrand\u002DIATA\u002DATA"

const val NID_set_brand_IATA_ATA: Int = 636

val SN_set_brand_Diners: String get() = "set\u002Dbrand\u002DDiners"

const val NID_set_brand_Diners: Int = 637

val SN_set_brand_AmericanExpress: String get() = "set\u002Dbrand\u002DAmericanExpress"

const val NID_set_brand_AmericanExpress: Int = 638

val SN_set_brand_JCB: String get() = "set\u002Dbrand\u002DJCB"

const val NID_set_brand_JCB: Int = 639

val SN_set_brand_Visa: String get() = "set\u002Dbrand\u002DVisa"

const val NID_set_brand_Visa: Int = 640

val SN_set_brand_MasterCard: String get() = "set\u002Dbrand\u002DMasterCard"

const val NID_set_brand_MasterCard: Int = 641

val SN_set_brand_Novus: String get() = "set\u002Dbrand\u002DNovus"

const val NID_set_brand_Novus: Int = 642

val SN_des_cdmf: String get() = "DES\u002DCDMF"

val LN_des_cdmf: String get() = "des\u002Dcdmf"

const val NID_des_cdmf: Int = 643

val SN_rsaOAEPEncryptionSET: String get() = "rsaOAEPEncryptionSET"

const val NID_rsaOAEPEncryptionSET: Int = 644

val SN_ipsec3: String get() = "Oakley\u002DEC2N\u002D3"

val LN_ipsec3: String get() = "ipsec3"

const val NID_ipsec3: Int = 749

val SN_ipsec4: String get() = "Oakley\u002DEC2N\u002D4"

val LN_ipsec4: String get() = "ipsec4"

const val NID_ipsec4: Int = 750

val SN_whirlpool: String get() = "whirlpool"

const val NID_whirlpool: Int = 804

val SN_cryptopro: String get() = "cryptopro"

const val NID_cryptopro: Int = 805

val SN_cryptocom: String get() = "cryptocom"

const val NID_cryptocom: Int = 806

val SN_id_tc26: String get() = "id\u002Dtc26"

const val NID_id_tc26: Int = 974

val SN_id_GostR3411_94_with_GostR3410_2001: String get() = "id\u002DGostR3411\u002D94\u002Dwith\u002DGostR3410\u002D2001"

val LN_id_GostR3411_94_with_GostR3410_2001: String get() = "GOST R 34.11\u002D94 with GOST R 34.10\u002D2001"

const val NID_id_GostR3411_94_with_GostR3410_2001: Int = 807

val SN_id_GostR3411_94_with_GostR3410_94: String get() = "id\u002DGostR3411\u002D94\u002Dwith\u002DGostR3410\u002D94"

val LN_id_GostR3411_94_with_GostR3410_94: String get() = "GOST R 34.11\u002D94 with GOST R 34.10\u002D94"

const val NID_id_GostR3411_94_with_GostR3410_94: Int = 808

val SN_id_GostR3411_94: String get() = "md_gost94"

val LN_id_GostR3411_94: String get() = "GOST R 34.11\u002D94"

const val NID_id_GostR3411_94: Int = 809

val SN_id_HMACGostR3411_94: String get() = "id\u002DHMACGostR3411\u002D94"

val LN_id_HMACGostR3411_94: String get() = "HMAC GOST 34.11\u002D94"

const val NID_id_HMACGostR3411_94: Int = 810

val SN_id_GostR3410_2001: String get() = "gost2001"

val LN_id_GostR3410_2001: String get() = "GOST R 34.10\u002D2001"

const val NID_id_GostR3410_2001: Int = 811

val SN_id_GostR3410_94: String get() = "gost94"

val LN_id_GostR3410_94: String get() = "GOST R 34.10\u002D94"

const val NID_id_GostR3410_94: Int = 812

val SN_id_Gost28147_89: String get() = "gost89"

val LN_id_Gost28147_89: String get() = "GOST 28147\u002D89"

const val NID_id_Gost28147_89: Int = 813

val SN_gost89_cnt: String get() = "gost89\u002Dcnt"

const val NID_gost89_cnt: Int = 814

val SN_gost89_cnt_12: String get() = "gost89\u002Dcnt\u002D12"

const val NID_gost89_cnt_12: Int = 975

val SN_gost89_cbc: String get() = "gost89\u002Dcbc"

const val NID_gost89_cbc: Int = 1009

val SN_gost89_ecb: String get() = "gost89\u002Decb"

const val NID_gost89_ecb: Int = 1010

val SN_gost89_ctr: String get() = "gost89\u002Dctr"

const val NID_gost89_ctr: Int = 1011

val SN_id_Gost28147_89_MAC: String get() = "gost\u002Dmac"

val LN_id_Gost28147_89_MAC: String get() = "GOST 28147\u002D89 MAC"

const val NID_id_Gost28147_89_MAC: Int = 815

val SN_gost_mac_12: String get() = "gost\u002Dmac\u002D12"

const val NID_gost_mac_12: Int = 976

val SN_id_GostR3411_94_prf: String get() = "prf\u002Dgostr3411\u002D94"

val LN_id_GostR3411_94_prf: String get() = "GOST R 34.11\u002D94 PRF"

const val NID_id_GostR3411_94_prf: Int = 816

val SN_id_GostR3410_2001DH: String get() = "id\u002DGostR3410\u002D2001DH"

val LN_id_GostR3410_2001DH: String get() = "GOST R 34.10\u002D2001 DH"

const val NID_id_GostR3410_2001DH: Int = 817

val SN_id_GostR3410_94DH: String get() = "id\u002DGostR3410\u002D94DH"

val LN_id_GostR3410_94DH: String get() = "GOST R 34.10\u002D94 DH"

const val NID_id_GostR3410_94DH: Int = 818

val SN_id_Gost28147_89_CryptoPro_KeyMeshing: String get() = "id\u002DGost28147\u002D89\u002DCryptoPro\u002DKeyMeshing"

const val NID_id_Gost28147_89_CryptoPro_KeyMeshing: Int = 819

val SN_id_Gost28147_89_None_KeyMeshing: String get() = "id\u002DGost28147\u002D89\u002DNone\u002DKeyMeshing"

const val NID_id_Gost28147_89_None_KeyMeshing: Int = 820

val SN_id_GostR3411_94_TestParamSet: String get() = "id\u002DGostR3411\u002D94\u002DTestParamSet"

const val NID_id_GostR3411_94_TestParamSet: Int = 821

val SN_id_GostR3411_94_CryptoProParamSet: String get() = "id\u002DGostR3411\u002D94\u002DCryptoProParamSet"

const val NID_id_GostR3411_94_CryptoProParamSet: Int = 822

val SN_id_Gost28147_89_TestParamSet: String get() = "id\u002DGost28147\u002D89\u002DTestParamSet"

const val NID_id_Gost28147_89_TestParamSet: Int = 823

val SN_id_Gost28147_89_CryptoPro_A_ParamSet: String get() = "id\u002DGost28147\u002D89\u002DCryptoPro\u002DA\u002DParamSet"

const val NID_id_Gost28147_89_CryptoPro_A_ParamSet: Int = 824

val SN_id_Gost28147_89_CryptoPro_B_ParamSet: String get() = "id\u002DGost28147\u002D89\u002DCryptoPro\u002DB\u002DParamSet"

const val NID_id_Gost28147_89_CryptoPro_B_ParamSet: Int = 825

val SN_id_Gost28147_89_CryptoPro_C_ParamSet: String get() = "id\u002DGost28147\u002D89\u002DCryptoPro\u002DC\u002DParamSet"

const val NID_id_Gost28147_89_CryptoPro_C_ParamSet: Int = 826

val SN_id_Gost28147_89_CryptoPro_D_ParamSet: String get() = "id\u002DGost28147\u002D89\u002DCryptoPro\u002DD\u002DParamSet"

const val NID_id_Gost28147_89_CryptoPro_D_ParamSet: Int = 827

val SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet: String get() = "id\u002DGost28147\u002D89\u002DCryptoPro\u002DOscar\u002D1\u002D1\u002DParamSet"

const val NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet: Int = 828

val SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet: String get() = "id\u002DGost28147\u002D89\u002DCryptoPro\u002DOscar\u002D1\u002D0\u002DParamSet"

const val NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet: Int = 829

val SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet: String get() = "id\u002DGost28147\u002D89\u002DCryptoPro\u002DRIC\u002D1\u002DParamSet"

const val NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet: Int = 830

val SN_id_GostR3410_94_TestParamSet: String get() = "id\u002DGostR3410\u002D94\u002DTestParamSet"

const val NID_id_GostR3410_94_TestParamSet: Int = 831

val SN_id_GostR3410_94_CryptoPro_A_ParamSet: String get() = "id\u002DGostR3410\u002D94\u002DCryptoPro\u002DA\u002DParamSet"

const val NID_id_GostR3410_94_CryptoPro_A_ParamSet: Int = 832

val SN_id_GostR3410_94_CryptoPro_B_ParamSet: String get() = "id\u002DGostR3410\u002D94\u002DCryptoPro\u002DB\u002DParamSet"

const val NID_id_GostR3410_94_CryptoPro_B_ParamSet: Int = 833

val SN_id_GostR3410_94_CryptoPro_C_ParamSet: String get() = "id\u002DGostR3410\u002D94\u002DCryptoPro\u002DC\u002DParamSet"

const val NID_id_GostR3410_94_CryptoPro_C_ParamSet: Int = 834

val SN_id_GostR3410_94_CryptoPro_D_ParamSet: String get() = "id\u002DGostR3410\u002D94\u002DCryptoPro\u002DD\u002DParamSet"

const val NID_id_GostR3410_94_CryptoPro_D_ParamSet: Int = 835

val SN_id_GostR3410_94_CryptoPro_XchA_ParamSet: String get() = "id\u002DGostR3410\u002D94\u002DCryptoPro\u002DXchA\u002DParamSet"

const val NID_id_GostR3410_94_CryptoPro_XchA_ParamSet: Int = 836

val SN_id_GostR3410_94_CryptoPro_XchB_ParamSet: String get() = "id\u002DGostR3410\u002D94\u002DCryptoPro\u002DXchB\u002DParamSet"

const val NID_id_GostR3410_94_CryptoPro_XchB_ParamSet: Int = 837

val SN_id_GostR3410_94_CryptoPro_XchC_ParamSet: String get() = "id\u002DGostR3410\u002D94\u002DCryptoPro\u002DXchC\u002DParamSet"

const val NID_id_GostR3410_94_CryptoPro_XchC_ParamSet: Int = 838

val SN_id_GostR3410_2001_TestParamSet: String get() = "id\u002DGostR3410\u002D2001\u002DTestParamSet"

const val NID_id_GostR3410_2001_TestParamSet: Int = 839

val SN_id_GostR3410_2001_CryptoPro_A_ParamSet: String get() = "id\u002DGostR3410\u002D2001\u002DCryptoPro\u002DA\u002DParamSet"

const val NID_id_GostR3410_2001_CryptoPro_A_ParamSet: Int = 840

val SN_id_GostR3410_2001_CryptoPro_B_ParamSet: String get() = "id\u002DGostR3410\u002D2001\u002DCryptoPro\u002DB\u002DParamSet"

const val NID_id_GostR3410_2001_CryptoPro_B_ParamSet: Int = 841

val SN_id_GostR3410_2001_CryptoPro_C_ParamSet: String get() = "id\u002DGostR3410\u002D2001\u002DCryptoPro\u002DC\u002DParamSet"

const val NID_id_GostR3410_2001_CryptoPro_C_ParamSet: Int = 842

val SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet: String get() = "id\u002DGostR3410\u002D2001\u002DCryptoPro\u002DXchA\u002DParamSet"

const val NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet: Int = 843

val SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet: String get() = "id\u002DGostR3410\u002D2001\u002DCryptoPro\u002DXchB\u002DParamSet"

const val NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet: Int = 844

val SN_id_GostR3410_94_a: String get() = "id\u002DGostR3410\u002D94\u002Da"

const val NID_id_GostR3410_94_a: Int = 845

val SN_id_GostR3410_94_aBis: String get() = "id\u002DGostR3410\u002D94\u002DaBis"

const val NID_id_GostR3410_94_aBis: Int = 846

val SN_id_GostR3410_94_b: String get() = "id\u002DGostR3410\u002D94\u002Db"

const val NID_id_GostR3410_94_b: Int = 847

val SN_id_GostR3410_94_bBis: String get() = "id\u002DGostR3410\u002D94\u002DbBis"

const val NID_id_GostR3410_94_bBis: Int = 848

val SN_id_Gost28147_89_cc: String get() = "id\u002DGost28147\u002D89\u002Dcc"

val LN_id_Gost28147_89_cc: String get() = "GOST 28147\u002D89 Cryptocom ParamSet"

const val NID_id_Gost28147_89_cc: Int = 849

val SN_id_GostR3410_94_cc: String get() = "gost94cc"

val LN_id_GostR3410_94_cc: String get() = "GOST 34.10\u002D94 Cryptocom"

const val NID_id_GostR3410_94_cc: Int = 850

val SN_id_GostR3410_2001_cc: String get() = "gost2001cc"

val LN_id_GostR3410_2001_cc: String get() = "GOST 34.10\u002D2001 Cryptocom"

const val NID_id_GostR3410_2001_cc: Int = 851

val SN_id_GostR3411_94_with_GostR3410_94_cc: String get() = "id\u002DGostR3411\u002D94\u002Dwith\u002DGostR3410\u002D94\u002Dcc"

val LN_id_GostR3411_94_with_GostR3410_94_cc: String get() = "GOST R 34.11\u002D94 with GOST R 34.10\u002D94 Cryptocom"

const val NID_id_GostR3411_94_with_GostR3410_94_cc: Int = 852

val SN_id_GostR3411_94_with_GostR3410_2001_cc: String get() = "id\u002DGostR3411\u002D94\u002Dwith\u002DGostR3410\u002D2001\u002Dcc"

val LN_id_GostR3411_94_with_GostR3410_2001_cc: String get() = "GOST R 34.11\u002D94 with GOST R 34.10\u002D2001 Cryptocom"

const val NID_id_GostR3411_94_with_GostR3410_2001_cc: Int = 853

val SN_id_GostR3410_2001_ParamSet_cc: String get() = "id\u002DGostR3410\u002D2001\u002DParamSet\u002Dcc"

val LN_id_GostR3410_2001_ParamSet_cc: String get() = "GOST R 3410\u002D2001 Parameter Set Cryptocom"

const val NID_id_GostR3410_2001_ParamSet_cc: Int = 854

val SN_id_tc26_algorithms: String get() = "id\u002Dtc26\u002Dalgorithms"

const val NID_id_tc26_algorithms: Int = 977

val SN_id_tc26_sign: String get() = "id\u002Dtc26\u002Dsign"

const val NID_id_tc26_sign: Int = 978

val SN_id_GostR3410_2012_256: String get() = "gost2012_256"

val LN_id_GostR3410_2012_256: String get() = "GOST R 34.10\u002D2012 with 256 bit modulus"

const val NID_id_GostR3410_2012_256: Int = 979

val SN_id_GostR3410_2012_512: String get() = "gost2012_512"

val LN_id_GostR3410_2012_512: String get() = "GOST R 34.10\u002D2012 with 512 bit modulus"

const val NID_id_GostR3410_2012_512: Int = 980

val SN_id_tc26_digest: String get() = "id\u002Dtc26\u002Ddigest"

const val NID_id_tc26_digest: Int = 981

val SN_id_GostR3411_2012_256: String get() = "md_gost12_256"

val LN_id_GostR3411_2012_256: String get() = "GOST R 34.11\u002D2012 with 256 bit hash"

const val NID_id_GostR3411_2012_256: Int = 982

val SN_id_GostR3411_2012_512: String get() = "md_gost12_512"

val LN_id_GostR3411_2012_512: String get() = "GOST R 34.11\u002D2012 with 512 bit hash"

const val NID_id_GostR3411_2012_512: Int = 983

val SN_id_tc26_signwithdigest: String get() = "id\u002Dtc26\u002Dsignwithdigest"

const val NID_id_tc26_signwithdigest: Int = 984

val SN_id_tc26_signwithdigest_gost3410_2012_256: String get() = "id\u002Dtc26\u002Dsignwithdigest\u002Dgost3410\u002D2012\u002D256"

val LN_id_tc26_signwithdigest_gost3410_2012_256: String get() = "GOST R 34.10\u002D2012 with GOST R 34.11\u002D2012 \u0028256 bit\u0029"

const val NID_id_tc26_signwithdigest_gost3410_2012_256: Int = 985

val SN_id_tc26_signwithdigest_gost3410_2012_512: String get() = "id\u002Dtc26\u002Dsignwithdigest\u002Dgost3410\u002D2012\u002D512"

val LN_id_tc26_signwithdigest_gost3410_2012_512: String get() = "GOST R 34.10\u002D2012 with GOST R 34.11\u002D2012 \u0028512 bit\u0029"

const val NID_id_tc26_signwithdigest_gost3410_2012_512: Int = 986

val SN_id_tc26_mac: String get() = "id\u002Dtc26\u002Dmac"

const val NID_id_tc26_mac: Int = 987

val SN_id_tc26_hmac_gost_3411_2012_256: String get() = "id\u002Dtc26\u002Dhmac\u002Dgost\u002D3411\u002D2012\u002D256"

val LN_id_tc26_hmac_gost_3411_2012_256: String get() = "HMAC GOST 34.11\u002D2012 256 bit"

const val NID_id_tc26_hmac_gost_3411_2012_256: Int = 988

val SN_id_tc26_hmac_gost_3411_2012_512: String get() = "id\u002Dtc26\u002Dhmac\u002Dgost\u002D3411\u002D2012\u002D512"

val LN_id_tc26_hmac_gost_3411_2012_512: String get() = "HMAC GOST 34.11\u002D2012 512 bit"

const val NID_id_tc26_hmac_gost_3411_2012_512: Int = 989

val SN_id_tc26_cipher: String get() = "id\u002Dtc26\u002Dcipher"

const val NID_id_tc26_cipher: Int = 990

val SN_id_tc26_agreement: String get() = "id\u002Dtc26\u002Dagreement"

const val NID_id_tc26_agreement: Int = 991

val SN_id_tc26_agreement_gost_3410_2012_256: String get() = "id\u002Dtc26\u002Dagreement\u002Dgost\u002D3410\u002D2012\u002D256"

const val NID_id_tc26_agreement_gost_3410_2012_256: Int = 992

val SN_id_tc26_agreement_gost_3410_2012_512: String get() = "id\u002Dtc26\u002Dagreement\u002Dgost\u002D3410\u002D2012\u002D512"

const val NID_id_tc26_agreement_gost_3410_2012_512: Int = 993

val SN_id_tc26_constants: String get() = "id\u002Dtc26\u002Dconstants"

const val NID_id_tc26_constants: Int = 994

val SN_id_tc26_sign_constants: String get() = "id\u002Dtc26\u002Dsign\u002Dconstants"

const val NID_id_tc26_sign_constants: Int = 995

val SN_id_tc26_gost_3410_2012_512_constants: String get() = "id\u002Dtc26\u002Dgost\u002D3410\u002D2012\u002D512\u002Dconstants"

const val NID_id_tc26_gost_3410_2012_512_constants: Int = 996

val SN_id_tc26_gost_3410_2012_512_paramSetTest: String get() = "id\u002Dtc26\u002Dgost\u002D3410\u002D2012\u002D512\u002DparamSetTest"

val LN_id_tc26_gost_3410_2012_512_paramSetTest: String get() = "GOST R 34.10\u002D2012 \u0028512 bit\u0029 testing parameter set"

const val NID_id_tc26_gost_3410_2012_512_paramSetTest: Int = 997

val SN_id_tc26_gost_3410_2012_512_paramSetA: String get() = "id\u002Dtc26\u002Dgost\u002D3410\u002D2012\u002D512\u002DparamSetA"

val LN_id_tc26_gost_3410_2012_512_paramSetA: String get() = "GOST R 34.10\u002D2012 \u0028512 bit\u0029 ParamSet A"

const val NID_id_tc26_gost_3410_2012_512_paramSetA: Int = 998

val SN_id_tc26_gost_3410_2012_512_paramSetB: String get() = "id\u002Dtc26\u002Dgost\u002D3410\u002D2012\u002D512\u002DparamSetB"

val LN_id_tc26_gost_3410_2012_512_paramSetB: String get() = "GOST R 34.10\u002D2012 \u0028512 bit\u0029 ParamSet B"

const val NID_id_tc26_gost_3410_2012_512_paramSetB: Int = 999

val SN_id_tc26_digest_constants: String get() = "id\u002Dtc26\u002Ddigest\u002Dconstants"

const val NID_id_tc26_digest_constants: Int = 1000

val SN_id_tc26_cipher_constants: String get() = "id\u002Dtc26\u002Dcipher\u002Dconstants"

const val NID_id_tc26_cipher_constants: Int = 1001

val SN_id_tc26_gost_28147_constants: String get() = "id\u002Dtc26\u002Dgost\u002D28147\u002Dconstants"

const val NID_id_tc26_gost_28147_constants: Int = 1002

val SN_id_tc26_gost_28147_param_Z: String get() = "id\u002Dtc26\u002Dgost\u002D28147\u002Dparam\u002DZ"

val LN_id_tc26_gost_28147_param_Z: String get() = "GOST 28147\u002D89 TC26 parameter set"

const val NID_id_tc26_gost_28147_param_Z: Int = 1003

val SN_INN: String get() = "INN"

val LN_INN: String get() = "INN"

const val NID_INN: Int = 1004

val SN_OGRN: String get() = "OGRN"

val LN_OGRN: String get() = "OGRN"

const val NID_OGRN: Int = 1005

val SN_SNILS: String get() = "SNILS"

val LN_SNILS: String get() = "SNILS"

const val NID_SNILS: Int = 1006

val SN_subjectSignTool: String get() = "subjectSignTool"

val LN_subjectSignTool: String get() = "Signing Tool of Subject"

const val NID_subjectSignTool: Int = 1007

val SN_issuerSignTool: String get() = "issuerSignTool"

val LN_issuerSignTool: String get() = "Signing Tool of Issuer"

const val NID_issuerSignTool: Int = 1008

val SN_grasshopper_ecb: String get() = "grasshopper\u002Decb"

const val NID_grasshopper_ecb: Int = 1012

val SN_grasshopper_ctr: String get() = "grasshopper\u002Dctr"

const val NID_grasshopper_ctr: Int = 1013

val SN_grasshopper_ofb: String get() = "grasshopper\u002Dofb"

const val NID_grasshopper_ofb: Int = 1014

val SN_grasshopper_cbc: String get() = "grasshopper\u002Dcbc"

const val NID_grasshopper_cbc: Int = 1015

val SN_grasshopper_cfb: String get() = "grasshopper\u002Dcfb"

const val NID_grasshopper_cfb: Int = 1016

val SN_grasshopper_mac: String get() = "grasshopper\u002Dmac"

const val NID_grasshopper_mac: Int = 1017

val SN_camellia_128_cbc: String get() = "CAMELLIA\u002D128\u002DCBC"

val LN_camellia_128_cbc: String get() = "camellia\u002D128\u002Dcbc"

const val NID_camellia_128_cbc: Int = 751

val SN_camellia_192_cbc: String get() = "CAMELLIA\u002D192\u002DCBC"

val LN_camellia_192_cbc: String get() = "camellia\u002D192\u002Dcbc"

const val NID_camellia_192_cbc: Int = 752

val SN_camellia_256_cbc: String get() = "CAMELLIA\u002D256\u002DCBC"

val LN_camellia_256_cbc: String get() = "camellia\u002D256\u002Dcbc"

const val NID_camellia_256_cbc: Int = 753

val SN_id_camellia128_wrap: String get() = "id\u002Dcamellia128\u002Dwrap"

const val NID_id_camellia128_wrap: Int = 907

val SN_id_camellia192_wrap: String get() = "id\u002Dcamellia192\u002Dwrap"

const val NID_id_camellia192_wrap: Int = 908

val SN_id_camellia256_wrap: String get() = "id\u002Dcamellia256\u002Dwrap"

const val NID_id_camellia256_wrap: Int = 909

val SN_camellia_128_ecb: String get() = "CAMELLIA\u002D128\u002DECB"

val LN_camellia_128_ecb: String get() = "camellia\u002D128\u002Decb"

const val NID_camellia_128_ecb: Int = 754

val SN_camellia_128_ofb128: String get() = "CAMELLIA\u002D128\u002DOFB"

val LN_camellia_128_ofb128: String get() = "camellia\u002D128\u002Dofb"

const val NID_camellia_128_ofb128: Int = 766

val SN_camellia_128_cfb128: String get() = "CAMELLIA\u002D128\u002DCFB"

val LN_camellia_128_cfb128: String get() = "camellia\u002D128\u002Dcfb"

const val NID_camellia_128_cfb128: Int = 757

val SN_camellia_128_gcm: String get() = "CAMELLIA\u002D128\u002DGCM"

val LN_camellia_128_gcm: String get() = "camellia\u002D128\u002Dgcm"

const val NID_camellia_128_gcm: Int = 961

val SN_camellia_128_ccm: String get() = "CAMELLIA\u002D128\u002DCCM"

val LN_camellia_128_ccm: String get() = "camellia\u002D128\u002Dccm"

const val NID_camellia_128_ccm: Int = 962

val SN_camellia_128_ctr: String get() = "CAMELLIA\u002D128\u002DCTR"

val LN_camellia_128_ctr: String get() = "camellia\u002D128\u002Dctr"

const val NID_camellia_128_ctr: Int = 963

val SN_camellia_128_cmac: String get() = "CAMELLIA\u002D128\u002DCMAC"

val LN_camellia_128_cmac: String get() = "camellia\u002D128\u002Dcmac"

const val NID_camellia_128_cmac: Int = 964

val SN_camellia_192_ecb: String get() = "CAMELLIA\u002D192\u002DECB"

val LN_camellia_192_ecb: String get() = "camellia\u002D192\u002Decb"

const val NID_camellia_192_ecb: Int = 755

val SN_camellia_192_ofb128: String get() = "CAMELLIA\u002D192\u002DOFB"

val LN_camellia_192_ofb128: String get() = "camellia\u002D192\u002Dofb"

const val NID_camellia_192_ofb128: Int = 767

val SN_camellia_192_cfb128: String get() = "CAMELLIA\u002D192\u002DCFB"

val LN_camellia_192_cfb128: String get() = "camellia\u002D192\u002Dcfb"

const val NID_camellia_192_cfb128: Int = 758

val SN_camellia_192_gcm: String get() = "CAMELLIA\u002D192\u002DGCM"

val LN_camellia_192_gcm: String get() = "camellia\u002D192\u002Dgcm"

const val NID_camellia_192_gcm: Int = 965

val SN_camellia_192_ccm: String get() = "CAMELLIA\u002D192\u002DCCM"

val LN_camellia_192_ccm: String get() = "camellia\u002D192\u002Dccm"

const val NID_camellia_192_ccm: Int = 966

val SN_camellia_192_ctr: String get() = "CAMELLIA\u002D192\u002DCTR"

val LN_camellia_192_ctr: String get() = "camellia\u002D192\u002Dctr"

const val NID_camellia_192_ctr: Int = 967

val SN_camellia_192_cmac: String get() = "CAMELLIA\u002D192\u002DCMAC"

val LN_camellia_192_cmac: String get() = "camellia\u002D192\u002Dcmac"

const val NID_camellia_192_cmac: Int = 968

val SN_camellia_256_ecb: String get() = "CAMELLIA\u002D256\u002DECB"

val LN_camellia_256_ecb: String get() = "camellia\u002D256\u002Decb"

const val NID_camellia_256_ecb: Int = 756

val SN_camellia_256_ofb128: String get() = "CAMELLIA\u002D256\u002DOFB"

val LN_camellia_256_ofb128: String get() = "camellia\u002D256\u002Dofb"

const val NID_camellia_256_ofb128: Int = 768

val SN_camellia_256_cfb128: String get() = "CAMELLIA\u002D256\u002DCFB"

val LN_camellia_256_cfb128: String get() = "camellia\u002D256\u002Dcfb"

const val NID_camellia_256_cfb128: Int = 759

val SN_camellia_256_gcm: String get() = "CAMELLIA\u002D256\u002DGCM"

val LN_camellia_256_gcm: String get() = "camellia\u002D256\u002Dgcm"

const val NID_camellia_256_gcm: Int = 969

val SN_camellia_256_ccm: String get() = "CAMELLIA\u002D256\u002DCCM"

val LN_camellia_256_ccm: String get() = "camellia\u002D256\u002Dccm"

const val NID_camellia_256_ccm: Int = 970

val SN_camellia_256_ctr: String get() = "CAMELLIA\u002D256\u002DCTR"

val LN_camellia_256_ctr: String get() = "camellia\u002D256\u002Dctr"

const val NID_camellia_256_ctr: Int = 971

val SN_camellia_256_cmac: String get() = "CAMELLIA\u002D256\u002DCMAC"

val LN_camellia_256_cmac: String get() = "camellia\u002D256\u002Dcmac"

const val NID_camellia_256_cmac: Int = 972

val SN_camellia_128_cfb1: String get() = "CAMELLIA\u002D128\u002DCFB1"

val LN_camellia_128_cfb1: String get() = "camellia\u002D128\u002Dcfb1"

const val NID_camellia_128_cfb1: Int = 760

val SN_camellia_192_cfb1: String get() = "CAMELLIA\u002D192\u002DCFB1"

val LN_camellia_192_cfb1: String get() = "camellia\u002D192\u002Dcfb1"

const val NID_camellia_192_cfb1: Int = 761

val SN_camellia_256_cfb1: String get() = "CAMELLIA\u002D256\u002DCFB1"

val LN_camellia_256_cfb1: String get() = "camellia\u002D256\u002Dcfb1"

const val NID_camellia_256_cfb1: Int = 762

val SN_camellia_128_cfb8: String get() = "CAMELLIA\u002D128\u002DCFB8"

val LN_camellia_128_cfb8: String get() = "camellia\u002D128\u002Dcfb8"

const val NID_camellia_128_cfb8: Int = 763

val SN_camellia_192_cfb8: String get() = "CAMELLIA\u002D192\u002DCFB8"

val LN_camellia_192_cfb8: String get() = "camellia\u002D192\u002Dcfb8"

const val NID_camellia_192_cfb8: Int = 764

val SN_camellia_256_cfb8: String get() = "CAMELLIA\u002D256\u002DCFB8"

val LN_camellia_256_cfb8: String get() = "camellia\u002D256\u002Dcfb8"

const val NID_camellia_256_cfb8: Int = 765

val SN_kisa: String get() = "KISA"

val LN_kisa: String get() = "kisa"

const val NID_kisa: Int = 773

val SN_seed_ecb: String get() = "SEED\u002DECB"

val LN_seed_ecb: String get() = "seed\u002Decb"

const val NID_seed_ecb: Int = 776

val SN_seed_cbc: String get() = "SEED\u002DCBC"

val LN_seed_cbc: String get() = "seed\u002Dcbc"

const val NID_seed_cbc: Int = 777

val SN_seed_cfb128: String get() = "SEED\u002DCFB"

val LN_seed_cfb128: String get() = "seed\u002Dcfb"

const val NID_seed_cfb128: Int = 779

val SN_seed_ofb128: String get() = "SEED\u002DOFB"

val LN_seed_ofb128: String get() = "seed\u002Dofb"

const val NID_seed_ofb128: Int = 778

val SN_hmac: String get() = "HMAC"

val LN_hmac: String get() = "hmac"

const val NID_hmac: Int = 855

val SN_cmac: String get() = "CMAC"

val LN_cmac: String get() = "cmac"

const val NID_cmac: Int = 894

val SN_rc4_hmac_md5: String get() = "RC4\u002DHMAC\u002DMD5"

val LN_rc4_hmac_md5: String get() = "rc4\u002Dhmac\u002Dmd5"

const val NID_rc4_hmac_md5: Int = 915

val SN_aes_128_cbc_hmac_sha1: String get() = "AES\u002D128\u002DCBC\u002DHMAC\u002DSHA1"

val LN_aes_128_cbc_hmac_sha1: String get() = "aes\u002D128\u002Dcbc\u002Dhmac\u002Dsha1"

const val NID_aes_128_cbc_hmac_sha1: Int = 916

val SN_aes_192_cbc_hmac_sha1: String get() = "AES\u002D192\u002DCBC\u002DHMAC\u002DSHA1"

val LN_aes_192_cbc_hmac_sha1: String get() = "aes\u002D192\u002Dcbc\u002Dhmac\u002Dsha1"

const val NID_aes_192_cbc_hmac_sha1: Int = 917

val SN_aes_256_cbc_hmac_sha1: String get() = "AES\u002D256\u002DCBC\u002DHMAC\u002DSHA1"

val LN_aes_256_cbc_hmac_sha1: String get() = "aes\u002D256\u002Dcbc\u002Dhmac\u002Dsha1"

const val NID_aes_256_cbc_hmac_sha1: Int = 918

val SN_aes_128_cbc_hmac_sha256: String get() = "AES\u002D128\u002DCBC\u002DHMAC\u002DSHA256"

val LN_aes_128_cbc_hmac_sha256: String get() = "aes\u002D128\u002Dcbc\u002Dhmac\u002Dsha256"

const val NID_aes_128_cbc_hmac_sha256: Int = 948

val SN_aes_192_cbc_hmac_sha256: String get() = "AES\u002D192\u002DCBC\u002DHMAC\u002DSHA256"

val LN_aes_192_cbc_hmac_sha256: String get() = "aes\u002D192\u002Dcbc\u002Dhmac\u002Dsha256"

const val NID_aes_192_cbc_hmac_sha256: Int = 949

val SN_aes_256_cbc_hmac_sha256: String get() = "AES\u002D256\u002DCBC\u002DHMAC\u002DSHA256"

val LN_aes_256_cbc_hmac_sha256: String get() = "aes\u002D256\u002Dcbc\u002Dhmac\u002Dsha256"

const val NID_aes_256_cbc_hmac_sha256: Int = 950

val SN_chacha20_poly1305: String get() = "ChaCha20\u002DPoly1305"

val LN_chacha20_poly1305: String get() = "chacha20\u002Dpoly1305"

const val NID_chacha20_poly1305: Int = 1018

val SN_chacha20: String get() = "ChaCha20"

val LN_chacha20: String get() = "chacha20"

const val NID_chacha20: Int = 1019

val SN_dhpublicnumber: String get() = "dhpublicnumber"

val LN_dhpublicnumber: String get() = "X9.42 DH"

const val NID_dhpublicnumber: Int = 920

val SN_brainpoolP160r1: String get() = "brainpoolP160r1"

const val NID_brainpoolP160r1: Int = 921

val SN_brainpoolP160t1: String get() = "brainpoolP160t1"

const val NID_brainpoolP160t1: Int = 922

val SN_brainpoolP192r1: String get() = "brainpoolP192r1"

const val NID_brainpoolP192r1: Int = 923

val SN_brainpoolP192t1: String get() = "brainpoolP192t1"

const val NID_brainpoolP192t1: Int = 924

val SN_brainpoolP224r1: String get() = "brainpoolP224r1"

const val NID_brainpoolP224r1: Int = 925

val SN_brainpoolP224t1: String get() = "brainpoolP224t1"

const val NID_brainpoolP224t1: Int = 926

val SN_brainpoolP256r1: String get() = "brainpoolP256r1"

const val NID_brainpoolP256r1: Int = 927

val SN_brainpoolP256t1: String get() = "brainpoolP256t1"

const val NID_brainpoolP256t1: Int = 928

val SN_brainpoolP320r1: String get() = "brainpoolP320r1"

const val NID_brainpoolP320r1: Int = 929

val SN_brainpoolP320t1: String get() = "brainpoolP320t1"

const val NID_brainpoolP320t1: Int = 930

val SN_brainpoolP384r1: String get() = "brainpoolP384r1"

const val NID_brainpoolP384r1: Int = 931

val SN_brainpoolP384t1: String get() = "brainpoolP384t1"

const val NID_brainpoolP384t1: Int = 932

val SN_brainpoolP512r1: String get() = "brainpoolP512r1"

const val NID_brainpoolP512r1: Int = 933

val SN_brainpoolP512t1: String get() = "brainpoolP512t1"

const val NID_brainpoolP512t1: Int = 934

val SN_dhSinglePass_stdDH_sha1kdf_scheme: String get() = "dhSinglePass\u002DstdDH\u002Dsha1kdf\u002Dscheme"

const val NID_dhSinglePass_stdDH_sha1kdf_scheme: Int = 936

val SN_dhSinglePass_stdDH_sha224kdf_scheme: String get() = "dhSinglePass\u002DstdDH\u002Dsha224kdf\u002Dscheme"

const val NID_dhSinglePass_stdDH_sha224kdf_scheme: Int = 937

val SN_dhSinglePass_stdDH_sha256kdf_scheme: String get() = "dhSinglePass\u002DstdDH\u002Dsha256kdf\u002Dscheme"

const val NID_dhSinglePass_stdDH_sha256kdf_scheme: Int = 938

val SN_dhSinglePass_stdDH_sha384kdf_scheme: String get() = "dhSinglePass\u002DstdDH\u002Dsha384kdf\u002Dscheme"

const val NID_dhSinglePass_stdDH_sha384kdf_scheme: Int = 939

val SN_dhSinglePass_stdDH_sha512kdf_scheme: String get() = "dhSinglePass\u002DstdDH\u002Dsha512kdf\u002Dscheme"

const val NID_dhSinglePass_stdDH_sha512kdf_scheme: Int = 940

val SN_dhSinglePass_cofactorDH_sha1kdf_scheme: String get() = "dhSinglePass\u002DcofactorDH\u002Dsha1kdf\u002Dscheme"

const val NID_dhSinglePass_cofactorDH_sha1kdf_scheme: Int = 941

val SN_dhSinglePass_cofactorDH_sha224kdf_scheme: String get() = "dhSinglePass\u002DcofactorDH\u002Dsha224kdf\u002Dscheme"

const val NID_dhSinglePass_cofactorDH_sha224kdf_scheme: Int = 942

val SN_dhSinglePass_cofactorDH_sha256kdf_scheme: String get() = "dhSinglePass\u002DcofactorDH\u002Dsha256kdf\u002Dscheme"

const val NID_dhSinglePass_cofactorDH_sha256kdf_scheme: Int = 943

val SN_dhSinglePass_cofactorDH_sha384kdf_scheme: String get() = "dhSinglePass\u002DcofactorDH\u002Dsha384kdf\u002Dscheme"

const val NID_dhSinglePass_cofactorDH_sha384kdf_scheme: Int = 944

val SN_dhSinglePass_cofactorDH_sha512kdf_scheme: String get() = "dhSinglePass\u002DcofactorDH\u002Dsha512kdf\u002Dscheme"

const val NID_dhSinglePass_cofactorDH_sha512kdf_scheme: Int = 945

val SN_dh_std_kdf: String get() = "dh\u002Dstd\u002Dkdf"

const val NID_dh_std_kdf: Int = 946

val SN_dh_cofactor_kdf: String get() = "dh\u002Dcofactor\u002Dkdf"

const val NID_dh_cofactor_kdf: Int = 947

val SN_ct_precert_scts: String get() = "ct_precert_scts"

val LN_ct_precert_scts: String get() = "CT Precertificate SCTs"

const val NID_ct_precert_scts: Int = 951

val SN_ct_precert_poison: String get() = "ct_precert_poison"

val LN_ct_precert_poison: String get() = "CT Precertificate Poison"

const val NID_ct_precert_poison: Int = 952

val SN_ct_precert_signer: String get() = "ct_precert_signer"

val LN_ct_precert_signer: String get() = "CT Precertificate Signer"

const val NID_ct_precert_signer: Int = 953

val SN_ct_cert_scts: String get() = "ct_cert_scts"

val LN_ct_cert_scts: String get() = "CT Certificate SCTs"

const val NID_ct_cert_scts: Int = 954

val SN_jurisdictionLocalityName: String get() = "jurisdictionL"

val LN_jurisdictionLocalityName: String get() = "jurisdictionLocalityName"

const val NID_jurisdictionLocalityName: Int = 955

val SN_jurisdictionStateOrProvinceName: String get() = "jurisdictionST"

val LN_jurisdictionStateOrProvinceName: String get() = "jurisdictionStateOrProvinceName"

const val NID_jurisdictionStateOrProvinceName: Int = 956

val SN_jurisdictionCountryName: String get() = "jurisdictionC"

val LN_jurisdictionCountryName: String get() = "jurisdictionCountryName"

const val NID_jurisdictionCountryName: Int = 957

val SN_id_scrypt: String get() = "id\u002Dscrypt"

const val NID_id_scrypt: Int = 973

val SN_tls1_prf: String get() = "TLS1\u002DPRF"

val LN_tls1_prf: String get() = "tls1\u002Dprf"

const val NID_tls1_prf: Int = 1021

val SN_hkdf: String get() = "HKDF"

val LN_hkdf: String get() = "hkdf"

const val NID_hkdf: Int = 1036

val SN_id_pkinit: String get() = "id\u002Dpkinit"

const val NID_id_pkinit: Int = 1031

val SN_pkInitClientAuth: String get() = "pkInitClientAuth"

val LN_pkInitClientAuth: String get() = "PKINIT Client Auth"

const val NID_pkInitClientAuth: Int = 1032

val SN_pkInitKDC: String get() = "pkInitKDC"

val LN_pkInitKDC: String get() = "Signing KDC Response"

const val NID_pkInitKDC: Int = 1033

val SN_X25519: String get() = "X25519"

const val NID_X25519: Int = 1034

val SN_X448: String get() = "X448"

const val NID_X448: Int = 1035

val SN_kx_rsa: String get() = "KxRSA"

val LN_kx_rsa: String get() = "kx\u002Drsa"

const val NID_kx_rsa: Int = 1037

val SN_kx_ecdhe: String get() = "KxECDHE"

val LN_kx_ecdhe: String get() = "kx\u002Decdhe"

const val NID_kx_ecdhe: Int = 1038

val SN_kx_dhe: String get() = "KxDHE"

val LN_kx_dhe: String get() = "kx\u002Ddhe"

const val NID_kx_dhe: Int = 1039

val SN_kx_ecdhe_psk: String get() = "KxECDHE\u002DPSK"

val LN_kx_ecdhe_psk: String get() = "kx\u002Decdhe\u002Dpsk"

const val NID_kx_ecdhe_psk: Int = 1040

val SN_kx_dhe_psk: String get() = "KxDHE\u002DPSK"

val LN_kx_dhe_psk: String get() = "kx\u002Ddhe\u002Dpsk"

const val NID_kx_dhe_psk: Int = 1041

val SN_kx_rsa_psk: String get() = "KxRSA_PSK"

val LN_kx_rsa_psk: String get() = "kx\u002Drsa\u002Dpsk"

const val NID_kx_rsa_psk: Int = 1042

val SN_kx_psk: String get() = "KxPSK"

val LN_kx_psk: String get() = "kx\u002Dpsk"

const val NID_kx_psk: Int = 1043

val SN_kx_srp: String get() = "KxSRP"

val LN_kx_srp: String get() = "kx\u002Dsrp"

const val NID_kx_srp: Int = 1044

val SN_kx_gost: String get() = "KxGOST"

val LN_kx_gost: String get() = "kx\u002Dgost"

const val NID_kx_gost: Int = 1045

val SN_auth_rsa: String get() = "AuthRSA"

val LN_auth_rsa: String get() = "auth\u002Drsa"

const val NID_auth_rsa: Int = 1046

val SN_auth_ecdsa: String get() = "AuthECDSA"

val LN_auth_ecdsa: String get() = "auth\u002Decdsa"

const val NID_auth_ecdsa: Int = 1047

val SN_auth_psk: String get() = "AuthPSK"

val LN_auth_psk: String get() = "auth\u002Dpsk"

const val NID_auth_psk: Int = 1048

val SN_auth_dss: String get() = "AuthDSS"

val LN_auth_dss: String get() = "auth\u002Ddss"

const val NID_auth_dss: Int = 1049

val SN_auth_gost01: String get() = "AuthGOST01"

val LN_auth_gost01: String get() = "auth\u002Dgost01"

const val NID_auth_gost01: Int = 1050

val SN_auth_gost12: String get() = "AuthGOST12"

val LN_auth_gost12: String get() = "auth\u002Dgost12"

const val NID_auth_gost12: Int = 1051

val SN_auth_srp: String get() = "AuthSRP"

val LN_auth_srp: String get() = "auth\u002Dsrp"

const val NID_auth_srp: Int = 1052

val SN_auth_null: String get() = "AuthNULL"

val LN_auth_null: String get() = "auth\u002Dnull"

const val NID_auth_null: Int = 1053

const val BN_BYTES: Int = 8

const val BN_BITS2: Int = 64

const val BN_BITS: Int = 128

const val BN_TBIT: ULong = 9223372036854775808u

const val BN_FLG_MALLOCED: Int = 1

const val BN_FLG_STATIC_DATA: Int = 2

const val BN_FLG_CONSTTIME: Int = 4

const val BN_FLG_SECURE: Int = 8

const val BN_FLG_EXP_CONSTTIME: Int = 4

const val BN_FLG_FREE: Int = 32768

const val BN_RAND_TOP_ANY: Int = -1

const val BN_RAND_TOP_ONE: Int = 0

const val BN_RAND_TOP_TWO: Int = 1

const val BN_RAND_BOTTOM_ANY: Int = 0

const val BN_RAND_BOTTOM_ODD: Int = 1

const val BN_prime_checks: Int = 0

const val BN_BLINDING_NO_UPDATE: Int = 1

const val BN_BLINDING_NO_RECREATE: Int = 2

const val BN_F_BNRAND: Int = 127

const val BN_F_BN_BLINDING_CONVERT_EX: Int = 100

const val BN_F_BN_BLINDING_CREATE_PARAM: Int = 128

const val BN_F_BN_BLINDING_INVERT_EX: Int = 101

const val BN_F_BN_BLINDING_NEW: Int = 102

const val BN_F_BN_BLINDING_UPDATE: Int = 103

const val BN_F_BN_BN2DEC: Int = 104

const val BN_F_BN_BN2HEX: Int = 105

const val BN_F_BN_COMPUTE_WNAF: Int = 142

const val BN_F_BN_CTX_GET: Int = 116

const val BN_F_BN_CTX_NEW: Int = 106

const val BN_F_BN_CTX_START: Int = 129

const val BN_F_BN_DIV: Int = 107

const val BN_F_BN_DIV_RECP: Int = 130

const val BN_F_BN_EXP: Int = 123

const val BN_F_BN_EXPAND_INTERNAL: Int = 120

const val BN_F_BN_GENCB_NEW: Int = 143

const val BN_F_BN_GENERATE_DSA_NONCE: Int = 140

const val BN_F_BN_GENERATE_PRIME_EX: Int = 141

const val BN_F_BN_GF2M_MOD: Int = 131

const val BN_F_BN_GF2M_MOD_EXP: Int = 132

const val BN_F_BN_GF2M_MOD_MUL: Int = 133

const val BN_F_BN_GF2M_MOD_SOLVE_QUAD: Int = 134

const val BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR: Int = 135

const val BN_F_BN_GF2M_MOD_SQR: Int = 136

const val BN_F_BN_GF2M_MOD_SQRT: Int = 137

const val BN_F_BN_LSHIFT: Int = 145

const val BN_F_BN_MOD_EXP2_MONT: Int = 118

const val BN_F_BN_MOD_EXP_MONT: Int = 109

const val BN_F_BN_MOD_EXP_MONT_CONSTTIME: Int = 124

const val BN_F_BN_MOD_EXP_MONT_WORD: Int = 117

const val BN_F_BN_MOD_EXP_RECP: Int = 125

const val BN_F_BN_MOD_EXP_SIMPLE: Int = 126

const val BN_F_BN_MOD_INVERSE: Int = 110

const val BN_F_BN_MOD_INVERSE_NO_BRANCH: Int = 139

const val BN_F_BN_MOD_LSHIFT_QUICK: Int = 119

const val BN_F_BN_MOD_SQRT: Int = 121

const val BN_F_BN_MPI2BN: Int = 112

const val BN_F_BN_NEW: Int = 113

const val BN_F_BN_RAND: Int = 114

const val BN_F_BN_RAND_RANGE: Int = 122

const val BN_F_BN_RSHIFT: Int = 146

const val BN_F_BN_SET_WORDS: Int = 144

const val BN_F_BN_USUB: Int = 115

const val BN_R_ARG2_LT_ARG3: Int = 100

const val BN_R_BAD_RECIPROCAL: Int = 101

const val BN_R_BIGNUM_TOO_LONG: Int = 114

const val BN_R_BITS_TOO_SMALL: Int = 118

const val BN_R_CALLED_WITH_EVEN_MODULUS: Int = 102

const val BN_R_DIV_BY_ZERO: Int = 103

const val BN_R_ENCODING_ERROR: Int = 104

const val BN_R_EXPAND_ON_STATIC_BIGNUM_DATA: Int = 105

const val BN_R_INPUT_NOT_REDUCED: Int = 110

const val BN_R_INVALID_LENGTH: Int = 106

const val BN_R_INVALID_RANGE: Int = 115

const val BN_R_INVALID_SHIFT: Int = 119

const val BN_R_NOT_A_SQUARE: Int = 111

const val BN_R_NOT_INITIALIZED: Int = 107

const val BN_R_NO_INVERSE: Int = 108

const val BN_R_NO_SOLUTION: Int = 116

const val BN_R_PRIVATE_KEY_TOO_LARGE: Int = 117

const val BN_R_P_IS_NOT_PRIME: Int = 112

const val BN_R_TOO_MANY_ITERATIONS: Int = 113

const val BN_R_TOO_MANY_TEMPORARY_VARIABLES: Int = 109

const val V_ASN1_UNIVERSAL: Int = 0

const val V_ASN1_APPLICATION: Int = 64

const val V_ASN1_CONTEXT_SPECIFIC: Int = 128

const val V_ASN1_PRIVATE: Int = 192

const val V_ASN1_CONSTRUCTED: Int = 32

const val V_ASN1_PRIMITIVE_TAG: Int = 31

const val V_ASN1_PRIMATIVE_TAG: Int = 31

const val V_ASN1_APP_CHOOSE: Int = -2

const val V_ASN1_OTHER: Int = -3

const val V_ASN1_ANY: Int = -4

const val V_ASN1_UNDEF: Int = -1

const val V_ASN1_EOC: Int = 0

const val V_ASN1_BOOLEAN: Int = 1

const val V_ASN1_INTEGER: Int = 2

const val V_ASN1_BIT_STRING: Int = 3

const val V_ASN1_OCTET_STRING: Int = 4

const val V_ASN1_NULL: Int = 5

const val V_ASN1_OBJECT: Int = 6

const val V_ASN1_OBJECT_DESCRIPTOR: Int = 7

const val V_ASN1_EXTERNAL: Int = 8

const val V_ASN1_REAL: Int = 9

const val V_ASN1_ENUMERATED: Int = 10

const val V_ASN1_UTF8STRING: Int = 12

const val V_ASN1_SEQUENCE: Int = 16

const val V_ASN1_SET: Int = 17

const val V_ASN1_NUMERICSTRING: Int = 18

const val V_ASN1_PRINTABLESTRING: Int = 19

const val V_ASN1_T61STRING: Int = 20

const val V_ASN1_TELETEXSTRING: Int = 20

const val V_ASN1_VIDEOTEXSTRING: Int = 21

const val V_ASN1_IA5STRING: Int = 22

const val V_ASN1_UTCTIME: Int = 23

const val V_ASN1_GENERALIZEDTIME: Int = 24

const val V_ASN1_GRAPHICSTRING: Int = 25

const val V_ASN1_ISO64STRING: Int = 26

const val V_ASN1_VISIBLESTRING: Int = 26

const val V_ASN1_GENERALSTRING: Int = 27

const val V_ASN1_UNIVERSALSTRING: Int = 28

const val V_ASN1_BMPSTRING: Int = 30

const val V_ASN1_NEG: Int = 256

const val V_ASN1_NEG_INTEGER: Int = 258

const val V_ASN1_NEG_ENUMERATED: Int = 266

const val B_ASN1_NUMERICSTRING: Int = 1

const val B_ASN1_PRINTABLESTRING: Int = 2

const val B_ASN1_T61STRING: Int = 4

const val B_ASN1_TELETEXSTRING: Int = 4

const val B_ASN1_VIDEOTEXSTRING: Int = 8

const val B_ASN1_IA5STRING: Int = 16

const val B_ASN1_GRAPHICSTRING: Int = 32

const val B_ASN1_ISO64STRING: Int = 64

const val B_ASN1_VISIBLESTRING: Int = 64

const val B_ASN1_GENERALSTRING: Int = 128

const val B_ASN1_UNIVERSALSTRING: Int = 256

const val B_ASN1_OCTET_STRING: Int = 512

const val B_ASN1_BIT_STRING: Int = 1024

const val B_ASN1_BMPSTRING: Int = 2048

const val B_ASN1_UNKNOWN: Int = 4096

const val B_ASN1_UTF8STRING: Int = 8192

const val B_ASN1_UTCTIME: Int = 16384

const val B_ASN1_GENERALIZEDTIME: Int = 32768

const val B_ASN1_SEQUENCE: Int = 65536

const val MBSTRING_FLAG: Int = 4096

const val MBSTRING_UTF8: Int = 4096

const val MBSTRING_ASC: Int = 4097

const val MBSTRING_BMP: Int = 4098

const val MBSTRING_UNIV: Int = 4100

const val SMIME_OLDMIME: Int = 1024

const val SMIME_CRLFEOL: Int = 2048

const val SMIME_STREAM: Int = 4096

const val ASN1_STRING_FLAG_BITS_LEFT: Int = 8

const val ASN1_STRING_FLAG_NDEF: Int = 16

const val ASN1_STRING_FLAG_CONT: Int = 32

const val ASN1_STRING_FLAG_MSTRING: Int = 64

const val ASN1_STRING_FLAG_EMBED: Int = 128

const val ASN1_LONG_UNDEF: Long = 2147483647

const val STABLE_FLAGS_MALLOC: Int = 1

const val STABLE_FLAGS_CLEAR: Int = 1

const val STABLE_NO_MASK: Int = 2

const val DIRSTRING_TYPE: Int = 10246

const val PKCS9STRING_TYPE: Int = 10262

const val ub_name: Int = 32768

const val ub_common_name: Int = 64

const val ub_locality_name: Int = 128

const val ub_state_name: Int = 128

const val ub_organization_name: Int = 64

const val ub_organization_unit_name: Int = 64

const val ub_title: Int = 64

const val ub_email_address: Int = 128

const val ASN1_STRFLGS_ESC_2253: Int = 1

const val ASN1_STRFLGS_ESC_CTRL: Int = 2

const val ASN1_STRFLGS_ESC_MSB: Int = 4

const val ASN1_STRFLGS_ESC_QUOTE: Int = 8

const val CHARTYPE_PRINTABLESTRING: Int = 16

const val CHARTYPE_FIRST_ESC_2253: Int = 32

const val CHARTYPE_LAST_ESC_2253: Int = 64

const val ASN1_STRFLGS_UTF8_CONVERT: Int = 16

const val ASN1_STRFLGS_IGNORE_TYPE: Int = 32

const val ASN1_STRFLGS_SHOW_TYPE: Int = 64

const val ASN1_STRFLGS_DUMP_ALL: Int = 128

const val ASN1_STRFLGS_DUMP_UNKNOWN: Int = 256

const val ASN1_STRFLGS_DUMP_DER: Int = 512

const val ASN1_STRFLGS_ESC_2254: Int = 1024

const val ASN1_STRFLGS_RFC2253: Int = 791

const val B_ASN1_TIME: Int = 49152

const val B_ASN1_PRINTABLE: Int = 81175

const val B_ASN1_DIRECTORYSTRING: Int = 10502

const val B_ASN1_DISPLAYTEXT: Int = 10320

const val ASN1_PCTX_FLAGS_SHOW_ABSENT: Int = 1

const val ASN1_PCTX_FLAGS_SHOW_SEQUENCE: Int = 2

const val ASN1_PCTX_FLAGS_SHOW_SSOF: Int = 4

const val ASN1_PCTX_FLAGS_SHOW_TYPE: Int = 8

const val ASN1_PCTX_FLAGS_NO_ANY_TYPE: Int = 16

const val ASN1_PCTX_FLAGS_NO_MSTRING_TYPE: Int = 32

const val ASN1_PCTX_FLAGS_NO_FIELD_NAME: Int = 64

const val ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME: Int = 128

const val ASN1_PCTX_FLAGS_NO_STRUCT_NAME: Int = 256

const val ASN1_F_A2D_ASN1_OBJECT: Int = 100

const val ASN1_F_A2I_ASN1_INTEGER: Int = 102

const val ASN1_F_A2I_ASN1_STRING: Int = 103

const val ASN1_F_APPEND_EXP: Int = 176

const val ASN1_F_ASN1_BIT_STRING_SET_BIT: Int = 183

const val ASN1_F_ASN1_CB: Int = 177

const val ASN1_F_ASN1_CHECK_TLEN: Int = 104

const val ASN1_F_ASN1_COLLECT: Int = 106

const val ASN1_F_ASN1_D2I_EX_PRIMITIVE: Int = 108

const val ASN1_F_ASN1_D2I_FP: Int = 109

const val ASN1_F_ASN1_D2I_READ_BIO: Int = 107

const val ASN1_F_ASN1_DIGEST: Int = 184

const val ASN1_F_ASN1_DO_ADB: Int = 110

const val ASN1_F_ASN1_DO_LOCK: Int = 233

const val ASN1_F_ASN1_DUP: Int = 111

const val ASN1_F_ASN1_EX_C2I: Int = 204

const val ASN1_F_ASN1_FIND_END: Int = 190

const val ASN1_F_ASN1_GENERALIZEDTIME_ADJ: Int = 216

const val ASN1_F_ASN1_GENERATE_V3: Int = 178

const val ASN1_F_ASN1_GET_INT64: Int = 224

const val ASN1_F_ASN1_GET_OBJECT: Int = 114

const val ASN1_F_ASN1_GET_UINT64: Int = 225

const val ASN1_F_ASN1_I2D_BIO: Int = 116

const val ASN1_F_ASN1_I2D_FP: Int = 117

const val ASN1_F_ASN1_ITEM_D2I_FP: Int = 206

const val ASN1_F_ASN1_ITEM_DUP: Int = 191

const val ASN1_F_ASN1_ITEM_EMBED_D2I: Int = 120

const val ASN1_F_ASN1_ITEM_EMBED_NEW: Int = 121

const val ASN1_F_ASN1_ITEM_I2D_BIO: Int = 192

const val ASN1_F_ASN1_ITEM_I2D_FP: Int = 193

const val ASN1_F_ASN1_ITEM_PACK: Int = 198

const val ASN1_F_ASN1_ITEM_SIGN: Int = 195

const val ASN1_F_ASN1_ITEM_SIGN_CTX: Int = 220

const val ASN1_F_ASN1_ITEM_UNPACK: Int = 199

const val ASN1_F_ASN1_ITEM_VERIFY: Int = 197

const val ASN1_F_ASN1_MBSTRING_NCOPY: Int = 122

const val ASN1_F_ASN1_OBJECT_NEW: Int = 123

const val ASN1_F_ASN1_OUTPUT_DATA: Int = 214

const val ASN1_F_ASN1_PCTX_NEW: Int = 205

const val ASN1_F_ASN1_SCTX_NEW: Int = 221

const val ASN1_F_ASN1_SIGN: Int = 128

const val ASN1_F_ASN1_STR2TYPE: Int = 179

const val ASN1_F_ASN1_STRING_GET_INT64: Int = 227

const val ASN1_F_ASN1_STRING_GET_UINT64: Int = 230

const val ASN1_F_ASN1_STRING_SET: Int = 186

const val ASN1_F_ASN1_STRING_TABLE_ADD: Int = 129

const val ASN1_F_ASN1_STRING_TO_BN: Int = 228

const val ASN1_F_ASN1_STRING_TYPE_NEW: Int = 130

const val ASN1_F_ASN1_TEMPLATE_EX_D2I: Int = 132

const val ASN1_F_ASN1_TEMPLATE_NEW: Int = 133

const val ASN1_F_ASN1_TEMPLATE_NOEXP_D2I: Int = 131

const val ASN1_F_ASN1_TIME_ADJ: Int = 217

const val ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING: Int = 134

const val ASN1_F_ASN1_TYPE_GET_OCTETSTRING: Int = 135

const val ASN1_F_ASN1_UTCTIME_ADJ: Int = 218

const val ASN1_F_ASN1_VERIFY: Int = 137

const val ASN1_F_B64_READ_ASN1: Int = 209

const val ASN1_F_B64_WRITE_ASN1: Int = 210

const val ASN1_F_BIO_NEW_NDEF: Int = 208

const val ASN1_F_BITSTR_CB: Int = 180

const val ASN1_F_BN_TO_ASN1_STRING: Int = 229

const val ASN1_F_C2I_ASN1_BIT_STRING: Int = 189

const val ASN1_F_C2I_ASN1_INTEGER: Int = 194

const val ASN1_F_C2I_ASN1_OBJECT: Int = 196

const val ASN1_F_C2I_IBUF: Int = 226

const val ASN1_F_C2I_UINT64_INT: Int = 101

const val ASN1_F_COLLECT_DATA: Int = 140

const val ASN1_F_D2I_ASN1_OBJECT: Int = 147

const val ASN1_F_D2I_ASN1_UINTEGER: Int = 150

const val ASN1_F_D2I_AUTOPRIVATEKEY: Int = 207

const val ASN1_F_D2I_PRIVATEKEY: Int = 154

const val ASN1_F_D2I_PUBLICKEY: Int = 155

const val ASN1_F_DO_TCREATE: Int = 222

const val ASN1_F_I2D_ASN1_BIO_STREAM: Int = 211

const val ASN1_F_I2D_DSA_PUBKEY: Int = 161

const val ASN1_F_I2D_EC_PUBKEY: Int = 181

const val ASN1_F_I2D_PRIVATEKEY: Int = 163

const val ASN1_F_I2D_PUBLICKEY: Int = 164

const val ASN1_F_I2D_RSA_PUBKEY: Int = 165

const val ASN1_F_LONG_C2I: Int = 166

const val ASN1_F_OID_MODULE_INIT: Int = 174

const val ASN1_F_PARSE_TAGGING: Int = 182

const val ASN1_F_PKCS5_PBE2_SET_IV: Int = 167

const val ASN1_F_PKCS5_PBE2_SET_SCRYPT: Int = 231

const val ASN1_F_PKCS5_PBE_SET: Int = 202

const val ASN1_F_PKCS5_PBE_SET0_ALGOR: Int = 215

const val ASN1_F_PKCS5_PBKDF2_SET: Int = 219

const val ASN1_F_PKCS5_SCRYPT_SET: Int = 232

const val ASN1_F_SMIME_READ_ASN1: Int = 212

const val ASN1_F_SMIME_TEXT: Int = 213

const val ASN1_F_STBL_MODULE_INIT: Int = 223

const val ASN1_F_UINT32_C2I: Int = 105

const val ASN1_F_UINT64_C2I: Int = 112

const val ASN1_F_X509_CRL_ADD0_REVOKED: Int = 169

const val ASN1_F_X509_INFO_NEW: Int = 170

const val ASN1_F_X509_NAME_ENCODE: Int = 203

const val ASN1_F_X509_NAME_EX_D2I: Int = 158

const val ASN1_F_X509_NAME_EX_NEW: Int = 171

const val ASN1_F_X509_PKEY_NEW: Int = 173

const val ASN1_R_ADDING_OBJECT: Int = 171

const val ASN1_R_ASN1_PARSE_ERROR: Int = 203

const val ASN1_R_ASN1_SIG_PARSE_ERROR: Int = 204

const val ASN1_R_AUX_ERROR: Int = 100

const val ASN1_R_BAD_OBJECT_HEADER: Int = 102

const val ASN1_R_BMPSTRING_IS_WRONG_LENGTH: Int = 214

const val ASN1_R_BN_LIB: Int = 105

const val ASN1_R_BOOLEAN_IS_WRONG_LENGTH: Int = 106

const val ASN1_R_BUFFER_TOO_SMALL: Int = 107

const val ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER: Int = 108

const val ASN1_R_CONTEXT_NOT_INITIALISED: Int = 217

const val ASN1_R_DATA_IS_WRONG: Int = 109

const val ASN1_R_DECODE_ERROR: Int = 110

const val ASN1_R_DEPTH_EXCEEDED: Int = 174

const val ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED: Int = 198

const val ASN1_R_ENCODE_ERROR: Int = 112

const val ASN1_R_ERROR_GETTING_TIME: Int = 173

const val ASN1_R_ERROR_LOADING_SECTION: Int = 172

const val ASN1_R_ERROR_SETTING_CIPHER_PARAMS: Int = 114

const val ASN1_R_EXPECTING_AN_INTEGER: Int = 115

const val ASN1_R_EXPECTING_AN_OBJECT: Int = 116

const val ASN1_R_EXPLICIT_LENGTH_MISMATCH: Int = 119

const val ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED: Int = 120

const val ASN1_R_FIELD_MISSING: Int = 121

const val ASN1_R_FIRST_NUM_TOO_LARGE: Int = 122

const val ASN1_R_HEADER_TOO_LONG: Int = 123

const val ASN1_R_ILLEGAL_BITSTRING_FORMAT: Int = 175

const val ASN1_R_ILLEGAL_BOOLEAN: Int = 176

const val ASN1_R_ILLEGAL_CHARACTERS: Int = 124

const val ASN1_R_ILLEGAL_FORMAT: Int = 177

const val ASN1_R_ILLEGAL_HEX: Int = 178

const val ASN1_R_ILLEGAL_IMPLICIT_TAG: Int = 179

const val ASN1_R_ILLEGAL_INTEGER: Int = 180

const val ASN1_R_ILLEGAL_NEGATIVE_VALUE: Int = 226

const val ASN1_R_ILLEGAL_NESTED_TAGGING: Int = 181

const val ASN1_R_ILLEGAL_NULL: Int = 125

const val ASN1_R_ILLEGAL_NULL_VALUE: Int = 182

const val ASN1_R_ILLEGAL_OBJECT: Int = 183

const val ASN1_R_ILLEGAL_OPTIONAL_ANY: Int = 126

const val ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE: Int = 170

const val ASN1_R_ILLEGAL_PADDING: Int = 221

const val ASN1_R_ILLEGAL_TAGGED_ANY: Int = 127

const val ASN1_R_ILLEGAL_TIME_VALUE: Int = 184

const val ASN1_R_ILLEGAL_ZERO_CONTENT: Int = 222

const val ASN1_R_INTEGER_NOT_ASCII_FORMAT: Int = 185

const val ASN1_R_INTEGER_TOO_LARGE_FOR_LONG: Int = 128

const val ASN1_R_INVALID_BIT_STRING_BITS_LEFT: Int = 220

const val ASN1_R_INVALID_BMPSTRING_LENGTH: Int = 129

const val ASN1_R_INVALID_DIGIT: Int = 130

const val ASN1_R_INVALID_MIME_TYPE: Int = 205

const val ASN1_R_INVALID_MODIFIER: Int = 186

const val ASN1_R_INVALID_NUMBER: Int = 187

const val ASN1_R_INVALID_OBJECT_ENCODING: Int = 216

const val ASN1_R_INVALID_SCRYPT_PARAMETERS: Int = 227

const val ASN1_R_INVALID_SEPARATOR: Int = 131

const val ASN1_R_INVALID_STRING_TABLE_VALUE: Int = 218

const val ASN1_R_INVALID_UNIVERSALSTRING_LENGTH: Int = 133

const val ASN1_R_INVALID_UTF8STRING: Int = 134

const val ASN1_R_INVALID_VALUE: Int = 219

const val ASN1_R_LIST_ERROR: Int = 188

const val ASN1_R_MIME_NO_CONTENT_TYPE: Int = 206

const val ASN1_R_MIME_PARSE_ERROR: Int = 207

const val ASN1_R_MIME_SIG_PARSE_ERROR: Int = 208

const val ASN1_R_MISSING_EOC: Int = 137

const val ASN1_R_MISSING_SECOND_NUMBER: Int = 138

const val ASN1_R_MISSING_VALUE: Int = 189

const val ASN1_R_MSTRING_NOT_UNIVERSAL: Int = 139

const val ASN1_R_MSTRING_WRONG_TAG: Int = 140

const val ASN1_R_NESTED_ASN1_STRING: Int = 197

const val ASN1_R_NESTED_TOO_DEEP: Int = 201

const val ASN1_R_NON_HEX_CHARACTERS: Int = 141

const val ASN1_R_NOT_ASCII_FORMAT: Int = 190

const val ASN1_R_NOT_ENOUGH_DATA: Int = 142

const val ASN1_R_NO_CONTENT_TYPE: Int = 209

const val ASN1_R_NO_MATCHING_CHOICE_TYPE: Int = 143

const val ASN1_R_NO_MULTIPART_BODY_FAILURE: Int = 210

const val ASN1_R_NO_MULTIPART_BOUNDARY: Int = 211

const val ASN1_R_NO_SIG_CONTENT_TYPE: Int = 212

const val ASN1_R_NULL_IS_WRONG_LENGTH: Int = 144

const val ASN1_R_OBJECT_NOT_ASCII_FORMAT: Int = 191

const val ASN1_R_ODD_NUMBER_OF_CHARS: Int = 145

const val ASN1_R_SECOND_NUMBER_TOO_LARGE: Int = 147

const val ASN1_R_SEQUENCE_LENGTH_MISMATCH: Int = 148

const val ASN1_R_SEQUENCE_NOT_CONSTRUCTED: Int = 149

const val ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG: Int = 192

const val ASN1_R_SHORT_LINE: Int = 150

const val ASN1_R_SIG_INVALID_MIME_TYPE: Int = 213

const val ASN1_R_STREAMING_NOT_SUPPORTED: Int = 202

const val ASN1_R_STRING_TOO_LONG: Int = 151

const val ASN1_R_STRING_TOO_SHORT: Int = 152

const val ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD: Int = 154

const val ASN1_R_TIME_NOT_ASCII_FORMAT: Int = 193

const val ASN1_R_TOO_LARGE: Int = 223

const val ASN1_R_TOO_LONG: Int = 155

const val ASN1_R_TOO_SMALL: Int = 224

const val ASN1_R_TYPE_NOT_CONSTRUCTED: Int = 156

const val ASN1_R_TYPE_NOT_PRIMITIVE: Int = 195

const val ASN1_R_UNEXPECTED_EOC: Int = 159

const val ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH: Int = 215

const val ASN1_R_UNKNOWN_FORMAT: Int = 160

const val ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM: Int = 161

const val ASN1_R_UNKNOWN_OBJECT_TYPE: Int = 162

const val ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE: Int = 163

const val ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM: Int = 199

const val ASN1_R_UNKNOWN_TAG: Int = 194

const val ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE: Int = 164

const val ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE: Int = 167

const val ASN1_R_UNSUPPORTED_TYPE: Int = 196

const val ASN1_R_WRONG_INTEGER_TYPE: Int = 225

const val ASN1_R_WRONG_PUBLIC_KEY_TYPE: Int = 200

const val ASN1_R_WRONG_TAG: Int = 168

const val OBJ_NAME_TYPE_UNDEF: Int = 0

const val OBJ_NAME_TYPE_MD_METH: Int = 1

const val OBJ_NAME_TYPE_CIPHER_METH: Int = 2

const val OBJ_NAME_TYPE_PKEY_METH: Int = 3

const val OBJ_NAME_TYPE_COMP_METH: Int = 4

const val OBJ_NAME_TYPE_NUM: Int = 5

const val OBJ_NAME_ALIAS: Int = 32768

const val OBJ_BSEARCH_VALUE_ON_NOMATCH: Int = 1

const val OBJ_BSEARCH_FIRST_VALUE_ON_MATCH: Int = 2

const val OBJ_F_OBJ_ADD_OBJECT: Int = 105

const val OBJ_F_OBJ_CREATE: Int = 100

const val OBJ_F_OBJ_DUP: Int = 101

const val OBJ_F_OBJ_NAME_NEW_INDEX: Int = 106

const val OBJ_F_OBJ_NID2LN: Int = 102

const val OBJ_F_OBJ_NID2OBJ: Int = 103

const val OBJ_F_OBJ_NID2SN: Int = 104

const val OBJ_R_OID_EXISTS: Int = 102

const val OBJ_R_UNKNOWN_NID: Int = 101

const val EVP_PK_RSA: Int = 1

const val EVP_PK_DSA: Int = 2

const val EVP_PK_DH: Int = 4

const val EVP_PK_EC: Int = 8

const val EVP_PKT_SIGN: Int = 16

const val EVP_PKT_ENC: Int = 32

const val EVP_PKT_EXCH: Int = 64

const val EVP_PKS_RSA: Int = 256

const val EVP_PKS_DSA: Int = 512

const val EVP_PKS_EC: Int = 1024

const val EVP_PKEY_NONE: Int = 0

const val EVP_PKEY_RSA: Int = 6

const val EVP_PKEY_RSA2: Int = 19

const val EVP_PKEY_DSA: Int = 116

const val EVP_PKEY_DSA1: Int = 67

const val EVP_PKEY_DSA2: Int = 66

const val EVP_PKEY_DSA3: Int = 113

const val EVP_PKEY_DSA4: Int = 70

const val EVP_PKEY_DH: Int = 28

const val EVP_PKEY_DHX: Int = 920

const val EVP_PKEY_EC: Int = 408

const val EVP_PKEY_HMAC: Int = 855

const val EVP_PKEY_CMAC: Int = 894

const val EVP_PKEY_TLS1_PRF: Int = 1021

const val EVP_PKEY_HKDF: Int = 1036

const val EVP_PKEY_MO_SIGN: Int = 1

const val EVP_PKEY_MO_VERIFY: Int = 2

const val EVP_PKEY_MO_ENCRYPT: Int = 4

const val EVP_PKEY_MO_DECRYPT: Int = 8

const val EVP_MD_FLAG_ONESHOT: Int = 1

const val EVP_MD_FLAG_DIGALGID_MASK: Int = 24

const val EVP_MD_FLAG_DIGALGID_NULL: Int = 0

const val EVP_MD_FLAG_DIGALGID_ABSENT: Int = 8

const val EVP_MD_FLAG_DIGALGID_CUSTOM: Int = 24

const val EVP_MD_FLAG_FIPS: Int = 1024

const val EVP_MD_CTRL_DIGALGID: Int = 1

const val EVP_MD_CTRL_MICALG: Int = 2

const val EVP_MD_CTRL_ALG_CTRL: Int = 4096

const val EVP_MD_CTX_FLAG_ONESHOT: Int = 1

const val EVP_MD_CTX_FLAG_CLEANED: Int = 2

const val EVP_MD_CTX_FLAG_REUSE: Int = 4

const val EVP_MD_CTX_FLAG_NON_FIPS_ALLOW: Int = 8

const val EVP_MD_CTX_FLAG_PAD_MASK: Int = 240

const val EVP_MD_CTX_FLAG_PAD_PKCS1: Int = 0

const val EVP_MD_CTX_FLAG_PAD_X931: Int = 16

const val EVP_MD_CTX_FLAG_PAD_PSS: Int = 32

const val EVP_MD_CTX_FLAG_NO_INIT: Int = 256

const val EVP_MD_CTX_FLAG_FINALISE: Int = 512

const val EVP_CIPH_STREAM_CIPHER: Int = 0

const val EVP_CIPH_ECB_MODE: Int = 1

const val EVP_CIPH_CBC_MODE: Int = 2

const val EVP_CIPH_CFB_MODE: Int = 3

const val EVP_CIPH_OFB_MODE: Int = 4

const val EVP_CIPH_CTR_MODE: Int = 5

const val EVP_CIPH_GCM_MODE: Int = 6

const val EVP_CIPH_CCM_MODE: Int = 7

const val EVP_CIPH_XTS_MODE: Int = 65537

const val EVP_CIPH_WRAP_MODE: Int = 65538

const val EVP_CIPH_OCB_MODE: Int = 65539

const val EVP_CIPH_MODE: Int = 983047

const val EVP_CIPH_VARIABLE_LENGTH: Int = 8

const val EVP_CIPH_CUSTOM_IV: Int = 16

const val EVP_CIPH_ALWAYS_CALL_INIT: Int = 32

const val EVP_CIPH_CTRL_INIT: Int = 64

const val EVP_CIPH_CUSTOM_KEY_LENGTH: Int = 128

const val EVP_CIPH_NO_PADDING: Int = 256

const val EVP_CIPH_RAND_KEY: Int = 512

const val EVP_CIPH_CUSTOM_COPY: Int = 1024

const val EVP_CIPH_FLAG_DEFAULT_ASN1: Int = 4096

const val EVP_CIPH_FLAG_LENGTH_BITS: Int = 8192

const val EVP_CIPH_FLAG_FIPS: Int = 16384

const val EVP_CIPH_FLAG_NON_FIPS_ALLOW: Int = 32768

const val EVP_CIPH_FLAG_CUSTOM_CIPHER: Int = 1048576

const val EVP_CIPH_FLAG_AEAD_CIPHER: Int = 2097152

const val EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK: Int = 4194304

const val EVP_CIPH_FLAG_PIPELINE: Int = 8388608

const val EVP_CIPHER_CTX_FLAG_WRAP_ALLOW: Int = 1

const val EVP_CTRL_INIT: Int = 0

const val EVP_CTRL_SET_KEY_LENGTH: Int = 1

const val EVP_CTRL_GET_RC2_KEY_BITS: Int = 2

const val EVP_CTRL_SET_RC2_KEY_BITS: Int = 3

const val EVP_CTRL_GET_RC5_ROUNDS: Int = 4

const val EVP_CTRL_SET_RC5_ROUNDS: Int = 5

const val EVP_CTRL_RAND_KEY: Int = 6

const val EVP_CTRL_PBE_PRF_NID: Int = 7

const val EVP_CTRL_COPY: Int = 8

const val EVP_CTRL_AEAD_SET_IVLEN: Int = 9

const val EVP_CTRL_AEAD_GET_TAG: Int = 16

const val EVP_CTRL_AEAD_SET_TAG: Int = 17

const val EVP_CTRL_AEAD_SET_IV_FIXED: Int = 18

const val EVP_CTRL_GCM_SET_IVLEN: Int = 9

const val EVP_CTRL_GCM_GET_TAG: Int = 16

const val EVP_CTRL_GCM_SET_TAG: Int = 17

const val EVP_CTRL_GCM_SET_IV_FIXED: Int = 18

const val EVP_CTRL_GCM_IV_GEN: Int = 19

const val EVP_CTRL_CCM_SET_IVLEN: Int = 9

const val EVP_CTRL_CCM_GET_TAG: Int = 16

const val EVP_CTRL_CCM_SET_TAG: Int = 17

const val EVP_CTRL_CCM_SET_IV_FIXED: Int = 18

const val EVP_CTRL_CCM_SET_L: Int = 20

const val EVP_CTRL_CCM_SET_MSGLEN: Int = 21

const val EVP_CTRL_AEAD_TLS1_AAD: Int = 22

const val EVP_CTRL_AEAD_SET_MAC_KEY: Int = 23

const val EVP_CTRL_GCM_SET_IV_INV: Int = 24

const val EVP_CTRL_TLS1_1_MULTIBLOCK_AAD: Int = 25

const val EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT: Int = 26

const val EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT: Int = 27

const val EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE: Int = 28

const val EVP_CTRL_SSL3_MASTER_SECRET: Int = 29

const val EVP_CTRL_SET_SBOX: Int = 30

const val EVP_CTRL_SBOX_USED: Int = 31

const val EVP_CTRL_KEY_MESH: Int = 32

const val EVP_CTRL_BLOCK_PADDING_MODE: Int = 33

const val EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS: Int = 34

const val EVP_CTRL_SET_PIPELINE_INPUT_BUFS: Int = 35

const val EVP_CTRL_SET_PIPELINE_INPUT_LENS: Int = 36

const val EVP_PADDING_PKCS7: Int = 1

const val EVP_PADDING_ISO7816_4: Int = 2

const val EVP_PADDING_ANSI923: Int = 3

const val EVP_PADDING_ISO10126: Int = 4

const val EVP_PADDING_ZERO: Int = 5

const val EVP_AEAD_TLS1_AAD_LEN: Int = 13

const val EVP_GCM_TLS_FIXED_IV_LEN: Int = 4

const val EVP_GCM_TLS_EXPLICIT_IV_LEN: Int = 8

const val EVP_GCM_TLS_TAG_LEN: Int = 16

const val EVP_CCM_TLS_FIXED_IV_LEN: Int = 4

const val EVP_CCM_TLS_EXPLICIT_IV_LEN: Int = 8

const val EVP_PBE_TYPE_OUTER: Int = 0

const val EVP_PBE_TYPE_PRF: Int = 1

const val EVP_PBE_TYPE_KDF: Int = 2

const val ASN1_PKEY_ALIAS: Int = 1

const val ASN1_PKEY_DYNAMIC: Int = 2

const val ASN1_PKEY_SIGPARAM_NULL: Int = 4

const val ASN1_PKEY_CTRL_PKCS7_SIGN: Int = 1

const val ASN1_PKEY_CTRL_PKCS7_ENCRYPT: Int = 2

const val ASN1_PKEY_CTRL_DEFAULT_MD_NID: Int = 3

const val ASN1_PKEY_CTRL_CMS_SIGN: Int = 5

const val ASN1_PKEY_CTRL_CMS_ENVELOPE: Int = 7

const val ASN1_PKEY_CTRL_CMS_RI_TYPE: Int = 8

const val ASN1_PKEY_CTRL_SET1_TLS_ENCPT: Int = 9

const val ASN1_PKEY_CTRL_GET1_TLS_ENCPT: Int = 10

const val EVP_PKEY_OP_UNDEFINED: Int = 0

const val EVP_PKEY_OP_PARAMGEN: Int = 2

const val EVP_PKEY_OP_KEYGEN: Int = 4

const val EVP_PKEY_OP_SIGN: Int = 8

const val EVP_PKEY_OP_VERIFY: Int = 16

const val EVP_PKEY_OP_VERIFYRECOVER: Int = 32

const val EVP_PKEY_OP_SIGNCTX: Int = 64

const val EVP_PKEY_OP_VERIFYCTX: Int = 128

const val EVP_PKEY_OP_ENCRYPT: Int = 256

const val EVP_PKEY_OP_DECRYPT: Int = 512

const val EVP_PKEY_OP_DERIVE: Int = 1024

const val EVP_PKEY_OP_TYPE_SIG: Int = 248

const val EVP_PKEY_OP_TYPE_CRYPT: Int = 768

const val EVP_PKEY_OP_TYPE_NOGEN: Int = 2040

const val EVP_PKEY_OP_TYPE_GEN: Int = 6

const val EVP_PKEY_CTRL_MD: Int = 1

const val EVP_PKEY_CTRL_PEER_KEY: Int = 2

const val EVP_PKEY_CTRL_PKCS7_ENCRYPT: Int = 3

const val EVP_PKEY_CTRL_PKCS7_DECRYPT: Int = 4

const val EVP_PKEY_CTRL_PKCS7_SIGN: Int = 5

const val EVP_PKEY_CTRL_SET_MAC_KEY: Int = 6

const val EVP_PKEY_CTRL_DIGESTINIT: Int = 7

const val EVP_PKEY_CTRL_SET_IV: Int = 8

const val EVP_PKEY_CTRL_CMS_ENCRYPT: Int = 9

const val EVP_PKEY_CTRL_CMS_DECRYPT: Int = 10

const val EVP_PKEY_CTRL_CMS_SIGN: Int = 11

const val EVP_PKEY_CTRL_CIPHER: Int = 12

const val EVP_PKEY_CTRL_GET_MD: Int = 13

const val EVP_PKEY_ALG_CTRL: Int = 4096

const val EVP_PKEY_FLAG_AUTOARGLEN: Int = 2

const val EVP_PKEY_FLAG_SIGCTX_CUSTOM: Int = 4

const val EVP_F_AESNI_INIT_KEY: Int = 165

const val EVP_F_AES_INIT_KEY: Int = 133

const val EVP_F_AES_OCB_CIPHER: Int = 169

const val EVP_F_AES_T4_INIT_KEY: Int = 178

const val EVP_F_AES_WRAP_CIPHER: Int = 170

const val EVP_F_ALG_MODULE_INIT: Int = 177

const val EVP_F_CAMELLIA_INIT_KEY: Int = 159

const val EVP_F_CHACHA20_POLY1305_CTRL: Int = 182

const val EVP_F_CMLL_T4_INIT_KEY: Int = 179

const val EVP_F_DES_EDE3_WRAP_CIPHER: Int = 171

const val EVP_F_DO_SIGVER_INIT: Int = 161

const val EVP_F_EVP_CIPHERINIT_EX: Int = 123

const val EVP_F_EVP_CIPHER_CTX_COPY: Int = 163

const val EVP_F_EVP_CIPHER_CTX_CTRL: Int = 124

const val EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH: Int = 122

const val EVP_F_EVP_DECRYPTFINAL_EX: Int = 101

const val EVP_F_EVP_DECRYPTUPDATE: Int = 166

const val EVP_F_EVP_DIGESTINIT_EX: Int = 128

const val EVP_F_EVP_ENCRYPTFINAL_EX: Int = 127

const val EVP_F_EVP_ENCRYPTUPDATE: Int = 167

const val EVP_F_EVP_MD_CTX_COPY_EX: Int = 110

const val EVP_F_EVP_MD_SIZE: Int = 162

const val EVP_F_EVP_OPENINIT: Int = 102

const val EVP_F_EVP_PBE_ALG_ADD: Int = 115

const val EVP_F_EVP_PBE_ALG_ADD_TYPE: Int = 160

const val EVP_F_EVP_PBE_CIPHERINIT: Int = 116

const val EVP_F_EVP_PBE_SCRYPT: Int = 181

const val EVP_F_EVP_PKCS82PKEY: Int = 111

const val EVP_F_EVP_PKEY2PKCS8: Int = 113

const val EVP_F_EVP_PKEY_ASN1_ADD0: Int = 168

const val EVP_F_EVP_PKEY_COPY_PARAMETERS: Int = 103

const val EVP_F_EVP_PKEY_CTX_CTRL: Int = 137

const val EVP_F_EVP_PKEY_CTX_CTRL_STR: Int = 150

const val EVP_F_EVP_PKEY_CTX_DUP: Int = 156

const val EVP_F_EVP_PKEY_DECRYPT: Int = 104

const val EVP_F_EVP_PKEY_DECRYPT_INIT: Int = 138

const val EVP_F_EVP_PKEY_DECRYPT_OLD: Int = 151

const val EVP_F_EVP_PKEY_DERIVE: Int = 153

const val EVP_F_EVP_PKEY_DERIVE_INIT: Int = 154

const val EVP_F_EVP_PKEY_DERIVE_SET_PEER: Int = 155

const val EVP_F_EVP_PKEY_ENCRYPT: Int = 105

const val EVP_F_EVP_PKEY_ENCRYPT_INIT: Int = 139

const val EVP_F_EVP_PKEY_ENCRYPT_OLD: Int = 152

const val EVP_F_EVP_PKEY_GET0_DH: Int = 119

const val EVP_F_EVP_PKEY_GET0_DSA: Int = 120

const val EVP_F_EVP_PKEY_GET0_EC_KEY: Int = 131

const val EVP_F_EVP_PKEY_GET0_HMAC: Int = 183

const val EVP_F_EVP_PKEY_GET0_RSA: Int = 121

const val EVP_F_EVP_PKEY_KEYGEN: Int = 146

const val EVP_F_EVP_PKEY_KEYGEN_INIT: Int = 147

const val EVP_F_EVP_PKEY_NEW: Int = 106

const val EVP_F_EVP_PKEY_PARAMGEN: Int = 148

const val EVP_F_EVP_PKEY_PARAMGEN_INIT: Int = 149

const val EVP_F_EVP_PKEY_SET1_ENGINE: Int = 187

const val EVP_F_EVP_PKEY_SIGN: Int = 140

const val EVP_F_EVP_PKEY_SIGN_INIT: Int = 141

const val EVP_F_EVP_PKEY_VERIFY: Int = 142

const val EVP_F_EVP_PKEY_VERIFY_INIT: Int = 143

const val EVP_F_EVP_PKEY_VERIFY_RECOVER: Int = 144

const val EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT: Int = 145

const val EVP_F_EVP_SIGNFINAL: Int = 107

const val EVP_F_EVP_VERIFYFINAL: Int = 108

const val EVP_F_INT_CTX_NEW: Int = 157

const val EVP_F_PKCS5_PBE_KEYIVGEN: Int = 117

const val EVP_F_PKCS5_V2_PBE_KEYIVGEN: Int = 118

const val EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN: Int = 164

const val EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN: Int = 180

const val EVP_F_PKEY_SET_TYPE: Int = 158

const val EVP_F_RC2_MAGIC_TO_METH: Int = 109

const val EVP_F_RC5_CTRL: Int = 125

const val EVP_R_AES_KEY_SETUP_FAILED: Int = 143

const val EVP_R_BAD_DECRYPT: Int = 100

const val EVP_R_BUFFER_TOO_SMALL: Int = 155

const val EVP_R_CAMELLIA_KEY_SETUP_FAILED: Int = 157

const val EVP_R_CIPHER_PARAMETER_ERROR: Int = 122

const val EVP_R_COMMAND_NOT_SUPPORTED: Int = 147

const val EVP_R_COPY_ERROR: Int = 173

const val EVP_R_CTRL_NOT_IMPLEMENTED: Int = 132

const val EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED: Int = 133

const val EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH: Int = 138

const val EVP_R_DECODE_ERROR: Int = 114

const val EVP_R_DIFFERENT_KEY_TYPES: Int = 101

const val EVP_R_DIFFERENT_PARAMETERS: Int = 153

const val EVP_R_ERROR_LOADING_SECTION: Int = 165

const val EVP_R_ERROR_SETTING_FIPS_MODE: Int = 166

const val EVP_R_EXPECTING_AN_HMAC_KEY: Int = 174

const val EVP_R_EXPECTING_AN_RSA_KEY: Int = 127

const val EVP_R_EXPECTING_A_DH_KEY: Int = 128

const val EVP_R_EXPECTING_A_DSA_KEY: Int = 129

const val EVP_R_EXPECTING_A_EC_KEY: Int = 142

const val EVP_R_FIPS_MODE_NOT_SUPPORTED: Int = 167

const val EVP_R_ILLEGAL_SCRYPT_PARAMETERS: Int = 171

const val EVP_R_INITIALIZATION_ERROR: Int = 134

const val EVP_R_INPUT_NOT_INITIALIZED: Int = 111

const val EVP_R_INVALID_DIGEST: Int = 152

const val EVP_R_INVALID_FIPS_MODE: Int = 168

const val EVP_R_INVALID_KEY: Int = 163

const val EVP_R_INVALID_KEY_LENGTH: Int = 130

const val EVP_R_INVALID_OPERATION: Int = 148

const val EVP_R_KEYGEN_FAILURE: Int = 120

const val EVP_R_MEMORY_LIMIT_EXCEEDED: Int = 172

const val EVP_R_MESSAGE_DIGEST_IS_NULL: Int = 159

const val EVP_R_METHOD_NOT_SUPPORTED: Int = 144

const val EVP_R_MISSING_PARAMETERS: Int = 103

const val EVP_R_NO_CIPHER_SET: Int = 131

const val EVP_R_NO_DEFAULT_DIGEST: Int = 158

const val EVP_R_NO_DIGEST_SET: Int = 139

const val EVP_R_NO_KEY_SET: Int = 154

const val EVP_R_NO_OPERATION_SET: Int = 149

const val EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE: Int = 150

const val EVP_R_OPERATON_NOT_INITIALIZED: Int = 151

const val EVP_R_PARTIALLY_OVERLAPPING: Int = 162

const val EVP_R_PKEY_ASN1_METHOD_ALREADY_REGISTERED: Int = 164

const val EVP_R_PRIVATE_KEY_DECODE_ERROR: Int = 145

const val EVP_R_PRIVATE_KEY_ENCODE_ERROR: Int = 146

const val EVP_R_PUBLIC_KEY_NOT_RSA: Int = 106

const val EVP_R_UNKNOWN_CIPHER: Int = 160

const val EVP_R_UNKNOWN_DIGEST: Int = 161

const val EVP_R_UNKNOWN_OPTION: Int = 169

const val EVP_R_UNKNOWN_PBE_ALGORITHM: Int = 121

const val EVP_R_UNSUPPORTED_ALGORITHM: Int = 156

const val EVP_R_UNSUPPORTED_CIPHER: Int = 107

const val EVP_R_UNSUPPORTED_KEYLENGTH: Int = 123

const val EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION: Int = 124

const val EVP_R_UNSUPPORTED_KEY_SIZE: Int = 108

const val EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS: Int = 135

const val EVP_R_UNSUPPORTED_PRF: Int = 125

const val EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM: Int = 118

const val EVP_R_UNSUPPORTED_SALT_TYPE: Int = 126

const val EVP_R_WRAP_MODE_NOT_ALLOWED: Int = 170

const val EVP_R_WRONG_FINAL_BLOCK_LENGTH: Int = 109

const val OPENSSL_ECC_MAX_FIELD_BITS: Int = 661

const val OPENSSL_EC_EXPLICIT_CURVE: Int = 0

const val OPENSSL_EC_NAMED_CURVE: Int = 1

const val EC_PKEY_NO_PARAMETERS: Int = 1

const val EC_PKEY_NO_PUBKEY: Int = 2

const val EC_FLAG_NON_FIPS_ALLOW: Int = 1

const val EC_FLAG_FIPS_CHECKED: Int = 2

const val EC_FLAG_COFACTOR_ECDH: Int = 4096

const val EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID: Int = 4097

const val EVP_PKEY_CTRL_EC_PARAM_ENC: Int = 4098

const val EVP_PKEY_CTRL_EC_ECDH_COFACTOR: Int = 4099

const val EVP_PKEY_CTRL_EC_KDF_TYPE: Int = 4100

const val EVP_PKEY_CTRL_EC_KDF_MD: Int = 4101

const val EVP_PKEY_CTRL_GET_EC_KDF_MD: Int = 4102

const val EVP_PKEY_CTRL_EC_KDF_OUTLEN: Int = 4103

const val EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN: Int = 4104

const val EVP_PKEY_CTRL_EC_KDF_UKM: Int = 4105

const val EVP_PKEY_CTRL_GET_EC_KDF_UKM: Int = 4106

const val EVP_PKEY_ECDH_KDF_NONE: Int = 1

const val EVP_PKEY_ECDH_KDF_X9_62: Int = 2

const val EC_F_BN_TO_FELEM: Int = 224

const val EC_F_D2I_ECPARAMETERS: Int = 144

const val EC_F_D2I_ECPKPARAMETERS: Int = 145

const val EC_F_D2I_ECPRIVATEKEY: Int = 146

const val EC_F_DO_EC_KEY_PRINT: Int = 221

const val EC_F_ECDH_CMS_DECRYPT: Int = 238

const val EC_F_ECDH_CMS_SET_SHARED_INFO: Int = 239

const val EC_F_ECDH_COMPUTE_KEY: Int = 246

const val EC_F_ECDH_SIMPLE_COMPUTE_KEY: Int = 257

const val EC_F_ECDSA_DO_SIGN_EX: Int = 251

const val EC_F_ECDSA_DO_VERIFY: Int = 252

const val EC_F_ECDSA_SIGN_EX: Int = 254

const val EC_F_ECDSA_SIGN_SETUP: Int = 248

const val EC_F_ECDSA_SIG_NEW: Int = 265

const val EC_F_ECDSA_VERIFY: Int = 253

const val EC_F_ECKEY_PARAM2TYPE: Int = 223

const val EC_F_ECKEY_PARAM_DECODE: Int = 212

const val EC_F_ECKEY_PRIV_DECODE: Int = 213

const val EC_F_ECKEY_PRIV_ENCODE: Int = 214

const val EC_F_ECKEY_PUB_DECODE: Int = 215

const val EC_F_ECKEY_PUB_ENCODE: Int = 216

const val EC_F_ECKEY_TYPE2PARAM: Int = 220

const val EC_F_ECPARAMETERS_PRINT: Int = 147

const val EC_F_ECPARAMETERS_PRINT_FP: Int = 148

const val EC_F_ECPKPARAMETERS_PRINT: Int = 149

const val EC_F_ECPKPARAMETERS_PRINT_FP: Int = 150

const val EC_F_ECP_NISTZ256_GET_AFFINE: Int = 240

const val EC_F_ECP_NISTZ256_MULT_PRECOMPUTE: Int = 243

const val EC_F_ECP_NISTZ256_POINTS_MUL: Int = 241

const val EC_F_ECP_NISTZ256_PRE_COMP_NEW: Int = 244

const val EC_F_ECP_NISTZ256_WINDOWED_MUL: Int = 242

const val EC_F_ECX_KEY_OP: Int = 266

const val EC_F_ECX_PRIV_ENCODE: Int = 267

const val EC_F_ECX_PUB_ENCODE: Int = 268

const val EC_F_EC_ASN1_GROUP2CURVE: Int = 153

const val EC_F_EC_ASN1_GROUP2FIELDID: Int = 154

const val EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY: Int = 208

const val EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT: Int = 159

const val EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE: Int = 195

const val EC_F_EC_GF2M_SIMPLE_OCT2POINT: Int = 160

const val EC_F_EC_GF2M_SIMPLE_POINT2OCT: Int = 161

const val EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES: Int = 162

const val EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES: Int = 163

const val EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES: Int = 164

const val EC_F_EC_GFP_MONT_FIELD_DECODE: Int = 133

const val EC_F_EC_GFP_MONT_FIELD_ENCODE: Int = 134

const val EC_F_EC_GFP_MONT_FIELD_MUL: Int = 131

const val EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE: Int = 209

const val EC_F_EC_GFP_MONT_FIELD_SQR: Int = 132

const val EC_F_EC_GFP_MONT_GROUP_SET_CURVE: Int = 189

const val EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE: Int = 225

const val EC_F_EC_GFP_NISTP224_POINTS_MUL: Int = 228

const val EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES: Int = 226

const val EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE: Int = 230

const val EC_F_EC_GFP_NISTP256_POINTS_MUL: Int = 231

const val EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES: Int = 232

const val EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE: Int = 233

const val EC_F_EC_GFP_NISTP521_POINTS_MUL: Int = 234

const val EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES: Int = 235

const val EC_F_EC_GFP_NIST_FIELD_MUL: Int = 200

const val EC_F_EC_GFP_NIST_FIELD_SQR: Int = 201

const val EC_F_EC_GFP_NIST_GROUP_SET_CURVE: Int = 202

const val EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES: Int = 287

const val EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT: Int = 165

const val EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE: Int = 166

const val EC_F_EC_GFP_SIMPLE_MAKE_AFFINE: Int = 102

const val EC_F_EC_GFP_SIMPLE_OCT2POINT: Int = 103

const val EC_F_EC_GFP_SIMPLE_POINT2OCT: Int = 104

const val EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE: Int = 137

const val EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES: Int = 167

const val EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES: Int = 168

const val EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES: Int = 169

const val EC_F_EC_GROUP_CHECK: Int = 170

const val EC_F_EC_GROUP_CHECK_DISCRIMINANT: Int = 171

const val EC_F_EC_GROUP_COPY: Int = 106

const val EC_F_EC_GROUP_GET_CURVE_GF2M: Int = 172

const val EC_F_EC_GROUP_GET_CURVE_GFP: Int = 130

const val EC_F_EC_GROUP_GET_DEGREE: Int = 173

const val EC_F_EC_GROUP_GET_ECPARAMETERS: Int = 261

const val EC_F_EC_GROUP_GET_ECPKPARAMETERS: Int = 262

const val EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS: Int = 193

const val EC_F_EC_GROUP_GET_TRINOMIAL_BASIS: Int = 194

const val EC_F_EC_GROUP_NEW: Int = 108

const val EC_F_EC_GROUP_NEW_BY_CURVE_NAME: Int = 174

const val EC_F_EC_GROUP_NEW_FROM_DATA: Int = 175

const val EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS: Int = 263

const val EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS: Int = 264

const val EC_F_EC_GROUP_SET_CURVE_GF2M: Int = 176

const val EC_F_EC_GROUP_SET_CURVE_GFP: Int = 109

const val EC_F_EC_GROUP_SET_GENERATOR: Int = 111

const val EC_F_EC_KEY_CHECK_KEY: Int = 177

const val EC_F_EC_KEY_COPY: Int = 178

const val EC_F_EC_KEY_GENERATE_KEY: Int = 179

const val EC_F_EC_KEY_NEW: Int = 182

const val EC_F_EC_KEY_NEW_METHOD: Int = 245

const val EC_F_EC_KEY_OCT2PRIV: Int = 255

const val EC_F_EC_KEY_PRINT: Int = 180

const val EC_F_EC_KEY_PRINT_FP: Int = 181

const val EC_F_EC_KEY_PRIV2OCT: Int = 256

const val EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES: Int = 229

const val EC_F_EC_KEY_SIMPLE_CHECK_KEY: Int = 258

const val EC_F_EC_KEY_SIMPLE_OCT2PRIV: Int = 259

const val EC_F_EC_KEY_SIMPLE_PRIV2OCT: Int = 260

const val EC_F_EC_POINTS_MAKE_AFFINE: Int = 136

const val EC_F_EC_POINT_ADD: Int = 112

const val EC_F_EC_POINT_CMP: Int = 113

const val EC_F_EC_POINT_COPY: Int = 114

const val EC_F_EC_POINT_DBL: Int = 115

const val EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M: Int = 183

const val EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP: Int = 116

const val EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP: Int = 117

const val EC_F_EC_POINT_INVERT: Int = 210

const val EC_F_EC_POINT_IS_AT_INFINITY: Int = 118

const val EC_F_EC_POINT_IS_ON_CURVE: Int = 119

const val EC_F_EC_POINT_MAKE_AFFINE: Int = 120

const val EC_F_EC_POINT_NEW: Int = 121

const val EC_F_EC_POINT_OCT2POINT: Int = 122

const val EC_F_EC_POINT_POINT2OCT: Int = 123

const val EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M: Int = 185

const val EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP: Int = 124

const val EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M: Int = 186

const val EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP: Int = 125

const val EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP: Int = 126

const val EC_F_EC_POINT_SET_TO_INFINITY: Int = 127

const val EC_F_EC_PRE_COMP_NEW: Int = 196

const val EC_F_EC_WNAF_MUL: Int = 187

const val EC_F_EC_WNAF_PRECOMPUTE_MULT: Int = 188

const val EC_F_I2D_ECPARAMETERS: Int = 190

const val EC_F_I2D_ECPKPARAMETERS: Int = 191

const val EC_F_I2D_ECPRIVATEKEY: Int = 192

const val EC_F_I2O_ECPUBLICKEY: Int = 151

const val EC_F_NISTP224_PRE_COMP_NEW: Int = 227

const val EC_F_NISTP256_PRE_COMP_NEW: Int = 236

const val EC_F_NISTP521_PRE_COMP_NEW: Int = 237

const val EC_F_O2I_ECPUBLICKEY: Int = 152

const val EC_F_OLD_EC_PRIV_DECODE: Int = 222

const val EC_F_OSSL_ECDH_COMPUTE_KEY: Int = 247

const val EC_F_OSSL_ECDSA_SIGN_SIG: Int = 249

const val EC_F_OSSL_ECDSA_VERIFY_SIG: Int = 250

const val EC_F_PKEY_ECX_DERIVE: Int = 269

const val EC_F_PKEY_EC_CTRL: Int = 197

const val EC_F_PKEY_EC_CTRL_STR: Int = 198

const val EC_F_PKEY_EC_DERIVE: Int = 217

const val EC_F_PKEY_EC_KEYGEN: Int = 199

const val EC_F_PKEY_EC_PARAMGEN: Int = 219

const val EC_F_PKEY_EC_SIGN: Int = 218

const val EC_R_ASN1_ERROR: Int = 115

const val EC_R_BAD_SIGNATURE: Int = 156

const val EC_R_BIGNUM_OUT_OF_RANGE: Int = 144

const val EC_R_BUFFER_TOO_SMALL: Int = 100

const val EC_R_COORDINATES_OUT_OF_RANGE: Int = 146

const val EC_R_CURVE_DOES_NOT_SUPPORT_ECDH: Int = 160

const val EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING: Int = 159

const val EC_R_D2I_ECPKPARAMETERS_FAILURE: Int = 117

const val EC_R_DECODE_ERROR: Int = 142

const val EC_R_DISCRIMINANT_IS_ZERO: Int = 118

const val EC_R_EC_GROUP_NEW_BY_NAME_FAILURE: Int = 119

const val EC_R_FIELD_TOO_LARGE: Int = 143

const val EC_R_GF2M_NOT_SUPPORTED: Int = 147

const val EC_R_GROUP2PKPARAMETERS_FAILURE: Int = 120

const val EC_R_I2D_ECPKPARAMETERS_FAILURE: Int = 121

const val EC_R_INCOMPATIBLE_OBJECTS: Int = 101

const val EC_R_INVALID_ARGUMENT: Int = 112

const val EC_R_INVALID_COMPRESSED_POINT: Int = 110

const val EC_R_INVALID_COMPRESSION_BIT: Int = 109

const val EC_R_INVALID_CURVE: Int = 141

const val EC_R_INVALID_DIGEST: Int = 151

const val EC_R_INVALID_DIGEST_TYPE: Int = 138

const val EC_R_INVALID_ENCODING: Int = 102

const val EC_R_INVALID_FIELD: Int = 103

const val EC_R_INVALID_FORM: Int = 104

const val EC_R_INVALID_GROUP_ORDER: Int = 122

const val EC_R_INVALID_KEY: Int = 116

const val EC_R_INVALID_OUTPUT_LENGTH: Int = 161

const val EC_R_INVALID_PEER_KEY: Int = 133

const val EC_R_INVALID_PENTANOMIAL_BASIS: Int = 132

const val EC_R_INVALID_PRIVATE_KEY: Int = 123

const val EC_R_INVALID_TRINOMIAL_BASIS: Int = 137

const val EC_R_KDF_PARAMETER_ERROR: Int = 148

const val EC_R_KEYS_NOT_SET: Int = 140

const val EC_R_MISSING_PARAMETERS: Int = 124

const val EC_R_MISSING_PRIVATE_KEY: Int = 125

const val EC_R_NEED_NEW_SETUP_VALUES: Int = 157

const val EC_R_NOT_A_NIST_PRIME: Int = 135

const val EC_R_NOT_IMPLEMENTED: Int = 126

const val EC_R_NOT_INITIALIZED: Int = 111

const val EC_R_NO_PARAMETERS_SET: Int = 139

const val EC_R_NO_PRIVATE_VALUE: Int = 154

const val EC_R_OPERATION_NOT_SUPPORTED: Int = 152

const val EC_R_PASSED_NULL_PARAMETER: Int = 134

const val EC_R_PEER_KEY_ERROR: Int = 149

const val EC_R_PKPARAMETERS2GROUP_FAILURE: Int = 127

const val EC_R_POINT_ARITHMETIC_FAILURE: Int = 155

const val EC_R_POINT_AT_INFINITY: Int = 106

const val EC_R_POINT_IS_NOT_ON_CURVE: Int = 107

const val EC_R_RANDOM_NUMBER_GENERATION_FAILED: Int = 158

const val EC_R_SHARED_INFO_ERROR: Int = 150

const val EC_R_SLOT_FULL: Int = 108

const val EC_R_UNDEFINED_GENERATOR: Int = 113

const val EC_R_UNDEFINED_ORDER: Int = 128

const val EC_R_UNKNOWN_GROUP: Int = 129

const val EC_R_UNKNOWN_ORDER: Int = 114

const val EC_R_UNSUPPORTED_FIELD: Int = 131

const val EC_R_WRONG_CURVE_PARAMETERS: Int = 145

const val EC_R_WRONG_ORDER: Int = 130

const val OPENSSL_RSA_MAX_MODULUS_BITS: Int = 16384

const val OPENSSL_RSA_FIPS_MIN_MODULUS_BITS: Int = 1024

const val OPENSSL_RSA_SMALL_MODULUS_BITS: Int = 3072

const val OPENSSL_RSA_MAX_PUBEXP_BITS: Int = 64

const val RSA_3: Long = 3

const val RSA_F4: Long = 65537

const val RSA_METHOD_FLAG_NO_CHECK: Int = 1

const val RSA_FLAG_CACHE_PUBLIC: Int = 2

const val RSA_FLAG_CACHE_PRIVATE: Int = 4

const val RSA_FLAG_BLINDING: Int = 8

const val RSA_FLAG_THREAD_SAFE: Int = 16

const val RSA_FLAG_EXT_PKEY: Int = 32

const val RSA_FLAG_NO_BLINDING: Int = 128

const val RSA_FLAG_NO_CONSTTIME: Int = 0

const val RSA_FLAG_NO_EXP_CONSTTIME: Int = 0

const val EVP_PKEY_CTRL_RSA_PADDING: Int = 4097

const val EVP_PKEY_CTRL_RSA_PSS_SALTLEN: Int = 4098

const val EVP_PKEY_CTRL_RSA_KEYGEN_BITS: Int = 4099

const val EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP: Int = 4100

const val EVP_PKEY_CTRL_RSA_MGF1_MD: Int = 4101

const val EVP_PKEY_CTRL_GET_RSA_PADDING: Int = 4102

const val EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN: Int = 4103

const val EVP_PKEY_CTRL_GET_RSA_MGF1_MD: Int = 4104

const val EVP_PKEY_CTRL_RSA_OAEP_MD: Int = 4105

const val EVP_PKEY_CTRL_RSA_OAEP_LABEL: Int = 4106

const val EVP_PKEY_CTRL_GET_RSA_OAEP_MD: Int = 4107

const val EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL: Int = 4108

const val RSA_PKCS1_PADDING: Int = 1

const val RSA_SSLV23_PADDING: Int = 2

const val RSA_NO_PADDING: Int = 3

const val RSA_PKCS1_OAEP_PADDING: Int = 4

const val RSA_X931_PADDING: Int = 5

const val RSA_PKCS1_PSS_PADDING: Int = 6

const val RSA_PKCS1_PADDING_SIZE: Int = 11

const val RSA_FLAG_FIPS_METHOD: Int = 1024

const val RSA_FLAG_NON_FIPS_ALLOW: Int = 1024

const val RSA_FLAG_CHECKED: Int = 2048

const val RSA_F_CHECK_PADDING_MD: Int = 140

const val RSA_F_ENCODE_PKCS1: Int = 146

const val RSA_F_INT_RSA_VERIFY: Int = 145

const val RSA_F_OLD_RSA_PRIV_DECODE: Int = 147

const val RSA_F_PKEY_RSA_CTRL: Int = 143

const val RSA_F_PKEY_RSA_CTRL_STR: Int = 144

const val RSA_F_PKEY_RSA_SIGN: Int = 142

const val RSA_F_PKEY_RSA_VERIFY: Int = 149

const val RSA_F_PKEY_RSA_VERIFYRECOVER: Int = 141

const val RSA_F_RSA_ALGOR_TO_MD: Int = 156

const val RSA_F_RSA_BUILTIN_KEYGEN: Int = 129

const val RSA_F_RSA_CHECK_KEY: Int = 123

const val RSA_F_RSA_CHECK_KEY_EX: Int = 160

const val RSA_F_RSA_CMS_DECRYPT: Int = 159

const val RSA_F_RSA_ITEM_VERIFY: Int = 148

const val RSA_F_RSA_METH_DUP: Int = 161

const val RSA_F_RSA_METH_NEW: Int = 162

const val RSA_F_RSA_METH_SET1_NAME: Int = 163

const val RSA_F_RSA_MGF1_TO_MD: Int = 157

const val RSA_F_RSA_NEW_METHOD: Int = 106

const val RSA_F_RSA_NULL: Int = 124

const val RSA_F_RSA_NULL_PRIVATE_DECRYPT: Int = 132

const val RSA_F_RSA_NULL_PRIVATE_ENCRYPT: Int = 133

const val RSA_F_RSA_NULL_PUBLIC_DECRYPT: Int = 134

const val RSA_F_RSA_NULL_PUBLIC_ENCRYPT: Int = 135

const val RSA_F_RSA_OSSL_PRIVATE_DECRYPT: Int = 101

const val RSA_F_RSA_OSSL_PRIVATE_ENCRYPT: Int = 102

const val RSA_F_RSA_OSSL_PUBLIC_DECRYPT: Int = 103

const val RSA_F_RSA_OSSL_PUBLIC_ENCRYPT: Int = 104

const val RSA_F_RSA_PADDING_ADD_NONE: Int = 107

const val RSA_F_RSA_PADDING_ADD_PKCS1_OAEP: Int = 121

const val RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1: Int = 154

const val RSA_F_RSA_PADDING_ADD_PKCS1_PSS: Int = 125

const val RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1: Int = 152

const val RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1: Int = 108

const val RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2: Int = 109

const val RSA_F_RSA_PADDING_ADD_SSLV23: Int = 110

const val RSA_F_RSA_PADDING_ADD_X931: Int = 127

const val RSA_F_RSA_PADDING_CHECK_NONE: Int = 111

const val RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP: Int = 122

const val RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1: Int = 153

const val RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1: Int = 112

const val RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2: Int = 113

const val RSA_F_RSA_PADDING_CHECK_SSLV23: Int = 114

const val RSA_F_RSA_PADDING_CHECK_X931: Int = 128

const val RSA_F_RSA_PRINT: Int = 115

const val RSA_F_RSA_PRINT_FP: Int = 116

const val RSA_F_RSA_PRIV_ENCODE: Int = 138

const val RSA_F_RSA_PSS_TO_CTX: Int = 155

const val RSA_F_RSA_PUB_DECODE: Int = 139

const val RSA_F_RSA_SETUP_BLINDING: Int = 136

const val RSA_F_RSA_SIGN: Int = 117

const val RSA_F_RSA_SIGN_ASN1_OCTET_STRING: Int = 118

const val RSA_F_RSA_VERIFY: Int = 119

const val RSA_F_RSA_VERIFY_ASN1_OCTET_STRING: Int = 120

const val RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1: Int = 126

const val RSA_R_ALGORITHM_MISMATCH: Int = 100

const val RSA_R_BAD_E_VALUE: Int = 101

const val RSA_R_BAD_FIXED_HEADER_DECRYPT: Int = 102

const val RSA_R_BAD_PAD_BYTE_COUNT: Int = 103

const val RSA_R_BAD_SIGNATURE: Int = 104

const val RSA_R_BLOCK_TYPE_IS_NOT_01: Int = 106

const val RSA_R_BLOCK_TYPE_IS_NOT_02: Int = 107

const val RSA_R_DATA_GREATER_THAN_MOD_LEN: Int = 108

const val RSA_R_DATA_TOO_LARGE: Int = 109

const val RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE: Int = 110

const val RSA_R_DATA_TOO_LARGE_FOR_MODULUS: Int = 132

const val RSA_R_DATA_TOO_SMALL: Int = 111

const val RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE: Int = 122

const val RSA_R_DIGEST_DOES_NOT_MATCH: Int = 158

const val RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY: Int = 112

const val RSA_R_DMP1_NOT_CONGRUENT_TO_D: Int = 124

const val RSA_R_DMQ1_NOT_CONGRUENT_TO_D: Int = 125

const val RSA_R_D_E_NOT_CONGRUENT_TO_1: Int = 123

const val RSA_R_FIRST_OCTET_INVALID: Int = 133

const val RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE: Int = 144

const val RSA_R_INVALID_DIGEST: Int = 157

const val RSA_R_INVALID_DIGEST_LENGTH: Int = 143

const val RSA_R_INVALID_HEADER: Int = 137

const val RSA_R_INVALID_LABEL: Int = 160

const val RSA_R_INVALID_MESSAGE_LENGTH: Int = 131

const val RSA_R_INVALID_MGF1_MD: Int = 156

const val RSA_R_INVALID_OAEP_PARAMETERS: Int = 161

const val RSA_R_INVALID_PADDING: Int = 138

const val RSA_R_INVALID_PADDING_MODE: Int = 141

const val RSA_R_INVALID_PSS_PARAMETERS: Int = 149

const val RSA_R_INVALID_PSS_SALTLEN: Int = 146

const val RSA_R_INVALID_SALT_LENGTH: Int = 150

const val RSA_R_INVALID_TRAILER: Int = 139

const val RSA_R_INVALID_X931_DIGEST: Int = 142

const val RSA_R_IQMP_NOT_INVERSE_OF_Q: Int = 126

const val RSA_R_KEY_SIZE_TOO_SMALL: Int = 120

const val RSA_R_LAST_OCTET_INVALID: Int = 134

const val RSA_R_MODULUS_TOO_LARGE: Int = 105

const val RSA_R_NO_PUBLIC_EXPONENT: Int = 140

const val RSA_R_NULL_BEFORE_BLOCK_MISSING: Int = 113

const val RSA_R_N_DOES_NOT_EQUAL_P_Q: Int = 127

const val RSA_R_OAEP_DECODING_ERROR: Int = 121

const val RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE: Int = 148

const val RSA_R_PADDING_CHECK_FAILED: Int = 114

const val RSA_R_PKCS_DECODING_ERROR: Int = 159

const val RSA_R_P_NOT_PRIME: Int = 128

const val RSA_R_Q_NOT_PRIME: Int = 129

const val RSA_R_RSA_OPERATIONS_NOT_SUPPORTED: Int = 130

const val RSA_R_SLEN_CHECK_FAILED: Int = 136

const val RSA_R_SLEN_RECOVERY_FAILED: Int = 135

const val RSA_R_SSLV3_ROLLBACK_ATTACK: Int = 115

const val RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD: Int = 116

const val RSA_R_UNKNOWN_ALGORITHM_TYPE: Int = 117

const val RSA_R_UNKNOWN_DIGEST: Int = 166

const val RSA_R_UNKNOWN_MASK_DIGEST: Int = 151

const val RSA_R_UNKNOWN_PADDING_TYPE: Int = 118

const val RSA_R_UNSUPPORTED_ENCRYPTION_TYPE: Int = 162

const val RSA_R_UNSUPPORTED_LABEL_SOURCE: Int = 163

const val RSA_R_UNSUPPORTED_MASK_ALGORITHM: Int = 153

const val RSA_R_UNSUPPORTED_MASK_PARAMETER: Int = 154

const val RSA_R_UNSUPPORTED_SIGNATURE_TYPE: Int = 155

const val RSA_R_VALUE_MISSING: Int = 147

const val RSA_R_WRONG_SIGNATURE_LENGTH: Int = 119

const val OPENSSL_DH_MAX_MODULUS_BITS: Int = 10000

const val OPENSSL_DH_FIPS_MIN_MODULUS_BITS: Int = 1024

const val DH_FLAG_CACHE_MONT_P: Int = 1

const val DH_FLAG_NO_EXP_CONSTTIME: Int = 0

const val DH_FLAG_FIPS_METHOD: Int = 1024

const val DH_FLAG_NON_FIPS_ALLOW: Int = 1024

const val DH_GENERATOR_2: Int = 2

const val DH_GENERATOR_5: Int = 5

const val DH_CHECK_P_NOT_PRIME: Int = 1

const val DH_CHECK_P_NOT_SAFE_PRIME: Int = 2

const val DH_UNABLE_TO_CHECK_GENERATOR: Int = 4

const val DH_NOT_SUITABLE_GENERATOR: Int = 8

const val DH_CHECK_Q_NOT_PRIME: Int = 16

const val DH_CHECK_INVALID_Q_VALUE: Int = 32

const val DH_CHECK_INVALID_J_VALUE: Int = 64

const val DH_CHECK_PUBKEY_TOO_SMALL: Int = 1

const val DH_CHECK_PUBKEY_TOO_LARGE: Int = 2

const val DH_CHECK_PUBKEY_INVALID: Int = 4

const val DH_CHECK_P_NOT_STRONG_PRIME: Int = 2

const val EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN: Int = 4097

const val EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR: Int = 4098

const val EVP_PKEY_CTRL_DH_RFC5114: Int = 4099

const val EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN: Int = 4100

const val EVP_PKEY_CTRL_DH_PARAMGEN_TYPE: Int = 4101

const val EVP_PKEY_CTRL_DH_KDF_TYPE: Int = 4102

const val EVP_PKEY_CTRL_DH_KDF_MD: Int = 4103

const val EVP_PKEY_CTRL_GET_DH_KDF_MD: Int = 4104

const val EVP_PKEY_CTRL_DH_KDF_OUTLEN: Int = 4105

const val EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN: Int = 4106

const val EVP_PKEY_CTRL_DH_KDF_UKM: Int = 4107

const val EVP_PKEY_CTRL_GET_DH_KDF_UKM: Int = 4108

const val EVP_PKEY_CTRL_DH_KDF_OID: Int = 4109

const val EVP_PKEY_CTRL_GET_DH_KDF_OID: Int = 4110

const val EVP_PKEY_DH_KDF_NONE: Int = 1

const val EVP_PKEY_DH_KDF_X9_42: Int = 2

const val DH_F_COMPUTE_KEY: Int = 102

const val DH_F_DHPARAMS_PRINT_FP: Int = 101

const val DH_F_DH_BUILTIN_GENPARAMS: Int = 106

const val DH_F_DH_CMS_DECRYPT: Int = 114

const val DH_F_DH_CMS_SET_PEERKEY: Int = 115

const val DH_F_DH_CMS_SET_SHARED_INFO: Int = 116

const val DH_F_DH_METH_DUP: Int = 117

const val DH_F_DH_METH_NEW: Int = 118

const val DH_F_DH_METH_SET1_NAME: Int = 119

const val DH_F_DH_NEW_METHOD: Int = 105

const val DH_F_DH_PARAM_DECODE: Int = 107

const val DH_F_DH_PRIV_DECODE: Int = 110

const val DH_F_DH_PRIV_ENCODE: Int = 111

const val DH_F_DH_PUB_DECODE: Int = 108

const val DH_F_DH_PUB_ENCODE: Int = 109

const val DH_F_DO_DH_PRINT: Int = 100

const val DH_F_GENERATE_KEY: Int = 103

const val DH_F_PKEY_DH_DERIVE: Int = 112

const val DH_F_PKEY_DH_KEYGEN: Int = 113

const val DH_R_BAD_GENERATOR: Int = 101

const val DH_R_BN_DECODE_ERROR: Int = 109

const val DH_R_BN_ERROR: Int = 106

const val DH_R_DECODE_ERROR: Int = 104

const val DH_R_INVALID_PUBKEY: Int = 102

const val DH_R_KDF_PARAMETER_ERROR: Int = 112

const val DH_R_KEYS_NOT_SET: Int = 108

const val DH_R_MODULUS_TOO_LARGE: Int = 103

const val DH_R_NO_PARAMETERS_SET: Int = 107

const val DH_R_NO_PRIVATE_VALUE: Int = 100

const val DH_R_PARAMETER_ENCODING_ERROR: Int = 105

const val DH_R_PEER_KEY_ERROR: Int = 111

const val DH_R_SHARED_INFO_ERROR: Int = 113

const val OPENSSL_DSA_MAX_MODULUS_BITS: Int = 10000

const val OPENSSL_DSA_FIPS_MIN_MODULUS_BITS: Int = 1024

const val DSA_FLAG_CACHE_MONT_P: Int = 1

const val DSA_FLAG_NO_EXP_CONSTTIME: Int = 0

const val DSA_FLAG_FIPS_METHOD: Int = 1024

const val DSA_FLAG_NON_FIPS_ALLOW: Int = 1024

const val DSA_FLAG_FIPS_CHECKED: Int = 2048

const val DSS_prime_checks: Int = 50

const val EVP_PKEY_CTRL_DSA_PARAMGEN_BITS: Int = 4097

const val EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS: Int = 4098

const val EVP_PKEY_CTRL_DSA_PARAMGEN_MD: Int = 4099

const val DSA_F_DSAPARAMS_PRINT: Int = 100

const val DSA_F_DSAPARAMS_PRINT_FP: Int = 101

const val DSA_F_DSA_BUILTIN_PARAMGEN: Int = 125

const val DSA_F_DSA_BUILTIN_PARAMGEN2: Int = 126

const val DSA_F_DSA_DO_SIGN: Int = 112

const val DSA_F_DSA_DO_VERIFY: Int = 113

const val DSA_F_DSA_METH_DUP: Int = 127

const val DSA_F_DSA_METH_NEW: Int = 128

const val DSA_F_DSA_METH_SET1_NAME: Int = 129

const val DSA_F_DSA_NEW_METHOD: Int = 103

const val DSA_F_DSA_PARAM_DECODE: Int = 119

const val DSA_F_DSA_PRINT_FP: Int = 105

const val DSA_F_DSA_PRIV_DECODE: Int = 115

const val DSA_F_DSA_PRIV_ENCODE: Int = 116

const val DSA_F_DSA_PUB_DECODE: Int = 117

const val DSA_F_DSA_PUB_ENCODE: Int = 118

const val DSA_F_DSA_SIGN: Int = 106

const val DSA_F_DSA_SIGN_SETUP: Int = 107

const val DSA_F_DSA_SIG_NEW: Int = 102

const val DSA_F_OLD_DSA_PRIV_DECODE: Int = 122

const val DSA_F_PKEY_DSA_CTRL: Int = 120

const val DSA_F_PKEY_DSA_KEYGEN: Int = 121

const val DSA_R_BAD_Q_VALUE: Int = 102

const val DSA_R_BN_DECODE_ERROR: Int = 108

const val DSA_R_BN_ERROR: Int = 109

const val DSA_R_DECODE_ERROR: Int = 104

const val DSA_R_INVALID_DIGEST_TYPE: Int = 106

const val DSA_R_INVALID_PARAMETERS: Int = 112

const val DSA_R_MISSING_PARAMETERS: Int = 101

const val DSA_R_MODULUS_TOO_LARGE: Int = 103

const val DSA_R_NO_PARAMETERS_SET: Int = 107

const val DSA_R_PARAMETER_ENCODING_ERROR: Int = 105

const val DSA_R_Q_NOT_PRIME: Int = 113

const val DSA_R_SEED_LEN_SMALL: Int = 110

const val SHA_LBLOCK: Int = 16

const val SHA_CBLOCK: Int = 64

const val SHA_LAST_BLOCK: Int = 56

const val SHA_DIGEST_LENGTH: Int = 20

const val SHA256_CBLOCK: Int = 64

const val SHA224_DIGEST_LENGTH: Int = 28

const val SHA256_DIGEST_LENGTH: Int = 32

const val SHA384_DIGEST_LENGTH: Int = 48

const val SHA512_DIGEST_LENGTH: Int = 64

const val SHA512_CBLOCK: Int = 128

const val X509_FILETYPE_PEM: Int = 1

const val X509_FILETYPE_ASN1: Int = 2

const val X509_FILETYPE_DEFAULT: Int = 3

const val X509v3_KU_DIGITAL_SIGNATURE: Int = 128

const val X509v3_KU_NON_REPUDIATION: Int = 64

const val X509v3_KU_KEY_ENCIPHERMENT: Int = 32

const val X509v3_KU_DATA_ENCIPHERMENT: Int = 16

const val X509v3_KU_KEY_AGREEMENT: Int = 8

const val X509v3_KU_KEY_CERT_SIGN: Int = 4

const val X509v3_KU_CRL_SIGN: Int = 2

const val X509v3_KU_ENCIPHER_ONLY: Int = 1

const val X509v3_KU_DECIPHER_ONLY: Int = 32768

const val X509v3_KU_UNDEF: Int = 65535

const val X509_EX_V_NETSCAPE_HACK: Int = 32768

const val X509_EX_V_INIT: Int = 1

const val X509_TRUST_DEFAULT: Int = 0

const val X509_TRUST_COMPAT: Int = 1

const val X509_TRUST_SSL_CLIENT: Int = 2

const val X509_TRUST_SSL_SERVER: Int = 3

const val X509_TRUST_EMAIL: Int = 4

const val X509_TRUST_OBJECT_SIGN: Int = 5

const val X509_TRUST_OCSP_SIGN: Int = 6

const val X509_TRUST_OCSP_REQUEST: Int = 7

const val X509_TRUST_TSA: Int = 8

const val X509_TRUST_MIN: Int = 1

const val X509_TRUST_MAX: Int = 8

const val X509_TRUST_DYNAMIC: UInt = 1u

const val X509_TRUST_DYNAMIC_NAME: UInt = 2u

const val X509_TRUST_NO_SS_COMPAT: UInt = 4u

const val X509_TRUST_DO_SS_COMPAT: UInt = 8u

const val X509_TRUST_OK_ANY_EKU: UInt = 16u

const val X509_TRUST_TRUSTED: Int = 1

const val X509_TRUST_REJECTED: Int = 2

const val X509_TRUST_UNTRUSTED: Int = 3

const val X509_FLAG_COMPAT: Int = 0

const val X509_FLAG_NO_HEADER: Long = 1

const val X509_FLAG_NO_VERSION: Long = 2

const val X509_FLAG_NO_SERIAL: Long = 4

const val X509_FLAG_NO_SIGNAME: Long = 8

const val X509_FLAG_NO_ISSUER: Long = 16

const val X509_FLAG_NO_VALIDITY: Long = 32

const val X509_FLAG_NO_SUBJECT: Long = 64

const val X509_FLAG_NO_PUBKEY: Long = 128

const val X509_FLAG_NO_EXTENSIONS: Long = 256

const val X509_FLAG_NO_SIGDUMP: Long = 512

const val X509_FLAG_NO_AUX: Long = 1024

const val X509_FLAG_NO_ATTRIBUTES: Long = 2048

const val X509_FLAG_NO_IDS: Long = 4096

const val XN_FLAG_SEP_MASK: Int = 983040

const val XN_FLAG_COMPAT: Int = 0

const val XN_FLAG_SEP_COMMA_PLUS: Int = 65536

const val XN_FLAG_SEP_CPLUS_SPC: Int = 131072

const val XN_FLAG_SEP_SPLUS_SPC: Int = 196608

const val XN_FLAG_SEP_MULTILINE: Int = 262144

const val XN_FLAG_DN_REV: Int = 1048576

const val XN_FLAG_FN_MASK: Int = 6291456

const val XN_FLAG_FN_SN: Int = 0

const val XN_FLAG_FN_LN: Int = 2097152

const val XN_FLAG_FN_OID: Int = 4194304

const val XN_FLAG_FN_NONE: Int = 6291456

const val XN_FLAG_SPC_EQ: Int = 8388608

const val XN_FLAG_DUMP_UNKNOWN_FIELDS: Int = 16777216

const val XN_FLAG_FN_ALIGN: Int = 33554432

const val XN_FLAG_RFC2253: Int = 17892119

const val XN_FLAG_ONELINE: Int = 8520479

const val XN_FLAG_MULTILINE: Int = 44302342

const val LH_LOAD_MULT: Int = 256

const val X509_LU_RETRY: Int = -1

const val X509_LU_FAIL: Int = 0

const val X509_L_FILE_LOAD: Int = 1

const val X509_L_ADD_DIR: Int = 2

const val X509_V_OK: Int = 0

const val X509_V_ERR_UNSPECIFIED: Int = 1

const val X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: Int = 2

const val X509_V_ERR_UNABLE_TO_GET_CRL: Int = 3

const val X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: Int = 4

const val X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: Int = 5

const val X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: Int = 6

const val X509_V_ERR_CERT_SIGNATURE_FAILURE: Int = 7

const val X509_V_ERR_CRL_SIGNATURE_FAILURE: Int = 8

const val X509_V_ERR_CERT_NOT_YET_VALID: Int = 9

const val X509_V_ERR_CERT_HAS_EXPIRED: Int = 10

const val X509_V_ERR_CRL_NOT_YET_VALID: Int = 11

const val X509_V_ERR_CRL_HAS_EXPIRED: Int = 12

const val X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: Int = 13

const val X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: Int = 14

const val X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: Int = 15

const val X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: Int = 16

const val X509_V_ERR_OUT_OF_MEM: Int = 17

const val X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: Int = 18

const val X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: Int = 19

const val X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: Int = 20

const val X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: Int = 21

const val X509_V_ERR_CERT_CHAIN_TOO_LONG: Int = 22

const val X509_V_ERR_CERT_REVOKED: Int = 23

const val X509_V_ERR_INVALID_CA: Int = 24

const val X509_V_ERR_PATH_LENGTH_EXCEEDED: Int = 25

const val X509_V_ERR_INVALID_PURPOSE: Int = 26

const val X509_V_ERR_CERT_UNTRUSTED: Int = 27

const val X509_V_ERR_CERT_REJECTED: Int = 28

const val X509_V_ERR_SUBJECT_ISSUER_MISMATCH: Int = 29

const val X509_V_ERR_AKID_SKID_MISMATCH: Int = 30

const val X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: Int = 31

const val X509_V_ERR_KEYUSAGE_NO_CERTSIGN: Int = 32

const val X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER: Int = 33

const val X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION: Int = 34

const val X509_V_ERR_KEYUSAGE_NO_CRL_SIGN: Int = 35

const val X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION: Int = 36

const val X509_V_ERR_INVALID_NON_CA: Int = 37

const val X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED: Int = 38

const val X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE: Int = 39

const val X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED: Int = 40

const val X509_V_ERR_INVALID_EXTENSION: Int = 41

const val X509_V_ERR_INVALID_POLICY_EXTENSION: Int = 42

const val X509_V_ERR_NO_EXPLICIT_POLICY: Int = 43

const val X509_V_ERR_DIFFERENT_CRL_SCOPE: Int = 44

const val X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE: Int = 45

const val X509_V_ERR_UNNESTED_RESOURCE: Int = 46

const val X509_V_ERR_PERMITTED_VIOLATION: Int = 47

const val X509_V_ERR_EXCLUDED_VIOLATION: Int = 48

const val X509_V_ERR_SUBTREE_MINMAX: Int = 49

const val X509_V_ERR_APPLICATION_VERIFICATION: Int = 50

const val X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE: Int = 51

const val X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX: Int = 52

const val X509_V_ERR_UNSUPPORTED_NAME_SYNTAX: Int = 53

const val X509_V_ERR_CRL_PATH_VALIDATION_ERROR: Int = 54

const val X509_V_ERR_PATH_LOOP: Int = 55

const val X509_V_ERR_SUITE_B_INVALID_VERSION: Int = 56

const val X509_V_ERR_SUITE_B_INVALID_ALGORITHM: Int = 57

const val X509_V_ERR_SUITE_B_INVALID_CURVE: Int = 58

const val X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM: Int = 59

const val X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED: Int = 60

const val X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256: Int = 61

const val X509_V_ERR_HOSTNAME_MISMATCH: Int = 62

const val X509_V_ERR_EMAIL_MISMATCH: Int = 63

const val X509_V_ERR_IP_ADDRESS_MISMATCH: Int = 64

const val X509_V_ERR_DANE_NO_MATCH: Int = 65

const val X509_V_ERR_EE_KEY_TOO_SMALL: Int = 66

const val X509_V_ERR_CA_KEY_TOO_SMALL: Int = 67

const val X509_V_ERR_CA_MD_TOO_WEAK: Int = 68

const val X509_V_ERR_INVALID_CALL: Int = 69

const val X509_V_ERR_STORE_LOOKUP: Int = 70

const val X509_V_ERR_NO_VALID_SCTS: Int = 71

const val X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION: Int = 72

const val X509_V_FLAG_CB_ISSUER_CHECK: Int = 0

const val X509_V_FLAG_USE_CHECK_TIME: Int = 2

const val X509_V_FLAG_CRL_CHECK: Int = 4

const val X509_V_FLAG_CRL_CHECK_ALL: Int = 8

const val X509_V_FLAG_IGNORE_CRITICAL: Int = 16

const val X509_V_FLAG_X509_STRICT: Int = 32

const val X509_V_FLAG_ALLOW_PROXY_CERTS: Int = 64

const val X509_V_FLAG_POLICY_CHECK: Int = 128

const val X509_V_FLAG_EXPLICIT_POLICY: Int = 256

const val X509_V_FLAG_INHIBIT_ANY: Int = 512

const val X509_V_FLAG_INHIBIT_MAP: Int = 1024

const val X509_V_FLAG_NOTIFY_POLICY: Int = 2048

const val X509_V_FLAG_EXTENDED_CRL_SUPPORT: Int = 4096

const val X509_V_FLAG_USE_DELTAS: Int = 8192

const val X509_V_FLAG_CHECK_SS_SIGNATURE: Int = 16384

const val X509_V_FLAG_TRUSTED_FIRST: Int = 32768

const val X509_V_FLAG_SUITEB_128_LOS_ONLY: Int = 65536

const val X509_V_FLAG_SUITEB_192_LOS: Int = 131072

const val X509_V_FLAG_SUITEB_128_LOS: Int = 196608

const val X509_V_FLAG_PARTIAL_CHAIN: Int = 524288

const val X509_V_FLAG_NO_ALT_CHAINS: Int = 1048576

const val X509_V_FLAG_NO_CHECK_TIME: Int = 2097152

const val X509_VP_FLAG_DEFAULT: Int = 1

const val X509_VP_FLAG_OVERWRITE: Int = 2

const val X509_VP_FLAG_RESET_FLAGS: Int = 4

const val X509_VP_FLAG_LOCKED: Int = 8

const val X509_VP_FLAG_ONCE: Int = 16

const val X509_V_FLAG_POLICY_MASK: Int = 1920

const val DANE_FLAG_NO_DANE_EE_NAMECHECKS: Long = 1

const val X509_PCY_TREE_FAILURE: Int = -2

const val X509_PCY_TREE_INVALID: Int = -1

const val X509_PCY_TREE_INTERNAL: Int = 0

const val X509_PCY_TREE_VALID: Int = 1

const val X509_PCY_TREE_EMPTY: Int = 2

const val X509_PCY_TREE_EXPLICIT: Int = 4

const val PKCS7_S_HEADER: Int = 0

const val PKCS7_S_BODY: Int = 1

const val PKCS7_S_TAIL: Int = 2

const val PKCS7_OP_SET_DETACHED_SIGNATURE: Int = 1

const val PKCS7_OP_GET_DETACHED_SIGNATURE: Int = 2

const val PKCS7_TEXT: Int = 1

const val PKCS7_NOCERTS: Int = 2

const val PKCS7_NOSIGS: Int = 4

const val PKCS7_NOCHAIN: Int = 8

const val PKCS7_NOINTERN: Int = 16

const val PKCS7_NOVERIFY: Int = 32

const val PKCS7_DETACHED: Int = 64

const val PKCS7_BINARY: Int = 128

const val PKCS7_NOATTR: Int = 256

const val PKCS7_NOSMIMECAP: Int = 512

const val PKCS7_NOOLDMIMETYPE: Int = 1024

const val PKCS7_CRLFEOL: Int = 2048

const val PKCS7_STREAM: Int = 4096

const val PKCS7_NOCRL: Int = 8192

const val PKCS7_PARTIAL: Int = 16384

const val PKCS7_REUSE_DIGEST: Int = 32768

const val PKCS7_NO_DUAL_CONTENT: Int = 65536

const val SMIME_TEXT: Int = 1

const val SMIME_NOCERTS: Int = 2

const val SMIME_NOSIGS: Int = 4

const val SMIME_NOCHAIN: Int = 8

const val SMIME_NOINTERN: Int = 16

const val SMIME_NOVERIFY: Int = 32

const val SMIME_DETACHED: Int = 64

const val SMIME_BINARY: Int = 128

const val SMIME_NOATTR: Int = 256

const val SMIME_ASCIICRLF: Int = 524288

const val PKCS7_F_DO_PKCS7_SIGNED_ATTRIB: Int = 136

const val PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME: Int = 135

const val PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP: Int = 118

const val PKCS7_F_PKCS7_ADD_CERTIFICATE: Int = 100

const val PKCS7_F_PKCS7_ADD_CRL: Int = 101

const val PKCS7_F_PKCS7_ADD_RECIPIENT_INFO: Int = 102

const val PKCS7_F_PKCS7_ADD_SIGNATURE: Int = 131

const val PKCS7_F_PKCS7_ADD_SIGNER: Int = 103

const val PKCS7_F_PKCS7_BIO_ADD_DIGEST: Int = 125

const val PKCS7_F_PKCS7_COPY_EXISTING_DIGEST: Int = 138

const val PKCS7_F_PKCS7_CTRL: Int = 104

const val PKCS7_F_PKCS7_DATADECODE: Int = 112

const val PKCS7_F_PKCS7_DATAFINAL: Int = 128

const val PKCS7_F_PKCS7_DATAINIT: Int = 105

const val PKCS7_F_PKCS7_DATAVERIFY: Int = 107

const val PKCS7_F_PKCS7_DECRYPT: Int = 114

const val PKCS7_F_PKCS7_DECRYPT_RINFO: Int = 133

const val PKCS7_F_PKCS7_ENCODE_RINFO: Int = 132

const val PKCS7_F_PKCS7_ENCRYPT: Int = 115

const val PKCS7_F_PKCS7_FINAL: Int = 134

const val PKCS7_F_PKCS7_FIND_DIGEST: Int = 127

const val PKCS7_F_PKCS7_GET0_SIGNERS: Int = 124

const val PKCS7_F_PKCS7_RECIP_INFO_SET: Int = 130

const val PKCS7_F_PKCS7_SET_CIPHER: Int = 108

const val PKCS7_F_PKCS7_SET_CONTENT: Int = 109

const val PKCS7_F_PKCS7_SET_DIGEST: Int = 126

const val PKCS7_F_PKCS7_SET_TYPE: Int = 110

const val PKCS7_F_PKCS7_SIGN: Int = 116

const val PKCS7_F_PKCS7_SIGNATUREVERIFY: Int = 113

const val PKCS7_F_PKCS7_SIGNER_INFO_SET: Int = 129

const val PKCS7_F_PKCS7_SIGNER_INFO_SIGN: Int = 139

const val PKCS7_F_PKCS7_SIGN_ADD_SIGNER: Int = 137

const val PKCS7_F_PKCS7_SIMPLE_SMIMECAP: Int = 119

const val PKCS7_F_PKCS7_VERIFY: Int = 117

const val PKCS7_R_CERTIFICATE_VERIFY_ERROR: Int = 117

const val PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER: Int = 144

const val PKCS7_R_CIPHER_NOT_INITIALIZED: Int = 116

const val PKCS7_R_CONTENT_AND_DATA_PRESENT: Int = 118

const val PKCS7_R_CTRL_ERROR: Int = 152

const val PKCS7_R_DECRYPT_ERROR: Int = 119

const val PKCS7_R_DIGEST_FAILURE: Int = 101

const val PKCS7_R_ENCRYPTION_CTRL_FAILURE: Int = 149

const val PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE: Int = 150

const val PKCS7_R_ERROR_ADDING_RECIPIENT: Int = 120

const val PKCS7_R_ERROR_SETTING_CIPHER: Int = 121

const val PKCS7_R_INVALID_NULL_POINTER: Int = 143

const val PKCS7_R_INVALID_SIGNED_DATA_TYPE: Int = 155

const val PKCS7_R_NO_CONTENT: Int = 122

const val PKCS7_R_NO_DEFAULT_DIGEST: Int = 151

const val PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND: Int = 154

const val PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE: Int = 115

const val PKCS7_R_NO_SIGNATURES_ON_DATA: Int = 123

const val PKCS7_R_NO_SIGNERS: Int = 142

const val PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE: Int = 104

const val PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR: Int = 124

const val PKCS7_R_PKCS7_ADD_SIGNER_ERROR: Int = 153

const val PKCS7_R_PKCS7_DATASIGN: Int = 145

const val PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE: Int = 127

const val PKCS7_R_SIGNATURE_FAILURE: Int = 105

const val PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND: Int = 128

const val PKCS7_R_SIGNING_CTRL_FAILURE: Int = 147

const val PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE: Int = 148

const val PKCS7_R_SMIME_TEXT_ERROR: Int = 129

const val PKCS7_R_UNABLE_TO_FIND_CERTIFICATE: Int = 106

const val PKCS7_R_UNABLE_TO_FIND_MEM_BIO: Int = 107

const val PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST: Int = 108

const val PKCS7_R_UNKNOWN_DIGEST_TYPE: Int = 109

const val PKCS7_R_UNKNOWN_OPERATION: Int = 110

const val PKCS7_R_UNSUPPORTED_CIPHER_TYPE: Int = 111

const val PKCS7_R_UNSUPPORTED_CONTENT_TYPE: Int = 112

const val PKCS7_R_WRONG_CONTENT_TYPE: Int = 113

const val PKCS7_R_WRONG_PKCS7_TYPE: Int = 114

const val X509_EXT_PACK_UNKNOWN: Int = 1

const val X509_EXT_PACK_STRING: Int = 2

const val X509_F_ADD_CERT_DIR: Int = 100

const val X509_F_BUILD_CHAIN: Int = 106

const val X509_F_BY_FILE_CTRL: Int = 101

const val X509_F_CHECK_NAME_CONSTRAINTS: Int = 149

const val X509_F_CHECK_POLICY: Int = 145

const val X509_F_DANE_I2D: Int = 107

const val X509_F_DIR_CTRL: Int = 102

const val X509_F_GET_CERT_BY_SUBJECT: Int = 103

const val X509_F_NETSCAPE_SPKI_B64_DECODE: Int = 129

const val X509_F_NETSCAPE_SPKI_B64_ENCODE: Int = 130

const val X509_F_X509AT_ADD1_ATTR: Int = 135

const val X509_F_X509V3_ADD_EXT: Int = 104

const val X509_F_X509_ATTRIBUTE_CREATE_BY_NID: Int = 136

const val X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ: Int = 137

const val X509_F_X509_ATTRIBUTE_CREATE_BY_TXT: Int = 140

const val X509_F_X509_ATTRIBUTE_GET0_DATA: Int = 139

const val X509_F_X509_ATTRIBUTE_SET1_DATA: Int = 138

const val X509_F_X509_CHECK_PRIVATE_KEY: Int = 128

const val X509_F_X509_CRL_DIFF: Int = 105

const val X509_F_X509_CRL_PRINT_FP: Int = 147

const val X509_F_X509_EXTENSION_CREATE_BY_NID: Int = 108

const val X509_F_X509_EXTENSION_CREATE_BY_OBJ: Int = 109

const val X509_F_X509_GET_PUBKEY_PARAMETERS: Int = 110

const val X509_F_X509_LOAD_CERT_CRL_FILE: Int = 132

const val X509_F_X509_LOAD_CERT_FILE: Int = 111

const val X509_F_X509_LOAD_CRL_FILE: Int = 112

const val X509_F_X509_NAME_ADD_ENTRY: Int = 113

const val X509_F_X509_NAME_ENTRY_CREATE_BY_NID: Int = 114

const val X509_F_X509_NAME_ENTRY_CREATE_BY_TXT: Int = 131

const val X509_F_X509_NAME_ENTRY_SET_OBJECT: Int = 115

const val X509_F_X509_NAME_ONELINE: Int = 116

const val X509_F_X509_NAME_PRINT: Int = 117

const val X509_F_X509_OBJECT_NEW: Int = 150

const val X509_F_X509_PRINT_EX_FP: Int = 118

const val X509_F_X509_PUBKEY_DECODE: Int = 148

const val X509_F_X509_PUBKEY_GET0: Int = 119

const val X509_F_X509_PUBKEY_SET: Int = 120

const val X509_F_X509_REQ_CHECK_PRIVATE_KEY: Int = 144

const val X509_F_X509_REQ_PRINT_EX: Int = 121

const val X509_F_X509_REQ_PRINT_FP: Int = 122

const val X509_F_X509_REQ_TO_X509: Int = 123

const val X509_F_X509_STORE_ADD_CERT: Int = 124

const val X509_F_X509_STORE_ADD_CRL: Int = 125

const val X509_F_X509_STORE_CTX_GET1_ISSUER: Int = 146

const val X509_F_X509_STORE_CTX_INIT: Int = 143

const val X509_F_X509_STORE_CTX_NEW: Int = 142

const val X509_F_X509_STORE_CTX_PURPOSE_INHERIT: Int = 134

const val X509_F_X509_TO_X509_REQ: Int = 126

const val X509_F_X509_TRUST_ADD: Int = 133

const val X509_F_X509_TRUST_SET: Int = 141

const val X509_F_X509_VERIFY_CERT: Int = 127

const val X509_R_AKID_MISMATCH: Int = 110

const val X509_R_BAD_SELECTOR: Int = 133

const val X509_R_BAD_X509_FILETYPE: Int = 100

const val X509_R_BASE64_DECODE_ERROR: Int = 118

const val X509_R_CANT_CHECK_DH_KEY: Int = 114

const val X509_R_CERT_ALREADY_IN_HASH_TABLE: Int = 101

const val X509_R_CRL_ALREADY_DELTA: Int = 127

const val X509_R_CRL_VERIFY_FAILURE: Int = 131

const val X509_R_IDP_MISMATCH: Int = 128

const val X509_R_INVALID_DIRECTORY: Int = 113

const val X509_R_INVALID_FIELD_NAME: Int = 119

const val X509_R_INVALID_TRUST: Int = 123

const val X509_R_ISSUER_MISMATCH: Int = 129

const val X509_R_KEY_TYPE_MISMATCH: Int = 115

const val X509_R_KEY_VALUES_MISMATCH: Int = 116

const val X509_R_LOADING_CERT_DIR: Int = 103

const val X509_R_LOADING_DEFAULTS: Int = 104

const val X509_R_METHOD_NOT_SUPPORTED: Int = 124

const val X509_R_NAME_TOO_LONG: Int = 134

const val X509_R_NEWER_CRL_NOT_NEWER: Int = 132

const val X509_R_NO_CERT_SET_FOR_US_TO_VERIFY: Int = 105

const val X509_R_NO_CRL_NUMBER: Int = 130

const val X509_R_PUBLIC_KEY_DECODE_ERROR: Int = 125

const val X509_R_PUBLIC_KEY_ENCODE_ERROR: Int = 126

const val X509_R_SHOULD_RETRY: Int = 106

const val X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN: Int = 107

const val X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY: Int = 108

const val X509_R_UNKNOWN_KEY_TYPE: Int = 117

const val X509_R_UNKNOWN_NID: Int = 109

const val X509_R_UNKNOWN_PURPOSE_ID: Int = 121

const val X509_R_UNKNOWN_TRUST_ID: Int = 120

const val X509_R_UNSUPPORTED_ALGORITHM: Int = 111

const val X509_R_WRONG_LOOKUP_TYPE: Int = 112

const val X509_R_WRONG_TYPE: Int = 122

const val PEM_BUFSIZE: Int = 1024

val PEM_STRING_X509_OLD: String get() = "X509 CERTIFICATE"

val PEM_STRING_X509: String get() = "CERTIFICATE"

val PEM_STRING_X509_TRUSTED: String get() = "TRUSTED CERTIFICATE"

val PEM_STRING_X509_REQ_OLD: String get() = "NEW CERTIFICATE REQUEST"

val PEM_STRING_X509_REQ: String get() = "CERTIFICATE REQUEST"

val PEM_STRING_X509_CRL: String get() = "X509 CRL"

val PEM_STRING_EVP_PKEY: String get() = "ANY PRIVATE KEY"

val PEM_STRING_PUBLIC: String get() = "PUBLIC KEY"

val PEM_STRING_RSA: String get() = "RSA PRIVATE KEY"

val PEM_STRING_RSA_PUBLIC: String get() = "RSA PUBLIC KEY"

val PEM_STRING_DSA: String get() = "DSA PRIVATE KEY"

val PEM_STRING_DSA_PUBLIC: String get() = "DSA PUBLIC KEY"

val PEM_STRING_PKCS7: String get() = "PKCS7"

val PEM_STRING_PKCS7_SIGNED: String get() = "PKCS #7 SIGNED DATA"

val PEM_STRING_PKCS8: String get() = "ENCRYPTED PRIVATE KEY"

val PEM_STRING_PKCS8INF: String get() = "PRIVATE KEY"

val PEM_STRING_DHPARAMS: String get() = "DH PARAMETERS"

val PEM_STRING_DHXPARAMS: String get() = "X9.42 DH PARAMETERS"

val PEM_STRING_SSL_SESSION: String get() = "SSL SESSION PARAMETERS"

val PEM_STRING_DSAPARAMS: String get() = "DSA PARAMETERS"

val PEM_STRING_ECDSA_PUBLIC: String get() = "ECDSA PUBLIC KEY"

val PEM_STRING_ECPARAMETERS: String get() = "EC PARAMETERS"

val PEM_STRING_ECPRIVATEKEY: String get() = "EC PRIVATE KEY"

val PEM_STRING_PARAMETERS: String get() = "PARAMETERS"

val PEM_STRING_CMS: String get() = "CMS"

const val PEM_TYPE_ENCRYPTED: Int = 10

const val PEM_TYPE_MIC_ONLY: Int = 20

const val PEM_TYPE_MIC_CLEAR: Int = 30

const val PEM_TYPE_CLEAR: Int = 40

const val PEM_F_B2I_DSS: Int = 127

const val PEM_F_B2I_PVK_BIO: Int = 128

const val PEM_F_B2I_RSA: Int = 129

const val PEM_F_CHECK_BITLEN_DSA: Int = 130

const val PEM_F_CHECK_BITLEN_RSA: Int = 131

const val PEM_F_D2I_PKCS8PRIVATEKEY_BIO: Int = 120

const val PEM_F_D2I_PKCS8PRIVATEKEY_FP: Int = 121

const val PEM_F_DO_B2I: Int = 132

const val PEM_F_DO_B2I_BIO: Int = 133

const val PEM_F_DO_BLOB_HEADER: Int = 134

const val PEM_F_DO_PK8PKEY: Int = 126

const val PEM_F_DO_PK8PKEY_FP: Int = 125

const val PEM_F_DO_PVK_BODY: Int = 135

const val PEM_F_DO_PVK_HEADER: Int = 136

const val PEM_F_I2B_PVK: Int = 137

const val PEM_F_I2B_PVK_BIO: Int = 138

const val PEM_F_LOAD_IV: Int = 101

const val PEM_F_PEM_ASN1_READ: Int = 102

const val PEM_F_PEM_ASN1_READ_BIO: Int = 103

const val PEM_F_PEM_ASN1_WRITE: Int = 104

const val PEM_F_PEM_ASN1_WRITE_BIO: Int = 105

const val PEM_F_PEM_DEF_CALLBACK: Int = 100

const val PEM_F_PEM_DO_HEADER: Int = 106

const val PEM_F_PEM_GET_EVP_CIPHER_INFO: Int = 107

const val PEM_F_PEM_READ: Int = 108

const val PEM_F_PEM_READ_BIO: Int = 109

const val PEM_F_PEM_READ_BIO_DHPARAMS: Int = 141

const val PEM_F_PEM_READ_BIO_PARAMETERS: Int = 140

const val PEM_F_PEM_READ_BIO_PRIVATEKEY: Int = 123

const val PEM_F_PEM_READ_DHPARAMS: Int = 142

const val PEM_F_PEM_READ_PRIVATEKEY: Int = 124

const val PEM_F_PEM_SIGNFINAL: Int = 112

const val PEM_F_PEM_WRITE: Int = 113

const val PEM_F_PEM_WRITE_BIO: Int = 114

const val PEM_F_PEM_WRITE_PRIVATEKEY: Int = 139

const val PEM_F_PEM_X509_INFO_READ: Int = 115

const val PEM_F_PEM_X509_INFO_READ_BIO: Int = 116

const val PEM_F_PEM_X509_INFO_WRITE_BIO: Int = 117

const val PEM_R_BAD_BASE64_DECODE: Int = 100

const val PEM_R_BAD_DECRYPT: Int = 101

const val PEM_R_BAD_END_LINE: Int = 102

const val PEM_R_BAD_IV_CHARS: Int = 103

const val PEM_R_BAD_MAGIC_NUMBER: Int = 116

const val PEM_R_BAD_PASSWORD_READ: Int = 104

const val PEM_R_BAD_VERSION_NUMBER: Int = 117

const val PEM_R_BIO_WRITE_FAILURE: Int = 118

const val PEM_R_CIPHER_IS_NULL: Int = 127

const val PEM_R_ERROR_CONVERTING_PRIVATE_KEY: Int = 115

const val PEM_R_EXPECTING_PRIVATE_KEY_BLOB: Int = 119

const val PEM_R_EXPECTING_PUBLIC_KEY_BLOB: Int = 120

const val PEM_R_HEADER_TOO_LONG: Int = 128

const val PEM_R_INCONSISTENT_HEADER: Int = 121

const val PEM_R_KEYBLOB_HEADER_PARSE_ERROR: Int = 122

const val PEM_R_KEYBLOB_TOO_SHORT: Int = 123

const val PEM_R_MISSING_DEK_IV: Int = 129

const val PEM_R_NOT_DEK_INFO: Int = 105

const val PEM_R_NOT_ENCRYPTED: Int = 106

const val PEM_R_NOT_PROC_TYPE: Int = 107

const val PEM_R_NO_START_LINE: Int = 108

const val PEM_R_PROBLEMS_GETTING_PASSWORD: Int = 109

const val PEM_R_PVK_DATA_TOO_SHORT: Int = 124

const val PEM_R_PVK_TOO_SHORT: Int = 125

const val PEM_R_READ_KEY: Int = 111

const val PEM_R_SHORT_HEADER: Int = 112

const val PEM_R_UNEXPECTED_DEK_IV: Int = 130

const val PEM_R_UNSUPPORTED_CIPHER: Int = 113

const val PEM_R_UNSUPPORTED_ENCRYPTION: Int = 114

const val PEM_R_UNSUPPORTED_KEY_COMPONENTS: Int = 126

const val HMAC_MAX_MD_CBLOCK: Int = 128

const val OSSL_BAD_ASYNC_FD: Int = -1

const val ASYNC_ERR: Int = 0

const val ASYNC_NO_JOBS: Int = 1

const val ASYNC_PAUSE: Int = 2

const val ASYNC_FINISH: Int = 3

const val ASYNC_F_ASYNC_CTX_NEW: Int = 100

const val ASYNC_F_ASYNC_INIT_THREAD: Int = 101

const val ASYNC_F_ASYNC_JOB_NEW: Int = 102

const val ASYNC_F_ASYNC_PAUSE_JOB: Int = 103

const val ASYNC_F_ASYNC_START_FUNC: Int = 104

const val ASYNC_F_ASYNC_START_JOB: Int = 105

const val ASYNC_R_FAILED_TO_SET_POOL: Int = 101

const val ASYNC_R_FAILED_TO_SWAP_CONTEXT: Int = 102

const val ASYNC_R_INIT_FAILED: Int = 105

const val ASYNC_R_INVALID_POOL_SIZE: Int = 103

const val SCT_MIN_RSA_BITS: Int = 2048

const val CT_V1_HASHLEN: Int = 32

const val CT_F_CTLOG_NEW: Int = 117

const val CT_F_CTLOG_NEW_FROM_BASE64: Int = 118

const val CT_F_CTLOG_NEW_FROM_CONF: Int = 119

const val CT_F_CTLOG_STORE_LOAD_CTX_NEW: Int = 122

const val CT_F_CTLOG_STORE_LOAD_FILE: Int = 123

const val CT_F_CTLOG_STORE_LOAD_LOG: Int = 130

const val CT_F_CTLOG_STORE_NEW: Int = 131

const val CT_F_CT_BASE64_DECODE: Int = 124

const val CT_F_CT_POLICY_EVAL_CTX_NEW: Int = 133

const val CT_F_CT_V1_LOG_ID_FROM_PKEY: Int = 125

const val CT_F_I2O_SCT: Int = 107

const val CT_F_I2O_SCT_LIST: Int = 108

const val CT_F_I2O_SCT_SIGNATURE: Int = 109

const val CT_F_O2I_SCT: Int = 110

const val CT_F_O2I_SCT_LIST: Int = 111

const val CT_F_O2I_SCT_SIGNATURE: Int = 112

const val CT_F_SCT_CTX_NEW: Int = 126

const val CT_F_SCT_CTX_VERIFY: Int = 128

const val CT_F_SCT_NEW: Int = 100

const val CT_F_SCT_NEW_FROM_BASE64: Int = 127

const val CT_F_SCT_SET0_LOG_ID: Int = 101

const val CT_F_SCT_SET1_EXTENSIONS: Int = 114

const val CT_F_SCT_SET1_LOG_ID: Int = 115

const val CT_F_SCT_SET1_SIGNATURE: Int = 116

const val CT_F_SCT_SET_LOG_ENTRY_TYPE: Int = 102

const val CT_F_SCT_SET_SIGNATURE_NID: Int = 103

const val CT_F_SCT_SET_VERSION: Int = 104

const val CT_R_BASE64_DECODE_ERROR: Int = 108

const val CT_R_INVALID_LOG_ID_LENGTH: Int = 100

const val CT_R_LOG_CONF_INVALID: Int = 109

const val CT_R_LOG_CONF_INVALID_KEY: Int = 110

const val CT_R_LOG_CONF_MISSING_DESCRIPTION: Int = 111

const val CT_R_LOG_CONF_MISSING_KEY: Int = 112

const val CT_R_LOG_KEY_INVALID: Int = 113

const val CT_R_SCT_FUTURE_TIMESTAMP: Int = 116

const val CT_R_SCT_INVALID: Int = 104

const val CT_R_SCT_INVALID_SIGNATURE: Int = 107

const val CT_R_SCT_LIST_INVALID: Int = 105

const val CT_R_SCT_LOG_ID_MISMATCH: Int = 114

const val CT_R_SCT_NOT_SET: Int = 106

const val CT_R_SCT_UNSUPPORTED_VERSION: Int = 115

const val CT_R_UNRECOGNIZED_SIGNATURE_NID: Int = 101

const val CT_R_UNSUPPORTED_ENTRY_TYPE: Int = 102

const val CT_R_UNSUPPORTED_VERSION: Int = 103

const val SSL_SESSION_ASN1_VERSION: Int = 1

const val SSL_MAX_SSL_SESSION_ID_LENGTH: Int = 32

const val SSL_MAX_SID_CTX_LENGTH: Int = 32

const val SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES: Int = 64

const val SSL_MAX_KEY_ARG_LENGTH: Int = 8

const val SSL_MAX_MASTER_KEY_LENGTH: Int = 48

const val SSL_MAX_PIPELINES: Int = 32

val SSL_TXT_LOW: String get() = "LOW"

val SSL_TXT_MEDIUM: String get() = "MEDIUM"

val SSL_TXT_HIGH: String get() = "HIGH"

val SSL_TXT_FIPS: String get() = "FIPS"

val SSL_TXT_aNULL: String get() = "aNULL"

val SSL_TXT_eNULL: String get() = "eNULL"

val SSL_TXT_NULL: String get() = "NULL"

val SSL_TXT_kRSA: String get() = "kRSA"

val SSL_TXT_kDHr: String get() = "kDHr"

val SSL_TXT_kDHd: String get() = "kDHd"

val SSL_TXT_kDH: String get() = "kDH"

val SSL_TXT_kEDH: String get() = "kEDH"

val SSL_TXT_kDHE: String get() = "kDHE"

val SSL_TXT_kECDHr: String get() = "kECDHr"

val SSL_TXT_kECDHe: String get() = "kECDHe"

val SSL_TXT_kECDH: String get() = "kECDH"

val SSL_TXT_kEECDH: String get() = "kEECDH"

val SSL_TXT_kECDHE: String get() = "kECDHE"

val SSL_TXT_kPSK: String get() = "kPSK"

val SSL_TXT_kRSAPSK: String get() = "kRSAPSK"

val SSL_TXT_kECDHEPSK: String get() = "kECDHEPSK"

val SSL_TXT_kDHEPSK: String get() = "kDHEPSK"

val SSL_TXT_kGOST: String get() = "kGOST"

val SSL_TXT_kSRP: String get() = "kSRP"

val SSL_TXT_aRSA: String get() = "aRSA"

val SSL_TXT_aDSS: String get() = "aDSS"

val SSL_TXT_aDH: String get() = "aDH"

val SSL_TXT_aECDH: String get() = "aECDH"

val SSL_TXT_aECDSA: String get() = "aECDSA"

val SSL_TXT_aPSK: String get() = "aPSK"

val SSL_TXT_aGOST94: String get() = "aGOST94"

val SSL_TXT_aGOST01: String get() = "aGOST01"

val SSL_TXT_aGOST12: String get() = "aGOST12"

val SSL_TXT_aGOST: String get() = "aGOST"

val SSL_TXT_aSRP: String get() = "aSRP"

val SSL_TXT_DSS: String get() = "DSS"

val SSL_TXT_DH: String get() = "DH"

val SSL_TXT_DHE: String get() = "DHE"

val SSL_TXT_EDH: String get() = "EDH"

val SSL_TXT_ADH: String get() = "ADH"

val SSL_TXT_RSA: String get() = "RSA"

val SSL_TXT_ECDH: String get() = "ECDH"

val SSL_TXT_EECDH: String get() = "EECDH"

val SSL_TXT_ECDHE: String get() = "ECDHE"

val SSL_TXT_AECDH: String get() = "AECDH"

val SSL_TXT_ECDSA: String get() = "ECDSA"

val SSL_TXT_PSK: String get() = "PSK"

val SSL_TXT_SRP: String get() = "SRP"

val SSL_TXT_DES: String get() = "DES"

val SSL_TXT_3DES: String get() = "3DES"

val SSL_TXT_RC4: String get() = "RC4"

val SSL_TXT_RC2: String get() = "RC2"

val SSL_TXT_IDEA: String get() = "IDEA"

val SSL_TXT_SEED: String get() = "SEED"

val SSL_TXT_AES128: String get() = "AES128"

val SSL_TXT_AES256: String get() = "AES256"

val SSL_TXT_AES: String get() = "AES"

val SSL_TXT_AES_GCM: String get() = "AESGCM"

val SSL_TXT_AES_CCM: String get() = "AESCCM"

val SSL_TXT_AES_CCM_8: String get() = "AESCCM8"

val SSL_TXT_CAMELLIA128: String get() = "CAMELLIA128"

val SSL_TXT_CAMELLIA256: String get() = "CAMELLIA256"

val SSL_TXT_CAMELLIA: String get() = "CAMELLIA"

val SSL_TXT_CHACHA20: String get() = "CHACHA20"

val SSL_TXT_GOST: String get() = "GOST89"

val SSL_TXT_MD5: String get() = "MD5"

val SSL_TXT_SHA1: String get() = "SHA1"

val SSL_TXT_SHA: String get() = "SHA"

val SSL_TXT_GOST94: String get() = "GOST94"

val SSL_TXT_GOST89MAC: String get() = "GOST89MAC"

val SSL_TXT_GOST12: String get() = "GOST12"

val SSL_TXT_GOST89MAC12: String get() = "GOST89MAC12"

val SSL_TXT_SHA256: String get() = "SHA256"

val SSL_TXT_SHA384: String get() = "SHA384"

val SSL_TXT_SSLV3: String get() = "SSLv3"

val SSL_TXT_TLSV1: String get() = "TLSv1"

val SSL_TXT_TLSV1_1: String get() = "TLSv1.1"

val SSL_TXT_TLSV1_2: String get() = "TLSv1.2"

val SSL_TXT_ALL: String get() = "ALL"

val SSL_TXT_CMPALL: String get() = "COMPLEMENTOFALL"

val SSL_TXT_CMPDEF: String get() = "COMPLEMENTOFDEFAULT"

val SSL_DEFAULT_CIPHER_LIST: String get() = "ALL:\u0021COMPLEMENTOFDEFAULT:\u0021eNULL"

const val SSL_SENT_SHUTDOWN: Int = 1

const val SSL_RECEIVED_SHUTDOWN: Int = 2

const val SSL_FILETYPE_ASN1: Int = 2

const val SSL_FILETYPE_PEM: Int = 1

const val SSL_OP_LEGACY_SERVER_CONNECT: UInt = 4u

const val SSL_OP_TLSEXT_PADDING: UInt = 16u

const val SSL_OP_SAFARI_ECDHE_ECDSA_BUG: UInt = 64u

const val SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: UInt = 2048u

const val SSL_OP_NO_QUERY_MTU: UInt = 4096u

const val SSL_OP_COOKIE_EXCHANGE: UInt = 8192u

const val SSL_OP_NO_TICKET: UInt = 16384u

const val SSL_OP_CISCO_ANYCONNECT: UInt = 32768u

const val SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: UInt = 65536u

const val SSL_OP_NO_COMPRESSION: UInt = 131072u

const val SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: UInt = 262144u

const val SSL_OP_NO_ENCRYPT_THEN_MAC: UInt = 524288u

const val SSL_OP_CIPHER_SERVER_PREFERENCE: UInt = 4194304u

const val SSL_OP_TLS_ROLLBACK_BUG: UInt = 8388608u

const val SSL_OP_NO_SSLv3: UInt = 33554432u

const val SSL_OP_NO_TLSv1: UInt = 67108864u

const val SSL_OP_NO_TLSv1_2: UInt = 134217728u

const val SSL_OP_NO_TLSv1_1: UInt = 268435456u

const val SSL_OP_NO_DTLSv1: UInt = 67108864u

const val SSL_OP_NO_DTLSv1_2: UInt = 134217728u

const val SSL_OP_NO_SSL_MASK: UInt = 503316480u

const val SSL_OP_NO_DTLS_MASK: UInt = 201326592u

const val SSL_OP_CRYPTOPRO_TLSEXT_BUG: UInt = 2147483648u

const val SSL_OP_ALL: UInt = 2147485780u

const val SSL_OP_MICROSOFT_SESS_ID_BUG: Int = 0

const val SSL_OP_NETSCAPE_CHALLENGE_BUG: Int = 0

const val SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: Int = 0

const val SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: Int = 0

const val SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: Int = 0

const val SSL_OP_MSIE_SSLV2_RSA_PADDING: Int = 0

const val SSL_OP_SSLEAY_080_CLIENT_DH_BUG: Int = 0

const val SSL_OP_TLS_D5_BUG: Int = 0

const val SSL_OP_TLS_BLOCK_PADDING_BUG: Int = 0

const val SSL_OP_SINGLE_ECDH_USE: Int = 0

const val SSL_OP_SINGLE_DH_USE: Int = 0

const val SSL_OP_EPHEMERAL_RSA: Int = 0

const val SSL_OP_NO_SSLv2: Int = 0

const val SSL_OP_PKCS1_CHECK_1: Int = 0

const val SSL_OP_PKCS1_CHECK_2: Int = 0

const val SSL_OP_NETSCAPE_CA_DN_BUG: Int = 0

const val SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: Int = 0

const val SSL_MODE_ENABLE_PARTIAL_WRITE: UInt = 1u

const val SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER: UInt = 2u

const val SSL_MODE_AUTO_RETRY: UInt = 4u

const val SSL_MODE_NO_AUTO_CHAIN: UInt = 8u

const val SSL_MODE_RELEASE_BUFFERS: UInt = 16u

const val SSL_MODE_SEND_CLIENTHELLO_TIME: UInt = 32u

const val SSL_MODE_SEND_SERVERHELLO_TIME: UInt = 64u

const val SSL_MODE_SEND_FALLBACK_SCSV: UInt = 128u

const val SSL_MODE_ASYNC: UInt = 256u

const val SSL_CERT_FLAG_TLS_STRICT: UInt = 1u

const val SSL_CERT_FLAG_SUITEB_128_LOS_ONLY: Int = 65536

const val SSL_CERT_FLAG_SUITEB_192_LOS: Int = 131072

const val SSL_CERT_FLAG_SUITEB_128_LOS: Int = 196608

const val SSL_CERT_FLAG_BROKEN_PROTOCOL: Int = 268435456

const val SSL_BUILD_CHAIN_FLAG_UNTRUSTED: Int = 1

const val SSL_BUILD_CHAIN_FLAG_NO_ROOT: Int = 2

const val SSL_BUILD_CHAIN_FLAG_CHECK: Int = 4

const val SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR: Int = 8

const val SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR: Int = 16

const val CERT_PKEY_VALID: Int = 1

const val CERT_PKEY_SIGN: Int = 2

const val CERT_PKEY_EE_SIGNATURE: Int = 16

const val CERT_PKEY_CA_SIGNATURE: Int = 32

const val CERT_PKEY_EE_PARAM: Int = 64

const val CERT_PKEY_CA_PARAM: Int = 128

const val CERT_PKEY_EXPLICIT_SIGN: Int = 256

const val CERT_PKEY_ISSUER_NAME: Int = 512

const val CERT_PKEY_CERT_TYPE: Int = 1024

const val CERT_PKEY_SUITEB: Int = 2048

const val SSL_CONF_FLAG_CMDLINE: Int = 1

const val SSL_CONF_FLAG_FILE: Int = 2

const val SSL_CONF_FLAG_CLIENT: Int = 4

const val SSL_CONF_FLAG_SERVER: Int = 8

const val SSL_CONF_FLAG_SHOW_ERRORS: Int = 16

const val SSL_CONF_FLAG_CERTIFICATE: Int = 32

const val SSL_CONF_FLAG_REQUIRE_PRIVATE: Int = 64

const val SSL_CONF_TYPE_UNKNOWN: Int = 0

const val SSL_CONF_TYPE_STRING: Int = 1

const val SSL_CONF_TYPE_FILE: Int = 2

const val SSL_CONF_TYPE_DIR: Int = 3

const val SSL_CONF_TYPE_NONE: Int = 4

const val SSL_MAX_CERT_LIST_DEFAULT: Int = 102400

const val SSL_SESSION_CACHE_MAX_SIZE_DEFAULT: Int = 20480

const val SSL_SESS_CACHE_OFF: Int = 0

const val SSL_SESS_CACHE_CLIENT: Int = 1

const val SSL_SESS_CACHE_SERVER: Int = 2

const val SSL_SESS_CACHE_BOTH: Int = 3

const val SSL_SESS_CACHE_NO_AUTO_CLEAR: Int = 128

const val SSL_SESS_CACHE_NO_INTERNAL_LOOKUP: Int = 256

const val SSL_SESS_CACHE_NO_INTERNAL_STORE: Int = 512

const val SSL_SESS_CACHE_NO_INTERNAL: Int = 768

const val OPENSSL_NPN_UNSUPPORTED: Int = 0

const val OPENSSL_NPN_NEGOTIATED: Int = 1

const val OPENSSL_NPN_NO_OVERLAP: Int = 2

const val PSK_MAX_IDENTITY_LEN: Int = 128

const val PSK_MAX_PSK_LEN: Int = 256

const val SSL_NOTHING: Int = 1

const val SSL_WRITING: Int = 2

const val SSL_READING: Int = 3

const val SSL_X509_LOOKUP: Int = 4

const val SSL_ASYNC_PAUSED: Int = 5

const val SSL_ASYNC_NO_JOBS: Int = 6

const val SSL_MAC_FLAG_READ_MAC_STREAM: Int = 1

const val SSL_MAC_FLAG_WRITE_MAC_STREAM: Int = 2

const val SSL2_VERSION: Int = 2

const val SSL2_MT_CLIENT_HELLO: Int = 1

const val SSL3_CK_SCSV: Int = 50331903

const val SSL3_CK_FALLBACK_SCSV: Int = 50353664

const val SSL3_CK_RSA_NULL_MD5: Int = 50331649

const val SSL3_CK_RSA_NULL_SHA: Int = 50331650

const val SSL3_CK_RSA_RC4_40_MD5: Int = 50331651

const val SSL3_CK_RSA_RC4_128_MD5: Int = 50331652

const val SSL3_CK_RSA_RC4_128_SHA: Int = 50331653

const val SSL3_CK_RSA_RC2_40_MD5: Int = 50331654

const val SSL3_CK_RSA_IDEA_128_SHA: Int = 50331655

const val SSL3_CK_RSA_DES_40_CBC_SHA: Int = 50331656

const val SSL3_CK_RSA_DES_64_CBC_SHA: Int = 50331657

const val SSL3_CK_RSA_DES_192_CBC3_SHA: Int = 50331658

const val SSL3_CK_DH_DSS_DES_40_CBC_SHA: Int = 50331659

const val SSL3_CK_DH_DSS_DES_64_CBC_SHA: Int = 50331660

const val SSL3_CK_DH_DSS_DES_192_CBC3_SHA: Int = 50331661

const val SSL3_CK_DH_RSA_DES_40_CBC_SHA: Int = 50331662

const val SSL3_CK_DH_RSA_DES_64_CBC_SHA: Int = 50331663

const val SSL3_CK_DH_RSA_DES_192_CBC3_SHA: Int = 50331664

const val SSL3_CK_DHE_DSS_DES_40_CBC_SHA: Int = 50331665

const val SSL3_CK_EDH_DSS_DES_40_CBC_SHA: Int = 50331665

const val SSL3_CK_DHE_DSS_DES_64_CBC_SHA: Int = 50331666

const val SSL3_CK_EDH_DSS_DES_64_CBC_SHA: Int = 50331666

const val SSL3_CK_DHE_DSS_DES_192_CBC3_SHA: Int = 50331667

const val SSL3_CK_EDH_DSS_DES_192_CBC3_SHA: Int = 50331667

const val SSL3_CK_DHE_RSA_DES_40_CBC_SHA: Int = 50331668

const val SSL3_CK_EDH_RSA_DES_40_CBC_SHA: Int = 50331668

const val SSL3_CK_DHE_RSA_DES_64_CBC_SHA: Int = 50331669

const val SSL3_CK_EDH_RSA_DES_64_CBC_SHA: Int = 50331669

const val SSL3_CK_DHE_RSA_DES_192_CBC3_SHA: Int = 50331670

const val SSL3_CK_EDH_RSA_DES_192_CBC3_SHA: Int = 50331670

const val SSL3_CK_ADH_RC4_40_MD5: Int = 50331671

const val SSL3_CK_ADH_RC4_128_MD5: Int = 50331672

const val SSL3_CK_ADH_DES_40_CBC_SHA: Int = 50331673

const val SSL3_CK_ADH_DES_64_CBC_SHA: Int = 50331674

const val SSL3_CK_ADH_DES_192_CBC_SHA: Int = 50331675

val SSL3_TXT_RSA_NULL_MD5: String get() = "NULL\u002DMD5"

val SSL3_TXT_RSA_NULL_SHA: String get() = "NULL\u002DSHA"

val SSL3_TXT_RSA_RC4_40_MD5: String get() = "EXP\u002DRC4\u002DMD5"

val SSL3_TXT_RSA_RC4_128_MD5: String get() = "RC4\u002DMD5"

val SSL3_TXT_RSA_RC4_128_SHA: String get() = "RC4\u002DSHA"

val SSL3_TXT_RSA_RC2_40_MD5: String get() = "EXP\u002DRC2\u002DCBC\u002DMD5"

val SSL3_TXT_RSA_IDEA_128_SHA: String get() = "IDEA\u002DCBC\u002DSHA"

val SSL3_TXT_RSA_DES_40_CBC_SHA: String get() = "EXP\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_RSA_DES_64_CBC_SHA: String get() = "DES\u002DCBC\u002DSHA"

val SSL3_TXT_RSA_DES_192_CBC3_SHA: String get() = "DES\u002DCBC3\u002DSHA"

val SSL3_TXT_DH_DSS_DES_40_CBC_SHA: String get() = "EXP\u002DDH\u002DDSS\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_DH_DSS_DES_64_CBC_SHA: String get() = "DH\u002DDSS\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_DH_DSS_DES_192_CBC3_SHA: String get() = "DH\u002DDSS\u002DDES\u002DCBC3\u002DSHA"

val SSL3_TXT_DH_RSA_DES_40_CBC_SHA: String get() = "EXP\u002DDH\u002DRSA\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_DH_RSA_DES_64_CBC_SHA: String get() = "DH\u002DRSA\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_DH_RSA_DES_192_CBC3_SHA: String get() = "DH\u002DRSA\u002DDES\u002DCBC3\u002DSHA"

val SSL3_TXT_DHE_DSS_DES_40_CBC_SHA: String get() = "EXP\u002DDHE\u002DDSS\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_DHE_DSS_DES_64_CBC_SHA: String get() = "DHE\u002DDSS\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA: String get() = "DHE\u002DDSS\u002DDES\u002DCBC3\u002DSHA"

val SSL3_TXT_DHE_RSA_DES_40_CBC_SHA: String get() = "EXP\u002DDHE\u002DRSA\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_DHE_RSA_DES_64_CBC_SHA: String get() = "DHE\u002DRSA\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA: String get() = "DHE\u002DRSA\u002DDES\u002DCBC3\u002DSHA"

val SSL3_TXT_EDH_DSS_DES_40_CBC_SHA: String get() = "EXP\u002DEDH\u002DDSS\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_EDH_DSS_DES_64_CBC_SHA: String get() = "EDH\u002DDSS\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA: String get() = "EDH\u002DDSS\u002DDES\u002DCBC3\u002DSHA"

val SSL3_TXT_EDH_RSA_DES_40_CBC_SHA: String get() = "EXP\u002DEDH\u002DRSA\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_EDH_RSA_DES_64_CBC_SHA: String get() = "EDH\u002DRSA\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA: String get() = "EDH\u002DRSA\u002DDES\u002DCBC3\u002DSHA"

val SSL3_TXT_ADH_RC4_40_MD5: String get() = "EXP\u002DADH\u002DRC4\u002DMD5"

val SSL3_TXT_ADH_RC4_128_MD5: String get() = "ADH\u002DRC4\u002DMD5"

val SSL3_TXT_ADH_DES_40_CBC_SHA: String get() = "EXP\u002DADH\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_ADH_DES_64_CBC_SHA: String get() = "ADH\u002DDES\u002DCBC\u002DSHA"

val SSL3_TXT_ADH_DES_192_CBC_SHA: String get() = "ADH\u002DDES\u002DCBC3\u002DSHA"

const val SSL3_SSL_SESSION_ID_LENGTH: Int = 32

const val SSL3_MAX_SSL_SESSION_ID_LENGTH: Int = 32

const val SSL3_MASTER_SECRET_SIZE: Int = 48

const val SSL3_RANDOM_SIZE: Int = 32

const val SSL3_SESSION_ID_SIZE: Int = 32

const val SSL3_RT_HEADER_LENGTH: Int = 5

const val SSL3_HM_HEADER_LENGTH: Int = 4

const val SSL3_ALIGN_PAYLOAD: Int = 8

const val SSL3_RT_MAX_MD_SIZE: Int = 64

const val SSL_RT_MAX_CIPHER_BLOCK_SIZE: Int = 16

const val SSL3_RT_MAX_EXTRA: Int = 16384

const val SSL3_RT_MAX_PLAIN_LENGTH: Int = 16384

const val SSL3_RT_MAX_COMPRESSED_OVERHEAD: Int = 1024

const val SSL3_RT_MAX_ENCRYPTED_OVERHEAD: Int = 320

const val SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD: Int = 80

const val SSL3_RT_MAX_COMPRESSED_LENGTH: Int = 17408

const val SSL3_RT_MAX_ENCRYPTED_LENGTH: Int = 17728

const val SSL3_RT_MAX_PACKET_SIZE: Int = 17733

val SSL3_MD_CLIENT_FINISHED_CONST: String get() = "CLNT"

val SSL3_MD_SERVER_FINISHED_CONST: String get() = "SRVR"

const val SSL3_VERSION: Int = 768

const val SSL3_VERSION_MAJOR: Int = 3

const val SSL3_VERSION_MINOR: Int = 0

const val SSL3_RT_CHANGE_CIPHER_SPEC: Int = 20

const val SSL3_RT_ALERT: Int = 21

const val SSL3_RT_HANDSHAKE: Int = 22

const val SSL3_RT_APPLICATION_DATA: Int = 23

const val DTLS1_RT_HEARTBEAT: Int = 24

const val TLS1_RT_CRYPTO: Int = 4096

const val TLS1_RT_CRYPTO_PREMASTER: Int = 4097

const val TLS1_RT_CRYPTO_CLIENT_RANDOM: Int = 4098

const val TLS1_RT_CRYPTO_SERVER_RANDOM: Int = 4099

const val TLS1_RT_CRYPTO_MASTER: Int = 4100

const val TLS1_RT_CRYPTO_READ: Int = 0

const val TLS1_RT_CRYPTO_WRITE: Int = 256

const val TLS1_RT_CRYPTO_MAC: Int = 4101

const val TLS1_RT_CRYPTO_KEY: Int = 4102

const val TLS1_RT_CRYPTO_IV: Int = 4103

const val TLS1_RT_CRYPTO_FIXED_IV: Int = 4104

const val SSL3_RT_HEADER: Int = 256

const val SSL3_AL_WARNING: Int = 1

const val SSL3_AL_FATAL: Int = 2

const val SSL3_AD_CLOSE_NOTIFY: Int = 0

const val SSL3_AD_UNEXPECTED_MESSAGE: Int = 10

const val SSL3_AD_BAD_RECORD_MAC: Int = 20

const val SSL3_AD_DECOMPRESSION_FAILURE: Int = 30

const val SSL3_AD_HANDSHAKE_FAILURE: Int = 40

const val SSL3_AD_NO_CERTIFICATE: Int = 41

const val SSL3_AD_BAD_CERTIFICATE: Int = 42

const val SSL3_AD_UNSUPPORTED_CERTIFICATE: Int = 43

const val SSL3_AD_CERTIFICATE_REVOKED: Int = 44

const val SSL3_AD_CERTIFICATE_EXPIRED: Int = 45

const val SSL3_AD_CERTIFICATE_UNKNOWN: Int = 46

const val SSL3_AD_ILLEGAL_PARAMETER: Int = 47

const val TLS1_HB_REQUEST: Int = 1

const val TLS1_HB_RESPONSE: Int = 2

const val SSL3_CT_RSA_SIGN: Int = 1

const val SSL3_CT_DSS_SIGN: Int = 2

const val SSL3_CT_RSA_FIXED_DH: Int = 3

const val SSL3_CT_DSS_FIXED_DH: Int = 4

const val SSL3_CT_RSA_EPHEMERAL_DH: Int = 5

const val SSL3_CT_DSS_EPHEMERAL_DH: Int = 6

const val SSL3_CT_FORTEZZA_DMS: Int = 20

const val SSL3_CT_NUMBER: Int = 9

const val SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS: Int = 1

const val TLS1_FLAGS_TLS_PADDING_BUG: Int = 0

const val TLS1_FLAGS_SKIP_CERT_VERIFY: Int = 16

const val TLS1_FLAGS_ENCRYPT_THEN_MAC_READ: Int = 256

const val TLS1_FLAGS_ENCRYPT_THEN_MAC: Int = 256

const val TLS1_FLAGS_RECEIVED_EXTMS: Int = 512

const val TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE: Int = 1024

const val SSL3_MT_HELLO_REQUEST: Int = 0

const val SSL3_MT_CLIENT_HELLO: Int = 1

const val SSL3_MT_SERVER_HELLO: Int = 2

const val SSL3_MT_NEWSESSION_TICKET: Int = 4

const val SSL3_MT_CERTIFICATE: Int = 11

const val SSL3_MT_SERVER_KEY_EXCHANGE: Int = 12

const val SSL3_MT_CERTIFICATE_REQUEST: Int = 13

const val SSL3_MT_SERVER_DONE: Int = 14

const val SSL3_MT_CERTIFICATE_VERIFY: Int = 15

const val SSL3_MT_CLIENT_KEY_EXCHANGE: Int = 16

const val SSL3_MT_FINISHED: Int = 20

const val SSL3_MT_CERTIFICATE_STATUS: Int = 22

const val SSL3_MT_NEXT_PROTO: Int = 67

const val DTLS1_MT_HELLO_VERIFY_REQUEST: Int = 3

const val SSL3_MT_CHANGE_CIPHER_SPEC: Int = 257

const val SSL3_MT_CCS: Int = 1

const val SSL3_CC_READ: Int = 1

const val SSL3_CC_WRITE: Int = 2

const val SSL3_CC_CLIENT: Int = 16

const val SSL3_CC_SERVER: Int = 32

const val SSL3_CHANGE_CIPHER_CLIENT_WRITE: Int = 18

const val SSL3_CHANGE_CIPHER_SERVER_READ: Int = 33

const val SSL3_CHANGE_CIPHER_CLIENT_READ: Int = 17

const val SSL3_CHANGE_CIPHER_SERVER_WRITE: Int = 34

const val OPENSSL_TLS_SECURITY_LEVEL: Int = 1

const val TLS1_VERSION: Int = 769

const val TLS1_1_VERSION: Int = 770

const val TLS1_2_VERSION: Int = 771

const val TLS_MAX_VERSION: Int = 771

const val TLS_ANY_VERSION: Int = 65536

const val TLS1_VERSION_MAJOR: Int = 3

const val TLS1_VERSION_MINOR: Int = 1

const val TLS1_1_VERSION_MAJOR: Int = 3

const val TLS1_1_VERSION_MINOR: Int = 2

const val TLS1_2_VERSION_MAJOR: Int = 3

const val TLS1_2_VERSION_MINOR: Int = 3

const val TLS1_AD_DECRYPTION_FAILED: Int = 21

const val TLS1_AD_RECORD_OVERFLOW: Int = 22

const val TLS1_AD_UNKNOWN_CA: Int = 48

const val TLS1_AD_ACCESS_DENIED: Int = 49

const val TLS1_AD_DECODE_ERROR: Int = 50

const val TLS1_AD_DECRYPT_ERROR: Int = 51

const val TLS1_AD_EXPORT_RESTRICTION: Int = 60

const val TLS1_AD_PROTOCOL_VERSION: Int = 70

const val TLS1_AD_INSUFFICIENT_SECURITY: Int = 71

const val TLS1_AD_INTERNAL_ERROR: Int = 80

const val TLS1_AD_INAPPROPRIATE_FALLBACK: Int = 86

const val TLS1_AD_USER_CANCELLED: Int = 90

const val TLS1_AD_NO_RENEGOTIATION: Int = 100

const val TLS1_AD_UNSUPPORTED_EXTENSION: Int = 110

const val TLS1_AD_CERTIFICATE_UNOBTAINABLE: Int = 111

const val TLS1_AD_UNRECOGNIZED_NAME: Int = 112

const val TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE: Int = 113

const val TLS1_AD_BAD_CERTIFICATE_HASH_VALUE: Int = 114

const val TLS1_AD_UNKNOWN_PSK_IDENTITY: Int = 115

const val TLS1_AD_NO_APPLICATION_PROTOCOL: Int = 120

const val TLSEXT_TYPE_server_name: Int = 0

const val TLSEXT_TYPE_max_fragment_length: Int = 1

const val TLSEXT_TYPE_client_certificate_url: Int = 2

const val TLSEXT_TYPE_trusted_ca_keys: Int = 3

const val TLSEXT_TYPE_truncated_hmac: Int = 4

const val TLSEXT_TYPE_status_request: Int = 5

const val TLSEXT_TYPE_user_mapping: Int = 6

const val TLSEXT_TYPE_client_authz: Int = 7

const val TLSEXT_TYPE_server_authz: Int = 8

const val TLSEXT_TYPE_cert_type: Int = 9

const val TLSEXT_TYPE_elliptic_curves: Int = 10

const val TLSEXT_TYPE_ec_point_formats: Int = 11

const val TLSEXT_TYPE_srp: Int = 12

const val TLSEXT_TYPE_signature_algorithms: Int = 13

const val TLSEXT_TYPE_use_srtp: Int = 14

const val TLSEXT_TYPE_heartbeat: Int = 15

const val TLSEXT_TYPE_application_layer_protocol_negotiation: Int = 16

const val TLSEXT_TYPE_signed_certificate_timestamp: Int = 18

const val TLSEXT_TYPE_padding: Int = 21

const val TLSEXT_TYPE_encrypt_then_mac: Int = 22

const val TLSEXT_TYPE_extended_master_secret: Int = 23

const val TLSEXT_TYPE_session_ticket: Int = 35

const val TLSEXT_TYPE_renegotiate: Int = 65281

const val TLSEXT_TYPE_next_proto_neg: Int = 13172

const val TLSEXT_NAMETYPE_host_name: Int = 0

const val TLSEXT_STATUSTYPE_ocsp: Int = 1

const val TLSEXT_ECPOINTFORMAT_first: Int = 0

const val TLSEXT_ECPOINTFORMAT_uncompressed: Int = 0

const val TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime: Int = 1

const val TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2: Int = 2

const val TLSEXT_ECPOINTFORMAT_last: Int = 2

const val TLSEXT_signature_anonymous: Int = 0

const val TLSEXT_signature_rsa: Int = 1

const val TLSEXT_signature_dsa: Int = 2

const val TLSEXT_signature_ecdsa: Int = 3

const val TLSEXT_signature_gostr34102001: Int = 237

const val TLSEXT_signature_gostr34102012_256: Int = 238

const val TLSEXT_signature_gostr34102012_512: Int = 239

const val TLSEXT_signature_num: Int = 7

const val TLSEXT_hash_none: Int = 0

const val TLSEXT_hash_md5: Int = 1

const val TLSEXT_hash_sha1: Int = 2

const val TLSEXT_hash_sha224: Int = 3

const val TLSEXT_hash_sha256: Int = 4

const val TLSEXT_hash_sha384: Int = 5

const val TLSEXT_hash_sha512: Int = 6

const val TLSEXT_hash_gostr3411: Int = 237

const val TLSEXT_hash_gostr34112012_256: Int = 238

const val TLSEXT_hash_gostr34112012_512: Int = 239

const val TLSEXT_hash_num: Int = 10

const val TLSEXT_nid_unknown: Int = 16777216

const val TLSEXT_curve_P_256: Int = 23

const val TLSEXT_curve_P_384: Int = 24

const val TLSEXT_MAXLEN_host_name: Int = 255

const val SSL_TLSEXT_ERR_OK: Int = 0

const val SSL_TLSEXT_ERR_ALERT_WARNING: Int = 1

const val SSL_TLSEXT_ERR_ALERT_FATAL: Int = 2

const val SSL_TLSEXT_ERR_NOACK: Int = 3

const val TLS1_CK_PSK_WITH_RC4_128_SHA: Int = 50331786

const val TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA: Int = 50331787

const val TLS1_CK_PSK_WITH_AES_128_CBC_SHA: Int = 50331788

const val TLS1_CK_PSK_WITH_AES_256_CBC_SHA: Int = 50331789

const val TLS1_CK_DHE_PSK_WITH_RC4_128_SHA: Int = 50331790

const val TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA: Int = 50331791

const val TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA: Int = 50331792

const val TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA: Int = 50331793

const val TLS1_CK_RSA_PSK_WITH_RC4_128_SHA: Int = 50331794

const val TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA: Int = 50331795

const val TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA: Int = 50331796

const val TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA: Int = 50331797

const val TLS1_CK_PSK_WITH_AES_128_GCM_SHA256: Int = 50331816

const val TLS1_CK_PSK_WITH_AES_256_GCM_SHA384: Int = 50331817

const val TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256: Int = 50331818

const val TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384: Int = 50331819

const val TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256: Int = 50331820

const val TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384: Int = 50331821

const val TLS1_CK_PSK_WITH_AES_128_CBC_SHA256: Int = 50331822

const val TLS1_CK_PSK_WITH_AES_256_CBC_SHA384: Int = 50331823

const val TLS1_CK_PSK_WITH_NULL_SHA256: Int = 50331824

const val TLS1_CK_PSK_WITH_NULL_SHA384: Int = 50331825

const val TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256: Int = 50331826

const val TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384: Int = 50331827

const val TLS1_CK_DHE_PSK_WITH_NULL_SHA256: Int = 50331828

const val TLS1_CK_DHE_PSK_WITH_NULL_SHA384: Int = 50331829

const val TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256: Int = 50331830

const val TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384: Int = 50331831

const val TLS1_CK_RSA_PSK_WITH_NULL_SHA256: Int = 50331832

const val TLS1_CK_RSA_PSK_WITH_NULL_SHA384: Int = 50331833

const val TLS1_CK_PSK_WITH_NULL_SHA: Int = 50331692

const val TLS1_CK_DHE_PSK_WITH_NULL_SHA: Int = 50331693

const val TLS1_CK_RSA_PSK_WITH_NULL_SHA: Int = 50331694

const val TLS1_CK_RSA_WITH_AES_128_SHA: Int = 50331695

const val TLS1_CK_DH_DSS_WITH_AES_128_SHA: Int = 50331696

const val TLS1_CK_DH_RSA_WITH_AES_128_SHA: Int = 50331697

const val TLS1_CK_DHE_DSS_WITH_AES_128_SHA: Int = 50331698

const val TLS1_CK_DHE_RSA_WITH_AES_128_SHA: Int = 50331699

const val TLS1_CK_ADH_WITH_AES_128_SHA: Int = 50331700

const val TLS1_CK_RSA_WITH_AES_256_SHA: Int = 50331701

const val TLS1_CK_DH_DSS_WITH_AES_256_SHA: Int = 50331702

const val TLS1_CK_DH_RSA_WITH_AES_256_SHA: Int = 50331703

const val TLS1_CK_DHE_DSS_WITH_AES_256_SHA: Int = 50331704

const val TLS1_CK_DHE_RSA_WITH_AES_256_SHA: Int = 50331705

const val TLS1_CK_ADH_WITH_AES_256_SHA: Int = 50331706

const val TLS1_CK_RSA_WITH_NULL_SHA256: Int = 50331707

const val TLS1_CK_RSA_WITH_AES_128_SHA256: Int = 50331708

const val TLS1_CK_RSA_WITH_AES_256_SHA256: Int = 50331709

const val TLS1_CK_DH_DSS_WITH_AES_128_SHA256: Int = 50331710

const val TLS1_CK_DH_RSA_WITH_AES_128_SHA256: Int = 50331711

const val TLS1_CK_DHE_DSS_WITH_AES_128_SHA256: Int = 50331712

const val TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA: Int = 50331713

const val TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA: Int = 50331714

const val TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA: Int = 50331715

const val TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: Int = 50331716

const val TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: Int = 50331717

const val TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA: Int = 50331718

const val TLS1_CK_DHE_RSA_WITH_AES_128_SHA256: Int = 50331751

const val TLS1_CK_DH_DSS_WITH_AES_256_SHA256: Int = 50331752

const val TLS1_CK_DH_RSA_WITH_AES_256_SHA256: Int = 50331753

const val TLS1_CK_DHE_DSS_WITH_AES_256_SHA256: Int = 50331754

const val TLS1_CK_DHE_RSA_WITH_AES_256_SHA256: Int = 50331755

const val TLS1_CK_ADH_WITH_AES_128_SHA256: Int = 50331756

const val TLS1_CK_ADH_WITH_AES_256_SHA256: Int = 50331757

const val TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA: Int = 50331780

const val TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA: Int = 50331781

const val TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA: Int = 50331782

const val TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: Int = 50331783

const val TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: Int = 50331784

const val TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA: Int = 50331785

const val TLS1_CK_RSA_WITH_SEED_SHA: Int = 50331798

const val TLS1_CK_DH_DSS_WITH_SEED_SHA: Int = 50331799

const val TLS1_CK_DH_RSA_WITH_SEED_SHA: Int = 50331800

const val TLS1_CK_DHE_DSS_WITH_SEED_SHA: Int = 50331801

const val TLS1_CK_DHE_RSA_WITH_SEED_SHA: Int = 50331802

const val TLS1_CK_ADH_WITH_SEED_SHA: Int = 50331803

const val TLS1_CK_RSA_WITH_AES_128_GCM_SHA256: Int = 50331804

const val TLS1_CK_RSA_WITH_AES_256_GCM_SHA384: Int = 50331805

const val TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256: Int = 50331806

const val TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384: Int = 50331807

const val TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256: Int = 50331808

const val TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384: Int = 50331809

const val TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256: Int = 50331810

const val TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384: Int = 50331811

const val TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256: Int = 50331812

const val TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384: Int = 50331813

const val TLS1_CK_ADH_WITH_AES_128_GCM_SHA256: Int = 50331814

const val TLS1_CK_ADH_WITH_AES_256_GCM_SHA384: Int = 50331815

const val TLS1_CK_RSA_WITH_AES_128_CCM: Int = 50380956

const val TLS1_CK_RSA_WITH_AES_256_CCM: Int = 50380957

const val TLS1_CK_DHE_RSA_WITH_AES_128_CCM: Int = 50380958

const val TLS1_CK_DHE_RSA_WITH_AES_256_CCM: Int = 50380959

const val TLS1_CK_RSA_WITH_AES_128_CCM_8: Int = 50380960

const val TLS1_CK_RSA_WITH_AES_256_CCM_8: Int = 50380961

const val TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8: Int = 50380962

const val TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8: Int = 50380963

const val TLS1_CK_PSK_WITH_AES_128_CCM: Int = 50380964

const val TLS1_CK_PSK_WITH_AES_256_CCM: Int = 50380965

const val TLS1_CK_DHE_PSK_WITH_AES_128_CCM: Int = 50380966

const val TLS1_CK_DHE_PSK_WITH_AES_256_CCM: Int = 50380967

const val TLS1_CK_PSK_WITH_AES_128_CCM_8: Int = 50380968

const val TLS1_CK_PSK_WITH_AES_256_CCM_8: Int = 50380969

const val TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8: Int = 50380970

const val TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8: Int = 50380971

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM: Int = 50380972

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM: Int = 50380973

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8: Int = 50380974

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8: Int = 50380975

const val TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256: Int = 50331834

const val TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256: Int = 50331835

const val TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256: Int = 50331836

const val TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256: Int = 50331837

const val TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: Int = 50331838

const val TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256: Int = 50331839

const val TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256: Int = 50331840

const val TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256: Int = 50331841

const val TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256: Int = 50331842

const val TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256: Int = 50331843

const val TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256: Int = 50331844

const val TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256: Int = 50331845

const val TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA: Int = 50380801

const val TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA: Int = 50380802

const val TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA: Int = 50380803

const val TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA: Int = 50380804

const val TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA: Int = 50380805

const val TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA: Int = 50380806

const val TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA: Int = 50380807

const val TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA: Int = 50380808

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: Int = 50380809

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: Int = 50380810

const val TLS1_CK_ECDH_RSA_WITH_NULL_SHA: Int = 50380811

const val TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA: Int = 50380812

const val TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA: Int = 50380813

const val TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA: Int = 50380814

const val TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA: Int = 50380815

const val TLS1_CK_ECDHE_RSA_WITH_NULL_SHA: Int = 50380816

const val TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA: Int = 50380817

const val TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA: Int = 50380818

const val TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA: Int = 50380819

const val TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA: Int = 50380820

const val TLS1_CK_ECDH_anon_WITH_NULL_SHA: Int = 50380821

const val TLS1_CK_ECDH_anon_WITH_RC4_128_SHA: Int = 50380822

const val TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA: Int = 50380823

const val TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA: Int = 50380824

const val TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA: Int = 50380825

const val TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA: Int = 50380826

const val TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA: Int = 50380827

const val TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA: Int = 50380828

const val TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA: Int = 50380829

const val TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA: Int = 50380830

const val TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA: Int = 50380831

const val TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA: Int = 50380832

const val TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA: Int = 50380833

const val TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA: Int = 50380834

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256: Int = 50380835

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384: Int = 50380836

const val TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256: Int = 50380837

const val TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384: Int = 50380838

const val TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256: Int = 50380839

const val TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384: Int = 50380840

const val TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256: Int = 50380841

const val TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384: Int = 50380842

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: Int = 50380843

const val TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: Int = 50380844

const val TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: Int = 50380845

const val TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: Int = 50380846

const val TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256: Int = 50380847

const val TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384: Int = 50380848

const val TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256: Int = 50380849

const val TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384: Int = 50380850

const val TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA: Int = 50380851

const val TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA: Int = 50380852

const val TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA: Int = 50380853

const val TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA: Int = 50380854

const val TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256: Int = 50380855

const val TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384: Int = 50380856

const val TLS1_CK_ECDHE_PSK_WITH_NULL_SHA: Int = 50380857

const val TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256: Int = 50380858

const val TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384: Int = 50380859

const val TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256: Int = 50380914

const val TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384: Int = 50380915

const val TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256: Int = 50380916

const val TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384: Int = 50380917

const val TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: Int = 50380918

const val TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384: Int = 50380919

const val TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256: Int = 50380920

const val TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384: Int = 50380921

const val TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256: Int = 50380948

const val TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384: Int = 50380949

const val TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: Int = 50380950

const val TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: Int = 50380951

const val TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256: Int = 50380952

const val TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384: Int = 50380953

const val TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: Int = 50380954

const val TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: Int = 50380955

const val TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305: Int = 50384040

const val TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305: Int = 50384041

const val TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305: Int = 50384042

const val TLS1_CK_PSK_WITH_CHACHA20_POLY1305: Int = 50384043

const val TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305: Int = 50384044

const val TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305: Int = 50384045

const val TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305: Int = 50384046

val TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA: String get() = "DHE\u002DDSS\u002DRC4\u002DSHA"

val TLS1_TXT_PSK_WITH_NULL_SHA: String get() = "PSK\u002DNULL\u002DSHA"

val TLS1_TXT_DHE_PSK_WITH_NULL_SHA: String get() = "DHE\u002DPSK\u002DNULL\u002DSHA"

val TLS1_TXT_RSA_PSK_WITH_NULL_SHA: String get() = "RSA\u002DPSK\u002DNULL\u002DSHA"

val TLS1_TXT_RSA_WITH_AES_128_SHA: String get() = "AES128\u002DSHA"

val TLS1_TXT_DH_DSS_WITH_AES_128_SHA: String get() = "DH\u002DDSS\u002DAES128\u002DSHA"

val TLS1_TXT_DH_RSA_WITH_AES_128_SHA: String get() = "DH\u002DRSA\u002DAES128\u002DSHA"

val TLS1_TXT_DHE_DSS_WITH_AES_128_SHA: String get() = "DHE\u002DDSS\u002DAES128\u002DSHA"

val TLS1_TXT_DHE_RSA_WITH_AES_128_SHA: String get() = "DHE\u002DRSA\u002DAES128\u002DSHA"

val TLS1_TXT_ADH_WITH_AES_128_SHA: String get() = "ADH\u002DAES128\u002DSHA"

val TLS1_TXT_RSA_WITH_AES_256_SHA: String get() = "AES256\u002DSHA"

val TLS1_TXT_DH_DSS_WITH_AES_256_SHA: String get() = "DH\u002DDSS\u002DAES256\u002DSHA"

val TLS1_TXT_DH_RSA_WITH_AES_256_SHA: String get() = "DH\u002DRSA\u002DAES256\u002DSHA"

val TLS1_TXT_DHE_DSS_WITH_AES_256_SHA: String get() = "DHE\u002DDSS\u002DAES256\u002DSHA"

val TLS1_TXT_DHE_RSA_WITH_AES_256_SHA: String get() = "DHE\u002DRSA\u002DAES256\u002DSHA"

val TLS1_TXT_ADH_WITH_AES_256_SHA: String get() = "ADH\u002DAES256\u002DSHA"

val TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA: String get() = "ECDH\u002DECDSA\u002DNULL\u002DSHA"

val TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA: String get() = "ECDH\u002DECDSA\u002DRC4\u002DSHA"

val TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA: String get() = "ECDH\u002DECDSA\u002DDES\u002DCBC3\u002DSHA"

val TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA: String get() = "ECDH\u002DECDSA\u002DAES128\u002DSHA"

val TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA: String get() = "ECDH\u002DECDSA\u002DAES256\u002DSHA"

val TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA: String get() = "ECDHE\u002DECDSA\u002DNULL\u002DSHA"

val TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA: String get() = "ECDHE\u002DECDSA\u002DRC4\u002DSHA"

val TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA: String get() = "ECDHE\u002DECDSA\u002DDES\u002DCBC3\u002DSHA"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: String get() = "ECDHE\u002DECDSA\u002DAES128\u002DSHA"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: String get() = "ECDHE\u002DECDSA\u002DAES256\u002DSHA"

val TLS1_TXT_ECDH_RSA_WITH_NULL_SHA: String get() = "ECDH\u002DRSA\u002DNULL\u002DSHA"

val TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA: String get() = "ECDH\u002DRSA\u002DRC4\u002DSHA"

val TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA: String get() = "ECDH\u002DRSA\u002DDES\u002DCBC3\u002DSHA"

val TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA: String get() = "ECDH\u002DRSA\u002DAES128\u002DSHA"

val TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA: String get() = "ECDH\u002DRSA\u002DAES256\u002DSHA"

val TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA: String get() = "ECDHE\u002DRSA\u002DNULL\u002DSHA"

val TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA: String get() = "ECDHE\u002DRSA\u002DRC4\u002DSHA"

val TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA: String get() = "ECDHE\u002DRSA\u002DDES\u002DCBC3\u002DSHA"

val TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA: String get() = "ECDHE\u002DRSA\u002DAES128\u002DSHA"

val TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA: String get() = "ECDHE\u002DRSA\u002DAES256\u002DSHA"

val TLS1_TXT_ECDH_anon_WITH_NULL_SHA: String get() = "AECDH\u002DNULL\u002DSHA"

val TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA: String get() = "AECDH\u002DRC4\u002DSHA"

val TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA: String get() = "AECDH\u002DDES\u002DCBC3\u002DSHA"

val TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA: String get() = "AECDH\u002DAES128\u002DSHA"

val TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA: String get() = "AECDH\u002DAES256\u002DSHA"

val TLS1_TXT_PSK_WITH_RC4_128_SHA: String get() = "PSK\u002DRC4\u002DSHA"

val TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA: String get() = "PSK\u002D3DES\u002DEDE\u002DCBC\u002DSHA"

val TLS1_TXT_PSK_WITH_AES_128_CBC_SHA: String get() = "PSK\u002DAES128\u002DCBC\u002DSHA"

val TLS1_TXT_PSK_WITH_AES_256_CBC_SHA: String get() = "PSK\u002DAES256\u002DCBC\u002DSHA"

val TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA: String get() = "DHE\u002DPSK\u002DRC4\u002DSHA"

val TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA: String get() = "DHE\u002DPSK\u002D3DES\u002DEDE\u002DCBC\u002DSHA"

val TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA: String get() = "DHE\u002DPSK\u002DAES128\u002DCBC\u002DSHA"

val TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA: String get() = "DHE\u002DPSK\u002DAES256\u002DCBC\u002DSHA"

val TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA: String get() = "RSA\u002DPSK\u002DRC4\u002DSHA"

val TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA: String get() = "RSA\u002DPSK\u002D3DES\u002DEDE\u002DCBC\u002DSHA"

val TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA: String get() = "RSA\u002DPSK\u002DAES128\u002DCBC\u002DSHA"

val TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA: String get() = "RSA\u002DPSK\u002DAES256\u002DCBC\u002DSHA"

val TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256: String get() = "PSK\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384: String get() = "PSK\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256: String get() = "DHE\u002DPSK\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384: String get() = "DHE\u002DPSK\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256: String get() = "RSA\u002DPSK\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384: String get() = "RSA\u002DPSK\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256: String get() = "PSK\u002DAES128\u002DCBC\u002DSHA256"

val TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384: String get() = "PSK\u002DAES256\u002DCBC\u002DSHA384"

val TLS1_TXT_PSK_WITH_NULL_SHA256: String get() = "PSK\u002DNULL\u002DSHA256"

val TLS1_TXT_PSK_WITH_NULL_SHA384: String get() = "PSK\u002DNULL\u002DSHA384"

val TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256: String get() = "DHE\u002DPSK\u002DAES128\u002DCBC\u002DSHA256"

val TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384: String get() = "DHE\u002DPSK\u002DAES256\u002DCBC\u002DSHA384"

val TLS1_TXT_DHE_PSK_WITH_NULL_SHA256: String get() = "DHE\u002DPSK\u002DNULL\u002DSHA256"

val TLS1_TXT_DHE_PSK_WITH_NULL_SHA384: String get() = "DHE\u002DPSK\u002DNULL\u002DSHA384"

val TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256: String get() = "RSA\u002DPSK\u002DAES128\u002DCBC\u002DSHA256"

val TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384: String get() = "RSA\u002DPSK\u002DAES256\u002DCBC\u002DSHA384"

val TLS1_TXT_RSA_PSK_WITH_NULL_SHA256: String get() = "RSA\u002DPSK\u002DNULL\u002DSHA256"

val TLS1_TXT_RSA_PSK_WITH_NULL_SHA384: String get() = "RSA\u002DPSK\u002DNULL\u002DSHA384"

val TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA: String get() = "SRP\u002D3DES\u002DEDE\u002DCBC\u002DSHA"

val TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA: String get() = "SRP\u002DRSA\u002D3DES\u002DEDE\u002DCBC\u002DSHA"

val TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA: String get() = "SRP\u002DDSS\u002D3DES\u002DEDE\u002DCBC\u002DSHA"

val TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA: String get() = "SRP\u002DAES\u002D128\u002DCBC\u002DSHA"

val TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA: String get() = "SRP\u002DRSA\u002DAES\u002D128\u002DCBC\u002DSHA"

val TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA: String get() = "SRP\u002DDSS\u002DAES\u002D128\u002DCBC\u002DSHA"

val TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA: String get() = "SRP\u002DAES\u002D256\u002DCBC\u002DSHA"

val TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA: String get() = "SRP\u002DRSA\u002DAES\u002D256\u002DCBC\u002DSHA"

val TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA: String get() = "SRP\u002DDSS\u002DAES\u002D256\u002DCBC\u002DSHA"

val TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA: String get() = "CAMELLIA128\u002DSHA"

val TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA: String get() = "DH\u002DDSS\u002DCAMELLIA128\u002DSHA"

val TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA: String get() = "DH\u002DRSA\u002DCAMELLIA128\u002DSHA"

val TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: String get() = "DHE\u002DDSS\u002DCAMELLIA128\u002DSHA"

val TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: String get() = "DHE\u002DRSA\u002DCAMELLIA128\u002DSHA"

val TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA: String get() = "ADH\u002DCAMELLIA128\u002DSHA"

val TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA: String get() = "CAMELLIA256\u002DSHA"

val TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA: String get() = "DH\u002DDSS\u002DCAMELLIA256\u002DSHA"

val TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA: String get() = "DH\u002DRSA\u002DCAMELLIA256\u002DSHA"

val TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: String get() = "DHE\u002DDSS\u002DCAMELLIA256\u002DSHA"

val TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: String get() = "DHE\u002DRSA\u002DCAMELLIA256\u002DSHA"

val TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA: String get() = "ADH\u002DCAMELLIA256\u002DSHA"

val TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256: String get() = "CAMELLIA128\u002DSHA256"

val TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256: String get() = "DH\u002DDSS\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256: String get() = "DH\u002DRSA\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256: String get() = "DHE\u002DDSS\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: String get() = "DHE\u002DRSA\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256: String get() = "ADH\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256: String get() = "CAMELLIA256\u002DSHA256"

val TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256: String get() = "DH\u002DDSS\u002DCAMELLIA256\u002DSHA256"

val TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256: String get() = "DH\u002DRSA\u002DCAMELLIA256\u002DSHA256"

val TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256: String get() = "DHE\u002DDSS\u002DCAMELLIA256\u002DSHA256"

val TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256: String get() = "DHE\u002DRSA\u002DCAMELLIA256\u002DSHA256"

val TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256: String get() = "ADH\u002DCAMELLIA256\u002DSHA256"

val TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256: String get() = "PSK\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384: String get() = "PSK\u002DCAMELLIA256\u002DSHA384"

val TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: String get() = "DHE\u002DPSK\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: String get() = "DHE\u002DPSK\u002DCAMELLIA256\u002DSHA384"

val TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256: String get() = "RSA\u002DPSK\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384: String get() = "RSA\u002DPSK\u002DCAMELLIA256\u002DSHA384"

val TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: String get() = "ECDHE\u002DPSK\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: String get() = "ECDHE\u002DPSK\u002DCAMELLIA256\u002DSHA384"

val TLS1_TXT_RSA_WITH_SEED_SHA: String get() = "SEED\u002DSHA"

val TLS1_TXT_DH_DSS_WITH_SEED_SHA: String get() = "DH\u002DDSS\u002DSEED\u002DSHA"

val TLS1_TXT_DH_RSA_WITH_SEED_SHA: String get() = "DH\u002DRSA\u002DSEED\u002DSHA"

val TLS1_TXT_DHE_DSS_WITH_SEED_SHA: String get() = "DHE\u002DDSS\u002DSEED\u002DSHA"

val TLS1_TXT_DHE_RSA_WITH_SEED_SHA: String get() = "DHE\u002DRSA\u002DSEED\u002DSHA"

val TLS1_TXT_ADH_WITH_SEED_SHA: String get() = "ADH\u002DSEED\u002DSHA"

val TLS1_TXT_RSA_WITH_NULL_SHA256: String get() = "NULL\u002DSHA256"

val TLS1_TXT_RSA_WITH_AES_128_SHA256: String get() = "AES128\u002DSHA256"

val TLS1_TXT_RSA_WITH_AES_256_SHA256: String get() = "AES256\u002DSHA256"

val TLS1_TXT_DH_DSS_WITH_AES_128_SHA256: String get() = "DH\u002DDSS\u002DAES128\u002DSHA256"

val TLS1_TXT_DH_RSA_WITH_AES_128_SHA256: String get() = "DH\u002DRSA\u002DAES128\u002DSHA256"

val TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256: String get() = "DHE\u002DDSS\u002DAES128\u002DSHA256"

val TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256: String get() = "DHE\u002DRSA\u002DAES128\u002DSHA256"

val TLS1_TXT_DH_DSS_WITH_AES_256_SHA256: String get() = "DH\u002DDSS\u002DAES256\u002DSHA256"

val TLS1_TXT_DH_RSA_WITH_AES_256_SHA256: String get() = "DH\u002DRSA\u002DAES256\u002DSHA256"

val TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256: String get() = "DHE\u002DDSS\u002DAES256\u002DSHA256"

val TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256: String get() = "DHE\u002DRSA\u002DAES256\u002DSHA256"

val TLS1_TXT_ADH_WITH_AES_128_SHA256: String get() = "ADH\u002DAES128\u002DSHA256"

val TLS1_TXT_ADH_WITH_AES_256_SHA256: String get() = "ADH\u002DAES256\u002DSHA256"

val TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256: String get() = "AES128\u002DGCM\u002DSHA256"

val TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384: String get() = "AES256\u002DGCM\u002DSHA384"

val TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256: String get() = "DHE\u002DRSA\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384: String get() = "DHE\u002DRSA\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256: String get() = "DH\u002DRSA\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384: String get() = "DH\u002DRSA\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256: String get() = "DHE\u002DDSS\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384: String get() = "DHE\u002DDSS\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256: String get() = "DH\u002DDSS\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384: String get() = "DH\u002DDSS\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256: String get() = "ADH\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384: String get() = "ADH\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_RSA_WITH_AES_128_CCM: String get() = "AES128\u002DCCM"

val TLS1_TXT_RSA_WITH_AES_256_CCM: String get() = "AES256\u002DCCM"

val TLS1_TXT_DHE_RSA_WITH_AES_128_CCM: String get() = "DHE\u002DRSA\u002DAES128\u002DCCM"

val TLS1_TXT_DHE_RSA_WITH_AES_256_CCM: String get() = "DHE\u002DRSA\u002DAES256\u002DCCM"

val TLS1_TXT_RSA_WITH_AES_128_CCM_8: String get() = "AES128\u002DCCM8"

val TLS1_TXT_RSA_WITH_AES_256_CCM_8: String get() = "AES256\u002DCCM8"

val TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8: String get() = "DHE\u002DRSA\u002DAES128\u002DCCM8"

val TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8: String get() = "DHE\u002DRSA\u002DAES256\u002DCCM8"

val TLS1_TXT_PSK_WITH_AES_128_CCM: String get() = "PSK\u002DAES128\u002DCCM"

val TLS1_TXT_PSK_WITH_AES_256_CCM: String get() = "PSK\u002DAES256\u002DCCM"

val TLS1_TXT_DHE_PSK_WITH_AES_128_CCM: String get() = "DHE\u002DPSK\u002DAES128\u002DCCM"

val TLS1_TXT_DHE_PSK_WITH_AES_256_CCM: String get() = "DHE\u002DPSK\u002DAES256\u002DCCM"

val TLS1_TXT_PSK_WITH_AES_128_CCM_8: String get() = "PSK\u002DAES128\u002DCCM8"

val TLS1_TXT_PSK_WITH_AES_256_CCM_8: String get() = "PSK\u002DAES256\u002DCCM8"

val TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8: String get() = "DHE\u002DPSK\u002DAES128\u002DCCM8"

val TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8: String get() = "DHE\u002DPSK\u002DAES256\u002DCCM8"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM: String get() = "ECDHE\u002DECDSA\u002DAES128\u002DCCM"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM: String get() = "ECDHE\u002DECDSA\u002DAES256\u002DCCM"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8: String get() = "ECDHE\u002DECDSA\u002DAES128\u002DCCM8"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8: String get() = "ECDHE\u002DECDSA\u002DAES256\u002DCCM8"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256: String get() = "ECDHE\u002DECDSA\u002DAES128\u002DSHA256"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384: String get() = "ECDHE\u002DECDSA\u002DAES256\u002DSHA384"

val TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256: String get() = "ECDH\u002DECDSA\u002DAES128\u002DSHA256"

val TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384: String get() = "ECDH\u002DECDSA\u002DAES256\u002DSHA384"

val TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256: String get() = "ECDHE\u002DRSA\u002DAES128\u002DSHA256"

val TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384: String get() = "ECDHE\u002DRSA\u002DAES256\u002DSHA384"

val TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256: String get() = "ECDH\u002DRSA\u002DAES128\u002DSHA256"

val TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384: String get() = "ECDH\u002DRSA\u002DAES256\u002DSHA384"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: String get() = "ECDHE\u002DECDSA\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: String get() = "ECDHE\u002DECDSA\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: String get() = "ECDH\u002DECDSA\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: String get() = "ECDH\u002DECDSA\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256: String get() = "ECDHE\u002DRSA\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384: String get() = "ECDHE\u002DRSA\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256: String get() = "ECDH\u002DRSA\u002DAES128\u002DGCM\u002DSHA256"

val TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384: String get() = "ECDH\u002DRSA\u002DAES256\u002DGCM\u002DSHA384"

val TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA: String get() = "ECDHE\u002DPSK\u002DRC4\u002DSHA"

val TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA: String get() = "ECDHE\u002DPSK\u002D3DES\u002DEDE\u002DCBC\u002DSHA"

val TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA: String get() = "ECDHE\u002DPSK\u002DAES128\u002DCBC\u002DSHA"

val TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA: String get() = "ECDHE\u002DPSK\u002DAES256\u002DCBC\u002DSHA"

val TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256: String get() = "ECDHE\u002DPSK\u002DAES128\u002DCBC\u002DSHA256"

val TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384: String get() = "ECDHE\u002DPSK\u002DAES256\u002DCBC\u002DSHA384"

val TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA: String get() = "ECDHE\u002DPSK\u002DNULL\u002DSHA"

val TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256: String get() = "ECDHE\u002DPSK\u002DNULL\u002DSHA256"

val TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384: String get() = "ECDHE\u002DPSK\u002DNULL\u002DSHA384"

val TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256: String get() = "ECDHE\u002DECDSA\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384: String get() = "ECDHE\u002DECDSA\u002DCAMELLIA256\u002DSHA384"

val TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256: String get() = "ECDH\u002DECDSA\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384: String get() = "ECDH\u002DECDSA\u002DCAMELLIA256\u002DSHA384"

val TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: String get() = "ECDHE\u002DRSA\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384: String get() = "ECDHE\u002DRSA\u002DCAMELLIA256\u002DSHA384"

val TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256: String get() = "ECDH\u002DRSA\u002DCAMELLIA128\u002DSHA256"

val TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384: String get() = "ECDH\u002DRSA\u002DCAMELLIA256\u002DSHA384"

val TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305: String get() = "ECDHE\u002DRSA\u002DCHACHA20\u002DPOLY1305"

val TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305: String get() = "ECDHE\u002DECDSA\u002DCHACHA20\u002DPOLY1305"

val TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305: String get() = "DHE\u002DRSA\u002DCHACHA20\u002DPOLY1305"

val TLS1_TXT_PSK_WITH_CHACHA20_POLY1305: String get() = "PSK\u002DCHACHA20\u002DPOLY1305"

val TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305: String get() = "ECDHE\u002DPSK\u002DCHACHA20\u002DPOLY1305"

val TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305: String get() = "DHE\u002DPSK\u002DCHACHA20\u002DPOLY1305"

val TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305: String get() = "RSA\u002DPSK\u002DCHACHA20\u002DPOLY1305"

const val TLS_CT_RSA_SIGN: Int = 1

const val TLS_CT_DSS_SIGN: Int = 2

const val TLS_CT_RSA_FIXED_DH: Int = 3

const val TLS_CT_DSS_FIXED_DH: Int = 4

const val TLS_CT_ECDSA_SIGN: Int = 64

const val TLS_CT_RSA_FIXED_ECDH: Int = 65

const val TLS_CT_ECDSA_FIXED_ECDH: Int = 66

const val TLS_CT_GOST01_SIGN: Int = 22

const val TLS_CT_GOST12_SIGN: Int = 238

const val TLS_CT_GOST12_512_SIGN: Int = 239

const val TLS_CT_NUMBER: Int = 9

const val TLS1_FINISH_MAC_LENGTH: Int = 12

const val TLS_MD_MAX_CONST_SIZE: Int = 22

val TLS_MD_CLIENT_FINISH_CONST: String get() = "client finished"

const val TLS_MD_CLIENT_FINISH_CONST_SIZE: Int = 15

val TLS_MD_SERVER_FINISH_CONST: String get() = "server finished"

const val TLS_MD_SERVER_FINISH_CONST_SIZE: Int = 15

val TLS_MD_KEY_EXPANSION_CONST: String get() = "key expansion"

const val TLS_MD_KEY_EXPANSION_CONST_SIZE: Int = 13

val TLS_MD_CLIENT_WRITE_KEY_CONST: String get() = "client write key"

const val TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE: Int = 16

val TLS_MD_SERVER_WRITE_KEY_CONST: String get() = "server write key"

const val TLS_MD_SERVER_WRITE_KEY_CONST_SIZE: Int = 16

val TLS_MD_IV_BLOCK_CONST: String get() = "IV block"

const val TLS_MD_IV_BLOCK_CONST_SIZE: Int = 8

val TLS_MD_MASTER_SECRET_CONST: String get() = "master secret"

const val TLS_MD_MASTER_SECRET_CONST_SIZE: Int = 13

val TLS_MD_EXTENDED_MASTER_SECRET_CONST: String get() = "extended master secret"

const val TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE: Int = 22

const val DTLS1_VERSION: Int = 65279

const val DTLS1_2_VERSION: Int = 65277

const val DTLS_MIN_VERSION: Int = 65279

const val DTLS_MAX_VERSION: Int = 65277

const val DTLS1_VERSION_MAJOR: Int = 254

const val DTLS1_BAD_VER: Int = 256

const val DTLS_ANY_VERSION: Int = 131071

const val DTLS1_COOKIE_LENGTH: Int = 256

const val DTLS1_RT_HEADER_LENGTH: Int = 13

const val DTLS1_HM_HEADER_LENGTH: Int = 12

const val DTLS1_HM_BAD_FRAGMENT: Int = -2

const val DTLS1_HM_FRAGMENT_RETRY: Int = -3

const val DTLS1_CCS_HEADER_LENGTH: Int = 1

const val DTLS1_AL_HEADER_LENGTH: Int = 2

const val DTLS1_TMO_READ_COUNT: Int = 2

const val DTLS1_TMO_WRITE_COUNT: Int = 2

const val DTLS1_TMO_ALERT_COUNT: Int = 12

const val SRTP_AES128_CM_SHA1_80: Int = 1

const val SRTP_AES128_CM_SHA1_32: Int = 2

const val SRTP_AES128_F8_SHA1_80: Int = 3

const val SRTP_AES128_F8_SHA1_32: Int = 4

const val SRTP_NULL_SHA1_80: Int = 5

const val SRTP_NULL_SHA1_32: Int = 6

const val SRTP_AEAD_AES_128_GCM: Int = 7

const val SRTP_AEAD_AES_256_GCM: Int = 8

const val SSL_ST_CONNECT: Int = 4096

const val SSL_ST_ACCEPT: Int = 8192

const val SSL_ST_MASK: Int = 4095

const val SSL_CB_LOOP: Int = 1

const val SSL_CB_EXIT: Int = 2

const val SSL_CB_READ: Int = 4

const val SSL_CB_WRITE: Int = 8

const val SSL_CB_ALERT: Int = 16384

const val SSL_CB_READ_ALERT: Int = 16388

const val SSL_CB_WRITE_ALERT: Int = 16392

const val SSL_CB_ACCEPT_LOOP: Int = 8193

const val SSL_CB_ACCEPT_EXIT: Int = 8194

const val SSL_CB_CONNECT_LOOP: Int = 4097

const val SSL_CB_CONNECT_EXIT: Int = 4098

const val SSL_CB_HANDSHAKE_START: Int = 16

const val SSL_CB_HANDSHAKE_DONE: Int = 32

const val SSL_ST_READ_HEADER: Int = 240

const val SSL_ST_READ_BODY: Int = 241

const val SSL_ST_READ_DONE: Int = 242

const val SSL_VERIFY_NONE: Int = 0

const val SSL_VERIFY_PEER: Int = 1

const val SSL_VERIFY_FAIL_IF_NO_PEER_CERT: Int = 2

const val SSL_VERIFY_CLIENT_ONCE: Int = 4

const val SSL_AD_REASON_OFFSET: Int = 1000

const val SSL_AD_CLOSE_NOTIFY: Int = 0

const val SSL_AD_UNEXPECTED_MESSAGE: Int = 10

const val SSL_AD_BAD_RECORD_MAC: Int = 20

const val SSL_AD_DECRYPTION_FAILED: Int = 21

const val SSL_AD_RECORD_OVERFLOW: Int = 22

const val SSL_AD_DECOMPRESSION_FAILURE: Int = 30

const val SSL_AD_HANDSHAKE_FAILURE: Int = 40

const val SSL_AD_NO_CERTIFICATE: Int = 41

const val SSL_AD_BAD_CERTIFICATE: Int = 42

const val SSL_AD_UNSUPPORTED_CERTIFICATE: Int = 43

const val SSL_AD_CERTIFICATE_REVOKED: Int = 44

const val SSL_AD_CERTIFICATE_EXPIRED: Int = 45

const val SSL_AD_CERTIFICATE_UNKNOWN: Int = 46

const val SSL_AD_ILLEGAL_PARAMETER: Int = 47

const val SSL_AD_UNKNOWN_CA: Int = 48

const val SSL_AD_ACCESS_DENIED: Int = 49

const val SSL_AD_DECODE_ERROR: Int = 50

const val SSL_AD_DECRYPT_ERROR: Int = 51

const val SSL_AD_EXPORT_RESTRICTION: Int = 60

const val SSL_AD_PROTOCOL_VERSION: Int = 70

const val SSL_AD_INSUFFICIENT_SECURITY: Int = 71

const val SSL_AD_INTERNAL_ERROR: Int = 80

const val SSL_AD_USER_CANCELLED: Int = 90

const val SSL_AD_NO_RENEGOTIATION: Int = 100

const val SSL_AD_UNSUPPORTED_EXTENSION: Int = 110

const val SSL_AD_CERTIFICATE_UNOBTAINABLE: Int = 111

const val SSL_AD_UNRECOGNIZED_NAME: Int = 112

const val SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE: Int = 113

const val SSL_AD_BAD_CERTIFICATE_HASH_VALUE: Int = 114

const val SSL_AD_UNKNOWN_PSK_IDENTITY: Int = 115

const val SSL_AD_INAPPROPRIATE_FALLBACK: Int = 86

const val SSL_AD_NO_APPLICATION_PROTOCOL: Int = 120

const val SSL_ERROR_NONE: Int = 0

const val SSL_ERROR_SSL: Int = 1

const val SSL_ERROR_WANT_READ: Int = 2

const val SSL_ERROR_WANT_WRITE: Int = 3

const val SSL_ERROR_WANT_X509_LOOKUP: Int = 4

const val SSL_ERROR_SYSCALL: Int = 5

const val SSL_ERROR_ZERO_RETURN: Int = 6

const val SSL_ERROR_WANT_CONNECT: Int = 7

const val SSL_ERROR_WANT_ACCEPT: Int = 8

const val SSL_ERROR_WANT_ASYNC: Int = 9

const val SSL_ERROR_WANT_ASYNC_JOB: Int = 10

const val SSL_CTRL_SET_TMP_DH: Int = 3

const val SSL_CTRL_SET_TMP_ECDH: Int = 4

const val SSL_CTRL_SET_TMP_DH_CB: Int = 6

const val SSL_CTRL_GET_CLIENT_CERT_REQUEST: Int = 9

const val SSL_CTRL_GET_NUM_RENEGOTIATIONS: Int = 10

const val SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS: Int = 11

const val SSL_CTRL_GET_TOTAL_RENEGOTIATIONS: Int = 12

const val SSL_CTRL_GET_FLAGS: Int = 13

const val SSL_CTRL_EXTRA_CHAIN_CERT: Int = 14

const val SSL_CTRL_SET_MSG_CALLBACK: Int = 15

const val SSL_CTRL_SET_MSG_CALLBACK_ARG: Int = 16

const val SSL_CTRL_SET_MTU: Int = 17

const val SSL_CTRL_SESS_NUMBER: Int = 20

const val SSL_CTRL_SESS_CONNECT: Int = 21

const val SSL_CTRL_SESS_CONNECT_GOOD: Int = 22

const val SSL_CTRL_SESS_CONNECT_RENEGOTIATE: Int = 23

const val SSL_CTRL_SESS_ACCEPT: Int = 24

const val SSL_CTRL_SESS_ACCEPT_GOOD: Int = 25

const val SSL_CTRL_SESS_ACCEPT_RENEGOTIATE: Int = 26

const val SSL_CTRL_SESS_HIT: Int = 27

const val SSL_CTRL_SESS_CB_HIT: Int = 28

const val SSL_CTRL_SESS_MISSES: Int = 29

const val SSL_CTRL_SESS_TIMEOUTS: Int = 30

const val SSL_CTRL_SESS_CACHE_FULL: Int = 31

const val SSL_CTRL_MODE: Int = 33

const val SSL_CTRL_GET_READ_AHEAD: Int = 40

const val SSL_CTRL_SET_READ_AHEAD: Int = 41

const val SSL_CTRL_SET_SESS_CACHE_SIZE: Int = 42

const val SSL_CTRL_GET_SESS_CACHE_SIZE: Int = 43

const val SSL_CTRL_SET_SESS_CACHE_MODE: Int = 44

const val SSL_CTRL_GET_SESS_CACHE_MODE: Int = 45

const val SSL_CTRL_GET_MAX_CERT_LIST: Int = 50

const val SSL_CTRL_SET_MAX_CERT_LIST: Int = 51

const val SSL_CTRL_SET_MAX_SEND_FRAGMENT: Int = 52

const val SSL_CTRL_SET_TLSEXT_SERVERNAME_CB: Int = 53

const val SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG: Int = 54

const val SSL_CTRL_SET_TLSEXT_HOSTNAME: Int = 55

const val SSL_CTRL_SET_TLSEXT_DEBUG_CB: Int = 56

const val SSL_CTRL_SET_TLSEXT_DEBUG_ARG: Int = 57

const val SSL_CTRL_GET_TLSEXT_TICKET_KEYS: Int = 58

const val SSL_CTRL_SET_TLSEXT_TICKET_KEYS: Int = 59

const val SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB: Int = 63

const val SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG: Int = 64

const val SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE: Int = 65

const val SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS: Int = 66

const val SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS: Int = 67

const val SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS: Int = 68

const val SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS: Int = 69

const val SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP: Int = 70

const val SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP: Int = 71

const val SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB: Int = 72

const val SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB: Int = 75

const val SSL_CTRL_SET_SRP_VERIFY_PARAM_CB: Int = 76

const val SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB: Int = 77

const val SSL_CTRL_SET_SRP_ARG: Int = 78

const val SSL_CTRL_SET_TLS_EXT_SRP_USERNAME: Int = 79

const val SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH: Int = 80

const val SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD: Int = 81

const val DTLS_CTRL_GET_TIMEOUT: Int = 73

const val DTLS_CTRL_HANDLE_TIMEOUT: Int = 74

const val SSL_CTRL_GET_RI_SUPPORT: Int = 76

const val SSL_CTRL_CLEAR_MODE: Int = 78

const val SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB: Int = 79

const val SSL_CTRL_GET_EXTRA_CHAIN_CERTS: Int = 82

const val SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS: Int = 83

const val SSL_CTRL_CHAIN: Int = 88

const val SSL_CTRL_CHAIN_CERT: Int = 89

const val SSL_CTRL_GET_CURVES: Int = 90

const val SSL_CTRL_SET_CURVES: Int = 91

const val SSL_CTRL_SET_CURVES_LIST: Int = 92

const val SSL_CTRL_GET_SHARED_CURVE: Int = 93

const val SSL_CTRL_SET_SIGALGS: Int = 97

const val SSL_CTRL_SET_SIGALGS_LIST: Int = 98

const val SSL_CTRL_CERT_FLAGS: Int = 99

const val SSL_CTRL_CLEAR_CERT_FLAGS: Int = 100

const val SSL_CTRL_SET_CLIENT_SIGALGS: Int = 101

const val SSL_CTRL_SET_CLIENT_SIGALGS_LIST: Int = 102

const val SSL_CTRL_GET_CLIENT_CERT_TYPES: Int = 103

const val SSL_CTRL_SET_CLIENT_CERT_TYPES: Int = 104

const val SSL_CTRL_BUILD_CERT_CHAIN: Int = 105

const val SSL_CTRL_SET_VERIFY_CERT_STORE: Int = 106

const val SSL_CTRL_SET_CHAIN_CERT_STORE: Int = 107

const val SSL_CTRL_GET_PEER_SIGNATURE_NID: Int = 108

const val SSL_CTRL_GET_SERVER_TMP_KEY: Int = 109

const val SSL_CTRL_GET_RAW_CIPHERLIST: Int = 110

const val SSL_CTRL_GET_EC_POINT_FORMATS: Int = 111

const val SSL_CTRL_GET_CHAIN_CERTS: Int = 115

const val SSL_CTRL_SELECT_CURRENT_CERT: Int = 116

const val SSL_CTRL_SET_CURRENT_CERT: Int = 117

const val SSL_CTRL_SET_DH_AUTO: Int = 118

const val DTLS_CTRL_SET_LINK_MTU: Int = 120

const val DTLS_CTRL_GET_LINK_MIN_MTU: Int = 121

const val SSL_CTRL_GET_EXTMS_SUPPORT: Int = 122

const val SSL_CTRL_SET_MIN_PROTO_VERSION: Int = 123

const val SSL_CTRL_SET_MAX_PROTO_VERSION: Int = 124

const val SSL_CTRL_SET_SPLIT_SEND_FRAGMENT: Int = 125

const val SSL_CTRL_SET_MAX_PIPELINES: Int = 126

const val SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE: Int = 127

const val SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB: Int = 128

const val SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG: Int = 129

const val SSL_CTRL_GET_MIN_PROTO_VERSION: Int = 130

const val SSL_CTRL_GET_MAX_PROTO_VERSION: Int = 131

const val SSL_CERT_SET_FIRST: Int = 1

const val SSL_CERT_SET_NEXT: Int = 2

const val SSL_CERT_SET_SERVER: Int = 3

const val SSL_SECOP_OTHER_TYPE: UInt = 4294901760u

const val SSL_SECOP_OTHER_NONE: Int = 0

const val SSL_SECOP_OTHER_CIPHER: Int = 65536

const val SSL_SECOP_OTHER_CURVE: Int = 131072

const val SSL_SECOP_OTHER_DH: Int = 196608

const val SSL_SECOP_OTHER_PKEY: Int = 262144

const val SSL_SECOP_OTHER_SIGALG: Int = 327680

const val SSL_SECOP_OTHER_CERT: Int = 393216

const val SSL_SECOP_PEER: Int = 4096

const val SSL_SECOP_CIPHER_SUPPORTED: Int = 65537

const val SSL_SECOP_CIPHER_SHARED: Int = 65538

const val SSL_SECOP_CIPHER_CHECK: Int = 65539

const val SSL_SECOP_CURVE_SUPPORTED: Int = 131076

const val SSL_SECOP_CURVE_SHARED: Int = 131077

const val SSL_SECOP_CURVE_CHECK: Int = 131078

const val SSL_SECOP_TMP_DH: Int = 262151

const val SSL_SECOP_VERSION: Int = 9

const val SSL_SECOP_TICKET: Int = 10

const val SSL_SECOP_SIGALG_SUPPORTED: Int = 327691

const val SSL_SECOP_SIGALG_SHARED: Int = 327692

const val SSL_SECOP_SIGALG_CHECK: Int = 327693

const val SSL_SECOP_SIGALG_MASK: Int = 327694

const val SSL_SECOP_COMPRESSION: Int = 15

const val SSL_SECOP_EE_KEY: Int = 393232

const val SSL_SECOP_CA_KEY: Int = 393233

const val SSL_SECOP_CA_MD: Int = 393234

const val SSL_SECOP_PEER_EE_KEY: Int = 397328

const val SSL_SECOP_PEER_CA_KEY: Int = 397329

const val SSL_SECOP_PEER_CA_MD: Int = 397330

const val OPENSSL_INIT_NO_LOAD_SSL_STRINGS: Long = 1048576

const val OPENSSL_INIT_LOAD_SSL_STRINGS: Long = 2097152

const val OPENSSL_INIT_SSL_DEFAULT: Long = 2097154

const val SSL_F_CHECK_SUITEB_CIPHER_LIST: Int = 331

const val SSL_F_CT_MOVE_SCTS: Int = 345

const val SSL_F_CT_STRICT: Int = 349

const val SSL_F_D2I_SSL_SESSION: Int = 103

const val SSL_F_DANE_CTX_ENABLE: Int = 347

const val SSL_F_DANE_MTYPE_SET: Int = 393

const val SSL_F_DANE_TLSA_ADD: Int = 394

const val SSL_F_DO_DTLS1_WRITE: Int = 245

const val SSL_F_DO_SSL3_WRITE: Int = 104

const val SSL_F_DTLS1_BUFFER_RECORD: Int = 247

const val SSL_F_DTLS1_CHECK_TIMEOUT_NUM: Int = 318

const val SSL_F_DTLS1_HEARTBEAT: Int = 305

const val SSL_F_DTLS1_PREPROCESS_FRAGMENT: Int = 288

const val SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS: Int = 424

const val SSL_F_DTLS1_PROCESS_RECORD: Int = 257

const val SSL_F_DTLS1_READ_BYTES: Int = 258

const val SSL_F_DTLS1_READ_FAILED: Int = 339

const val SSL_F_DTLS1_RETRANSMIT_MESSAGE: Int = 390

const val SSL_F_DTLS1_WRITE_APP_DATA_BYTES: Int = 268

const val SSL_F_DTLSV1_LISTEN: Int = 350

const val SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC: Int = 371

const val SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST: Int = 385

const val SSL_F_DTLS_GET_REASSEMBLED_MESSAGE: Int = 370

const val SSL_F_DTLS_PROCESS_HELLO_VERIFY: Int = 386

const val SSL_F_OPENSSL_INIT_SSL: Int = 342

const val SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION: Int = 417

const val SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION: Int = 418

const val SSL_F_READ_STATE_MACHINE: Int = 352

const val SSL_F_SSL3_CHANGE_CIPHER_STATE: Int = 129

const val SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM: Int = 130

const val SSL_F_SSL3_CTRL: Int = 213

const val SSL_F_SSL3_CTX_CTRL: Int = 133

const val SSL_F_SSL3_DIGEST_CACHED_RECORDS: Int = 293

const val SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC: Int = 292

const val SSL_F_SSL3_FINAL_FINISH_MAC: Int = 285

const val SSL_F_SSL3_GENERATE_KEY_BLOCK: Int = 238

const val SSL_F_SSL3_GENERATE_MASTER_SECRET: Int = 388

const val SSL_F_SSL3_GET_RECORD: Int = 143

const val SSL_F_SSL3_INIT_FINISHED_MAC: Int = 397

const val SSL_F_SSL3_OUTPUT_CERT_CHAIN: Int = 147

const val SSL_F_SSL3_READ_BYTES: Int = 148

const val SSL_F_SSL3_READ_N: Int = 149

const val SSL_F_SSL3_SETUP_KEY_BLOCK: Int = 157

const val SSL_F_SSL3_SETUP_READ_BUFFER: Int = 156

const val SSL_F_SSL3_SETUP_WRITE_BUFFER: Int = 291

const val SSL_F_SSL3_WRITE_BYTES: Int = 158

const val SSL_F_SSL3_WRITE_PENDING: Int = 159

const val SSL_F_SSL_ADD_CERT_CHAIN: Int = 316

const val SSL_F_SSL_ADD_CERT_TO_BUF: Int = 319

const val SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT: Int = 298

const val SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT: Int = 277

const val SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT: Int = 307

const val SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK: Int = 215

const val SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK: Int = 216

const val SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT: Int = 299

const val SSL_F_SSL_ADD_SERVERHELLO_TLSEXT: Int = 278

const val SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT: Int = 308

const val SSL_F_SSL_BAD_METHOD: Int = 160

const val SSL_F_SSL_BUILD_CERT_CHAIN: Int = 332

const val SSL_F_SSL_BYTES_TO_CIPHER_LIST: Int = 161

const val SSL_F_SSL_CERT_ADD0_CHAIN_CERT: Int = 346

const val SSL_F_SSL_CERT_DUP: Int = 221

const val SSL_F_SSL_CERT_NEW: Int = 162

const val SSL_F_SSL_CERT_SET0_CHAIN: Int = 340

const val SSL_F_SSL_CHECK_PRIVATE_KEY: Int = 163

const val SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT: Int = 280

const val SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG: Int = 279

const val SSL_F_SSL_CIPHER_PROCESS_RULESTR: Int = 230

const val SSL_F_SSL_CIPHER_STRENGTH_SORT: Int = 231

const val SSL_F_SSL_CLEAR: Int = 164

const val SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD: Int = 165

const val SSL_F_SSL_CONF_CMD: Int = 334

const val SSL_F_SSL_CREATE_CIPHER_LIST: Int = 166

const val SSL_F_SSL_CTRL: Int = 232

const val SSL_F_SSL_CTX_CHECK_PRIVATE_KEY: Int = 168

const val SSL_F_SSL_CTX_ENABLE_CT: Int = 398

const val SSL_F_SSL_CTX_MAKE_PROFILES: Int = 309

const val SSL_F_SSL_CTX_NEW: Int = 169

const val SSL_F_SSL_CTX_SET_ALPN_PROTOS: Int = 343

const val SSL_F_SSL_CTX_SET_CIPHER_LIST: Int = 269

const val SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE: Int = 290

const val SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK: Int = 396

const val SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT: Int = 219

const val SSL_F_SSL_CTX_SET_SSL_VERSION: Int = 170

const val SSL_F_SSL_CTX_USE_CERTIFICATE: Int = 171

const val SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1: Int = 172

const val SSL_F_SSL_CTX_USE_CERTIFICATE_FILE: Int = 173

const val SSL_F_SSL_CTX_USE_PRIVATEKEY: Int = 174

const val SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1: Int = 175

const val SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE: Int = 176

const val SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT: Int = 272

const val SSL_F_SSL_CTX_USE_RSAPRIVATEKEY: Int = 177

const val SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1: Int = 178

const val SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE: Int = 179

const val SSL_F_SSL_CTX_USE_SERVERINFO: Int = 336

const val SSL_F_SSL_CTX_USE_SERVERINFO_FILE: Int = 337

const val SSL_F_SSL_DANE_DUP: Int = 403

const val SSL_F_SSL_DANE_ENABLE: Int = 395

const val SSL_F_SSL_DO_CONFIG: Int = 391

const val SSL_F_SSL_DO_HANDSHAKE: Int = 180

const val SSL_F_SSL_DUP_CA_LIST: Int = 408

const val SSL_F_SSL_ENABLE_CT: Int = 402

const val SSL_F_SSL_GET_NEW_SESSION: Int = 181

const val SSL_F_SSL_GET_PREV_SESSION: Int = 217

const val SSL_F_SSL_GET_SERVER_CERT_INDEX: Int = 322

const val SSL_F_SSL_GET_SIGN_PKEY: Int = 183

const val SSL_F_SSL_INIT_WBIO_BUFFER: Int = 184

const val SSL_F_SSL_LOAD_CLIENT_CA_FILE: Int = 185

const val SSL_F_SSL_MODULE_INIT: Int = 392

const val SSL_F_SSL_NEW: Int = 186

const val SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT: Int = 300

const val SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT: Int = 302

const val SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT: Int = 310

const val SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT: Int = 301

const val SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT: Int = 303

const val SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT: Int = 311

const val SSL_F_SSL_PEEK: Int = 270

const val SSL_F_SSL_READ: Int = 223

const val SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT: Int = 320

const val SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT: Int = 321

const val SSL_F_SSL_SESSION_DUP: Int = 348

const val SSL_F_SSL_SESSION_NEW: Int = 189

const val SSL_F_SSL_SESSION_PRINT_FP: Int = 190

const val SSL_F_SSL_SESSION_SET1_ID: Int = 423

const val SSL_F_SSL_SESSION_SET1_ID_CONTEXT: Int = 312

const val SSL_F_SSL_SET_ALPN_PROTOS: Int = 344

const val SSL_F_SSL_SET_CERT: Int = 191

const val SSL_F_SSL_SET_CIPHER_LIST: Int = 271

const val SSL_F_SSL_SET_CT_VALIDATION_CALLBACK: Int = 399

const val SSL_F_SSL_SET_FD: Int = 192

const val SSL_F_SSL_SET_PKEY: Int = 193

const val SSL_F_SSL_SET_RFD: Int = 194

const val SSL_F_SSL_SET_SESSION: Int = 195

const val SSL_F_SSL_SET_SESSION_ID_CONTEXT: Int = 218

const val SSL_F_SSL_SET_SESSION_TICKET_EXT: Int = 294

const val SSL_F_SSL_SET_WFD: Int = 196

const val SSL_F_SSL_SHUTDOWN: Int = 224

const val SSL_F_SSL_SRP_CTX_INIT: Int = 313

const val SSL_F_SSL_START_ASYNC_JOB: Int = 389

const val SSL_F_SSL_UNDEFINED_FUNCTION: Int = 197

const val SSL_F_SSL_UNDEFINED_VOID_FUNCTION: Int = 244

const val SSL_F_SSL_USE_CERTIFICATE: Int = 198

const val SSL_F_SSL_USE_CERTIFICATE_ASN1: Int = 199

const val SSL_F_SSL_USE_CERTIFICATE_FILE: Int = 200

const val SSL_F_SSL_USE_PRIVATEKEY: Int = 201

const val SSL_F_SSL_USE_PRIVATEKEY_ASN1: Int = 202

const val SSL_F_SSL_USE_PRIVATEKEY_FILE: Int = 203

const val SSL_F_SSL_USE_PSK_IDENTITY_HINT: Int = 273

const val SSL_F_SSL_USE_RSAPRIVATEKEY: Int = 204

const val SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1: Int = 205

const val SSL_F_SSL_USE_RSAPRIVATEKEY_FILE: Int = 206

const val SSL_F_SSL_VALIDATE_CT: Int = 400

const val SSL_F_SSL_VERIFY_CERT_CHAIN: Int = 207

const val SSL_F_SSL_WRITE: Int = 208

const val SSL_F_STATE_MACHINE: Int = 353

const val SSL_F_TLS12_CHECK_PEER_SIGALG: Int = 333

const val SSL_F_TLS1_CHANGE_CIPHER_STATE: Int = 209

const val SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS: Int = 341

const val SSL_F_TLS1_ENC: Int = 401

const val SSL_F_TLS1_EXPORT_KEYING_MATERIAL: Int = 314

const val SSL_F_TLS1_GET_CURVELIST: Int = 338

const val SSL_F_TLS1_PRF: Int = 284

const val SSL_F_TLS1_SETUP_KEY_BLOCK: Int = 211

const val SSL_F_TLS1_SET_SERVER_SIGALGS: Int = 335

const val SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK: Int = 354

const val SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST: Int = 372

const val SSL_F_TLS_CONSTRUCT_CKE_DHE: Int = 404

const val SSL_F_TLS_CONSTRUCT_CKE_ECDHE: Int = 405

const val SSL_F_TLS_CONSTRUCT_CKE_GOST: Int = 406

const val SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE: Int = 407

const val SSL_F_TLS_CONSTRUCT_CKE_RSA: Int = 409

const val SSL_F_TLS_CONSTRUCT_CKE_SRP: Int = 410

const val SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE: Int = 355

const val SSL_F_TLS_CONSTRUCT_CLIENT_HELLO: Int = 356

const val SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE: Int = 357

const val SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY: Int = 358

const val SSL_F_TLS_CONSTRUCT_FINISHED: Int = 359

const val SSL_F_TLS_CONSTRUCT_HELLO_REQUEST: Int = 373

const val SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET: Int = 428

const val SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE: Int = 374

const val SSL_F_TLS_CONSTRUCT_SERVER_DONE: Int = 375

const val SSL_F_TLS_CONSTRUCT_SERVER_HELLO: Int = 376

const val SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE: Int = 377

const val SSL_F_TLS_GET_MESSAGE_BODY: Int = 351

const val SSL_F_TLS_GET_MESSAGE_HEADER: Int = 387

const val SSL_F_TLS_POST_PROCESS_CLIENT_HELLO: Int = 378

const val SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE: Int = 384

const val SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE: Int = 360

const val SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST: Int = 361

const val SSL_F_TLS_PROCESS_CERT_STATUS: Int = 362

const val SSL_F_TLS_PROCESS_CERT_VERIFY: Int = 379

const val SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC: Int = 363

const val SSL_F_TLS_PROCESS_CKE_DHE: Int = 411

const val SSL_F_TLS_PROCESS_CKE_ECDHE: Int = 412

const val SSL_F_TLS_PROCESS_CKE_GOST: Int = 413

const val SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE: Int = 414

const val SSL_F_TLS_PROCESS_CKE_RSA: Int = 415

const val SSL_F_TLS_PROCESS_CKE_SRP: Int = 416

const val SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE: Int = 380

const val SSL_F_TLS_PROCESS_CLIENT_HELLO: Int = 381

const val SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE: Int = 382

const val SSL_F_TLS_PROCESS_FINISHED: Int = 364

const val SSL_F_TLS_PROCESS_KEY_EXCHANGE: Int = 365

const val SSL_F_TLS_PROCESS_NEW_SESSION_TICKET: Int = 366

const val SSL_F_TLS_PROCESS_NEXT_PROTO: Int = 383

const val SSL_F_TLS_PROCESS_SERVER_CERTIFICATE: Int = 367

const val SSL_F_TLS_PROCESS_SERVER_DONE: Int = 368

const val SSL_F_TLS_PROCESS_SERVER_HELLO: Int = 369

const val SSL_F_TLS_PROCESS_SKE_DHE: Int = 419

const val SSL_F_TLS_PROCESS_SKE_ECDHE: Int = 420

const val SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE: Int = 421

const val SSL_F_TLS_PROCESS_SKE_SRP: Int = 422

const val SSL_F_USE_CERTIFICATE_CHAIN_FILE: Int = 220

const val SSL_R_APP_DATA_IN_HANDSHAKE: Int = 100

const val SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT: Int = 272

const val SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE: Int = 143

const val SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE: Int = 158

const val SSL_R_BAD_CHANGE_CIPHER_SPEC: Int = 103

const val SSL_R_BAD_DATA: Int = 390

const val SSL_R_BAD_DATA_RETURNED_BY_CALLBACK: Int = 106

const val SSL_R_BAD_DECOMPRESSION: Int = 107

const val SSL_R_BAD_DH_VALUE: Int = 102

const val SSL_R_BAD_DIGEST_LENGTH: Int = 111

const val SSL_R_BAD_ECC_CERT: Int = 304

const val SSL_R_BAD_ECPOINT: Int = 306

const val SSL_R_BAD_HANDSHAKE_LENGTH: Int = 332

const val SSL_R_BAD_HELLO_REQUEST: Int = 105

const val SSL_R_BAD_LENGTH: Int = 271

const val SSL_R_BAD_PACKET_LENGTH: Int = 115

const val SSL_R_BAD_PROTOCOL_VERSION_NUMBER: Int = 116

const val SSL_R_BAD_RSA_ENCRYPT: Int = 119

const val SSL_R_BAD_SIGNATURE: Int = 123

const val SSL_R_BAD_SRP_A_LENGTH: Int = 347

const val SSL_R_BAD_SRP_PARAMETERS: Int = 371

const val SSL_R_BAD_SRTP_MKI_VALUE: Int = 352

const val SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST: Int = 353

const val SSL_R_BAD_SSL_FILETYPE: Int = 124

const val SSL_R_BAD_VALUE: Int = 384

const val SSL_R_BAD_WRITE_RETRY: Int = 127

const val SSL_R_BIO_NOT_SET: Int = 128

const val SSL_R_BLOCK_CIPHER_PAD_IS_WRONG: Int = 129

const val SSL_R_BN_LIB: Int = 130

const val SSL_R_CA_DN_LENGTH_MISMATCH: Int = 131

const val SSL_R_CA_KEY_TOO_SMALL: Int = 397

const val SSL_R_CA_MD_TOO_WEAK: Int = 398

const val SSL_R_CCS_RECEIVED_EARLY: Int = 133

const val SSL_R_CERTIFICATE_VERIFY_FAILED: Int = 134

const val SSL_R_CERT_CB_ERROR: Int = 377

const val SSL_R_CERT_LENGTH_MISMATCH: Int = 135

const val SSL_R_CIPHER_CODE_WRONG_LENGTH: Int = 137

const val SSL_R_CIPHER_OR_HASH_UNAVAILABLE: Int = 138

const val SSL_R_CLIENTHELLO_TLSEXT: Int = 226

const val SSL_R_COMPRESSED_LENGTH_TOO_LONG: Int = 140

const val SSL_R_COMPRESSION_DISABLED: Int = 343

const val SSL_R_COMPRESSION_FAILURE: Int = 141

const val SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE: Int = 307

const val SSL_R_COMPRESSION_LIBRARY_ERROR: Int = 142

const val SSL_R_CONNECTION_TYPE_NOT_SET: Int = 144

const val SSL_R_CONTEXT_NOT_DANE_ENABLED: Int = 167

const val SSL_R_COOKIE_GEN_CALLBACK_FAILURE: Int = 400

const val SSL_R_COOKIE_MISMATCH: Int = 308

const val SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED: Int = 206

const val SSL_R_DANE_ALREADY_ENABLED: Int = 172

const val SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL: Int = 173

const val SSL_R_DANE_NOT_ENABLED: Int = 175

const val SSL_R_DANE_TLSA_BAD_CERTIFICATE: Int = 180

const val SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE: Int = 184

const val SSL_R_DANE_TLSA_BAD_DATA_LENGTH: Int = 189

const val SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH: Int = 192

const val SSL_R_DANE_TLSA_BAD_MATCHING_TYPE: Int = 200

const val SSL_R_DANE_TLSA_BAD_PUBLIC_KEY: Int = 201

const val SSL_R_DANE_TLSA_BAD_SELECTOR: Int = 202

const val SSL_R_DANE_TLSA_NULL_DATA: Int = 203

const val SSL_R_DATA_BETWEEN_CCS_AND_FINISHED: Int = 145

const val SSL_R_DATA_LENGTH_TOO_LONG: Int = 146

const val SSL_R_DECRYPTION_FAILED: Int = 147

const val SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC: Int = 281

const val SSL_R_DH_KEY_TOO_SMALL: Int = 394

const val SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG: Int = 148

const val SSL_R_DIGEST_CHECK_FAILED: Int = 149

const val SSL_R_DTLS_MESSAGE_TOO_BIG: Int = 334

const val SSL_R_DUPLICATE_COMPRESSION_ID: Int = 309

const val SSL_R_ECC_CERT_NOT_FOR_SIGNING: Int = 318

const val SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE: Int = 374

const val SSL_R_EE_KEY_TOO_SMALL: Int = 399

const val SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST: Int = 354

const val SSL_R_ENCRYPTED_LENGTH_TOO_LONG: Int = 150

const val SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST: Int = 151

const val SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN: Int = 204

const val SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE: Int = 194

const val SSL_R_EXCESSIVE_MESSAGE_SIZE: Int = 152

const val SSL_R_EXTRA_DATA_IN_MESSAGE: Int = 153

const val SSL_R_FAILED_TO_INIT_ASYNC: Int = 405

const val SSL_R_FRAGMENTED_CLIENT_HELLO: Int = 401

const val SSL_R_GOT_A_FIN_BEFORE_A_CCS: Int = 154

const val SSL_R_HTTPS_PROXY_REQUEST: Int = 155

const val SSL_R_HTTP_REQUEST: Int = 156

const val SSL_R_ILLEGAL_SUITEB_DIGEST: Int = 380

const val SSL_R_INAPPROPRIATE_FALLBACK: Int = 373

const val SSL_R_INCONSISTENT_COMPRESSION: Int = 340

const val SSL_R_INCONSISTENT_EXTMS: Int = 104

const val SSL_R_INVALID_COMMAND: Int = 280

const val SSL_R_INVALID_COMPRESSION_ALGORITHM: Int = 341

const val SSL_R_INVALID_CONFIGURATION_NAME: Int = 113

const val SSL_R_INVALID_CT_VALIDATION_TYPE: Int = 212

const val SSL_R_INVALID_NULL_CMD_NAME: Int = 385

const val SSL_R_INVALID_SEQUENCE_NUMBER: Int = 402

const val SSL_R_INVALID_SERVERINFO_DATA: Int = 388

const val SSL_R_INVALID_SRP_USERNAME: Int = 357

const val SSL_R_INVALID_STATUS_RESPONSE: Int = 328

const val SSL_R_INVALID_TICKET_KEYS_LENGTH: Int = 325

const val SSL_R_LENGTH_MISMATCH: Int = 159

const val SSL_R_LENGTH_TOO_LONG: Int = 404

const val SSL_R_LENGTH_TOO_SHORT: Int = 160

const val SSL_R_LIBRARY_BUG: Int = 274

const val SSL_R_LIBRARY_HAS_NO_CIPHERS: Int = 161

const val SSL_R_MISSING_DSA_SIGNING_CERT: Int = 165

const val SSL_R_MISSING_ECDSA_SIGNING_CERT: Int = 381

const val SSL_R_MISSING_RSA_CERTIFICATE: Int = 168

const val SSL_R_MISSING_RSA_ENCRYPTING_CERT: Int = 169

const val SSL_R_MISSING_RSA_SIGNING_CERT: Int = 170

const val SSL_R_MISSING_SRP_PARAM: Int = 358

const val SSL_R_MISSING_TMP_DH_KEY: Int = 171

const val SSL_R_MISSING_TMP_ECDH_KEY: Int = 311

const val SSL_R_NO_CERTIFICATES_RETURNED: Int = 176

const val SSL_R_NO_CERTIFICATE_ASSIGNED: Int = 177

const val SSL_R_NO_CERTIFICATE_SET: Int = 179

const val SSL_R_NO_CIPHERS_AVAILABLE: Int = 181

const val SSL_R_NO_CIPHERS_SPECIFIED: Int = 183

const val SSL_R_NO_CIPHER_MATCH: Int = 185

const val SSL_R_NO_CLIENT_CERT_METHOD: Int = 331

const val SSL_R_NO_COMPRESSION_SPECIFIED: Int = 187

const val SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER: Int = 330

const val SSL_R_NO_METHOD_SPECIFIED: Int = 188

const val SSL_R_NO_PEM_EXTENSIONS: Int = 389

const val SSL_R_NO_PRIVATE_KEY_ASSIGNED: Int = 190

const val SSL_R_NO_PROTOCOLS_AVAILABLE: Int = 191

const val SSL_R_NO_RENEGOTIATION: Int = 339

const val SSL_R_NO_REQUIRED_DIGEST: Int = 324

const val SSL_R_NO_SHARED_CIPHER: Int = 193

const val SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS: Int = 376

const val SSL_R_NO_SRTP_PROFILES: Int = 359

const val SSL_R_NO_VALID_SCTS: Int = 216

const val SSL_R_NO_VERIFY_COOKIE_CALLBACK: Int = 403

const val SSL_R_NULL_SSL_CTX: Int = 195

const val SSL_R_NULL_SSL_METHOD_PASSED: Int = 196

const val SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED: Int = 197

const val SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED: Int = 344

const val SSL_R_PACKET_LENGTH_TOO_LONG: Int = 198

const val SSL_R_PARSE_TLSEXT: Int = 227

const val SSL_R_PATH_TOO_LONG: Int = 270

const val SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE: Int = 199

const val SSL_R_PEM_NAME_BAD_PREFIX: Int = 391

const val SSL_R_PEM_NAME_TOO_SHORT: Int = 392

const val SSL_R_PIPELINE_FAILURE: Int = 406

const val SSL_R_PROTOCOL_IS_SHUTDOWN: Int = 207

const val SSL_R_PSK_IDENTITY_NOT_FOUND: Int = 223

const val SSL_R_PSK_NO_CLIENT_CB: Int = 224

const val SSL_R_PSK_NO_SERVER_CB: Int = 225

const val SSL_R_READ_BIO_NOT_SET: Int = 211

const val SSL_R_READ_TIMEOUT_EXPIRED: Int = 312

const val SSL_R_RECORD_LENGTH_MISMATCH: Int = 213

const val SSL_R_RECORD_TOO_SMALL: Int = 298

const val SSL_R_RENEGOTIATE_EXT_TOO_LONG: Int = 335

const val SSL_R_RENEGOTIATION_ENCODING_ERR: Int = 336

const val SSL_R_RENEGOTIATION_MISMATCH: Int = 337

const val SSL_R_REQUIRED_CIPHER_MISSING: Int = 215

const val SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING: Int = 342

const val SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING: Int = 345

const val SSL_R_SCT_VERIFICATION_FAILED: Int = 208

const val SSL_R_SERVERHELLO_TLSEXT: Int = 275

const val SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED: Int = 277

const val SSL_R_SHUTDOWN_WHILE_IN_INIT: Int = 407

const val SSL_R_SIGNATURE_ALGORITHMS_ERROR: Int = 360

const val SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE: Int = 220

const val SSL_R_SRP_A_CALC: Int = 361

const val SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES: Int = 362

const val SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG: Int = 363

const val SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE: Int = 364

const val SSL_R_SSL3_EXT_INVALID_SERVERNAME: Int = 319

const val SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE: Int = 320

const val SSL_R_SSL3_SESSION_ID_TOO_LONG: Int = 300

const val SSL_R_SSLV3_ALERT_BAD_CERTIFICATE: Int = 1042

const val SSL_R_SSLV3_ALERT_BAD_RECORD_MAC: Int = 1020

const val SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED: Int = 1045

const val SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED: Int = 1044

const val SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN: Int = 1046

const val SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE: Int = 1030

const val SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE: Int = 1040

const val SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER: Int = 1047

const val SSL_R_SSLV3_ALERT_NO_CERTIFICATE: Int = 1041

const val SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE: Int = 1010

const val SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE: Int = 1043

const val SSL_R_SSL_COMMAND_SECTION_EMPTY: Int = 117

const val SSL_R_SSL_COMMAND_SECTION_NOT_FOUND: Int = 125

const val SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION: Int = 228

const val SSL_R_SSL_HANDSHAKE_FAILURE: Int = 229

const val SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS: Int = 230

const val SSL_R_SSL_NEGATIVE_LENGTH: Int = 372

const val SSL_R_SSL_SECTION_EMPTY: Int = 126

const val SSL_R_SSL_SECTION_NOT_FOUND: Int = 136

const val SSL_R_SSL_SESSION_ID_CALLBACK_FAILED: Int = 301

const val SSL_R_SSL_SESSION_ID_CONFLICT: Int = 302

const val SSL_R_SSL_SESSION_ID_TOO_LONG: Int = 408

const val SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG: Int = 273

const val SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH: Int = 303

const val SSL_R_SSL_SESSION_VERSION_MISMATCH: Int = 210

const val SSL_R_TLSV1_ALERT_ACCESS_DENIED: Int = 1049

const val SSL_R_TLSV1_ALERT_DECODE_ERROR: Int = 1050

const val SSL_R_TLSV1_ALERT_DECRYPTION_FAILED: Int = 1021

const val SSL_R_TLSV1_ALERT_DECRYPT_ERROR: Int = 1051

const val SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION: Int = 1060

const val SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK: Int = 1086

const val SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY: Int = 1071

const val SSL_R_TLSV1_ALERT_INTERNAL_ERROR: Int = 1080

const val SSL_R_TLSV1_ALERT_NO_RENEGOTIATION: Int = 1100

const val SSL_R_TLSV1_ALERT_PROTOCOL_VERSION: Int = 1070

const val SSL_R_TLSV1_ALERT_RECORD_OVERFLOW: Int = 1022

const val SSL_R_TLSV1_ALERT_UNKNOWN_CA: Int = 1048

const val SSL_R_TLSV1_ALERT_USER_CANCELLED: Int = 1090

const val SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE: Int = 1114

const val SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE: Int = 1113

const val SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE: Int = 1111

const val SSL_R_TLSV1_UNRECOGNIZED_NAME: Int = 1112

const val SSL_R_TLSV1_UNSUPPORTED_EXTENSION: Int = 1110

const val SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT: Int = 365

const val SSL_R_TLS_HEARTBEAT_PENDING: Int = 366

const val SSL_R_TLS_ILLEGAL_EXPORTER_LABEL: Int = 367

const val SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST: Int = 157

const val SSL_R_TOO_MANY_WARN_ALERTS: Int = 409

const val SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS: Int = 314

const val SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS: Int = 239

const val SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES: Int = 242

const val SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES: Int = 243

const val SSL_R_UNEXPECTED_MESSAGE: Int = 244

const val SSL_R_UNEXPECTED_RECORD: Int = 245

const val SSL_R_UNINITIALIZED: Int = 276

const val SSL_R_UNKNOWN_ALERT_TYPE: Int = 246

const val SSL_R_UNKNOWN_CERTIFICATE_TYPE: Int = 247

const val SSL_R_UNKNOWN_CIPHER_RETURNED: Int = 248

const val SSL_R_UNKNOWN_CIPHER_TYPE: Int = 249

const val SSL_R_UNKNOWN_CMD_NAME: Int = 386

const val SSL_R_UNKNOWN_COMMAND: Int = 139

const val SSL_R_UNKNOWN_DIGEST: Int = 368

const val SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE: Int = 250

const val SSL_R_UNKNOWN_PKEY_TYPE: Int = 251

const val SSL_R_UNKNOWN_PROTOCOL: Int = 252

const val SSL_R_UNKNOWN_SSL_VERSION: Int = 254

const val SSL_R_UNKNOWN_STATE: Int = 255

const val SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED: Int = 338

const val SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM: Int = 257

const val SSL_R_UNSUPPORTED_ELLIPTIC_CURVE: Int = 315

const val SSL_R_UNSUPPORTED_PROTOCOL: Int = 258

const val SSL_R_UNSUPPORTED_SSL_VERSION: Int = 259

const val SSL_R_UNSUPPORTED_STATUS_TYPE: Int = 329

const val SSL_R_USE_SRTP_NOT_NEGOTIATED: Int = 369

const val SSL_R_VERSION_TOO_HIGH: Int = 166

const val SSL_R_VERSION_TOO_LOW: Int = 396

const val SSL_R_WRONG_CERTIFICATE_TYPE: Int = 383

const val SSL_R_WRONG_CIPHER_RETURNED: Int = 261

const val SSL_R_WRONG_CURVE: Int = 378

const val SSL_R_WRONG_SIGNATURE_LENGTH: Int = 264

const val SSL_R_WRONG_SIGNATURE_SIZE: Int = 265

const val SSL_R_WRONG_SIGNATURE_TYPE: Int = 370

const val SSL_R_WRONG_SSL_VERSION: Int = 266

const val SSL_R_WRONG_VERSION_NUMBER: Int = 267

const val SSL_R_X509_LIB: Int = 268

const val SSL_R_X509_VERIFICATION_SETUP_PROBLEMS: Int = 269

const val _ERRNO_H: Int = 1

const val _BITS_ERRNO_H: Int = 1

const val EPERM: Int = 1

const val ENOENT: Int = 2

const val ESRCH: Int = 3

const val EINTR: Int = 4

const val EIO: Int = 5

const val ENXIO: Int = 6

const val E2BIG: Int = 7

const val ENOEXEC: Int = 8

const val EBADF: Int = 9

const val ECHILD: Int = 10

const val EAGAIN: Int = 11

const val ENOMEM: Int = 12

const val EACCES: Int = 13

const val EFAULT: Int = 14

const val ENOTBLK: Int = 15

const val EBUSY: Int = 16

const val EEXIST: Int = 17

const val EXDEV: Int = 18

const val ENODEV: Int = 19

const val ENOTDIR: Int = 20

const val EISDIR: Int = 21

const val EINVAL: Int = 22

const val ENFILE: Int = 23

const val EMFILE: Int = 24

const val ENOTTY: Int = 25

const val ETXTBSY: Int = 26

const val EFBIG: Int = 27

const val ENOSPC: Int = 28

const val ESPIPE: Int = 29

const val EROFS: Int = 30

const val EMLINK: Int = 31

const val EPIPE: Int = 32

const val EDOM: Int = 33

const val ERANGE: Int = 34

const val EDEADLK: Int = 35

const val ENAMETOOLONG: Int = 36

const val ENOLCK: Int = 37

const val ENOSYS: Int = 38

const val ENOTEMPTY: Int = 39

const val ELOOP: Int = 40

const val EWOULDBLOCK: Int = 11

const val ENOMSG: Int = 42

const val EIDRM: Int = 43

const val ECHRNG: Int = 44

const val EL2NSYNC: Int = 45

const val EL3HLT: Int = 46

const val EL3RST: Int = 47

const val ELNRNG: Int = 48

const val EUNATCH: Int = 49

const val ENOCSI: Int = 50

const val EL2HLT: Int = 51

const val EBADE: Int = 52

const val EBADR: Int = 53

const val EXFULL: Int = 54

const val ENOANO: Int = 55

const val EBADRQC: Int = 56

const val EBADSLT: Int = 57

const val EDEADLOCK: Int = 35

const val EBFONT: Int = 59

const val ENOSTR: Int = 60

const val ENODATA: Int = 61

const val ETIME: Int = 62

const val ENOSR: Int = 63

const val ENONET: Int = 64

const val ENOPKG: Int = 65

const val EREMOTE: Int = 66

const val ENOLINK: Int = 67

const val EADV: Int = 68

const val ESRMNT: Int = 69

const val ECOMM: Int = 70

const val EPROTO: Int = 71

const val EMULTIHOP: Int = 72

const val EDOTDOT: Int = 73

const val EBADMSG: Int = 74

const val EOVERFLOW: Int = 75

const val ENOTUNIQ: Int = 76

const val EBADFD: Int = 77

const val EREMCHG: Int = 78

const val ELIBACC: Int = 79

const val ELIBBAD: Int = 80

const val ELIBSCN: Int = 81

const val ELIBMAX: Int = 82

const val ELIBEXEC: Int = 83

const val EILSEQ: Int = 84

const val ERESTART: Int = 85

const val ESTRPIPE: Int = 86

const val EUSERS: Int = 87

const val ENOTSOCK: Int = 88

const val EDESTADDRREQ: Int = 89

const val EMSGSIZE: Int = 90

const val EPROTOTYPE: Int = 91

const val ENOPROTOOPT: Int = 92

const val EPROTONOSUPPORT: Int = 93

const val ESOCKTNOSUPPORT: Int = 94

const val EOPNOTSUPP: Int = 95

const val EPFNOSUPPORT: Int = 96

const val EAFNOSUPPORT: Int = 97

const val EADDRINUSE: Int = 98

const val EADDRNOTAVAIL: Int = 99

const val ENETDOWN: Int = 100

const val ENETUNREACH: Int = 101

const val ENETRESET: Int = 102

const val ECONNABORTED: Int = 103

const val ECONNRESET: Int = 104

const val ENOBUFS: Int = 105

const val EISCONN: Int = 106

const val ENOTCONN: Int = 107

const val ESHUTDOWN: Int = 108

const val ETOOMANYREFS: Int = 109

const val ETIMEDOUT: Int = 110

const val ECONNREFUSED: Int = 111

const val EHOSTDOWN: Int = 112

const val EHOSTUNREACH: Int = 113

const val EALREADY: Int = 114

const val EINPROGRESS: Int = 115

const val ESTALE: Int = 116

const val EUCLEAN: Int = 117

const val ENOTNAM: Int = 118

const val ENAVAIL: Int = 119

const val EISNAM: Int = 120

const val EREMOTEIO: Int = 121

const val EDQUOT: Int = 122

const val ENOMEDIUM: Int = 123

const val EMEDIUMTYPE: Int = 124

const val ECANCELED: Int = 125

const val ENOKEY: Int = 126

const val EKEYEXPIRED: Int = 127

const val EKEYREVOKED: Int = 128

const val EKEYREJECTED: Int = 129

const val EOWNERDEAD: Int = 130

const val ENOTRECOVERABLE: Int = 131

const val ERFKILL: Int = 132

const val EHWPOISON: Int = 133

const val ENOTSUP: Int = 95

const val ERR_TXT_MALLOCED: Int = 1

const val ERR_TXT_STRING: Int = 2

const val ERR_FLAG_MARK: Int = 1

const val ERR_NUM_ERRORS: Int = 16

const val ERR_LIB_NONE: Int = 1

const val ERR_LIB_SYS: Int = 2

const val ERR_LIB_BN: Int = 3

const val ERR_LIB_RSA: Int = 4

const val ERR_LIB_DH: Int = 5

const val ERR_LIB_EVP: Int = 6

const val ERR_LIB_BUF: Int = 7

const val ERR_LIB_OBJ: Int = 8

const val ERR_LIB_PEM: Int = 9

const val ERR_LIB_DSA: Int = 10

const val ERR_LIB_X509: Int = 11

const val ERR_LIB_ASN1: Int = 13

const val ERR_LIB_CONF: Int = 14

const val ERR_LIB_CRYPTO: Int = 15

const val ERR_LIB_EC: Int = 16

const val ERR_LIB_SSL: Int = 20

const val ERR_LIB_BIO: Int = 32

const val ERR_LIB_PKCS7: Int = 33

const val ERR_LIB_X509V3: Int = 34

const val ERR_LIB_PKCS12: Int = 35

const val ERR_LIB_RAND: Int = 36

const val ERR_LIB_DSO: Int = 37

const val ERR_LIB_ENGINE: Int = 38

const val ERR_LIB_OCSP: Int = 39

const val ERR_LIB_UI: Int = 40

const val ERR_LIB_COMP: Int = 41

const val ERR_LIB_ECDSA: Int = 42

const val ERR_LIB_ECDH: Int = 43

const val ERR_LIB_STORE: Int = 44

const val ERR_LIB_FIPS: Int = 45

const val ERR_LIB_CMS: Int = 46

const val ERR_LIB_TS: Int = 47

const val ERR_LIB_HMAC: Int = 48

const val ERR_LIB_CT: Int = 50

const val ERR_LIB_ASYNC: Int = 51

const val ERR_LIB_KDF: Int = 52

const val ERR_LIB_USER: Int = 128

const val SYS_F_FOPEN: Int = 1

const val SYS_F_CONNECT: Int = 2

const val SYS_F_GETSERVBYNAME: Int = 3

const val SYS_F_SOCKET: Int = 4

const val SYS_F_IOCTLSOCKET: Int = 5

const val SYS_F_BIND: Int = 6

const val SYS_F_LISTEN: Int = 7

const val SYS_F_ACCEPT: Int = 8

const val SYS_F_WSASTARTUP: Int = 9

const val SYS_F_OPENDIR: Int = 10

const val SYS_F_FREAD: Int = 11

const val SYS_F_GETADDRINFO: Int = 12

const val SYS_F_GETNAMEINFO: Int = 13

const val SYS_F_SETSOCKOPT: Int = 14

const val SYS_F_GETSOCKOPT: Int = 15

const val SYS_F_GETSOCKNAME: Int = 16

const val SYS_F_GETHOSTBYNAME: Int = 17

const val SYS_F_FFLUSH: Int = 18

const val ERR_R_SYS_LIB: Int = 2

const val ERR_R_BN_LIB: Int = 3

const val ERR_R_RSA_LIB: Int = 4

const val ERR_R_DH_LIB: Int = 5

const val ERR_R_EVP_LIB: Int = 6

const val ERR_R_BUF_LIB: Int = 7

const val ERR_R_OBJ_LIB: Int = 8

const val ERR_R_PEM_LIB: Int = 9

const val ERR_R_DSA_LIB: Int = 10

const val ERR_R_X509_LIB: Int = 11

const val ERR_R_ASN1_LIB: Int = 13

const val ERR_R_EC_LIB: Int = 16

const val ERR_R_BIO_LIB: Int = 32

const val ERR_R_PKCS7_LIB: Int = 33

const val ERR_R_X509V3_LIB: Int = 34

const val ERR_R_ENGINE_LIB: Int = 38

const val ERR_R_ECDSA_LIB: Int = 42

const val ERR_R_NESTED_ASN1_ERROR: Int = 58

const val ERR_R_MISSING_ASN1_EOS: Int = 63

const val ERR_R_FATAL: Int = 64

const val ERR_R_MALLOC_FAILURE: Int = 65

const val ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED: Int = 66

const val ERR_R_PASSED_NULL_PARAMETER: Int = 67

const val ERR_R_INTERNAL_ERROR: Int = 68

const val ERR_R_DISABLED: Int = 69

const val ERR_R_INIT_FAIL: Int = 70

const val ERR_R_PASSED_INVALID_ARGUMENT: Int = 7

const val CONTEXT_PORT_NO_LISTEN: Int = -1

const val CONTEXT_PORT_NO_LISTEN_SERVER: Int = -2

const val LWS_POLLHUP: Int = 24

const val LWS_POLLIN: Int = 1

const val LWS_POLLOUT: Int = 4

const val LWS_CB_REASON_AUX_BF__CGI: Int = 1

const val LWS_CB_REASON_AUX_BF__PROXY: Int = 2

const val LWS_CB_REASON_AUX_BF__CGI_CHUNK_END: Int = 4

const val LWS_CB_REASON_AUX_BF__CGI_HEADERS: Int = 8

const val LWS_CB_REASON_AUX_BF__PROXY_TRANS_END: Int = 16

const val LWS_CB_REASON_AUX_BF__PROXY_HEADERS: Int = 32

const val LWSGS_EMAIL_CONTENT_SIZE: Int = 16384

const val LWS_RECOMMENDED_MIN_HEADER_SPACE: Int = 2048

const val LWSAHH_CODE_MASK: Int = 65535

const val LWSAHH_FLAG_NO_SERVER_NAME: Int = 1073741824

const val LWS_ILLEGAL_HTTP_CONTENT_LEN: lws_filepos_t = 18446744073709551615u

const val LWS_TO_KILL_ASYNC: Int = -1

const val LWS_TO_KILL_SYNC: Int = -2

const val LWS_SET_TIMER_USEC_CANCEL: lws_usec_t = -1

const val LWS_USEC_PER_SEC: Long = 1000000

const val LWS_SIZEOFPTR: Int = 8

const val _LWS_PAD_SIZE: Int = 16

const val LWS_PRE: Int = 16

const val LWS_SEND_BUFFER_PRE_PADDING: Int = 16

const val LWS_SEND_BUFFER_POST_PADDING: Int = 0

const val LWS_WRITE_RAW: Int = 3

const val LWS_CAUDP_BIND: Int = 1

const val LWS_ITOSA_USABLE: Int = 0

const val LWS_ITOSA_NOT_EXIST: Int = -1

const val LWS_ITOSA_NOT_USABLE: Int = -2

const val LWS_ITOSA_BUSY: Int = -3

const val LWS_FOP_FLAGS_MASK: Int = 8388607

const val LWS_FOP_FLAG_COMPR_ACCEPTABLE_GZIP: Int = 16777216

const val LWS_FOP_FLAG_COMPR_IS_GZIP: Int = 33554432

const val LWS_FOP_FLAG_MOD_TIME_VALID: Int = 67108864

const val LWS_FOP_FLAG_VIRTUAL: Int = 134217728

const val LEJP_FLAG_WS_KEEP: Int = 64

const val LEJP_FLAG_WS_COMMENTLINE: Int = 32

const val LEJP_FLAG_CB_IS_VALUE: Int = 64

const val LEJP_MAX_DEPTH: Int = 12

const val LEJP_MAX_INDEX_DEPTH: Int = 5

const val LEJP_MAX_PATH: Int = 128

const val LEJP_STRING_CHUNK: Int = 254

const val LWS_TOKENIZE_F_MINUS_NONTERM: Int = 1

const val LWS_TOKENIZE_F_AGG_COLON: Int = 2

const val LWS_TOKENIZE_F_COMMA_SEP_LIST: Int = 4

const val LWS_TOKENIZE_F_RFC7230_DELIMS: Int = 8

const val LWS_TOKENIZE_F_DOT_NONTERM: Int = 16

const val LWS_TOKENIZE_F_NO_FLOATS: Int = 32

const val LWSFTS_F_QUERY_AUTOCOMPLETE: Int = 1

const val LWSFTS_F_QUERY_FILES: Int = 2

const val LWSFTS_F_QUERY_FILE_LINES: Int = 4

const val LWSFTS_F_QUERY_QUOTE_LINE: Int = 8

const val LWS_DISKCACHE_QUERY_NO_CACHE: Int = 0

const val LWS_DISKCACHE_QUERY_EXISTS: Int = 1

const val LWS_DISKCACHE_QUERY_CREATING: Int = 2

const val LWS_DISKCACHE_QUERY_ONGOING: Int = 3

const val LWS_GENCRYPTO_MAX_KEYEL_COUNT: Int = 8

const val LWS_GENHASH_LARGEST: Int = 64

const val LWS_AES_BLOCKSIZE: Int = 128

val MB_CUR_MAX: size_t
    get() = kniBridge4722()

val h_errno: Int
    get() = kniBridge4723()

val _IO_stdin: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4724())

val _IO_stdout: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4725())

val _IO_stderr: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4726())

val stdin: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4727())

val stdout: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4728())

val stderr: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4729())

val sk_num: CPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Int>>(kniBridge4730())

val sk_value: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, Int) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, Int) -> COpaquePointer?>>(kniBridge4731())

val sk_set: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, Int, COpaquePointer?) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, Int, COpaquePointer?) -> COpaquePointer?>>(kniBridge4732())

val sk_new: CPointer<CFunction<(OPENSSL_sk_compfunc?) -> CPointer<OPENSSL_STACK>?>>?
    get() = interpretCPointer<CFunction<(OPENSSL_sk_compfunc?) -> CPointer<OPENSSL_STACK>?>>(kniBridge4733())

val sk_new_null: CPointer<CFunction<() -> CPointer<OPENSSL_STACK>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<OPENSSL_STACK>?>>(kniBridge4734())

val sk_free: CPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Unit>>(kniBridge4735())

val sk_pop_free: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, CPointer<CFunction<(COpaquePointer?) -> Unit>>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, CPointer<CFunction<(COpaquePointer?) -> Unit>>?) -> Unit>>(kniBridge4736())

val sk_deep_copy: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, OPENSSL_sk_copyfunc?, OPENSSL_sk_freefunc?) -> CPointer<OPENSSL_STACK>?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, OPENSSL_sk_copyfunc?, OPENSSL_sk_freefunc?) -> CPointer<OPENSSL_STACK>?>>(kniBridge4737())

val sk_insert: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?, Int) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?, Int) -> Int>>(kniBridge4738())

val sk_delete: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, Int) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, Int) -> COpaquePointer?>>(kniBridge4739())

val sk_delete_ptr: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> COpaquePointer?>>(kniBridge4740())

val sk_find: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> Int>>(kniBridge4741())

val sk_find_ex: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> Int>>(kniBridge4742())

val sk_push: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> Int>>(kniBridge4743())

val sk_unshift: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, COpaquePointer?) -> Int>>(kniBridge4744())

val sk_shift: CPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> COpaquePointer?>>(kniBridge4745())

val sk_pop: CPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> COpaquePointer?>>(kniBridge4746())

val sk_zero: CPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Unit>>(kniBridge4747())

val sk_set_cmp_func: CPointer<CFunction<(CPointer<OPENSSL_STACK>?, OPENSSL_sk_compfunc?) -> OPENSSL_sk_compfunc?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?, OPENSSL_sk_compfunc?) -> OPENSSL_sk_compfunc?>>(kniBridge4748())

val sk_dup: CPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> CPointer<OPENSSL_STACK>?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> CPointer<OPENSSL_STACK>?>>(kniBridge4749())

val sk_sort: CPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Unit>>(kniBridge4750())

val sk_is_sorted: CPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_STACK>?) -> Int>>(kniBridge4751())

val SSLeay: CPointer<CFunction<() -> ULong>>?
    get() = interpretCPointer<CFunction<() -> ULong>>(kniBridge4752())

val SSLeay_version: CPointer<CFunction<(Int) -> CPointer<ByteVar>?>>?
    get() = interpretCPointer<CFunction<(Int) -> CPointer<ByteVar>?>>(kniBridge4753())

val PTHREAD_CANCELED: COpaquePointer?
    get() = interpretCPointer<COpaque>(kniBridge4754())

val get_rfc2409_prime_768: CPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>?
    get() = interpretCPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>(kniBridge4755())

val get_rfc2409_prime_1024: CPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>?
    get() = interpretCPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>(kniBridge4756())

val get_rfc3526_prime_1536: CPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>?
    get() = interpretCPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>(kniBridge4757())

val get_rfc3526_prime_2048: CPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>?
    get() = interpretCPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>(kniBridge4758())

val get_rfc3526_prime_3072: CPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>?
    get() = interpretCPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>(kniBridge4759())

val get_rfc3526_prime_4096: CPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>?
    get() = interpretCPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>(kniBridge4760())

val get_rfc3526_prime_6144: CPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>?
    get() = interpretCPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>(kniBridge4761())

val get_rfc3526_prime_8192: CPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>?
    get() = interpretCPointer<CFunction<(CPointer<BIGNUM>?) -> CPointer<BIGNUM>?>>(kniBridge4762())

val EVP_des_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4763())

val EVP_des_ede_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4764())

val EVP_des_ede3_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4765())

val EVP_rc2_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4766())

val EVP_bf_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4767())

val EVP_cast5_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4768())

val EVP_aes_128_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4769())

val EVP_aes_192_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4770())

val EVP_aes_256_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4771())

val EVP_camellia_128_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4772())

val EVP_camellia_192_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4773())

val EVP_camellia_256_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4774())

val EVP_seed_cfb: CPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<EVP_CIPHER>?>>(kniBridge4775())

val lh_error: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?) -> Int>>(kniBridge4776())

val lh_free: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?) -> Unit>>(kniBridge4777())

val lh_insert: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, COpaquePointer?) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, COpaquePointer?) -> COpaquePointer?>>(kniBridge4778())

val lh_delete: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, COpaquePointer?) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, COpaquePointer?) -> COpaquePointer?>>(kniBridge4779())

val lh_retrieve: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, COpaquePointer?) -> COpaquePointer?>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, COpaquePointer?) -> COpaquePointer?>>(kniBridge4780())

val lh_doall: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, OPENSSL_LH_DOALL_FUNC?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, OPENSSL_LH_DOALL_FUNC?) -> Unit>>(kniBridge4781())

val lh_doall_arg: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, OPENSSL_LH_DOALL_FUNCARG?, COpaquePointer?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, OPENSSL_LH_DOALL_FUNCARG?, COpaquePointer?) -> Unit>>(kniBridge4782())

val lh_strhash: CPointer<CFunction<(CPointer<ByteVar>?) -> ULong>>?
    get() = interpretCPointer<CFunction<(CPointer<ByteVar>?) -> ULong>>(kniBridge4783())

val lh_num_items: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?) -> ULong>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?) -> ULong>>(kniBridge4784())

val lh_stats: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<FILE>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<FILE>?) -> Unit>>(kniBridge4785())

val lh_node_stats: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<FILE>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<FILE>?) -> Unit>>(kniBridge4786())

val lh_node_usage_stats: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<FILE>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<FILE>?) -> Unit>>(kniBridge4787())

val lh_stats_bio: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<BIO>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<BIO>?) -> Unit>>(kniBridge4788())

val lh_node_stats_bio: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<BIO>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<BIO>?) -> Unit>>(kniBridge4789())

val lh_node_usage_stats_bio: CPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<BIO>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<OPENSSL_LHASH>?, CPointer<BIO>?) -> Unit>>(kniBridge4790())

val X509_STORE_CTX_get_chain: CPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> CPointer<stack_st_X509>?>>?
    get() = interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> CPointer<stack_st_X509>?>>(kniBridge4791())

val X509_STORE_CTX_set_chain: CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<stack_st_X509>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<stack_st_X509>?) -> Unit>>(kniBridge4792())

val X509_STORE_CTX_trusted_stack: CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<stack_st_X509>?) -> Unit>>?
    get() = interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<stack_st_X509>?) -> Unit>>(kniBridge4793())

val X509_STORE_get_by_subject: CPointer<CFunction<(CPointer<X509_STORE_CTX>?, X509_LOOKUP_TYPE, CPointer<X509_NAME>?, CPointer<X509_OBJECT>?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, X509_LOOKUP_TYPE, CPointer<X509_NAME>?, CPointer<X509_OBJECT>?) -> Int>>(kniBridge4794())

val X509_STORE_get1_cert: CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509>?>>?
    get() = interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509>?>>(kniBridge4795())

val X509_STORE_get1_crl: CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509_CRL>?>>?
    get() = interpretCPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509_CRL>?>>(kniBridge4796())

val X509_get_notBefore: CPointer<CFunction<(CPointer<X509>?) -> CPointer<ASN1_TIME>?>>?
    get() = interpretCPointer<CFunction<(CPointer<X509>?) -> CPointer<ASN1_TIME>?>>(kniBridge4797())

val X509_get_notAfter: CPointer<CFunction<(CPointer<X509>?) -> CPointer<ASN1_TIME>?>>?
    get() = interpretCPointer<CFunction<(CPointer<X509>?) -> CPointer<ASN1_TIME>?>>(kniBridge4798())

val X509_set_notBefore: CPointer<CFunction<(CPointer<X509>?, CPointer<ASN1_TIME>?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<X509>?, CPointer<ASN1_TIME>?) -> Int>>(kniBridge4799())

val X509_set_notAfter: CPointer<CFunction<(CPointer<X509>?, CPointer<ASN1_TIME>?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<X509>?, CPointer<ASN1_TIME>?) -> Int>>(kniBridge4800())

val X509_CRL_set_lastUpdate: CPointer<CFunction<(CPointer<X509_CRL>?, CPointer<ASN1_TIME>?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<X509_CRL>?, CPointer<ASN1_TIME>?) -> Int>>(kniBridge4801())

val X509_CRL_set_nextUpdate: CPointer<CFunction<(CPointer<X509_CRL>?, CPointer<ASN1_TIME>?) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<X509_CRL>?, CPointer<ASN1_TIME>?) -> Int>>(kniBridge4802())

val SSLv23_method: CPointer<CFunction<() -> CPointer<SSL_METHOD>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<SSL_METHOD>?>>(kniBridge4803())

val SSLv23_server_method: CPointer<CFunction<() -> CPointer<SSL_METHOD>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<SSL_METHOD>?>>(kniBridge4804())

val SSLv23_client_method: CPointer<CFunction<() -> CPointer<SSL_METHOD>?>>?
    get() = interpretCPointer<CFunction<() -> CPointer<SSL_METHOD>?>>(kniBridge4805())

val SSL_get0_session: CPointer<CFunction<(CPointer<SSL>?) -> CPointer<SSL_SESSION>?>>?
    get() = interpretCPointer<CFunction<(CPointer<SSL>?) -> CPointer<SSL_SESSION>?>>(kniBridge4806())

val errno: Int
    get() = kniBridge4807()

val lws_plat_service_tsi: CPointer<CFunction<(CPointer<lws_context>?, Int, Int) -> Int>>?
    get() = interpretCPointer<CFunction<(CPointer<lws_context>?, Int, Int) -> Int>>(kniBridge4808())

val LWS_FOP_CLOSE: CPointer<CFunction<(Int) -> Int>>?
    get() = interpretCPointer<CFunction<(Int) -> Int>>(kniBridge4809())

val LWS_FOP_READ: CPointer<CFunction<(Int, COpaquePointer?, size_t) -> ssize_t>>?
    get() = interpretCPointer<CFunction<(Int, COpaquePointer?, size_t) -> ssize_t>>(kniBridge4810())

val LWS_FOP_WRITE: CPointer<CFunction<(Int, COpaquePointer?, size_t) -> ssize_t>>?
    get() = interpretCPointer<CFunction<(Int, COpaquePointer?, size_t) -> ssize_t>>(kniBridge4811())

var __environ: CPointer<CPointerVar<ByteVar>>?
    get() = interpretCPointer<CPointerVar<ByteVar>>(kniBridge4812())
    set(value) { kniBridge4813(value.rawValue) }

var optarg: CPointer<ByteVar>?
    get() = interpretCPointer<ByteVar>(kniBridge4814())
    set(value) { kniBridge4815(value.rawValue) }

var optind: Int
    get() = kniBridge4816()
    set(value) { kniBridge4817(value) }

var opterr: Int
    get() = kniBridge4818()
    set(value) { kniBridge4819(value) }

var optopt: Int
    get() = kniBridge4820()
    set(value) { kniBridge4821(value) }

val in6addr_any: in6_addr
    get() = interpretPointed<in6_addr>(kniBridge4822())

val in6addr_loopback: in6_addr
    get() = interpretPointed<in6_addr>(kniBridge4823())

val __tzname: CArrayPointer<CPointerVar<ByteVar>>
    get() = interpretCPointer<CPointerVar<ByteVar>>(kniBridge4824())!!

var __daylight: Int
    get() = kniBridge4825()
    set(value) { kniBridge4826(value) }

var __timezone: Long
    get() = kniBridge4827()
    set(value) { kniBridge4828(value) }

val tzname: CArrayPointer<CPointerVar<ByteVar>>
    get() = interpretCPointer<CPointerVar<ByteVar>>(kniBridge4829())!!

var daylight: Int
    get() = kniBridge4830()
    set(value) { kniBridge4831(value) }

var timezone_: Long
    get() = kniBridge4832()
    set(value) { kniBridge4833(value) }

val _IO_2_1_stdin_: _IO_FILE_plus
    get() = interpretPointed<_IO_FILE_plus>(kniBridge4834())

val _IO_2_1_stdout_: _IO_FILE_plus
    get() = interpretPointed<_IO_FILE_plus>(kniBridge4835())

val _IO_2_1_stderr_: _IO_FILE_plus
    get() = interpretPointed<_IO_FILE_plus>(kniBridge4836())

var stdin_: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4837())
    set(value) { kniBridge4838(value.rawValue) }

var stdout_: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4839())
    set(value) { kniBridge4840(value.rawValue) }

var stderr_: CPointer<_IO_FILE>?
    get() = interpretCPointer<_IO_FILE>(kniBridge4841())
    set(value) { kniBridge4842(value.rawValue) }

var sys_nerr: Int
    get() = kniBridge4843()
    set(value) { kniBridge4844(value) }

val sys_errlist: CArrayPointer<CPointerVar<ByteVar>>
    get() = interpretCPointer<CPointerVar<ByteVar>>(kniBridge4845())!!

val ASN1_SEQUENCE_ANY_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4846())

val ASN1_SET_ANY_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4847())

val ASN1_ANY_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4848())

val ASN1_OBJECT_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4849())

val ASN1_BIT_STRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4850())

val ASN1_INTEGER_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4851())

val ASN1_ENUMERATED_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4852())

val ASN1_OCTET_STRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4853())

val ASN1_VISIBLESTRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4854())

val ASN1_UNIVERSALSTRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4855())

val ASN1_UTF8STRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4856())

val ASN1_NULL_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4857())

val ASN1_BMPSTRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4858())

val ASN1_PRINTABLE_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4859())

val DIRECTORYSTRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4860())

val DISPLAYTEXT_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4861())

val ASN1_PRINTABLESTRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4862())

val ASN1_T61STRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4863())

val ASN1_IA5STRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4864())

val ASN1_GENERALSTRING_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4865())

val ASN1_UTCTIME_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4866())

val ASN1_GENERALIZEDTIME_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4867())

val ASN1_TIME_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4868())

val ASN1_OCTET_STRING_NDEF_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4869())

val ECPKPARAMETERS_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4870())

val ECPARAMETERS_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4871())

val RSAPublicKey_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4872())

val RSAPrivateKey_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4873())

val RSA_PSS_PARAMS_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4874())

val RSA_OAEP_PARAMS_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4875())

val DHparams_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4876())

val PKCS7_ISSUER_AND_SERIAL_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4877())

val PKCS7_SIGNER_INFO_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4878())

val PKCS7_RECIP_INFO_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4879())

val PKCS7_SIGNED_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4880())

val PKCS7_ENC_CONTENT_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4881())

val PKCS7_ENVELOPE_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4882())

val PKCS7_SIGN_ENVELOPE_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4883())

val PKCS7_DIGEST_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4884())

val PKCS7_ENCRYPT_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4885())

val PKCS7_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4886())

val PKCS7_ATTR_SIGN_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4887())

val PKCS7_ATTR_VERIFY_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4888())

val X509_ALGOR_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4889())

val X509_ALGORS_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4890())

val X509_VAL_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4891())

val X509_PUBKEY_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4892())

val X509_SIG_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4893())

val X509_REQ_INFO_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4894())

val X509_REQ_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4895())

val X509_ATTRIBUTE_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4896())

val X509_EXTENSION_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4897())

val X509_EXTENSIONS_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4898())

val X509_NAME_ENTRY_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4899())

val X509_NAME_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4900())

val X509_CINF_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4901())

val X509_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4902())

val X509_CERT_AUX_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4903())

val X509_REVOKED_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4904())

val X509_CRL_INFO_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4905())

val X509_CRL_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4906())

val NETSCAPE_SPKI_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4907())

val NETSCAPE_SPKAC_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4908())

val NETSCAPE_CERT_SEQUENCE_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4909())

val PBEPARAM_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4910())

val PBE2PARAM_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4911())

val PBKDF2PARAM_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4912())

val PKCS8_PRIV_KEY_INFO_it: ASN1_ITEM
    get() = interpretPointed<ASN1_ITEM>(kniBridge4913())

val SSL_version_str: CArrayPointer<ByteVar>
    get() = interpretCPointer<ByteVar>(kniBridge4914())!!

val fops_zip: lws_plat_file_ops
    get() = interpretPointed<lws_plat_file_ops>(kniBridge4915())

class __locale_struct(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(232, 8)
    
    val __locales: CArrayPointer<CPointerVar<__locale_data>>
        get() = arrayMemberAt(0)
    
    var __ctype_b: CPointer<UShortVar>?
        get() = memberAt<CPointerVar<UShortVar>>(104).value
        set(value) { memberAt<CPointerVar<UShortVar>>(104).value = value }
    
    var __ctype_tolower: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(112).value
        set(value) { memberAt<CPointerVar<IntVar>>(112).value = value }
    
    var __ctype_toupper: CPointer<IntVar>?
        get() = memberAt<CPointerVar<IntVar>>(120).value
        set(value) { memberAt<CPointerVar<IntVar>>(120).value = value }
    
    val __names: CArrayPointer<CPointerVar<ByteVar>>
        get() = arrayMemberAt(128)
    
}


class div_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var quot: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var rem: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class ldiv_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var quot: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
    var rem: Long
        get() = memberAt<LongVar>(8).value
        set(value) { memberAt<LongVar>(8).value = value }
    
}

class lldiv_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var quot: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
    var rem: Long
        get() = memberAt<LongVar>(8).value
        set(value) { memberAt<LongVar>(8).value = value }
    
}

class __fsid_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    val __val: CArrayPointer<IntVar>
        get() = arrayMemberAt(0)
    
}

class __sigset_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val __val: CArrayPointer<ULongVar>
        get() = arrayMemberAt(0)
    
}

class timeval(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var tv_sec: __time_t
        get() = memberAt<__time_tVar>(0).value
        set(value) { memberAt<__time_tVar>(0).value = value }
    
    var tv_usec: __suseconds_t
        get() = memberAt<__suseconds_tVar>(8).value
        set(value) { memberAt<__suseconds_tVar>(8).value = value }
    
}

class timespec(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var tv_sec: __time_t
        get() = memberAt<__time_tVar>(0).value
        set(value) { memberAt<__time_tVar>(0).value = value }
    
    var tv_nsec: __syscall_slong_t
        get() = memberAt<__syscall_slong_tVar>(8).value
        set(value) { memberAt<__syscall_slong_tVar>(8).value = value }
    
}

class fd_set(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val __fds_bits: CArrayPointer<__fd_maskVar>
        get() = arrayMemberAt(0)
    
}

class __pthread_rwlock_arch_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var __readers: UInt
        get() = memberAt<UIntVar>(0).value
        set(value) { memberAt<UIntVar>(0).value = value }
    
    var __writers: UInt
        get() = memberAt<UIntVar>(4).value
        set(value) { memberAt<UIntVar>(4).value = value }
    
    var __wrphase_futex: UInt
        get() = memberAt<UIntVar>(8).value
        set(value) { memberAt<UIntVar>(8).value = value }
    
    var __writers_futex: UInt
        get() = memberAt<UIntVar>(12).value
        set(value) { memberAt<UIntVar>(12).value = value }
    
    var __pad3: UInt
        get() = memberAt<UIntVar>(16).value
        set(value) { memberAt<UIntVar>(16).value = value }
    
    var __pad4: UInt
        get() = memberAt<UIntVar>(20).value
        set(value) { memberAt<UIntVar>(20).value = value }
    
    var __cur_writer: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var __shared: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    var __rwelision: Byte
        get() = memberAt<ByteVar>(32).value
        set(value) { memberAt<ByteVar>(32).value = value }
    
    val __pad1: CArrayPointer<UByteVar>
        get() = arrayMemberAt(33)
    
    var __pad2: ULong
        get() = memberAt<ULongVar>(40).value
        set(value) { memberAt<ULongVar>(40).value = value }
    
    var __flags: UInt
        get() = memberAt<UIntVar>(48).value
        set(value) { memberAt<UIntVar>(48).value = value }
    
}

class __pthread_internal_list(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var __prev: CPointer<__pthread_internal_list>?
        get() = memberAt<CPointerVar<__pthread_internal_list>>(0).value
        set(value) { memberAt<CPointerVar<__pthread_internal_list>>(0).value = value }
    
    var __next: CPointer<__pthread_internal_list>?
        get() = memberAt<CPointerVar<__pthread_internal_list>>(8).value
        set(value) { memberAt<CPointerVar<__pthread_internal_list>>(8).value = value }
    
}

class __pthread_mutex_s(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var __lock: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var __count: UInt
        get() = memberAt<UIntVar>(4).value
        set(value) { memberAt<UIntVar>(4).value = value }
    
    var __owner: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var __nusers: UInt
        get() = memberAt<UIntVar>(12).value
        set(value) { memberAt<UIntVar>(12).value = value }
    
    var __kind: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var __spins: Short
        get() = memberAt<ShortVar>(20).value
        set(value) { memberAt<ShortVar>(20).value = value }
    
    var __elision: Short
        get() = memberAt<ShortVar>(22).value
        set(value) { memberAt<ShortVar>(22).value = value }
    
    val __list: __pthread_list_t
        get() = memberAt(24)
    
}

class __pthread_cond_s(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var __wseq: ULong
        get() = memberAt<ULongVar>(0).value
        set(value) { memberAt<ULongVar>(0).value = value }
    
    val __wseq32: anonymousStruct1
        get() = memberAt(0)
    
    var __g1_start: ULong
        get() = memberAt<ULongVar>(8).value
        set(value) { memberAt<ULongVar>(8).value = value }
    
    val __g1_start32: anonymousStruct2
        get() = memberAt(8)
    
    val __g_refs: CArrayPointer<UIntVar>
        get() = arrayMemberAt(16)
    
    val __g_size: CArrayPointer<UIntVar>
        get() = arrayMemberAt(24)
    
    var __g1_orig_size: UInt
        get() = memberAt<UIntVar>(32).value
        set(value) { memberAt<UIntVar>(32).value = value }
    
    var __wrefs: UInt
        get() = memberAt<UIntVar>(36).value
        set(value) { memberAt<UIntVar>(36).value = value }
    
    val __g_signals: CArrayPointer<UIntVar>
        get() = arrayMemberAt(40)
    
}

class anonymousStruct1(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var __low: UInt
        get() = memberAt<UIntVar>(0).value
        set(value) { memberAt<UIntVar>(0).value = value }
    
    var __high: UInt
        get() = memberAt<UIntVar>(4).value
        set(value) { memberAt<UIntVar>(4).value = value }
    
}

class anonymousStruct2(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var __low: UInt
        get() = memberAt<UIntVar>(0).value
        set(value) { memberAt<UIntVar>(0).value = value }
    
    var __high: UInt
        get() = memberAt<UIntVar>(4).value
        set(value) { memberAt<UIntVar>(4).value = value }
    
}

class pthread_mutexattr_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class pthread_condattr_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class pthread_attr_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
}

class pthread_mutex_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    val __data: __pthread_mutex_s
        get() = memberAt(0)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
}

class pthread_cond_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    val __data: __pthread_cond_s
        get() = memberAt(0)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
}

class pthread_rwlock_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val __data: __pthread_rwlock_arch_t
        get() = memberAt(0)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
}

class pthread_rwlockattr_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
}

class pthread_barrier_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
}

class pthread_barrierattr_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    val __size: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    var __align: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class random_data(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var fptr: CPointer<int32_tVar>?
        get() = memberAt<CPointerVar<int32_tVar>>(0).value
        set(value) { memberAt<CPointerVar<int32_tVar>>(0).value = value }
    
    var rptr: CPointer<int32_tVar>?
        get() = memberAt<CPointerVar<int32_tVar>>(8).value
        set(value) { memberAt<CPointerVar<int32_tVar>>(8).value = value }
    
    var state: CPointer<int32_tVar>?
        get() = memberAt<CPointerVar<int32_tVar>>(16).value
        set(value) { memberAt<CPointerVar<int32_tVar>>(16).value = value }
    
    var rand_type: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var rand_deg: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    var rand_sep: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    var end_ptr: CPointer<int32_tVar>?
        get() = memberAt<CPointerVar<int32_tVar>>(40).value
        set(value) { memberAt<CPointerVar<int32_tVar>>(40).value = value }
    
}

class drand48_data(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    val __x: CArrayPointer<UShortVar>
        get() = arrayMemberAt(0)
    
    val __old_x: CArrayPointer<UShortVar>
        get() = arrayMemberAt(6)
    
    var __c: UShort
        get() = memberAt<UShortVar>(12).value
        set(value) { memberAt<UShortVar>(12).value = value }
    
    var __init: UShort
        get() = memberAt<UShortVar>(14).value
        set(value) { memberAt<UShortVar>(14).value = value }
    
    var __a: ULong
        get() = memberAt<ULongVar>(16).value
        set(value) { memberAt<ULongVar>(16).value = value }
    
}

class __kernel_fd_set(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val fds_bits: CArrayPointer<ULongVar>
        get() = arrayMemberAt(0)
    
}

class __kernel_fsid_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    val `val`: CArrayPointer<IntVar>
        get() = arrayMemberAt(0)
    
}

class __user_cap_header_struct(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var version: __u32
        get() = memberAt<__u32Var>(0).value
        set(value) { memberAt<__u32Var>(0).value = value }
    
    var pid: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class __user_cap_data_struct(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    var effective: __u32
        get() = memberAt<__u32Var>(0).value
        set(value) { memberAt<__u32Var>(0).value = value }
    
    var permitted: __u32
        get() = memberAt<__u32Var>(4).value
        set(value) { memberAt<__u32Var>(4).value = value }
    
    var inheritable: __u32
        get() = memberAt<__u32Var>(8).value
        set(value) { memberAt<__u32Var>(8).value = value }
    
}

class vfs_cap_data(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(20, 4)
    
    var magic_etc: __le32
        get() = memberAt<__le32Var>(0).value
        set(value) { memberAt<__le32Var>(0).value = value }
    
    val data: CArrayPointer<anonymousStruct3>
        get() = arrayMemberAt(4)
    
}

class anonymousStruct3(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var permitted: __le32
        get() = memberAt<__le32Var>(0).value
        set(value) { memberAt<__le32Var>(0).value = value }
    
    var inheritable: __le32
        get() = memberAt<__le32Var>(4).value
        set(value) { memberAt<__le32Var>(4).value = value }
    
}

class vfs_ns_cap_data(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 4)
    
    var magic_etc: __le32
        get() = memberAt<__le32Var>(0).value
        set(value) { memberAt<__le32Var>(0).value = value }
    
    val data: CArrayPointer<anonymousStruct4>
        get() = arrayMemberAt(4)
    
    var rootid: __le32
        get() = memberAt<__le32Var>(20).value
        set(value) { memberAt<__le32Var>(20).value = value }
    
}

class anonymousStruct4(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var permitted: __le32
        get() = memberAt<__le32Var>(0).value
        set(value) { memberAt<__le32Var>(0).value = value }
    
    var inheritable: __le32
        get() = memberAt<__le32Var>(4).value
        set(value) { memberAt<__le32Var>(4).value = value }
    
}


class pollfd(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var fd: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var events: Short
        get() = memberAt<ShortVar>(4).value
        set(value) { memberAt<ShortVar>(4).value = value }
    
    var revents: Short
        get() = memberAt<ShortVar>(6).value
        set(value) { memberAt<ShortVar>(6).value = value }
    
}

class iovec(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var iov_base: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
    var iov_len: size_t
        get() = memberAt<size_tVar>(8).value
        set(value) { memberAt<size_tVar>(8).value = value }
    
}

class sockaddr(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 2)
    
    var sa_family: sa_family_t
        get() = memberAt<sa_family_tVar>(0).value
        set(value) { memberAt<sa_family_tVar>(0).value = value }
    
    val sa_data: CArrayPointer<ByteVar>
        get() = arrayMemberAt(2)
    
}

class sockaddr_storage(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    var ss_family: sa_family_t
        get() = memberAt<sa_family_tVar>(0).value
        set(value) { memberAt<sa_family_tVar>(0).value = value }
    
    val __ss_padding: CArrayPointer<ByteVar>
        get() = arrayMemberAt(2)
    
    var __ss_align: ULong
        get() = memberAt<ULongVar>(120).value
        set(value) { memberAt<ULongVar>(120).value = value }
    
}

class msghdr(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var msg_name: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
    var msg_namelen: socklen_t
        get() = memberAt<socklen_tVar>(8).value
        set(value) { memberAt<socklen_tVar>(8).value = value }
    
    var msg_iov: CPointer<iovec>?
        get() = memberAt<CPointerVar<iovec>>(16).value
        set(value) { memberAt<CPointerVar<iovec>>(16).value = value }
    
    var msg_iovlen: size_t
        get() = memberAt<size_tVar>(24).value
        set(value) { memberAt<size_tVar>(24).value = value }
    
    var msg_control: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
    var msg_controllen: size_t
        get() = memberAt<size_tVar>(40).value
        set(value) { memberAt<size_tVar>(40).value = value }
    
    var msg_flags: Int
        get() = memberAt<IntVar>(48).value
        set(value) { memberAt<IntVar>(48).value = value }
    
}

class cmsghdr(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
}

class linger(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var l_onoff: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var l_linger: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class osockaddr(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 2)
    
    var sa_family: UShort
        get() = memberAt<UShortVar>(0).value
        set(value) { memberAt<UShortVar>(0).value = value }
    
    val sa_data: CArrayPointer<UByteVar>
        get() = arrayMemberAt(2)
    
}

class in_addr(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var s_addr: in_addr_t
        get() = memberAt<in_addr_tVar>(0).value
        set(value) { memberAt<in_addr_tVar>(0).value = value }
    
}

class ip_opts(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(44, 4)
    
    val ip_dst: in_addr
        get() = memberAt(0)
    
    val ip_opts: CArrayPointer<ByteVar>
        get() = arrayMemberAt(4)
    
}

class ip_mreqn(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    val imr_multiaddr: in_addr
        get() = memberAt(0)
    
    val imr_address: in_addr
        get() = memberAt(4)
    
    var imr_ifindex: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
}

class in_pktinfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    var ipi_ifindex: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    val ipi_spec_dst: in_addr
        get() = memberAt(4)
    
    val ipi_addr: in_addr
        get() = memberAt(8)
    
}

class in6_addr(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 4)
    
    val __in6_u: anonymousStruct5
        get() = memberAt(0)
    
}

class anonymousStruct5(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 4)
    
    val __u6_addr8: CArrayPointer<uint8_tVar>
        get() = arrayMemberAt(0)
    
    val __u6_addr16: CArrayPointer<uint16_tVar>
        get() = arrayMemberAt(0)
    
    val __u6_addr32: CArrayPointer<uint32_tVar>
        get() = arrayMemberAt(0)
    
}

class sockaddr_in(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 4)
    
    var sin_family: sa_family_t
        get() = memberAt<sa_family_tVar>(0).value
        set(value) { memberAt<sa_family_tVar>(0).value = value }
    
    var sin_port: in_port_t
        get() = memberAt<in_port_tVar>(2).value
        set(value) { memberAt<in_port_tVar>(2).value = value }
    
    val sin_addr: in_addr
        get() = memberAt(4)
    
    val sin_zero: CArrayPointer<UByteVar>
        get() = arrayMemberAt(8)
    
}

class sockaddr_in6(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(28, 4)
    
    var sin6_family: sa_family_t
        get() = memberAt<sa_family_tVar>(0).value
        set(value) { memberAt<sa_family_tVar>(0).value = value }
    
    var sin6_port: in_port_t
        get() = memberAt<in_port_tVar>(2).value
        set(value) { memberAt<in_port_tVar>(2).value = value }
    
    var sin6_flowinfo: uint32_t
        get() = memberAt<uint32_tVar>(4).value
        set(value) { memberAt<uint32_tVar>(4).value = value }
    
    val sin6_addr: in6_addr
        get() = memberAt(8)
    
    var sin6_scope_id: uint32_t
        get() = memberAt<uint32_tVar>(24).value
        set(value) { memberAt<uint32_tVar>(24).value = value }
    
}

class ip_mreq(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    val imr_multiaddr: in_addr
        get() = memberAt(0)
    
    val imr_interface: in_addr
        get() = memberAt(4)
    
}

class ip_mreq_source(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    val imr_multiaddr: in_addr
        get() = memberAt(0)
    
    val imr_interface: in_addr
        get() = memberAt(4)
    
    val imr_sourceaddr: in_addr
        get() = memberAt(8)
    
}

class ipv6_mreq(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(20, 4)
    
    val ipv6mr_multiaddr: in6_addr
        get() = memberAt(0)
    
    var ipv6mr_interface: UInt
        get() = memberAt<UIntVar>(16).value
        set(value) { memberAt<UIntVar>(16).value = value }
    
}

class group_req(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(136, 8)
    
    var gr_interface: uint32_t
        get() = memberAt<uint32_tVar>(0).value
        set(value) { memberAt<uint32_tVar>(0).value = value }
    
    val gr_group: sockaddr_storage
        get() = memberAt(8)
    
}

class group_source_req(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(264, 8)
    
    var gsr_interface: uint32_t
        get() = memberAt<uint32_tVar>(0).value
        set(value) { memberAt<uint32_tVar>(0).value = value }
    
    val gsr_group: sockaddr_storage
        get() = memberAt(8)
    
    val gsr_source: sockaddr_storage
        get() = memberAt(136)
    
}

class ip_msfilter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(20, 4)
    
    val imsf_multiaddr: in_addr
        get() = memberAt(0)
    
    val imsf_interface: in_addr
        get() = memberAt(4)
    
    var imsf_fmode: uint32_t
        get() = memberAt<uint32_tVar>(8).value
        set(value) { memberAt<uint32_tVar>(8).value = value }
    
    var imsf_numsrc: uint32_t
        get() = memberAt<uint32_tVar>(12).value
        set(value) { memberAt<uint32_tVar>(12).value = value }
    
    val imsf_slist: CArrayPointer<in_addr>
        get() = arrayMemberAt(16)
    
}

class group_filter(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(272, 8)
    
    var gf_interface: uint32_t
        get() = memberAt<uint32_tVar>(0).value
        set(value) { memberAt<uint32_tVar>(0).value = value }
    
    val gf_group: sockaddr_storage
        get() = memberAt(8)
    
    var gf_fmode: uint32_t
        get() = memberAt<uint32_tVar>(136).value
        set(value) { memberAt<uint32_tVar>(136).value = value }
    
    var gf_numsrc: uint32_t
        get() = memberAt<uint32_tVar>(140).value
        set(value) { memberAt<uint32_tVar>(140).value = value }
    
    val gf_slist: CArrayPointer<sockaddr_storage>
        get() = arrayMemberAt(144)
    
}

class rpcent(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var r_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var r_aliases: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value = value }
    
    var r_number: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
}

class netent(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var n_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var n_aliases: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value = value }
    
    var n_addrtype: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var n_net: uint32_t
        get() = memberAt<uint32_tVar>(20).value
        set(value) { memberAt<uint32_tVar>(20).value = value }
    
}

class hostent(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var h_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var h_aliases: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value = value }
    
    var h_addrtype: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var h_length: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var h_addr_list: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(24).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(24).value = value }
    
}

class servent(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var s_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var s_aliases: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value = value }
    
    var s_port: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var s_proto: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(24).value
        set(value) { memberAt<CPointerVar<ByteVar>>(24).value = value }
    
}

class protoent(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var p_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var p_aliases: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(8).value = value }
    
    var p_proto: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
}

class addrinfo(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var ai_flags: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var ai_family: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var ai_socktype: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var ai_protocol: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var ai_addrlen: socklen_t
        get() = memberAt<socklen_tVar>(16).value
        set(value) { memberAt<socklen_tVar>(16).value = value }
    
    var ai_addr: CPointer<sockaddr>?
        get() = memberAt<CPointerVar<sockaddr>>(24).value
        set(value) { memberAt<CPointerVar<sockaddr>>(24).value = value }
    
    var ai_canonname: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(32).value
        set(value) { memberAt<CPointerVar<ByteVar>>(32).value = value }
    
    var ai_next: CPointer<addrinfo>?
        get() = memberAt<CPointerVar<addrinfo>>(40).value
        set(value) { memberAt<CPointerVar<addrinfo>>(40).value = value }
    
}

class timezone(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var tz_minuteswest: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var tz_dsttime: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class itimerval(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val it_interval: timeval
        get() = memberAt(0)
    
    val it_value: timeval
        get() = memberAt(16)
    
}

class imaxdiv_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var quot: Long
        get() = memberAt<LongVar>(0).value
        set(value) { memberAt<LongVar>(0).value = value }
    
    var rem: Long
        get() = memberAt<LongVar>(8).value
        set(value) { memberAt<LongVar>(8).value = value }
    
}

class tm(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var tm_sec: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var tm_min: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var tm_hour: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var tm_mday: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var tm_mon: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var tm_year: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var tm_wday: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var tm_yday: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    var tm_isdst: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    var tm_gmtoff: Long
        get() = memberAt<LongVar>(40).value
        set(value) { memberAt<LongVar>(40).value = value }
    
    var tm_zone: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(48).value
        set(value) { memberAt<CPointerVar<ByteVar>>(48).value = value }
    
}

class itimerspec(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    val it_interval: timespec
        get() = memberAt(0)
    
    val it_value: timespec
        get() = memberAt(16)
    
}


class _IO_FILE(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    var _flags: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var _IO_read_ptr: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var _IO_read_end: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    var _IO_read_base: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(24).value
        set(value) { memberAt<CPointerVar<ByteVar>>(24).value = value }
    
    var _IO_write_base: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(32).value
        set(value) { memberAt<CPointerVar<ByteVar>>(32).value = value }
    
    var _IO_write_ptr: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(40).value
        set(value) { memberAt<CPointerVar<ByteVar>>(40).value = value }
    
    var _IO_write_end: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(48).value
        set(value) { memberAt<CPointerVar<ByteVar>>(48).value = value }
    
    var _IO_buf_base: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(56).value
        set(value) { memberAt<CPointerVar<ByteVar>>(56).value = value }
    
    var _IO_buf_end: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(64).value
        set(value) { memberAt<CPointerVar<ByteVar>>(64).value = value }
    
    var _IO_save_base: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(72).value
        set(value) { memberAt<CPointerVar<ByteVar>>(72).value = value }
    
    var _IO_backup_base: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(80).value
        set(value) { memberAt<CPointerVar<ByteVar>>(80).value = value }
    
    var _IO_save_end: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(88).value
        set(value) { memberAt<CPointerVar<ByteVar>>(88).value = value }
    
    var _markers: CPointer<_IO_marker>?
        get() = memberAt<CPointerVar<_IO_marker>>(96).value
        set(value) { memberAt<CPointerVar<_IO_marker>>(96).value = value }
    
    var _chain: CPointer<_IO_FILE>?
        get() = memberAt<CPointerVar<_IO_FILE>>(104).value
        set(value) { memberAt<CPointerVar<_IO_FILE>>(104).value = value }
    
    var _fileno: Int
        get() = memberAt<IntVar>(112).value
        set(value) { memberAt<IntVar>(112).value = value }
    
    var _flags2: Int
        get() = memberAt<IntVar>(116).value
        set(value) { memberAt<IntVar>(116).value = value }
    
    var _old_offset: __off_t
        get() = memberAt<__off_tVar>(120).value
        set(value) { memberAt<__off_tVar>(120).value = value }
    
    var _cur_column: UShort
        get() = memberAt<UShortVar>(128).value
        set(value) { memberAt<UShortVar>(128).value = value }
    
    var _vtable_offset: Byte
        get() = memberAt<ByteVar>(130).value
        set(value) { memberAt<ByteVar>(130).value = value }
    
    val _shortbuf: CArrayPointer<ByteVar>
        get() = arrayMemberAt(131)
    
    var _lock: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(136).value
        set(value) { memberAt<COpaquePointerVar>(136).value = value }
    
    var _offset: __off64_t
        get() = memberAt<__off64_tVar>(144).value
        set(value) { memberAt<__off64_tVar>(144).value = value }
    
    var __pad1: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(152).value
        set(value) { memberAt<COpaquePointerVar>(152).value = value }
    
    var __pad2: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(160).value
        set(value) { memberAt<COpaquePointerVar>(160).value = value }
    
    var __pad3: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(168).value
        set(value) { memberAt<COpaquePointerVar>(168).value = value }
    
    var __pad4: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(176).value
        set(value) { memberAt<COpaquePointerVar>(176).value = value }
    
    var __pad5: size_t
        get() = memberAt<size_tVar>(184).value
        set(value) { memberAt<size_tVar>(184).value = value }
    
    var _mode: Int
        get() = memberAt<IntVar>(192).value
        set(value) { memberAt<IntVar>(192).value = value }
    
    val _unused2: CArrayPointer<ByteVar>
        get() = arrayMemberAt(196)
    
}

class _IO_marker(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var _next: CPointer<_IO_marker>?
        get() = memberAt<CPointerVar<_IO_marker>>(0).value
        set(value) { memberAt<CPointerVar<_IO_marker>>(0).value = value }
    
    var _sbuf: CPointer<_IO_FILE>?
        get() = memberAt<CPointerVar<_IO_FILE>>(8).value
        set(value) { memberAt<CPointerVar<_IO_FILE>>(8).value = value }
    
    var _pos: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
}

class __mbstate_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var __count: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    val __value: anonymousStruct6
        get() = memberAt(4)
    
}

class anonymousStruct6(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var __wch: UInt
        get() = memberAt<UIntVar>(0).value
        set(value) { memberAt<UIntVar>(0).value = value }
    
    val __wchb: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
}

class _G_fpos_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var __pos: __off_t
        get() = memberAt<__off_tVar>(0).value
        set(value) { memberAt<__off_tVar>(0).value = value }
    
    val __state: __mbstate_t
        get() = memberAt(8)
    
}

class _G_fpos64_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var __pos: __off64_t
        get() = memberAt<__off64_tVar>(0).value
        set(value) { memberAt<__off64_tVar>(0).value = value }
    
    val __state: __mbstate_t
        get() = memberAt(8)
    
}







class asn1_string_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var length: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var type: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var data: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(8).value
        set(value) { memberAt<CPointerVar<UByteVar>>(8).value = value }
    
    var flags: Long
        get() = memberAt<LongVar>(16).value
        set(value) { memberAt<LongVar>(16).value = value }
    
}













class buf_mem_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var length: size_t
        get() = memberAt<size_tVar>(0).value
        set(value) { memberAt<size_tVar>(0).value = value }
    
    var data: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var max: size_t
        get() = memberAt<size_tVar>(16).value
        set(value) { memberAt<size_tVar>(16).value = value }
    
    var flags: ULong
        get() = memberAt<ULongVar>(24).value
        set(value) { memberAt<ULongVar>(24).value = value }
    
}






















class X509_algor_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var algorithm: CPointer<ASN1_OBJECT>?
        get() = memberAt<CPointerVar<ASN1_OBJECT>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_OBJECT>>(0).value = value }
    
    var parameter: CPointer<ASN1_TYPE>?
        get() = memberAt<CPointerVar<ASN1_TYPE>>(8).value
        set(value) { memberAt<CPointerVar<ASN1_TYPE>>(8).value = value }
    
}

class asn1_type_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var type: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    val value: anonymousStruct7
        get() = memberAt(8)
    
}

class anonymousStruct7(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var ptr: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var boolean: ASN1_BOOLEAN
        get() = memberAt<ASN1_BOOLEANVar>(0).value
        set(value) { memberAt<ASN1_BOOLEANVar>(0).value = value }
    
    var asn1_string: CPointer<ASN1_STRING>?
        get() = memberAt<CPointerVar<ASN1_STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_STRING>>(0).value = value }
    
    var `object`: CPointer<ASN1_OBJECT>?
        get() = memberAt<CPointerVar<ASN1_OBJECT>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_OBJECT>>(0).value = value }
    
    var integer: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(0).value = value }
    
    var enumerated: CPointer<ASN1_ENUMERATED>?
        get() = memberAt<CPointerVar<ASN1_ENUMERATED>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_ENUMERATED>>(0).value = value }
    
    var bit_string: CPointer<ASN1_BIT_STRING>?
        get() = memberAt<CPointerVar<ASN1_BIT_STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_BIT_STRING>>(0).value = value }
    
    var octet_string: CPointer<ASN1_OCTET_STRING>?
        get() = memberAt<CPointerVar<ASN1_OCTET_STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_OCTET_STRING>>(0).value = value }
    
    var printablestring: CPointer<ASN1_PRINTABLESTRING>?
        get() = memberAt<CPointerVar<ASN1_PRINTABLESTRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_PRINTABLESTRING>>(0).value = value }
    
    var t61string: CPointer<ASN1_T61STRING>?
        get() = memberAt<CPointerVar<ASN1_T61STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_T61STRING>>(0).value = value }
    
    var ia5string: CPointer<ASN1_IA5STRING>?
        get() = memberAt<CPointerVar<ASN1_IA5STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_IA5STRING>>(0).value = value }
    
    var generalstring: CPointer<ASN1_GENERALSTRING>?
        get() = memberAt<CPointerVar<ASN1_GENERALSTRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_GENERALSTRING>>(0).value = value }
    
    var bmpstring: CPointer<ASN1_BMPSTRING>?
        get() = memberAt<CPointerVar<ASN1_BMPSTRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_BMPSTRING>>(0).value = value }
    
    var universalstring: CPointer<ASN1_UNIVERSALSTRING>?
        get() = memberAt<CPointerVar<ASN1_UNIVERSALSTRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_UNIVERSALSTRING>>(0).value = value }
    
    var utctime: CPointer<ASN1_UTCTIME>?
        get() = memberAt<CPointerVar<ASN1_UTCTIME>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_UTCTIME>>(0).value = value }
    
    var generalizedtime: CPointer<ASN1_GENERALIZEDTIME>?
        get() = memberAt<CPointerVar<ASN1_GENERALIZEDTIME>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_GENERALIZEDTIME>>(0).value = value }
    
    var visiblestring: CPointer<ASN1_VISIBLESTRING>?
        get() = memberAt<CPointerVar<ASN1_VISIBLESTRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_VISIBLESTRING>>(0).value = value }
    
    var utf8string: CPointer<ASN1_UTF8STRING>?
        get() = memberAt<CPointerVar<ASN1_UTF8STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_UTF8STRING>>(0).value = value }
    
    var set: CPointer<ASN1_STRING>?
        get() = memberAt<CPointerVar<ASN1_STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_STRING>>(0).value = value }
    
    var sequence: CPointer<ASN1_STRING>?
        get() = memberAt<CPointerVar<ASN1_STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_STRING>>(0).value = value }
    
    var asn1_value: CPointer<ASN1_VALUE>?
        get() = memberAt<CPointerVar<ASN1_VALUE>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_VALUE>>(0).value = value }
    
}
































class crypto_ex_data_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var sk: CPointer<stack_st_void>?
        get() = memberAt<CPointerVar<stack_st_void>>(0).value
        set(value) { memberAt<CPointerVar<stack_st_void>>(0).value = value }
    
}










class CRYPTO_dynlock(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var dummy: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class crypto_threadid_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var dummy: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class sched_param(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var sched_priority: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class cpu_set_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val __bits: CArrayPointer<__cpu_maskVar>
        get() = arrayMemberAt(0)
    
}

class _pthread_cleanup_buffer(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var __routine: CPointer<CFunction<(COpaquePointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(COpaquePointer?) -> Unit>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(COpaquePointer?) -> Unit>>>(0).value = value }
    
    var __arg: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(8).value
        set(value) { memberAt<COpaquePointerVar>(8).value = value }
    
    var __canceltype: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var __prev: CPointer<_pthread_cleanup_buffer>?
        get() = memberAt<CPointerVar<_pthread_cleanup_buffer>>(24).value
        set(value) { memberAt<CPointerVar<_pthread_cleanup_buffer>>(24).value = value }
    
}

class __pthread_unwind_buf_t(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(104, 8)
    
    val __cancel_jmp_buf: CArrayPointer<anonymousStruct8>
        get() = arrayMemberAt(0)
    
    val __pad: CArrayPointer<COpaquePointerVar>
        get() = arrayMemberAt(72)
    
}

class anonymousStruct8(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    val __cancel_jmp_buf: __jmp_buf
        get() = arrayMemberAt(0)
    
    var __mask_was_saved: Int
        get() = memberAt<IntVar>(64).value
        set(value) { memberAt<IntVar>(64).value = value }
    
}

class __pthread_cleanup_frame(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var __cancel_routine: CPointer<CFunction<(COpaquePointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(COpaquePointer?) -> Unit>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(COpaquePointer?) -> Unit>>>(0).value = value }
    
    var __cancel_arg: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(8).value
        set(value) { memberAt<COpaquePointerVar>(8).value = value }
    
    var __do_it: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var __cancel_type: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
}






class BIO_sock_info_u(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var addr: CPointer<BIO_ADDR>?
        get() = memberAt<CPointerVar<BIO_ADDR>>(0).value
        set(value) { memberAt<CPointerVar<BIO_ADDR>>(0).value = value }
    
}


class ASN1_ENCODING_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var enc: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(0).value
        set(value) { memberAt<CPointerVar<UByteVar>>(0).value = value }
    
    var len: Long
        get() = memberAt<LongVar>(8).value
        set(value) { memberAt<LongVar>(8).value = value }
    
    var modified: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
}

class asn1_string_table_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var nid: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var minsize: Long
        get() = memberAt<LongVar>(8).value
        set(value) { memberAt<LongVar>(8).value = value }
    
    var maxsize: Long
        get() = memberAt<LongVar>(16).value
        set(value) { memberAt<LongVar>(16).value = value }
    
    var mask: ULong
        get() = memberAt<ULongVar>(24).value
        set(value) { memberAt<ULongVar>(24).value = value }
    
    var flags: ULong
        get() = memberAt<ULongVar>(32).value
        set(value) { memberAt<ULongVar>(32).value = value }
    
}








class BIT_STRING_BITNAME_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var bitnum: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var lname: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var sname: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
}


class obj_name_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var type: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var alias: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var data: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
}

class EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var out: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(0).value
        set(value) { memberAt<CPointerVar<UByteVar>>(0).value = value }
    
    var inp: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(8).value
        set(value) { memberAt<CPointerVar<UByteVar>>(8).value = value }
    
    var len: size_t
        get() = memberAt<size_tVar>(16).value
        set(value) { memberAt<size_tVar>(16).value = value }
    
    var interleave: UInt
        get() = memberAt<UIntVar>(24).value
        set(value) { memberAt<UIntVar>(24).value = value }
    
}

class evp_cipher_info_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var cipher: CPointer<EVP_CIPHER>?
        get() = memberAt<CPointerVar<EVP_CIPHER>>(0).value
        set(value) { memberAt<CPointerVar<EVP_CIPHER>>(0).value = value }
    
    val iv: CArrayPointer<UByteVar>
        get() = arrayMemberAt(8)
    
}






class EC_builtin_curve(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var nid: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var comment: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
}


class rsa_pss_params_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var hashAlgorithm: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(0).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(0).value = value }
    
    var maskGenAlgorithm: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(8).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(8).value = value }
    
    var saltLength: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(16).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(16).value = value }
    
    var trailerField: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(24).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(24).value = value }
    
}

class rsa_oaep_params_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var hashFunc: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(0).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(0).value = value }
    
    var maskGenFunc: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(8).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(8).value = value }
    
    var pSourceFunc: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(16).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(16).value = value }
    
}


class SHAstate_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 4)
    
    var h0: UInt
        get() = memberAt<UIntVar>(0).value
        set(value) { memberAt<UIntVar>(0).value = value }
    
    var h1: UInt
        get() = memberAt<UIntVar>(4).value
        set(value) { memberAt<UIntVar>(4).value = value }
    
    var h2: UInt
        get() = memberAt<UIntVar>(8).value
        set(value) { memberAt<UIntVar>(8).value = value }
    
    var h3: UInt
        get() = memberAt<UIntVar>(12).value
        set(value) { memberAt<UIntVar>(12).value = value }
    
    var h4: UInt
        get() = memberAt<UIntVar>(16).value
        set(value) { memberAt<UIntVar>(16).value = value }
    
    var Nl: UInt
        get() = memberAt<UIntVar>(20).value
        set(value) { memberAt<UIntVar>(20).value = value }
    
    var Nh: UInt
        get() = memberAt<UIntVar>(24).value
        set(value) { memberAt<UIntVar>(24).value = value }
    
    val data: CArrayPointer<UIntVar>
        get() = arrayMemberAt(28)
    
    var num: UInt
        get() = memberAt<UIntVar>(92).value
        set(value) { memberAt<UIntVar>(92).value = value }
    
}

class SHA256state_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(112, 4)
    
    val h: CArrayPointer<UIntVar>
        get() = arrayMemberAt(0)
    
    var Nl: UInt
        get() = memberAt<UIntVar>(32).value
        set(value) { memberAt<UIntVar>(32).value = value }
    
    var Nh: UInt
        get() = memberAt<UIntVar>(36).value
        set(value) { memberAt<UIntVar>(36).value = value }
    
    val data: CArrayPointer<UIntVar>
        get() = arrayMemberAt(40)
    
    var num: UInt
        get() = memberAt<UIntVar>(104).value
        set(value) { memberAt<UIntVar>(104).value = value }
    
    var md_len: UInt
        get() = memberAt<UIntVar>(108).value
        set(value) { memberAt<UIntVar>(108).value = value }
    
}

class SHA512state_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(216, 8)
    
    val h: CArrayPointer<ULongVar>
        get() = arrayMemberAt(0)
    
    var Nl: ULong
        get() = memberAt<ULongVar>(64).value
        set(value) { memberAt<ULongVar>(64).value = value }
    
    var Nh: ULong
        get() = memberAt<ULongVar>(72).value
        set(value) { memberAt<ULongVar>(72).value = value }
    
    val u: anonymousStruct9
        get() = memberAt(80)
    
    var num: UInt
        get() = memberAt<UIntVar>(208).value
        set(value) { memberAt<UIntVar>(208).value = value }
    
    var md_len: UInt
        get() = memberAt<UIntVar>(212).value
        set(value) { memberAt<UIntVar>(212).value = value }
    
}

class anonymousStruct9(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    val d: CArrayPointer<ULongVar>
        get() = arrayMemberAt(0)
    
    val p: CArrayPointer<UByteVar>
        get() = arrayMemberAt(0)
    
}

class X509_val_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var notBefore: CPointer<ASN1_TIME>?
        get() = memberAt<CPointerVar<ASN1_TIME>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_TIME>>(0).value = value }
    
    var notAfter: CPointer<ASN1_TIME>?
        get() = memberAt<CPointerVar<ASN1_TIME>>(8).value
        set(value) { memberAt<CPointerVar<ASN1_TIME>>(8).value = value }
    
}














class x509_trust_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var trust: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var flags: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var check_trust: CPointer<CFunction<(CPointer<x509_trust_st>?, CPointer<X509>?, Int) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<x509_trust_st>?, CPointer<X509>?, Int) -> Int>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<x509_trust_st>?, CPointer<X509>?, Int) -> Int>>>(8).value = value }
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    var arg1: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var arg2: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
}





class private_key_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(80, 8)
    
    var version: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var enc_algor: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(8).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(8).value = value }
    
    var enc_pkey: CPointer<ASN1_OCTET_STRING>?
        get() = memberAt<CPointerVar<ASN1_OCTET_STRING>>(16).value
        set(value) { memberAt<CPointerVar<ASN1_OCTET_STRING>>(16).value = value }
    
    var dec_pkey: CPointer<EVP_PKEY>?
        get() = memberAt<CPointerVar<EVP_PKEY>>(24).value
        set(value) { memberAt<CPointerVar<EVP_PKEY>>(24).value = value }
    
    var key_length: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    var key_data: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(40).value
        set(value) { memberAt<CPointerVar<ByteVar>>(40).value = value }
    
    var key_free: Int
        get() = memberAt<IntVar>(48).value
        set(value) { memberAt<IntVar>(48).value = value }
    
    val cipher: EVP_CIPHER_INFO
        get() = memberAt(56)
    
}

class X509_info_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var x509: CPointer<X509>?
        get() = memberAt<CPointerVar<X509>>(0).value
        set(value) { memberAt<CPointerVar<X509>>(0).value = value }
    
    var crl: CPointer<X509_CRL>?
        get() = memberAt<CPointerVar<X509_CRL>>(8).value
        set(value) { memberAt<CPointerVar<X509_CRL>>(8).value = value }
    
    var x_pkey: CPointer<X509_PKEY>?
        get() = memberAt<CPointerVar<X509_PKEY>>(16).value
        set(value) { memberAt<CPointerVar<X509_PKEY>>(16).value = value }
    
    val enc_cipher: EVP_CIPHER_INFO
        get() = memberAt(24)
    
    var enc_len: Int
        get() = memberAt<IntVar>(48).value
        set(value) { memberAt<IntVar>(48).value = value }
    
    var enc_data: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(56).value
        set(value) { memberAt<CPointerVar<ByteVar>>(56).value = value }
    
}


class Netscape_spkac_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var pubkey: CPointer<X509_PUBKEY>?
        get() = memberAt<CPointerVar<X509_PUBKEY>>(0).value
        set(value) { memberAt<CPointerVar<X509_PUBKEY>>(0).value = value }
    
    var challenge: CPointer<ASN1_IA5STRING>?
        get() = memberAt<CPointerVar<ASN1_IA5STRING>>(8).value
        set(value) { memberAt<CPointerVar<ASN1_IA5STRING>>(8).value = value }
    
}

class Netscape_spki_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var spkac: CPointer<NETSCAPE_SPKAC>?
        get() = memberAt<CPointerVar<NETSCAPE_SPKAC>>(0).value
        set(value) { memberAt<CPointerVar<NETSCAPE_SPKAC>>(0).value = value }
    
    val sig_algor: X509_ALGOR
        get() = memberAt(8)
    
    var signature: CPointer<ASN1_BIT_STRING>?
        get() = memberAt<CPointerVar<ASN1_BIT_STRING>>(24).value
        set(value) { memberAt<CPointerVar<ASN1_BIT_STRING>>(24).value = value }
    
}

class Netscape_certificate_sequence(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var type: CPointer<ASN1_OBJECT>?
        get() = memberAt<CPointerVar<ASN1_OBJECT>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_OBJECT>>(0).value = value }
    
    var certs: CPointer<stack_st_X509>?
        get() = memberAt<CPointerVar<stack_st_X509>>(8).value
        set(value) { memberAt<CPointerVar<stack_st_X509>>(8).value = value }
    
}

class PBEPARAM_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var salt: CPointer<ASN1_OCTET_STRING>?
        get() = memberAt<CPointerVar<ASN1_OCTET_STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_OCTET_STRING>>(0).value = value }
    
    var iter: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(8).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(8).value = value }
    
}

class PBE2PARAM_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var keyfunc: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(0).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(0).value = value }
    
    var encryption: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(8).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(8).value = value }
    
}

class PBKDF2PARAM_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var salt: CPointer<ASN1_TYPE>?
        get() = memberAt<CPointerVar<ASN1_TYPE>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_TYPE>>(0).value = value }
    
    var iter: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(8).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(8).value = value }
    
    var keylength: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(16).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(16).value = value }
    
    var prf: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(24).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(24).value = value }
    
}



class lhash_st_OPENSSL_STRING(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    val dummy: lh_OPENSSL_STRING_dummy
        get() = memberAt(0)
    
}

class lh_OPENSSL_STRING_dummy(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var d1: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
    var d2: ULong
        get() = memberAt<ULongVar>(0).value
        set(value) { memberAt<ULongVar>(0).value = value }
    
    var d3: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}

class lhash_st_OPENSSL_CSTRING(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    val dummy: lh_OPENSSL_CSTRING_dummy
        get() = memberAt(0)
    
}

class lh_OPENSSL_CSTRING_dummy(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var d1: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
    var d2: ULong
        get() = memberAt<ULongVar>(0).value
        set(value) { memberAt<ULongVar>(0).value = value }
    
    var d3: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}






class pkcs7_issuer_and_serial_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var issuer: CPointer<X509_NAME>?
        get() = memberAt<CPointerVar<X509_NAME>>(0).value
        set(value) { memberAt<CPointerVar<X509_NAME>>(0).value = value }
    
    var serial: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(8).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(8).value = value }
    
}

class pkcs7_signer_info_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var version: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(0).value = value }
    
    var issuer_and_serial: CPointer<PKCS7_ISSUER_AND_SERIAL>?
        get() = memberAt<CPointerVar<PKCS7_ISSUER_AND_SERIAL>>(8).value
        set(value) { memberAt<CPointerVar<PKCS7_ISSUER_AND_SERIAL>>(8).value = value }
    
    var digest_alg: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(16).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(16).value = value }
    
    var auth_attr: CPointer<stack_st_X509_ATTRIBUTE>?
        get() = memberAt<CPointerVar<stack_st_X509_ATTRIBUTE>>(24).value
        set(value) { memberAt<CPointerVar<stack_st_X509_ATTRIBUTE>>(24).value = value }
    
    var digest_enc_alg: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(32).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(32).value = value }
    
    var enc_digest: CPointer<ASN1_OCTET_STRING>?
        get() = memberAt<CPointerVar<ASN1_OCTET_STRING>>(40).value
        set(value) { memberAt<CPointerVar<ASN1_OCTET_STRING>>(40).value = value }
    
    var unauth_attr: CPointer<stack_st_X509_ATTRIBUTE>?
        get() = memberAt<CPointerVar<stack_st_X509_ATTRIBUTE>>(48).value
        set(value) { memberAt<CPointerVar<stack_st_X509_ATTRIBUTE>>(48).value = value }
    
    var pkey: CPointer<EVP_PKEY>?
        get() = memberAt<CPointerVar<EVP_PKEY>>(56).value
        set(value) { memberAt<CPointerVar<EVP_PKEY>>(56).value = value }
    
}


class pkcs7_recip_info_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var version: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(0).value = value }
    
    var issuer_and_serial: CPointer<PKCS7_ISSUER_AND_SERIAL>?
        get() = memberAt<CPointerVar<PKCS7_ISSUER_AND_SERIAL>>(8).value
        set(value) { memberAt<CPointerVar<PKCS7_ISSUER_AND_SERIAL>>(8).value = value }
    
    var key_enc_algor: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(16).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(16).value = value }
    
    var enc_key: CPointer<ASN1_OCTET_STRING>?
        get() = memberAt<CPointerVar<ASN1_OCTET_STRING>>(24).value
        set(value) { memberAt<CPointerVar<ASN1_OCTET_STRING>>(24).value = value }
    
    var cert: CPointer<X509>?
        get() = memberAt<CPointerVar<X509>>(32).value
        set(value) { memberAt<CPointerVar<X509>>(32).value = value }
    
}


class pkcs7_signed_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var version: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(0).value = value }
    
    var md_algs: CPointer<stack_st_X509_ALGOR>?
        get() = memberAt<CPointerVar<stack_st_X509_ALGOR>>(8).value
        set(value) { memberAt<CPointerVar<stack_st_X509_ALGOR>>(8).value = value }
    
    var cert: CPointer<stack_st_X509>?
        get() = memberAt<CPointerVar<stack_st_X509>>(16).value
        set(value) { memberAt<CPointerVar<stack_st_X509>>(16).value = value }
    
    var crl: CPointer<stack_st_X509_CRL>?
        get() = memberAt<CPointerVar<stack_st_X509_CRL>>(24).value
        set(value) { memberAt<CPointerVar<stack_st_X509_CRL>>(24).value = value }
    
    var signer_info: CPointer<stack_st_PKCS7_SIGNER_INFO>?
        get() = memberAt<CPointerVar<stack_st_PKCS7_SIGNER_INFO>>(32).value
        set(value) { memberAt<CPointerVar<stack_st_PKCS7_SIGNER_INFO>>(32).value = value }
    
    var contents: CPointer<pkcs7_st>?
        get() = memberAt<CPointerVar<pkcs7_st>>(40).value
        set(value) { memberAt<CPointerVar<pkcs7_st>>(40).value = value }
    
}

class pkcs7_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var asn1: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(0).value
        set(value) { memberAt<CPointerVar<UByteVar>>(0).value = value }
    
    var length: Long
        get() = memberAt<LongVar>(8).value
        set(value) { memberAt<LongVar>(8).value = value }
    
    var state: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var detached: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var type: CPointer<ASN1_OBJECT>?
        get() = memberAt<CPointerVar<ASN1_OBJECT>>(24).value
        set(value) { memberAt<CPointerVar<ASN1_OBJECT>>(24).value = value }
    
    val d: anonymousStruct10
        get() = memberAt(32)
    
}

class anonymousStruct10(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var ptr: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var data: CPointer<ASN1_OCTET_STRING>?
        get() = memberAt<CPointerVar<ASN1_OCTET_STRING>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_OCTET_STRING>>(0).value = value }
    
    var sign: CPointer<PKCS7_SIGNED>?
        get() = memberAt<CPointerVar<PKCS7_SIGNED>>(0).value
        set(value) { memberAt<CPointerVar<PKCS7_SIGNED>>(0).value = value }
    
    var enveloped: CPointer<PKCS7_ENVELOPE>?
        get() = memberAt<CPointerVar<PKCS7_ENVELOPE>>(0).value
        set(value) { memberAt<CPointerVar<PKCS7_ENVELOPE>>(0).value = value }
    
    var signed_and_enveloped: CPointer<PKCS7_SIGN_ENVELOPE>?
        get() = memberAt<CPointerVar<PKCS7_SIGN_ENVELOPE>>(0).value
        set(value) { memberAt<CPointerVar<PKCS7_SIGN_ENVELOPE>>(0).value = value }
    
    var digest: CPointer<PKCS7_DIGEST>?
        get() = memberAt<CPointerVar<PKCS7_DIGEST>>(0).value
        set(value) { memberAt<CPointerVar<PKCS7_DIGEST>>(0).value = value }
    
    var encrypted: CPointer<PKCS7_ENCRYPT>?
        get() = memberAt<CPointerVar<PKCS7_ENCRYPT>>(0).value
        set(value) { memberAt<CPointerVar<PKCS7_ENCRYPT>>(0).value = value }
    
    var other: CPointer<ASN1_TYPE>?
        get() = memberAt<CPointerVar<ASN1_TYPE>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_TYPE>>(0).value = value }
    
}

class pkcs7_enveloped_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var version: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(0).value = value }
    
    var recipientinfo: CPointer<stack_st_PKCS7_RECIP_INFO>?
        get() = memberAt<CPointerVar<stack_st_PKCS7_RECIP_INFO>>(8).value
        set(value) { memberAt<CPointerVar<stack_st_PKCS7_RECIP_INFO>>(8).value = value }
    
    var enc_data: CPointer<PKCS7_ENC_CONTENT>?
        get() = memberAt<CPointerVar<PKCS7_ENC_CONTENT>>(16).value
        set(value) { memberAt<CPointerVar<PKCS7_ENC_CONTENT>>(16).value = value }
    
}

class pkcs7_enc_content_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var content_type: CPointer<ASN1_OBJECT>?
        get() = memberAt<CPointerVar<ASN1_OBJECT>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_OBJECT>>(0).value = value }
    
    var algorithm: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(8).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(8).value = value }
    
    var enc_data: CPointer<ASN1_OCTET_STRING>?
        get() = memberAt<CPointerVar<ASN1_OCTET_STRING>>(16).value
        set(value) { memberAt<CPointerVar<ASN1_OCTET_STRING>>(16).value = value }
    
    var cipher: CPointer<EVP_CIPHER>?
        get() = memberAt<CPointerVar<EVP_CIPHER>>(24).value
        set(value) { memberAt<CPointerVar<EVP_CIPHER>>(24).value = value }
    
}

class pkcs7_signedandenveloped_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var version: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(0).value = value }
    
    var md_algs: CPointer<stack_st_X509_ALGOR>?
        get() = memberAt<CPointerVar<stack_st_X509_ALGOR>>(8).value
        set(value) { memberAt<CPointerVar<stack_st_X509_ALGOR>>(8).value = value }
    
    var cert: CPointer<stack_st_X509>?
        get() = memberAt<CPointerVar<stack_st_X509>>(16).value
        set(value) { memberAt<CPointerVar<stack_st_X509>>(16).value = value }
    
    var crl: CPointer<stack_st_X509_CRL>?
        get() = memberAt<CPointerVar<stack_st_X509_CRL>>(24).value
        set(value) { memberAt<CPointerVar<stack_st_X509_CRL>>(24).value = value }
    
    var signer_info: CPointer<stack_st_PKCS7_SIGNER_INFO>?
        get() = memberAt<CPointerVar<stack_st_PKCS7_SIGNER_INFO>>(32).value
        set(value) { memberAt<CPointerVar<stack_st_PKCS7_SIGNER_INFO>>(32).value = value }
    
    var enc_data: CPointer<PKCS7_ENC_CONTENT>?
        get() = memberAt<CPointerVar<PKCS7_ENC_CONTENT>>(40).value
        set(value) { memberAt<CPointerVar<PKCS7_ENC_CONTENT>>(40).value = value }
    
    var recipientinfo: CPointer<stack_st_PKCS7_RECIP_INFO>?
        get() = memberAt<CPointerVar<stack_st_PKCS7_RECIP_INFO>>(48).value
        set(value) { memberAt<CPointerVar<stack_st_PKCS7_RECIP_INFO>>(48).value = value }
    
}

class pkcs7_digest_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var version: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(0).value = value }
    
    var md: CPointer<X509_ALGOR>?
        get() = memberAt<CPointerVar<X509_ALGOR>>(8).value
        set(value) { memberAt<CPointerVar<X509_ALGOR>>(8).value = value }
    
    var contents: CPointer<pkcs7_st>?
        get() = memberAt<CPointerVar<pkcs7_st>>(16).value
        set(value) { memberAt<CPointerVar<pkcs7_st>>(16).value = value }
    
    var digest: CPointer<ASN1_OCTET_STRING>?
        get() = memberAt<CPointerVar<ASN1_OCTET_STRING>>(24).value
        set(value) { memberAt<CPointerVar<ASN1_OCTET_STRING>>(24).value = value }
    
}

class pkcs7_encrypted_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var version: CPointer<ASN1_INTEGER>?
        get() = memberAt<CPointerVar<ASN1_INTEGER>>(0).value
        set(value) { memberAt<CPointerVar<ASN1_INTEGER>>(0).value = value }
    
    var enc_data: CPointer<PKCS7_ENC_CONTENT>?
        get() = memberAt<CPointerVar<PKCS7_ENC_CONTENT>>(8).value
        set(value) { memberAt<CPointerVar<PKCS7_ENC_CONTENT>>(8).value = value }
    
}


class pem_recip_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var dn: CPointer<X509_NAME>?
        get() = memberAt<CPointerVar<X509_NAME>>(8).value
        set(value) { memberAt<CPointerVar<X509_NAME>>(8).value = value }
    
    var cipher: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var key_enc: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
}

class pem_ctx_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(120, 8)
    
    var type: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    val proc_type: anonymousStruct11
        get() = memberAt(4)
    
    var domain: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    val DEK_info: anonymousStruct12
        get() = memberAt(24)
    
    var originator: CPointer<PEM_USER>?
        get() = memberAt<CPointerVar<PEM_USER>>(32).value
        set(value) { memberAt<CPointerVar<PEM_USER>>(32).value = value }
    
    var num_recipient: Int
        get() = memberAt<IntVar>(40).value
        set(value) { memberAt<IntVar>(40).value = value }
    
    var recipient: CPointer<CPointerVar<PEM_USER>>?
        get() = memberAt<CPointerVar<CPointerVar<PEM_USER>>>(48).value
        set(value) { memberAt<CPointerVar<CPointerVar<PEM_USER>>>(48).value = value }
    
    var md: CPointer<EVP_MD>?
        get() = memberAt<CPointerVar<EVP_MD>>(56).value
        set(value) { memberAt<CPointerVar<EVP_MD>>(56).value = value }
    
    var md_enc: Int
        get() = memberAt<IntVar>(64).value
        set(value) { memberAt<IntVar>(64).value = value }
    
    var md_len: Int
        get() = memberAt<IntVar>(68).value
        set(value) { memberAt<IntVar>(68).value = value }
    
    var md_data: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(72).value
        set(value) { memberAt<CPointerVar<ByteVar>>(72).value = value }
    
    var dec: CPointer<EVP_CIPHER>?
        get() = memberAt<CPointerVar<EVP_CIPHER>>(80).value
        set(value) { memberAt<CPointerVar<EVP_CIPHER>>(80).value = value }
    
    var key_len: Int
        get() = memberAt<IntVar>(88).value
        set(value) { memberAt<IntVar>(88).value = value }
    
    var key: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(96).value
        set(value) { memberAt<CPointerVar<UByteVar>>(96).value = value }
    
    var data_enc: Int
        get() = memberAt<IntVar>(104).value
        set(value) { memberAt<IntVar>(104).value = value }
    
    var data_len: Int
        get() = memberAt<IntVar>(108).value
        set(value) { memberAt<IntVar>(108).value = value }
    
    var data: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(112).value
        set(value) { memberAt<CPointerVar<UByteVar>>(112).value = value }
    
}

class anonymousStruct11(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var version: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var mode: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class anonymousStruct12(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var cipher: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}





class tls_session_ticket_ext_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var length: UShort
        get() = memberAt<UShortVar>(0).value
        set(value) { memberAt<UShortVar>(0).value = value }
    
    var data: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(8).value
        set(value) { memberAt<COpaquePointerVar>(8).value = value }
    
}









class srtp_protection_profile_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var id: ULong
        get() = memberAt<ULongVar>(8).value
        set(value) { memberAt<ULongVar>(8).value = value }
    
}




class err_state_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(584, 8)
    
    val err_flags: CArrayPointer<IntVar>
        get() = arrayMemberAt(0)
    
    val err_buffer: CArrayPointer<ULongVar>
        get() = arrayMemberAt(64)
    
    val err_data: CArrayPointer<CPointerVar<ByteVar>>
        get() = arrayMemberAt(192)
    
    val err_data_flags: CArrayPointer<IntVar>
        get() = arrayMemberAt(320)
    
    val err_file: CArrayPointer<CPointerVar<ByteVar>>
        get() = arrayMemberAt(384)
    
    val err_line: CArrayPointer<IntVar>
        get() = arrayMemberAt(512)
    
    var top: Int
        get() = memberAt<IntVar>(576).value
        set(value) { memberAt<IntVar>(576).value = value }
    
    var bottom: Int
        get() = memberAt<IntVar>(580).value
        set(value) { memberAt<IntVar>(580).value = value }
    
}

class ERR_string_data_st(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var error: ULong
        get() = memberAt<ULongVar>(0).value
        set(value) { memberAt<ULongVar>(0).value = value }
    
    var string: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
}

class lhash_st_ERR_STRING_DATA(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    val dummy: lh_ERR_STRING_DATA_dummy
        get() = memberAt(0)
    
}

class lh_ERR_STRING_DATA_dummy(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 8)
    
    var d1: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(0).value
        set(value) { memberAt<COpaquePointerVar>(0).value = value }
    
    var d2: ULong
        get() = memberAt<ULongVar>(0).value
        set(value) { memberAt<ULongVar>(0).value = value }
    
    var d3: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
}


class lws_pollargs(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(12, 4)
    
    var fd: lws_sockfd_type
        get() = memberAt<lws_sockfd_typeVar>(0).value
        set(value) { memberAt<lws_sockfd_typeVar>(0).value = value }
    
    var events: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
    var prev_events: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
}

class lws_extension(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var callback: CPointer<lws_extension_callback_function>?
        get() = memberAt<CPointerVar<lws_extension_callback_function>>(8).value
        set(value) { memberAt<CPointerVar<lws_extension_callback_function>>(8).value = value }
    
    var client_offer: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
}


class lws_token_limits(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(190, 2)
    
    val token_limit: CArrayPointer<UShortVar>
        get() = arrayMemberAt(0)
    
}

class lws_tokens(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var token: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var len: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
}


class lws_ssl_info(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var where: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var ret: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class lws_acme_cert_aging_args(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(88, 8)
    
    var vh: CPointer<lws_vhost>?
        get() = memberAt<CPointerVar<lws_vhost>>(0).value
        set(value) { memberAt<CPointerVar<lws_vhost>>(0).value = value }
    
    val element_overrides: CArrayPointer<CPointerVar<ByteVar>>
        get() = arrayMemberAt(8)
    
}

class lws_ext_options(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var type: lws_ext_options_types
        get() = memberAt<lws_ext_options_types.Var>(8).value
        set(value) { memberAt<lws_ext_options_types.Var>(8).value = value }
    
}

class lws_ext_option_arg(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var option_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var option_index: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var start: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    var len: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
}

class lws_protocols(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var callback: CPointer<lws_callback_function>?
        get() = memberAt<CPointerVar<lws_callback_function>>(8).value
        set(value) { memberAt<CPointerVar<lws_callback_function>>(8).value = value }
    
    var per_session_data_size: size_t
        get() = memberAt<size_tVar>(16).value
        set(value) { memberAt<size_tVar>(16).value = value }
    
    var rx_buffer_size: size_t
        get() = memberAt<size_tVar>(24).value
        set(value) { memberAt<size_tVar>(24).value = value }
    
    var id: UInt
        get() = memberAt<UIntVar>(32).value
        set(value) { memberAt<UIntVar>(32).value = value }
    
    var user: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(40).value
        set(value) { memberAt<COpaquePointerVar>(40).value = value }
    
    var tx_packet_size: size_t
        get() = memberAt<size_tVar>(48).value
        set(value) { memberAt<size_tVar>(48).value = value }
    
}

class lws_protocol_vhost_options(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var next: CPointer<lws_protocol_vhost_options>?
        get() = memberAt<CPointerVar<lws_protocol_vhost_options>>(0).value
        set(value) { memberAt<CPointerVar<lws_protocol_vhost_options>>(0).value = value }
    
    var options: CPointer<lws_protocol_vhost_options>?
        get() = memberAt<CPointerVar<lws_protocol_vhost_options>>(8).value
        set(value) { memberAt<CPointerVar<lws_protocol_vhost_options>>(8).value = value }
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    var value: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(24).value
        set(value) { memberAt<CPointerVar<ByteVar>>(24).value = value }
    
}

class lwsgw_hash_bin(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(20, 1)
    
    val bin: CArrayPointer<UByteVar>
        get() = arrayMemberAt(0)
    
}

class lwsgw_hash(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(41, 1)
    
    val id: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
}

class lws_session_info(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(252, 4)
    
    val username: CArrayPointer<ByteVar>
        get() = arrayMemberAt(0)
    
    val email: CArrayPointer<ByteVar>
        get() = arrayMemberAt(32)
    
    val ip: CArrayPointer<ByteVar>
        get() = arrayMemberAt(132)
    
    var mask: UInt
        get() = memberAt<UIntVar>(204).value
        set(value) { memberAt<UIntVar>(204).value = value }
    
    val session: CArrayPointer<ByteVar>
        get() = arrayMemberAt(208)
    
}

class lws_gs_event_args(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var event: lws_gs_event
        get() = memberAt<lws_gs_event.Var>(0).value
        set(value) { memberAt<lws_gs_event.Var>(0).value = value }
    
    var username: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var email: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
}

class lws_plat_file_ops(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    var open: CPointer<CFunction<(CPointer<lws_plat_file_ops>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<lws_fop_flags_tVar>?) -> lws_fop_fd_t?>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<lws_plat_file_ops>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<lws_fop_flags_tVar>?) -> lws_fop_fd_t?>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<lws_plat_file_ops>?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<lws_fop_flags_tVar>?) -> lws_fop_fd_t?>>>(0).value = value }
    
    var close: CPointer<CFunction<(CPointer<lws_fop_fd_tVar>?) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<lws_fop_fd_tVar>?) -> Int>>>(8).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<lws_fop_fd_tVar>?) -> Int>>>(8).value = value }
    
    var seek_cur: CPointer<CFunction<(lws_fop_fd_t?, lws_fileofs_t) -> lws_fileofs_t>>?
        get() = memberAt<CPointerVar<CFunction<(lws_fop_fd_t?, lws_fileofs_t) -> lws_fileofs_t>>>(16).value
        set(value) { memberAt<CPointerVar<CFunction<(lws_fop_fd_t?, lws_fileofs_t) -> lws_fileofs_t>>>(16).value = value }
    
    var read: CPointer<CFunction<(lws_fop_fd_t?, CPointer<lws_filepos_tVar>?, CPointer<uint8_tVar>?, lws_filepos_t) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(lws_fop_fd_t?, CPointer<lws_filepos_tVar>?, CPointer<uint8_tVar>?, lws_filepos_t) -> Int>>>(24).value
        set(value) { memberAt<CPointerVar<CFunction<(lws_fop_fd_t?, CPointer<lws_filepos_tVar>?, CPointer<uint8_tVar>?, lws_filepos_t) -> Int>>>(24).value = value }
    
    var write: CPointer<CFunction<(lws_fop_fd_t?, CPointer<lws_filepos_tVar>?, CPointer<uint8_tVar>?, lws_filepos_t) -> Int>>?
        get() = memberAt<CPointerVar<CFunction<(lws_fop_fd_t?, CPointer<lws_filepos_tVar>?, CPointer<uint8_tVar>?, lws_filepos_t) -> Int>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(lws_fop_fd_t?, CPointer<lws_filepos_tVar>?, CPointer<uint8_tVar>?, lws_filepos_t) -> Int>>>(32).value = value }
    
    val fi: CArrayPointer<lws_fops_index>
        get() = arrayMemberAt(40)
    
    var next: CPointer<lws_plat_file_ops>?
        get() = memberAt<CPointerVar<lws_plat_file_ops>>(88).value
        set(value) { memberAt<CPointerVar<lws_plat_file_ops>>(88).value = value }
    
}

class lws_fop_fd(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var fd: lws_filefd_type
        get() = memberAt<lws_filefd_typeVar>(0).value
        set(value) { memberAt<lws_filefd_typeVar>(0).value = value }
    
    var fops: CPointer<lws_plat_file_ops>?
        get() = memberAt<CPointerVar<lws_plat_file_ops>>(8).value
        set(value) { memberAt<CPointerVar<lws_plat_file_ops>>(8).value = value }
    
    var filesystem_priv: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(16).value
        set(value) { memberAt<COpaquePointerVar>(16).value = value }
    
    var pos: lws_filepos_t
        get() = memberAt<lws_filepos_tVar>(24).value
        set(value) { memberAt<lws_filepos_tVar>(24).value = value }
    
    var len: lws_filepos_t
        get() = memberAt<lws_filepos_tVar>(32).value
        set(value) { memberAt<lws_filepos_tVar>(32).value = value }
    
    var flags: lws_fop_flags_t
        get() = memberAt<lws_fop_flags_tVar>(40).value
        set(value) { memberAt<lws_fop_flags_tVar>(40).value = value }
    
    var mod_time: uint32_t
        get() = memberAt<uint32_tVar>(44).value
        set(value) { memberAt<uint32_tVar>(44).value = value }
    
}

class lws_fops_index(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var sig: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var len: uint8_t
        get() = memberAt<uint8_tVar>(8).value
        set(value) { memberAt<uint8_tVar>(8).value = value }
    
}

class lws_context_creation_info(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(568, 8)
    
    var port: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var iface: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var protocols: CPointer<lws_protocols>?
        get() = memberAt<CPointerVar<lws_protocols>>(16).value
        set(value) { memberAt<CPointerVar<lws_protocols>>(16).value = value }
    
    var extensions: CPointer<lws_extension>?
        get() = memberAt<CPointerVar<lws_extension>>(24).value
        set(value) { memberAt<CPointerVar<lws_extension>>(24).value = value }
    
    var token_limits: CPointer<lws_token_limits>?
        get() = memberAt<CPointerVar<lws_token_limits>>(32).value
        set(value) { memberAt<CPointerVar<lws_token_limits>>(32).value = value }
    
    var ssl_private_key_password: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(40).value
        set(value) { memberAt<CPointerVar<ByteVar>>(40).value = value }
    
    var ssl_cert_filepath: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(48).value
        set(value) { memberAt<CPointerVar<ByteVar>>(48).value = value }
    
    var ssl_private_key_filepath: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(56).value
        set(value) { memberAt<CPointerVar<ByteVar>>(56).value = value }
    
    var ssl_ca_filepath: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(64).value
        set(value) { memberAt<CPointerVar<ByteVar>>(64).value = value }
    
    var ssl_cipher_list: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(72).value
        set(value) { memberAt<CPointerVar<ByteVar>>(72).value = value }
    
    var http_proxy_address: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(80).value
        set(value) { memberAt<CPointerVar<ByteVar>>(80).value = value }
    
    var http_proxy_port: UInt
        get() = memberAt<UIntVar>(88).value
        set(value) { memberAt<UIntVar>(88).value = value }
    
    var gid: Int
        get() = memberAt<IntVar>(92).value
        set(value) { memberAt<IntVar>(92).value = value }
    
    var uid: Int
        get() = memberAt<IntVar>(96).value
        set(value) { memberAt<IntVar>(96).value = value }
    
    var options: UInt
        get() = memberAt<UIntVar>(100).value
        set(value) { memberAt<UIntVar>(100).value = value }
    
    var user: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(104).value
        set(value) { memberAt<COpaquePointerVar>(104).value = value }
    
    var ka_time: Int
        get() = memberAt<IntVar>(112).value
        set(value) { memberAt<IntVar>(112).value = value }
    
    var ka_probes: Int
        get() = memberAt<IntVar>(116).value
        set(value) { memberAt<IntVar>(116).value = value }
    
    var ka_interval: Int
        get() = memberAt<IntVar>(120).value
        set(value) { memberAt<IntVar>(120).value = value }
    
    var provided_client_ssl_ctx: CPointer<SSL_CTX>?
        get() = memberAt<CPointerVar<SSL_CTX>>(128).value
        set(value) { memberAt<CPointerVar<SSL_CTX>>(128).value = value }
    
    var max_http_header_data: UShort
        get() = memberAt<UShortVar>(136).value
        set(value) { memberAt<UShortVar>(136).value = value }
    
    var max_http_header_pool: UShort
        get() = memberAt<UShortVar>(138).value
        set(value) { memberAt<UShortVar>(138).value = value }
    
    var count_threads: UInt
        get() = memberAt<UIntVar>(140).value
        set(value) { memberAt<UIntVar>(140).value = value }
    
    var fd_limit_per_thread: UInt
        get() = memberAt<UIntVar>(144).value
        set(value) { memberAt<UIntVar>(144).value = value }
    
    var timeout_secs: UInt
        get() = memberAt<UIntVar>(148).value
        set(value) { memberAt<UIntVar>(148).value = value }
    
    var ecdh_curve: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(152).value
        set(value) { memberAt<CPointerVar<ByteVar>>(152).value = value }
    
    var vhost_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(160).value
        set(value) { memberAt<CPointerVar<ByteVar>>(160).value = value }
    
    var plugin_dirs: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(168).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(168).value = value }
    
    var pvo: CPointer<lws_protocol_vhost_options>?
        get() = memberAt<CPointerVar<lws_protocol_vhost_options>>(176).value
        set(value) { memberAt<CPointerVar<lws_protocol_vhost_options>>(176).value = value }
    
    var keepalive_timeout: Int
        get() = memberAt<IntVar>(184).value
        set(value) { memberAt<IntVar>(184).value = value }
    
    var log_filepath: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(192).value
        set(value) { memberAt<CPointerVar<ByteVar>>(192).value = value }
    
    var mounts: CPointer<lws_http_mount>?
        get() = memberAt<CPointerVar<lws_http_mount>>(200).value
        set(value) { memberAt<CPointerVar<lws_http_mount>>(200).value = value }
    
    var server_string: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(208).value
        set(value) { memberAt<CPointerVar<ByteVar>>(208).value = value }
    
    var pt_serv_buf_size: UInt
        get() = memberAt<UIntVar>(216).value
        set(value) { memberAt<UIntVar>(216).value = value }
    
    var max_http_header_data2: UInt
        get() = memberAt<UIntVar>(220).value
        set(value) { memberAt<UIntVar>(220).value = value }
    
    var ssl_options_set: Long
        get() = memberAt<LongVar>(224).value
        set(value) { memberAt<LongVar>(224).value = value }
    
    var ssl_options_clear: Long
        get() = memberAt<LongVar>(232).value
        set(value) { memberAt<LongVar>(232).value = value }
    
    var ws_ping_pong_interval: UShort
        get() = memberAt<UShortVar>(240).value
        set(value) { memberAt<UShortVar>(240).value = value }
    
    var headers: CPointer<lws_protocol_vhost_options>?
        get() = memberAt<CPointerVar<lws_protocol_vhost_options>>(248).value
        set(value) { memberAt<CPointerVar<lws_protocol_vhost_options>>(248).value = value }
    
    var reject_service_keywords: CPointer<lws_protocol_vhost_options>?
        get() = memberAt<CPointerVar<lws_protocol_vhost_options>>(256).value
        set(value) { memberAt<CPointerVar<lws_protocol_vhost_options>>(256).value = value }
    
    var external_baggage_free_on_destroy: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(264).value
        set(value) { memberAt<COpaquePointerVar>(264).value = value }
    
    var client_ssl_private_key_password: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(272).value
        set(value) { memberAt<CPointerVar<ByteVar>>(272).value = value }
    
    var client_ssl_cert_filepath: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(280).value
        set(value) { memberAt<CPointerVar<ByteVar>>(280).value = value }
    
    var client_ssl_private_key_filepath: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(288).value
        set(value) { memberAt<CPointerVar<ByteVar>>(288).value = value }
    
    var client_ssl_ca_filepath: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(296).value
        set(value) { memberAt<CPointerVar<ByteVar>>(296).value = value }
    
    var client_ssl_ca_mem: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(304).value
        set(value) { memberAt<COpaquePointerVar>(304).value = value }
    
    var client_ssl_ca_mem_len: UInt
        get() = memberAt<UIntVar>(312).value
        set(value) { memberAt<UIntVar>(312).value = value }
    
    var client_ssl_cipher_list: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(320).value
        set(value) { memberAt<CPointerVar<ByteVar>>(320).value = value }
    
    var fops: CPointer<lws_plat_file_ops>?
        get() = memberAt<CPointerVar<lws_plat_file_ops>>(328).value
        set(value) { memberAt<CPointerVar<lws_plat_file_ops>>(328).value = value }
    
    var simultaneous_ssl_restriction: Int
        get() = memberAt<IntVar>(336).value
        set(value) { memberAt<IntVar>(336).value = value }
    
    var socks_proxy_address: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(344).value
        set(value) { memberAt<CPointerVar<ByteVar>>(344).value = value }
    
    var socks_proxy_port: UInt
        get() = memberAt<UIntVar>(352).value
        set(value) { memberAt<UIntVar>(352).value = value }
    
    val caps: CArrayPointer<cap_value_tVar>
        get() = arrayMemberAt(356)
    
    var count_caps: Byte
        get() = memberAt<ByteVar>(372).value
        set(value) { memberAt<ByteVar>(372).value = value }
    
    var bind_iface: Int
        get() = memberAt<IntVar>(376).value
        set(value) { memberAt<IntVar>(376).value = value }
    
    var ssl_info_event_mask: Int
        get() = memberAt<IntVar>(380).value
        set(value) { memberAt<IntVar>(380).value = value }
    
    var timeout_secs_ah_idle: UInt
        get() = memberAt<UIntVar>(384).value
        set(value) { memberAt<UIntVar>(384).value = value }
    
    var ip_limit_ah: UShort
        get() = memberAt<UShortVar>(388).value
        set(value) { memberAt<UShortVar>(388).value = value }
    
    var ip_limit_wsi: UShort
        get() = memberAt<UShortVar>(390).value
        set(value) { memberAt<UShortVar>(390).value = value }
    
    val http2_settings: CArrayPointer<uint32_tVar>
        get() = arrayMemberAt(392)
    
    var error_document_404: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(424).value
        set(value) { memberAt<CPointerVar<ByteVar>>(424).value = value }
    
    var alpn: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(432).value
        set(value) { memberAt<CPointerVar<ByteVar>>(432).value = value }
    
    var foreign_loops: CPointer<COpaquePointerVar>?
        get() = memberAt<CPointerVar<COpaquePointerVar>>(440).value
        set(value) { memberAt<CPointerVar<COpaquePointerVar>>(440).value = value }
    
    var signal_cb: CPointer<CFunction<(COpaquePointer?, Int) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(COpaquePointer?, Int) -> Unit>>>(448).value
        set(value) { memberAt<CPointerVar<CFunction<(COpaquePointer?, Int) -> Unit>>>(448).value = value }
    
    var pcontext: CPointer<CPointerVar<lws_context>>?
        get() = memberAt<CPointerVar<CPointerVar<lws_context>>>(456).value
        set(value) { memberAt<CPointerVar<CPointerVar<lws_context>>>(456).value = value }
    
    var finalize: CPointer<CFunction<(CPointer<lws_vhost>?, COpaquePointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<lws_vhost>?, COpaquePointer?) -> Unit>>>(464).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<lws_vhost>?, COpaquePointer?) -> Unit>>>(464).value = value }
    
    var finalize_arg: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(472).value
        set(value) { memberAt<COpaquePointerVar>(472).value = value }
    
    var max_http_header_pool2: UInt
        get() = memberAt<UIntVar>(480).value
        set(value) { memberAt<UIntVar>(480).value = value }
    
    var ssl_client_options_set: Long
        get() = memberAt<LongVar>(488).value
        set(value) { memberAt<LongVar>(488).value = value }
    
    var ssl_client_options_clear: Long
        get() = memberAt<LongVar>(496).value
        set(value) { memberAt<LongVar>(496).value = value }
    
    var tls1_3_plus_cipher_list: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(504).value
        set(value) { memberAt<CPointerVar<ByteVar>>(504).value = value }
    
    var client_tls_1_3_plus_cipher_list: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(512).value
        set(value) { memberAt<CPointerVar<ByteVar>>(512).value = value }
    
    var listen_accept_role: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(520).value
        set(value) { memberAt<CPointerVar<ByteVar>>(520).value = value }
    
    var listen_accept_protocol: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(528).value
        set(value) { memberAt<CPointerVar<ByteVar>>(528).value = value }
    
    val _unused: CArrayPointer<COpaquePointerVar>
        get() = arrayMemberAt(536)
    
}

class lws_http_mount(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(104, 8)
    
    var mount_next: CPointer<lws_http_mount>?
        get() = memberAt<CPointerVar<lws_http_mount>>(0).value
        set(value) { memberAt<CPointerVar<lws_http_mount>>(0).value = value }
    
    var mountpoint: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var origin: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    var def: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(24).value
        set(value) { memberAt<CPointerVar<ByteVar>>(24).value = value }
    
    var protocol: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(32).value
        set(value) { memberAt<CPointerVar<ByteVar>>(32).value = value }
    
    var cgienv: CPointer<lws_protocol_vhost_options>?
        get() = memberAt<CPointerVar<lws_protocol_vhost_options>>(40).value
        set(value) { memberAt<CPointerVar<lws_protocol_vhost_options>>(40).value = value }
    
    var extra_mimetypes: CPointer<lws_protocol_vhost_options>?
        get() = memberAt<CPointerVar<lws_protocol_vhost_options>>(48).value
        set(value) { memberAt<CPointerVar<lws_protocol_vhost_options>>(48).value = value }
    
    var interpret: CPointer<lws_protocol_vhost_options>?
        get() = memberAt<CPointerVar<lws_protocol_vhost_options>>(56).value
        set(value) { memberAt<CPointerVar<lws_protocol_vhost_options>>(56).value = value }
    
    var cgi_timeout: Int
        get() = memberAt<IntVar>(64).value
        set(value) { memberAt<IntVar>(64).value = value }
    
    var cache_max_age: Int
        get() = memberAt<IntVar>(68).value
        set(value) { memberAt<IntVar>(68).value = value }
    
    var auth_mask: UInt
        get() = memberAt<UIntVar>(72).value
        set(value) { memberAt<UIntVar>(72).value = value }
    
    var origin_protocol: UByte
        get() = memberAt<UByteVar>(77).value
        set(value) { memberAt<UByteVar>(77).value = value }
    
    var mountpoint_len: UByte
        get() = memberAt<UByteVar>(78).value
        set(value) { memberAt<UByteVar>(78).value = value }
    
    var basic_auth_login_file: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(80).value
        set(value) { memberAt<CPointerVar<ByteVar>>(80).value = value }
    
    val _unused: CArrayPointer<COpaquePointerVar>
        get() = arrayMemberAt(88)
    
    var cache_reusable: UInt
        get() = readBits(this.rawPtr, 608, 1, false).toUInt()
        set(value) = writeBits(this.rawPtr, 608, 1, value.toLong())
    
    var cache_revalidate: UInt
        get() = readBits(this.rawPtr, 609, 1, false).toUInt()
        set(value) = writeBits(this.rawPtr, 609, 1, value.toLong())
    
    var cache_intermediaries: UInt
        get() = readBits(this.rawPtr, 610, 1, false).toUInt()
        set(value) = writeBits(this.rawPtr, 610, 1, value.toLong())
    
}

class lws_client_connect_info(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(192, 8)
    
    var context: CPointer<lws_context>?
        get() = memberAt<CPointerVar<lws_context>>(0).value
        set(value) { memberAt<CPointerVar<lws_context>>(0).value = value }
    
    var address: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var port: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var ssl_connection: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var path: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(24).value
        set(value) { memberAt<CPointerVar<ByteVar>>(24).value = value }
    
    var host: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(32).value
        set(value) { memberAt<CPointerVar<ByteVar>>(32).value = value }
    
    var origin: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(40).value
        set(value) { memberAt<CPointerVar<ByteVar>>(40).value = value }
    
    var protocol: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(48).value
        set(value) { memberAt<CPointerVar<ByteVar>>(48).value = value }
    
    var ietf_version_or_minus_one: Int
        get() = memberAt<IntVar>(56).value
        set(value) { memberAt<IntVar>(56).value = value }
    
    var userdata: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(64).value
        set(value) { memberAt<COpaquePointerVar>(64).value = value }
    
    var client_exts: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(72).value
        set(value) { memberAt<COpaquePointerVar>(72).value = value }
    
    var method: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(80).value
        set(value) { memberAt<CPointerVar<ByteVar>>(80).value = value }
    
    var parent_wsi: CPointer<lws>?
        get() = memberAt<CPointerVar<lws>>(88).value
        set(value) { memberAt<CPointerVar<lws>>(88).value = value }
    
    var uri_replace_from: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(96).value
        set(value) { memberAt<CPointerVar<ByteVar>>(96).value = value }
    
    var uri_replace_to: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(104).value
        set(value) { memberAt<CPointerVar<ByteVar>>(104).value = value }
    
    var vhost: CPointer<lws_vhost>?
        get() = memberAt<CPointerVar<lws_vhost>>(112).value
        set(value) { memberAt<CPointerVar<lws_vhost>>(112).value = value }
    
    var pwsi: CPointer<CPointerVar<lws>>?
        get() = memberAt<CPointerVar<CPointerVar<lws>>>(120).value
        set(value) { memberAt<CPointerVar<CPointerVar<lws>>>(120).value = value }
    
    var iface: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(128).value
        set(value) { memberAt<CPointerVar<ByteVar>>(128).value = value }
    
    var local_protocol_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(136).value
        set(value) { memberAt<CPointerVar<ByteVar>>(136).value = value }
    
    var alpn: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(144).value
        set(value) { memberAt<CPointerVar<ByteVar>>(144).value = value }
    
    var opaque_user_data: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(152).value
        set(value) { memberAt<COpaquePointerVar>(152).value = value }
    
    val _unused: CArrayPointer<COpaquePointerVar>
        get() = arrayMemberAt(160)
    
}

class lws_process_html_args(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var p: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var len: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var max_len: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var final: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var chunked: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
}

class lws_process_html_state(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(64, 8)
    
    var start: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    val swallow: CArrayPointer<ByteVar>
        get() = arrayMemberAt(8)
    
    var pos: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var data: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(32).value
        set(value) { memberAt<COpaquePointerVar>(32).value = value }
    
    var vars: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(40).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(40).value = value }
    
    var count_vars: Int
        get() = memberAt<IntVar>(48).value
        set(value) { memberAt<IntVar>(48).value = value }
    
    var replace: lws_process_html_state_cb?
        get() = memberAt<lws_process_html_state_cbVar>(56).value
        set(value) { memberAt<lws_process_html_state_cbVar>(56).value = value }
    
}


class lws_write_passthru(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var wsi: CPointer<lws>?
        get() = memberAt<CPointerVar<lws>>(0).value
        set(value) { memberAt<CPointerVar<lws>>(0).value = value }
    
    var buf: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(8).value
        set(value) { memberAt<CPointerVar<UByteVar>>(8).value = value }
    
    var len: size_t
        get() = memberAt<size_tVar>(16).value
        set(value) { memberAt<size_tVar>(16).value = value }
    
    var wp: lws_write_protocol
        get() = memberAt<lws_write_protocolVar>(24).value
        set(value) { memberAt<lws_write_protocolVar>(24).value = value }
    
}

class lws_sock_file_fd_type(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 4)
    
    var sockfd: lws_sockfd_type
        get() = memberAt<lws_sockfd_typeVar>(0).value
        set(value) { memberAt<lws_sockfd_typeVar>(0).value = value }
    
    var filefd: lws_filefd_type
        get() = memberAt<lws_filefd_typeVar>(0).value
        set(value) { memberAt<lws_filefd_typeVar>(0).value = value }
    
}

class lws_udp(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 4)
    
    val sa: sockaddr
        get() = memberAt(0)
    
    var salen: socklen_t
        get() = memberAt<socklen_tVar>(16).value
        set(value) { memberAt<socklen_tVar>(16).value = value }
    
    val sa_pending: sockaddr
        get() = memberAt(20)
    
    var salen_pending: socklen_t
        get() = memberAt<socklen_tVar>(36).value
        set(value) { memberAt<socklen_tVar>(36).value = value }
    
}

class lws_dll(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var prev: CPointer<lws_dll>?
        get() = memberAt<CPointerVar<lws_dll>>(0).value
        set(value) { memberAt<CPointerVar<lws_dll>>(0).value = value }
    
    var next: CPointer<lws_dll>?
        get() = memberAt<CPointerVar<lws_dll>>(8).value
        set(value) { memberAt<CPointerVar<lws_dll>>(8).value = value }
    
}

class lws_dll_lws(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var prev: CPointer<lws_dll_lws>?
        get() = memberAt<CPointerVar<lws_dll_lws>>(0).value
        set(value) { memberAt<CPointerVar<lws_dll_lws>>(0).value = value }
    
    var next: CPointer<lws_dll_lws>?
        get() = memberAt<CPointerVar<lws_dll_lws>>(8).value
        set(value) { memberAt<CPointerVar<lws_dll_lws>>(8).value = value }
    
}


class lws_wifi_scan(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    var next: CPointer<lws_wifi_scan>?
        get() = memberAt<CPointerVar<lws_wifi_scan>>(0).value
        set(value) { memberAt<CPointerVar<lws_wifi_scan>>(0).value = value }
    
    val ssid: CArrayPointer<ByteVar>
        get() = arrayMemberAt(8)
    
    var rssi: int32_t
        get() = memberAt<int32_tVar>(40).value
        set(value) { memberAt<int32_tVar>(40).value = value }
    
    val bssid: CArrayPointer<uint8_tVar>
        get() = arrayMemberAt(44)
    
    var count: uint8_t
        get() = memberAt<uint8_tVar>(50).value
        set(value) { memberAt<uint8_tVar>(50).value = value }
    
    var channel: uint8_t
        get() = memberAt<uint8_tVar>(51).value
        set(value) { memberAt<uint8_tVar>(51).value = value }
    
    var authmode: uint8_t
        get() = memberAt<uint8_tVar>(52).value
        set(value) { memberAt<uint8_tVar>(52).value = value }
    
}


class lws_tls_cert_info_results(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    var verified: UInt
        get() = memberAt<UIntVar>(0).value
        set(value) { memberAt<UIntVar>(0).value = value }
    
    var time: time_t
        get() = memberAt<time_tVar>(0).value
        set(value) { memberAt<time_tVar>(0).value = value }
    
    var usage: UInt
        get() = memberAt<UIntVar>(0).value
        set(value) { memberAt<UIntVar>(0).value = value }
    
    val ns: anonymousStruct13
        get() = memberAt(0)
    
}

class anonymousStruct13(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(68, 4)
    
    var len: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    val name: CArrayPointer<ByteVar>
        get() = arrayMemberAt(4)
    
}

class lws_cgi_args(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var stdwsi: CPointer<CPointerVar<lws>>?
        get() = memberAt<CPointerVar<CPointerVar<lws>>>(0).value
        set(value) { memberAt<CPointerVar<CPointerVar<lws>>>(0).value = value }
    
    var ch: lws_enum_stdinouterr
        get() = memberAt<lws_enum_stdinouterrVar>(8).value
        set(value) { memberAt<lws_enum_stdinouterrVar>(8).value = value }
    
    var data: CPointer<UByteVar>?
        get() = memberAt<CPointerVar<UByteVar>>(16).value
        set(value) { memberAt<CPointerVar<UByteVar>>(16).value = value }
    
    var hdr_state: lws_cgi_hdr_state
        get() = memberAt<lws_cgi_hdr_state.Var>(24).value
        set(value) { memberAt<lws_cgi_hdr_state.Var>(24).value = value }
    
    var len: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
}

class lejp_ctx(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(496, 8)
    
    var callback: CPointer<CFunction<(CPointer<lejp_ctx>?, Byte) -> Byte>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<lejp_ctx>?, Byte) -> Byte>>>(0).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<lejp_ctx>?, Byte) -> Byte>>>(0).value = value }
    
    var user: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(8).value
        set(value) { memberAt<COpaquePointerVar>(8).value = value }
    
    var paths: CPointer<CPointerVar<ByteVar>>?
        get() = memberAt<CPointerVar<CPointerVar<ByteVar>>>(16).value
        set(value) { memberAt<CPointerVar<CPointerVar<ByteVar>>>(16).value = value }
    
    val st: CArrayPointer<_lejp_stack>
        get() = arrayMemberAt(24)
    
    val i: CArrayPointer<uint16_tVar>
        get() = arrayMemberAt(72)
    
    val wild: CArrayPointer<uint16_tVar>
        get() = arrayMemberAt(82)
    
    val path: CArrayPointer<ByteVar>
        get() = arrayMemberAt(92)
    
    val buf: CArrayPointer<ByteVar>
        get() = arrayMemberAt(220)
    
    var line: uint32_t
        get() = memberAt<uint32_tVar>(476).value
        set(value) { memberAt<uint32_tVar>(476).value = value }
    
    var uni: uint16_t
        get() = memberAt<uint16_tVar>(480).value
        set(value) { memberAt<uint16_tVar>(480).value = value }
    
    var npos: uint8_t
        get() = memberAt<uint8_tVar>(482).value
        set(value) { memberAt<uint8_tVar>(482).value = value }
    
    var dcount: uint8_t
        get() = memberAt<uint8_tVar>(483).value
        set(value) { memberAt<uint8_tVar>(483).value = value }
    
    var f: uint8_t
        get() = memberAt<uint8_tVar>(484).value
        set(value) { memberAt<uint8_tVar>(484).value = value }
    
    var sp: uint8_t
        get() = memberAt<uint8_tVar>(485).value
        set(value) { memberAt<uint8_tVar>(485).value = value }
    
    var ipos: uint8_t
        get() = memberAt<uint8_tVar>(486).value
        set(value) { memberAt<uint8_tVar>(486).value = value }
    
    var ppos: uint8_t
        get() = memberAt<uint8_tVar>(487).value
        set(value) { memberAt<uint8_tVar>(487).value = value }
    
    var count_paths: uint8_t
        get() = memberAt<uint8_tVar>(488).value
        set(value) { memberAt<uint8_tVar>(488).value = value }
    
    var path_match: uint8_t
        get() = memberAt<uint8_tVar>(489).value
        set(value) { memberAt<uint8_tVar>(489).value = value }
    
    var path_match_len: uint8_t
        get() = memberAt<uint8_tVar>(490).value
        set(value) { memberAt<uint8_tVar>(490).value = value }
    
    var wildcount: uint8_t
        get() = memberAt<uint8_tVar>(491).value
        set(value) { memberAt<uint8_tVar>(491).value = value }
    
}

class _lejp_stack(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(4, 1)
    
    var s: Byte
        get() = memberAt<ByteVar>(0).value
        set(value) { memberAt<ByteVar>(0).value = value }
    
    var p: Byte
        get() = memberAt<ByteVar>(1).value
        set(value) { memberAt<ByteVar>(1).value = value }
    
    var i: Byte
        get() = memberAt<ByteVar>(2).value
        set(value) { memberAt<ByteVar>(2).value = value }
    
    var b: Byte
        get() = memberAt<ByteVar>(3).value
        set(value) { memberAt<ByteVar>(3).value = value }
    
}



class lws_threadpool_create_args(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(8, 4)
    
    var threads: Int
        get() = memberAt<IntVar>(0).value
        set(value) { memberAt<IntVar>(0).value = value }
    
    var max_queue_depth: Int
        get() = memberAt<IntVar>(4).value
        set(value) { memberAt<IntVar>(4).value = value }
    
}

class lws_threadpool_task_args(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(48, 8)
    
    var wsi: CPointer<lws>?
        get() = memberAt<CPointerVar<lws>>(0).value
        set(value) { memberAt<CPointerVar<lws>>(0).value = value }
    
    var user: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(8).value
        set(value) { memberAt<COpaquePointerVar>(8).value = value }
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    var async_task: Byte
        get() = memberAt<ByteVar>(24).value
        set(value) { memberAt<ByteVar>(24).value = value }
    
    var task: CPointer<CFunction<(COpaquePointer?, lws_threadpool_task_status) -> lws_threadpool_task_return>>?
        get() = memberAt<CPointerVar<CFunction<(COpaquePointer?, lws_threadpool_task_status) -> lws_threadpool_task_return>>>(32).value
        set(value) { memberAt<CPointerVar<CFunction<(COpaquePointer?, lws_threadpool_task_status) -> lws_threadpool_task_return>>>(32).value = value }
    
    var cleanup: CPointer<CFunction<(CPointer<lws>?, COpaquePointer?) -> Unit>>?
        get() = memberAt<CPointerVar<CFunction<(CPointer<lws>?, COpaquePointer?) -> Unit>>>(40).value
        set(value) { memberAt<CPointerVar<CFunction<(CPointer<lws>?, COpaquePointer?) -> Unit>>>(40).value = value }
    
}

class lws_tokenize(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(32, 8)
    
    var start: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var token: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var len: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var token_len: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
    var flags: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var delim: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
}




class lws_fts_result_filepath(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var next: CPointer<lws_fts_result_filepath>?
        get() = memberAt<CPointerVar<lws_fts_result_filepath>>(0).value
        set(value) { memberAt<CPointerVar<lws_fts_result_filepath>>(0).value = value }
    
    var matches: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var matches_length: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var lines_in_file: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var filepath_length: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
}

class lws_fts_result_autocomplete(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var next: CPointer<lws_fts_result_autocomplete>?
        get() = memberAt<CPointerVar<lws_fts_result_autocomplete>>(0).value
        set(value) { memberAt<CPointerVar<lws_fts_result_autocomplete>>(0).value = value }
    
    var instances: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var agg_instances: Int
        get() = memberAt<IntVar>(12).value
        set(value) { memberAt<IntVar>(12).value = value }
    
    var ac_length: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var elided: Byte
        get() = memberAt<ByteVar>(20).value
        set(value) { memberAt<ByteVar>(20).value = value }
    
    var has_children: Byte
        get() = memberAt<ByteVar>(21).value
        set(value) { memberAt<ByteVar>(21).value = value }
    
}

class lws_fts_result(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var filepath_head: CPointer<lws_fts_result_filepath>?
        get() = memberAt<CPointerVar<lws_fts_result_filepath>>(0).value
        set(value) { memberAt<CPointerVar<lws_fts_result_filepath>>(0).value = value }
    
    var autocomplete_head: CPointer<lws_fts_result_autocomplete>?
        get() = memberAt<CPointerVar<lws_fts_result_autocomplete>>(8).value
        set(value) { memberAt<CPointerVar<lws_fts_result_autocomplete>>(8).value = value }
    
    var duration_ms: Int
        get() = memberAt<IntVar>(16).value
        set(value) { memberAt<IntVar>(16).value = value }
    
    var effective_flags: Int
        get() = memberAt<IntVar>(20).value
        set(value) { memberAt<IntVar>(20).value = value }
    
}

class lws_fts_search_params(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var needle: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var only_filepath: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(8).value
        set(value) { memberAt<CPointerVar<ByteVar>>(8).value = value }
    
    var results_head: CPointer<lwsac>?
        get() = memberAt<CPointerVar<lwsac>>(16).value
        set(value) { memberAt<CPointerVar<lwsac>>(16).value = value }
    
    var flags: Int
        get() = memberAt<IntVar>(24).value
        set(value) { memberAt<IntVar>(24).value = value }
    
    var max_autocomplete: Int
        get() = memberAt<IntVar>(28).value
        set(value) { memberAt<IntVar>(28).value = value }
    
    var max_files: Int
        get() = memberAt<IntVar>(32).value
        set(value) { memberAt<IntVar>(32).value = value }
    
    var max_lines: Int
        get() = memberAt<IntVar>(36).value
        set(value) { memberAt<IntVar>(36).value = value }
    
}


class lws_gencrypto_keyelem(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var buf: CPointer<uint8_tVar>?
        get() = memberAt<CPointerVar<uint8_tVar>>(0).value
        set(value) { memberAt<CPointerVar<uint8_tVar>>(0).value = value }
    
    var len: uint16_t
        get() = memberAt<uint16_tVar>(8).value
        set(value) { memberAt<uint16_tVar>(8).value = value }
    
}

class lws_genhash_ctx(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var type: uint8_t
        get() = memberAt<uint8_tVar>(0).value
        set(value) { memberAt<uint8_tVar>(0).value = value }
    
    var evp_type: CPointer<EVP_MD>?
        get() = memberAt<CPointerVar<EVP_MD>>(8).value
        set(value) { memberAt<CPointerVar<EVP_MD>>(8).value = value }
    
    var mdctx: CPointer<EVP_MD_CTX>?
        get() = memberAt<CPointerVar<EVP_MD_CTX>>(16).value
        set(value) { memberAt<CPointerVar<EVP_MD_CTX>>(16).value = value }
    
}

class lws_genhmac_ctx(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(24, 8)
    
    var type: uint8_t
        get() = memberAt<uint8_tVar>(0).value
        set(value) { memberAt<uint8_tVar>(0).value = value }
    
    var evp_type: CPointer<EVP_MD>?
        get() = memberAt<CPointerVar<EVP_MD>>(8).value
        set(value) { memberAt<CPointerVar<EVP_MD>>(8).value = value }
    
    var ctx: CPointer<EVP_MD_CTX>?
        get() = memberAt<CPointerVar<EVP_MD_CTX>>(16).value
        set(value) { memberAt<CPointerVar<EVP_MD_CTX>>(16).value = value }
    
}

class lws_genrsa_ctx(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(96, 8)
    
    val bn: CArrayPointer<CPointerVar<BIGNUM>>
        get() = arrayMemberAt(0)
    
    var ctx: CPointer<EVP_PKEY_CTX>?
        get() = memberAt<CPointerVar<EVP_PKEY_CTX>>(64).value
        set(value) { memberAt<CPointerVar<EVP_PKEY_CTX>>(64).value = value }
    
    var rsa: CPointer<RSA>?
        get() = memberAt<CPointerVar<RSA>>(72).value
        set(value) { memberAt<CPointerVar<RSA>>(72).value = value }
    
    var context: CPointer<lws_context>?
        get() = memberAt<CPointerVar<lws_context>>(80).value
        set(value) { memberAt<CPointerVar<lws_context>>(80).value = value }
    
    var mode: enum_genrsa_mode
        get() = memberAt<enum_genrsa_mode.Var>(88).value
        set(value) { memberAt<enum_genrsa_mode.Var>(88).value = value }
    
}

class lws_genaes_ctx(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(72, 8)
    
    var ctx: CPointer<EVP_CIPHER_CTX>?
        get() = memberAt<CPointerVar<EVP_CIPHER_CTX>>(0).value
        set(value) { memberAt<CPointerVar<EVP_CIPHER_CTX>>(0).value = value }
    
    var cipher: CPointer<EVP_CIPHER>?
        get() = memberAt<CPointerVar<EVP_CIPHER>>(8).value
        set(value) { memberAt<CPointerVar<EVP_CIPHER>>(8).value = value }
    
    var engine: CPointer<ENGINE>?
        get() = memberAt<CPointerVar<ENGINE>>(16).value
        set(value) { memberAt<CPointerVar<ENGINE>>(16).value = value }
    
    var init: Byte
        get() = memberAt<ByteVar>(24).value
        set(value) { memberAt<ByteVar>(24).value = value }
    
    val tag: CArrayPointer<UByteVar>
        get() = arrayMemberAt(25)
    
    var k: CPointer<lws_gencrypto_keyelem>?
        get() = memberAt<CPointerVar<lws_gencrypto_keyelem>>(48).value
        set(value) { memberAt<CPointerVar<lws_gencrypto_keyelem>>(48).value = value }
    
    var op: enum_aes_operation
        get() = memberAt<enum_aes_operation.Var>(56).value
        set(value) { memberAt<enum_aes_operation.Var>(56).value = value }
    
    var mode: enum_aes_modes
        get() = memberAt<enum_aes_modes.Var>(60).value
        set(value) { memberAt<enum_aes_modes.Var>(60).value = value }
    
    var taglen: Int
        get() = memberAt<IntVar>(64).value
        set(value) { memberAt<IntVar>(64).value = value }
    
    var underway: Byte
        get() = memberAt<ByteVar>(68).value
        set(value) { memberAt<ByteVar>(68).value = value }
    
}

class lws_genec_ctx(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var ctx: CPointer<EVP_PKEY_CTX>?
        get() = memberAt<CPointerVar<EVP_PKEY_CTX>>(0).value
        set(value) { memberAt<CPointerVar<EVP_PKEY_CTX>>(0).value = value }
    
    var ctx_peer: CPointer<EVP_PKEY_CTX>?
        get() = memberAt<CPointerVar<EVP_PKEY_CTX>>(8).value
        set(value) { memberAt<CPointerVar<EVP_PKEY_CTX>>(8).value = value }
    
    var context: CPointer<lws_context>?
        get() = memberAt<CPointerVar<lws_context>>(16).value
        set(value) { memberAt<CPointerVar<lws_context>>(16).value = value }
    
    var curve_table: CPointer<lws_ec_curves>?
        get() = memberAt<CPointerVar<lws_ec_curves>>(24).value
        set(value) { memberAt<CPointerVar<lws_ec_curves>>(24).value = value }
    
    var genec_alg: enum_genec_alg
        get() = memberAt<enum_genec_alg.Var>(32).value
        set(value) { memberAt<enum_genec_alg.Var>(32).value = value }
    
}

class lws_ec_curves(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(16, 8)
    
    var name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(0).value
        set(value) { memberAt<CPointerVar<ByteVar>>(0).value = value }
    
    var tls_lib_nid: Int
        get() = memberAt<IntVar>(8).value
        set(value) { memberAt<IntVar>(8).value = value }
    
    var key_bytes: Short
        get() = memberAt<ShortVar>(12).value
        set(value) { memberAt<ShortVar>(12).value = value }
    
}

class lws_jwk(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(232, 8)
    
    val e: CArrayPointer<lws_gencrypto_keyelem>
        get() = arrayMemberAt(0)
    
    val meta: CArrayPointer<lws_gencrypto_keyelem>
        get() = arrayMemberAt(128)
    
    var kty: Int
        get() = memberAt<IntVar>(224).value
        set(value) { memberAt<IntVar>(224).value = value }
    
    var private_key: Byte
        get() = memberAt<ByteVar>(228).value
        set(value) { memberAt<ByteVar>(228).value = value }
    
}

class lws_jwk_parse_state(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(1400, 8)
    
    var jwk: CPointer<lws_jwk>?
        get() = memberAt<CPointerVar<lws_jwk>>(0).value
        set(value) { memberAt<CPointerVar<lws_jwk>>(0).value = value }
    
    val b64: CArrayPointer<ByteVar>
        get() = arrayMemberAt(8)
    
    var per_key_cb: lws_jwk_key_import_callback?
        get() = memberAt<lws_jwk_key_import_callbackVar>(1376).value
        set(value) { memberAt<lws_jwk_key_import_callbackVar>(1376).value = value }
    
    var user: COpaquePointer?
        get() = memberAt<COpaquePointerVar>(1384).value
        set(value) { memberAt<COpaquePointerVar>(1384).value = value }
    
    var pos: Int
        get() = memberAt<IntVar>(1392).value
        set(value) { memberAt<IntVar>(1392).value = value }
    
    var possible: UShort
        get() = memberAt<UShortVar>(1396).value
        set(value) { memberAt<UShortVar>(1396).value = value }
    
}

class lws_jose_jwe_alg(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(40, 8)
    
    var hash_type: lws_genhash_types
        get() = memberAt<lws_genhash_types.Var>(0).value
        set(value) { memberAt<lws_genhash_types.Var>(0).value = value }
    
    var hmac_type: lws_genhmac_types
        get() = memberAt<lws_genhmac_types.Var>(4).value
        set(value) { memberAt<lws_genhmac_types.Var>(4).value = value }
    
    var algtype_signing: lws_jose_algtype
        get() = memberAt<lws_jose_algtype.Var>(8).value
        set(value) { memberAt<lws_jose_algtype.Var>(8).value = value }
    
    var algtype_crypto: lws_jose_algtype
        get() = memberAt<lws_jose_algtype.Var>(12).value
        set(value) { memberAt<lws_jose_algtype.Var>(12).value = value }
    
    var alg: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(16).value
        set(value) { memberAt<CPointerVar<ByteVar>>(16).value = value }
    
    var curve_name: CPointer<ByteVar>?
        get() = memberAt<CPointerVar<ByteVar>>(24).value
        set(value) { memberAt<CPointerVar<ByteVar>>(24).value = value }
    
    var keybits_min: UShort
        get() = memberAt<UShortVar>(32).value
        set(value) { memberAt<UShortVar>(32).value = value }
    
    var keybits_fixed: UShort
        get() = memberAt<UShortVar>(34).value
        set(value) { memberAt<UShortVar>(34).value = value }
    
    var ivbits: UShort
        get() = memberAt<UShortVar>(36).value
        set(value) { memberAt<UShortVar>(36).value = value }
    
}

class lws_jose(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(568, 8)
    
    val e: CArrayPointer<lws_gencrypto_keyelem>
        get() = arrayMemberAt(0)
    
    val jwk_ephemeral: lws_jwk
        get() = memberAt(320)
    
    var alg: CPointer<lws_jose_jwe_alg>?
        get() = memberAt<CPointerVar<lws_jose_jwe_alg>>(552).value
        set(value) { memberAt<CPointerVar<lws_jose_jwe_alg>>(552).value = value }
    
    var enc_alg: CPointer<lws_jose_jwe_alg>?
        get() = memberAt<CPointerVar<lws_jose_jwe_alg>>(560).value
        set(value) { memberAt<CPointerVar<lws_jose_jwe_alg>>(560).value = value }
    
}

class lws_jws_concat_map(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(56, 8)
    
    val buf: CArrayPointer<CPointerVar<ByteVar>>
        get() = arrayMemberAt(0)
    
    val len: CArrayPointer<uint16_tVar>
        get() = arrayMemberAt(40)
    
}

class lws_jws(rawPtr: NativePtr) : CStructVar(rawPtr) {
    
    companion object : Type(128, 8)
    
    var jwk: CPointer<lws_jwk>?
        get() = memberAt<CPointerVar<lws_jwk>>(0).value
        set(value) { memberAt<CPointerVar<lws_jwk>>(0).value = value }
    
    var context: CPointer<lws_context>?
        get() = memberAt<CPointerVar<lws_context>>(8).value
        set(value) { memberAt<CPointerVar<lws_context>>(8).value = value }
    
    val map: lws_jws_concat_map
        get() = memberAt(16)
    
    val map_b64: lws_jws_concat_map
        get() = memberAt(72)
    
}

enum class idtype_t(override val value: UInt) : CEnum {
    P_ALL(0u),
    P_PID(1u),
    P_PGID(2u),
    ;
    
    companion object {
        fun byValue(value: UInt) = idtype_t.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: idtype_t
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}




typealias cap_flag_tVar = UIntVarOf<cap_flag_t>
typealias cap_flag_t = UInt

val CAP_EFFECTIVE: cap_flag_t get() = 0u
val CAP_PERMITTED: cap_flag_t get() = 1u
val CAP_INHERITABLE: cap_flag_t get() = 2u

typealias cap_flag_value_tVar = UIntVarOf<cap_flag_value_t>
typealias cap_flag_value_t = UInt

val CAP_CLEAR: cap_flag_value_t get() = 0u
val CAP_SET: cap_flag_value_t get() = 1u

typealias __socket_typeVar = UIntVarOf<__socket_type>
typealias __socket_type = UInt




// enum (anonymous at /usr/include/netinet/in.h:40:1):
val IPPROTO_MAX: UInt get() = 256u


// enum (anonymous at /usr/include/netinet/in.h:122:1):
val IPPORT_ECHO: UInt get() = 7u
val IPPORT_DISCARD: UInt get() = 9u
val IPPORT_SYSTAT: UInt get() = 11u
val IPPORT_DAYTIME: UInt get() = 13u
val IPPORT_NETSTAT: UInt get() = 15u
val IPPORT_FTP: UInt get() = 21u
val IPPORT_TELNET: UInt get() = 23u
val IPPORT_SMTP: UInt get() = 25u
val IPPORT_TIMESERVER: UInt get() = 37u
val IPPORT_NAMESERVER: UInt get() = 42u
val IPPORT_WHOIS: UInt get() = 43u
val IPPORT_MTP: UInt get() = 57u
val IPPORT_TFTP: UInt get() = 69u
val IPPORT_RJE: UInt get() = 77u
val IPPORT_FINGER: UInt get() = 79u
val IPPORT_TTYLINK: UInt get() = 87u
val IPPORT_SUPDUP: UInt get() = 95u
val IPPORT_EXECSERVER: UInt get() = 512u
val IPPORT_LOGINSERVER: UInt get() = 513u
val IPPORT_CMDSERVER: UInt get() = 514u
val IPPORT_EFSSERVER: UInt get() = 520u
val IPPORT_BIFFUDP: UInt get() = 512u
val IPPORT_WHOSERVER: UInt get() = 513u
val IPPORT_ROUTESERVER: UInt get() = 520u
val IPPORT_USERRESERVED: UInt get() = 5000u

typealias __itimer_whichVar = UIntVarOf<__itimer_which>
typealias __itimer_which = UInt

enum class __codecvt_result(override val value: UInt) : CEnum {
    __codecvt_ok(0u),
    __codecvt_partial(1u),
    __codecvt_error(2u),
    __codecvt_noconv(3u),
    ;
    
    companion object {
        fun byValue(value: UInt) = __codecvt_result.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: __codecvt_result
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}


// enum (anonymous at /usr/include/pthread.h:43:1):
val PTHREAD_MUTEX_TIMED_NP: UInt get() = 0u
val PTHREAD_MUTEX_RECURSIVE_NP: UInt get() = 1u
val PTHREAD_MUTEX_ERRORCHECK_NP: UInt get() = 2u
val PTHREAD_MUTEX_ADAPTIVE_NP: UInt get() = 3u
val PTHREAD_MUTEX_NORMAL: UInt get() = 0u
val PTHREAD_MUTEX_RECURSIVE: UInt get() = 1u
val PTHREAD_MUTEX_ERRORCHECK: UInt get() = 2u
val PTHREAD_MUTEX_DEFAULT: UInt get() = 0u

// enum (anonymous at /usr/include/pthread.h:65:1):
val PTHREAD_MUTEX_STALLED: UInt get() = 0u
val PTHREAD_MUTEX_STALLED_NP: UInt get() = 0u
val PTHREAD_MUTEX_ROBUST: UInt get() = 1u
val PTHREAD_MUTEX_ROBUST_NP: UInt get() = 1u

// enum (anonymous at /usr/include/pthread.h:77:1):
val PTHREAD_PRIO_NONE: UInt get() = 0u
val PTHREAD_PRIO_INHERIT: UInt get() = 1u
val PTHREAD_PRIO_PROTECT: UInt get() = 2u

// enum (anonymous at /usr/include/pthread.h:115:1):
val PTHREAD_RWLOCK_PREFER_READER_NP: UInt get() = 0u
val PTHREAD_RWLOCK_PREFER_WRITER_NP: UInt get() = 1u
val PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: UInt get() = 2u
val PTHREAD_RWLOCK_DEFAULT_NP: UInt get() = 0u






enum class BIO_hostserv_priorities(override val value: UInt) : CEnum {
    BIO_PARSE_PRIO_HOST(0u),
    BIO_PARSE_PRIO_SERV(1u),
    ;
    
    companion object {
        fun byValue(value: UInt) = BIO_hostserv_priorities.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: BIO_hostserv_priorities
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class BIO_lookup_type(override val value: UInt) : CEnum {
    BIO_LOOKUP_CLIENT(0u),
    BIO_LOOKUP_SERVER(1u),
    ;
    
    companion object {
        fun byValue(value: UInt) = BIO_lookup_type.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: BIO_lookup_type
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class BIO_sock_info_type(override val value: UInt) : CEnum {
    BIO_SOCK_INFO_ADDRESS(0u),
    ;
    
    companion object {
        fun byValue(value: UInt) = BIO_sock_info_type.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: BIO_sock_info_type
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias point_conversion_form_tVar = UIntVarOf<point_conversion_form_t>
typealias point_conversion_form_t = UInt

val POINT_CONVERSION_COMPRESSED: point_conversion_form_t get() = 2u
val POINT_CONVERSION_UNCOMPRESSED: point_conversion_form_t get() = 4u
val POINT_CONVERSION_HYBRID: point_conversion_form_t get() = 6u

typealias X509_LOOKUP_TYPEVar = UIntVarOf<X509_LOOKUP_TYPE>
typealias X509_LOOKUP_TYPE = UInt

val X509_LU_NONE: X509_LOOKUP_TYPE get() = 0u
val X509_LU_X509: X509_LOOKUP_TYPE get() = 1u
val X509_LU_CRL: X509_LOOKUP_TYPE get() = 2u

typealias ct_log_entry_type_tVar = IntVarOf<ct_log_entry_type_t>
typealias ct_log_entry_type_t = Int

val CT_LOG_ENTRY_TYPE_NOT_SET: ct_log_entry_type_t get() = -1
val CT_LOG_ENTRY_TYPE_X509: ct_log_entry_type_t get() = 0
val CT_LOG_ENTRY_TYPE_PRECERT: ct_log_entry_type_t get() = 1

typealias sct_version_tVar = IntVarOf<sct_version_t>
typealias sct_version_t = Int

val SCT_VERSION_NOT_SET: sct_version_t get() = -1
val SCT_VERSION_V1: sct_version_t get() = 0

enum class sct_source_t(override val value: UInt) : CEnum {
    SCT_SOURCE_UNKNOWN(0u),
    SCT_SOURCE_TLS_EXTENSION(1u),
    SCT_SOURCE_X509V3_EXTENSION(2u),
    SCT_SOURCE_OCSP_STAPLED_RESPONSE(3u),
    ;
    
    companion object {
        fun byValue(value: UInt) = sct_source_t.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: sct_source_t
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class sct_validation_status_t(override val value: UInt) : CEnum {
    SCT_VALIDATION_STATUS_NOT_SET(0u),
    SCT_VALIDATION_STATUS_UNKNOWN_LOG(1u),
    SCT_VALIDATION_STATUS_VALID(2u),
    SCT_VALIDATION_STATUS_INVALID(3u),
    SCT_VALIDATION_STATUS_UNVERIFIED(4u),
    SCT_VALIDATION_STATUS_UNKNOWN_VERSION(5u),
    ;
    
    companion object {
        fun byValue(value: UInt) = sct_validation_status_t.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: sct_validation_status_t
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class OSSL_HANDSHAKE_STATE(override val value: UInt) : CEnum {
    TLS_ST_BEFORE(0u),
    TLS_ST_OK(1u),
    DTLS_ST_CR_HELLO_VERIFY_REQUEST(2u),
    TLS_ST_CR_SRVR_HELLO(3u),
    TLS_ST_CR_CERT(4u),
    TLS_ST_CR_CERT_STATUS(5u),
    TLS_ST_CR_KEY_EXCH(6u),
    TLS_ST_CR_CERT_REQ(7u),
    TLS_ST_CR_SRVR_DONE(8u),
    TLS_ST_CR_SESSION_TICKET(9u),
    TLS_ST_CR_CHANGE(10u),
    TLS_ST_CR_FINISHED(11u),
    TLS_ST_CW_CLNT_HELLO(12u),
    TLS_ST_CW_CERT(13u),
    TLS_ST_CW_KEY_EXCH(14u),
    TLS_ST_CW_CERT_VRFY(15u),
    TLS_ST_CW_CHANGE(16u),
    TLS_ST_CW_NEXT_PROTO(17u),
    TLS_ST_CW_FINISHED(18u),
    TLS_ST_SW_HELLO_REQ(19u),
    TLS_ST_SR_CLNT_HELLO(20u),
    DTLS_ST_SW_HELLO_VERIFY_REQUEST(21u),
    TLS_ST_SW_SRVR_HELLO(22u),
    TLS_ST_SW_CERT(23u),
    TLS_ST_SW_KEY_EXCH(24u),
    TLS_ST_SW_CERT_REQ(25u),
    TLS_ST_SW_SRVR_DONE(26u),
    TLS_ST_SR_CERT(27u),
    TLS_ST_SR_KEY_EXCH(28u),
    TLS_ST_SR_CERT_VRFY(29u),
    TLS_ST_SR_NEXT_PROTO(30u),
    TLS_ST_SR_CHANGE(31u),
    TLS_ST_SR_FINISHED(32u),
    TLS_ST_SW_SESSION_TICKET(33u),
    TLS_ST_SW_CERT_STATUS(34u),
    TLS_ST_SW_CHANGE(35u),
    TLS_ST_SW_FINISHED(36u),
    ;
    
    companion object {
        fun byValue(value: UInt) = OSSL_HANDSHAKE_STATE.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: OSSL_HANDSHAKE_STATE
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

// enum (anonymous at /usr/include/openssl/ssl.h:1915:1):
val SSL_CT_VALIDATION_PERMISSIVE: UInt get() = 0u
val SSL_CT_VALIDATION_STRICT: UInt get() = 1u

typealias lws_log_levelsVar = UIntVarOf<lws_log_levels>
typealias lws_log_levels = UInt

val LLL_ERR: lws_log_levels get() = 1u
val LLL_WARN: lws_log_levels get() = 2u
val LLL_NOTICE: lws_log_levels get() = 4u
val LLL_INFO: lws_log_levels get() = 8u
val LLL_DEBUG: lws_log_levels get() = 16u
val LLL_PARSER: lws_log_levels get() = 32u
val LLL_HEADER: lws_log_levels get() = 64u
val LLL_EXT: lws_log_levels get() = 128u
val LLL_CLIENT: lws_log_levels get() = 256u
val LLL_LATENCY: lws_log_levels get() = 512u
val LLL_USER: lws_log_levels get() = 1024u
val LLL_THREAD: lws_log_levels get() = 2048u
val LLL_COUNT: lws_log_levels get() = 12u

typealias lws_extension_callback_reasonsVar = UIntVarOf<lws_extension_callback_reasons>
typealias lws_extension_callback_reasons = UInt

val LWS_EXT_CB_CONSTRUCT: lws_extension_callback_reasons get() = 4u
val LWS_EXT_CB_CLIENT_CONSTRUCT: lws_extension_callback_reasons get() = 5u
val LWS_EXT_CB_DESTROY: lws_extension_callback_reasons get() = 8u
val LWS_EXT_CB_PACKET_TX_PRESEND: lws_extension_callback_reasons get() = 12u
val LWS_EXT_CB_PAYLOAD_TX: lws_extension_callback_reasons get() = 21u
val LWS_EXT_CB_PAYLOAD_RX: lws_extension_callback_reasons get() = 22u
val LWS_EXT_CB_OPTION_DEFAULT: lws_extension_callback_reasons get() = 23u
val LWS_EXT_CB_OPTION_SET: lws_extension_callback_reasons get() = 24u
val LWS_EXT_CB_OPTION_CONFIRM: lws_extension_callback_reasons get() = 25u
val LWS_EXT_CB_NAMED_OPTION_SET: lws_extension_callback_reasons get() = 26u

typealias lws_close_statusVar = UIntVarOf<lws_close_status>
typealias lws_close_status = UInt

val LWS_CLOSE_STATUS_NOSTATUS: lws_close_status get() = 0u
val LWS_CLOSE_STATUS_NORMAL: lws_close_status get() = 1000u
val LWS_CLOSE_STATUS_GOINGAWAY: lws_close_status get() = 1001u
val LWS_CLOSE_STATUS_PROTOCOL_ERR: lws_close_status get() = 1002u
val LWS_CLOSE_STATUS_UNACCEPTABLE_OPCODE: lws_close_status get() = 1003u
val LWS_CLOSE_STATUS_RESERVED: lws_close_status get() = 1004u
val LWS_CLOSE_STATUS_NO_STATUS: lws_close_status get() = 1005u
val LWS_CLOSE_STATUS_ABNORMAL_CLOSE: lws_close_status get() = 1006u
val LWS_CLOSE_STATUS_INVALID_PAYLOAD: lws_close_status get() = 1007u
val LWS_CLOSE_STATUS_POLICY_VIOLATION: lws_close_status get() = 1008u
val LWS_CLOSE_STATUS_MESSAGE_TOO_LARGE: lws_close_status get() = 1009u
val LWS_CLOSE_STATUS_EXTENSION_REQUIRED: lws_close_status get() = 1010u
val LWS_CLOSE_STATUS_UNEXPECTED_CONDITION: lws_close_status get() = 1011u
val LWS_CLOSE_STATUS_TLS_FAILURE: lws_close_status get() = 1015u
val LWS_CLOSE_STATUS_CLIENT_TRANSACTION_DONE: lws_close_status get() = 2000u
val LWS_CLOSE_STATUS_NOSTATUS_CONTEXT_DESTROY: lws_close_status get() = 9999u

enum class lws_cert_update_state(override val value: UInt) : CEnum {
    LWS_CUS_IDLE(0u),
    LWS_CUS_STARTING(1u),
    LWS_CUS_SUCCESS(2u),
    LWS_CUS_FAILED(3u),
    LWS_CUS_CREATE_KEYS(4u),
    LWS_CUS_REG(5u),
    LWS_CUS_AUTH(6u),
    LWS_CUS_CHALLENGE(7u),
    LWS_CUS_CREATE_REQ(8u),
    LWS_CUS_REQ(9u),
    LWS_CUS_CONFIRM(10u),
    LWS_CUS_ISSUE(11u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_cert_update_state.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_cert_update_state
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

// enum (anonymous at /usr/local/include/libwebsockets/lws-callbacks.h:58:1):
val LWS_TLS_REQ_ELEMENT_COUNTRY: UInt get() = 0u
val LWS_TLS_REQ_ELEMENT_STATE: UInt get() = 1u
val LWS_TLS_REQ_ELEMENT_LOCALITY: UInt get() = 2u
val LWS_TLS_REQ_ELEMENT_ORGANIZATION: UInt get() = 3u
val LWS_TLS_REQ_ELEMENT_COMMON_NAME: UInt get() = 4u
val LWS_TLS_REQ_ELEMENT_EMAIL: UInt get() = 5u
val LWS_TLS_REQ_ELEMENT_COUNT: UInt get() = 6u
val LWS_TLS_SET_DIR_URL: UInt get() = 6u
val LWS_TLS_SET_AUTH_PATH: UInt get() = 7u
val LWS_TLS_SET_CERT_PATH: UInt get() = 8u
val LWS_TLS_SET_KEY_PATH: UInt get() = 9u
val LWS_TLS_TOTAL_COUNT: UInt get() = 10u

typealias lws_callback_reasonsVar = UIntVarOf<lws_callback_reasons>
typealias lws_callback_reasons = UInt

val LWS_CALLBACK_PROTOCOL_INIT: lws_callback_reasons get() = 27u
val LWS_CALLBACK_PROTOCOL_DESTROY: lws_callback_reasons get() = 28u
val LWS_CALLBACK_WSI_CREATE: lws_callback_reasons get() = 29u
val LWS_CALLBACK_WSI_DESTROY: lws_callback_reasons get() = 30u
val LWS_CALLBACK_OPENSSL_LOAD_EXTRA_CLIENT_VERIFY_CERTS: lws_callback_reasons get() = 21u
val LWS_CALLBACK_OPENSSL_LOAD_EXTRA_SERVER_VERIFY_CERTS: lws_callback_reasons get() = 22u
val LWS_CALLBACK_OPENSSL_PERFORM_CLIENT_CERT_VERIFICATION: lws_callback_reasons get() = 23u
val LWS_CALLBACK_OPENSSL_CONTEXT_REQUIRES_PRIVATE_KEY: lws_callback_reasons get() = 37u
val LWS_CALLBACK_SSL_INFO: lws_callback_reasons get() = 67u
val LWS_CALLBACK_OPENSSL_PERFORM_SERVER_CERT_VERIFICATION: lws_callback_reasons get() = 58u
val LWS_CALLBACK_SERVER_NEW_CLIENT_INSTANTIATED: lws_callback_reasons get() = 19u
val LWS_CALLBACK_HTTP: lws_callback_reasons get() = 12u
val LWS_CALLBACK_HTTP_BODY: lws_callback_reasons get() = 13u
val LWS_CALLBACK_HTTP_BODY_COMPLETION: lws_callback_reasons get() = 14u
val LWS_CALLBACK_HTTP_FILE_COMPLETION: lws_callback_reasons get() = 15u
val LWS_CALLBACK_HTTP_WRITEABLE: lws_callback_reasons get() = 16u
val LWS_CALLBACK_CLOSED_HTTP: lws_callback_reasons get() = 5u
val LWS_CALLBACK_FILTER_HTTP_CONNECTION: lws_callback_reasons get() = 18u
val LWS_CALLBACK_ADD_HEADERS: lws_callback_reasons get() = 53u
val LWS_CALLBACK_CHECK_ACCESS_RIGHTS: lws_callback_reasons get() = 51u
val LWS_CALLBACK_PROCESS_HTML: lws_callback_reasons get() = 52u
val LWS_CALLBACK_HTTP_BIND_PROTOCOL: lws_callback_reasons get() = 49u
val LWS_CALLBACK_HTTP_DROP_PROTOCOL: lws_callback_reasons get() = 50u
val LWS_CALLBACK_HTTP_CONFIRM_UPGRADE: lws_callback_reasons get() = 86u
val LWS_CALLBACK_ESTABLISHED_CLIENT_HTTP: lws_callback_reasons get() = 44u
val LWS_CALLBACK_CLOSED_CLIENT_HTTP: lws_callback_reasons get() = 45u
val LWS_CALLBACK_RECEIVE_CLIENT_HTTP_READ: lws_callback_reasons get() = 48u
val LWS_CALLBACK_RECEIVE_CLIENT_HTTP: lws_callback_reasons get() = 46u
val LWS_CALLBACK_COMPLETED_CLIENT_HTTP: lws_callback_reasons get() = 47u
val LWS_CALLBACK_CLIENT_HTTP_WRITEABLE: lws_callback_reasons get() = 57u
val LWS_CALLBACK_CLIENT_HTTP_BIND_PROTOCOL: lws_callback_reasons get() = 85u
val LWS_CALLBACK_CLIENT_HTTP_DROP_PROTOCOL: lws_callback_reasons get() = 76u
val LWS_CALLBACK_ESTABLISHED: lws_callback_reasons get() = 0u
val LWS_CALLBACK_CLOSED: lws_callback_reasons get() = 4u
val LWS_CALLBACK_SERVER_WRITEABLE: lws_callback_reasons get() = 11u
val LWS_CALLBACK_RECEIVE: lws_callback_reasons get() = 6u
val LWS_CALLBACK_RECEIVE_PONG: lws_callback_reasons get() = 7u
val LWS_CALLBACK_WS_PEER_INITIATED_CLOSE: lws_callback_reasons get() = 38u
val LWS_CALLBACK_FILTER_PROTOCOL_CONNECTION: lws_callback_reasons get() = 20u
val LWS_CALLBACK_CONFIRM_EXTENSION_OKAY: lws_callback_reasons get() = 25u
val LWS_CALLBACK_WS_SERVER_BIND_PROTOCOL: lws_callback_reasons get() = 77u
val LWS_CALLBACK_WS_SERVER_DROP_PROTOCOL: lws_callback_reasons get() = 78u
val LWS_CALLBACK_CLIENT_CONNECTION_ERROR: lws_callback_reasons get() = 1u
val LWS_CALLBACK_CLIENT_FILTER_PRE_ESTABLISH: lws_callback_reasons get() = 2u
val LWS_CALLBACK_CLIENT_ESTABLISHED: lws_callback_reasons get() = 3u
val LWS_CALLBACK_CLIENT_CLOSED: lws_callback_reasons get() = 75u
val LWS_CALLBACK_CLIENT_APPEND_HANDSHAKE_HEADER: lws_callback_reasons get() = 24u
val LWS_CALLBACK_CLIENT_RECEIVE: lws_callback_reasons get() = 8u
val LWS_CALLBACK_CLIENT_RECEIVE_PONG: lws_callback_reasons get() = 9u
val LWS_CALLBACK_CLIENT_WRITEABLE: lws_callback_reasons get() = 10u
val LWS_CALLBACK_CLIENT_CONFIRM_EXTENSION_SUPPORTED: lws_callback_reasons get() = 26u
val LWS_CALLBACK_WS_EXT_DEFAULTS: lws_callback_reasons get() = 39u
val LWS_CALLBACK_FILTER_NETWORK_CONNECTION: lws_callback_reasons get() = 17u
val LWS_CALLBACK_WS_CLIENT_BIND_PROTOCOL: lws_callback_reasons get() = 79u
val LWS_CALLBACK_WS_CLIENT_DROP_PROTOCOL: lws_callback_reasons get() = 80u
val LWS_CALLBACK_GET_THREAD_ID: lws_callback_reasons get() = 31u
val LWS_CALLBACK_ADD_POLL_FD: lws_callback_reasons get() = 32u
val LWS_CALLBACK_DEL_POLL_FD: lws_callback_reasons get() = 33u
val LWS_CALLBACK_CHANGE_MODE_POLL_FD: lws_callback_reasons get() = 34u
val LWS_CALLBACK_LOCK_POLL: lws_callback_reasons get() = 35u
val LWS_CALLBACK_UNLOCK_POLL: lws_callback_reasons get() = 36u
val LWS_CALLBACK_CGI: lws_callback_reasons get() = 40u
val LWS_CALLBACK_CGI_TERMINATED: lws_callback_reasons get() = 41u
val LWS_CALLBACK_CGI_STDIN_DATA: lws_callback_reasons get() = 42u
val LWS_CALLBACK_CGI_STDIN_COMPLETED: lws_callback_reasons get() = 43u
val LWS_CALLBACK_CGI_PROCESS_ATTACH: lws_callback_reasons get() = 70u
val LWS_CALLBACK_SESSION_INFO: lws_callback_reasons get() = 54u
val LWS_CALLBACK_GS_EVENT: lws_callback_reasons get() = 55u
val LWS_CALLBACK_HTTP_PMO: lws_callback_reasons get() = 56u
val LWS_CALLBACK_RAW_PROXY_CLI_RX: lws_callback_reasons get() = 89u
val LWS_CALLBACK_RAW_PROXY_SRV_RX: lws_callback_reasons get() = 90u
val LWS_CALLBACK_RAW_PROXY_CLI_CLOSE: lws_callback_reasons get() = 91u
val LWS_CALLBACK_RAW_PROXY_SRV_CLOSE: lws_callback_reasons get() = 92u
val LWS_CALLBACK_RAW_PROXY_CLI_WRITEABLE: lws_callback_reasons get() = 93u
val LWS_CALLBACK_RAW_PROXY_SRV_WRITEABLE: lws_callback_reasons get() = 94u
val LWS_CALLBACK_RAW_PROXY_CLI_ADOPT: lws_callback_reasons get() = 95u
val LWS_CALLBACK_RAW_PROXY_SRV_ADOPT: lws_callback_reasons get() = 96u
val LWS_CALLBACK_RAW_PROXY_CLI_BIND_PROTOCOL: lws_callback_reasons get() = 97u
val LWS_CALLBACK_RAW_PROXY_SRV_BIND_PROTOCOL: lws_callback_reasons get() = 98u
val LWS_CALLBACK_RAW_PROXY_CLI_DROP_PROTOCOL: lws_callback_reasons get() = 99u
val LWS_CALLBACK_RAW_PROXY_SRV_DROP_PROTOCOL: lws_callback_reasons get() = 100u
val LWS_CALLBACK_RAW_RX: lws_callback_reasons get() = 59u
val LWS_CALLBACK_RAW_CLOSE: lws_callback_reasons get() = 60u
val LWS_CALLBACK_RAW_WRITEABLE: lws_callback_reasons get() = 61u
val LWS_CALLBACK_RAW_ADOPT: lws_callback_reasons get() = 62u
val LWS_CALLBACK_RAW_SKT_BIND_PROTOCOL: lws_callback_reasons get() = 81u
val LWS_CALLBACK_RAW_SKT_DROP_PROTOCOL: lws_callback_reasons get() = 82u
val LWS_CALLBACK_RAW_ADOPT_FILE: lws_callback_reasons get() = 63u
val LWS_CALLBACK_RAW_RX_FILE: lws_callback_reasons get() = 64u
val LWS_CALLBACK_RAW_WRITEABLE_FILE: lws_callback_reasons get() = 65u
val LWS_CALLBACK_RAW_CLOSE_FILE: lws_callback_reasons get() = 66u
val LWS_CALLBACK_RAW_FILE_BIND_PROTOCOL: lws_callback_reasons get() = 83u
val LWS_CALLBACK_RAW_FILE_DROP_PROTOCOL: lws_callback_reasons get() = 84u
val LWS_CALLBACK_TIMER: lws_callback_reasons get() = 73u
val LWS_CALLBACK_EVENT_WAIT_CANCELLED: lws_callback_reasons get() = 71u
val LWS_CALLBACK_CHILD_CLOSING: lws_callback_reasons get() = 69u
val LWS_CALLBACK_VHOST_CERT_AGING: lws_callback_reasons get() = 72u
val LWS_CALLBACK_VHOST_CERT_UPDATE: lws_callback_reasons get() = 74u
val LWS_CALLBACK_USER: lws_callback_reasons get() = 1000u

enum class lws_ext_options_types(override val value: UInt) : CEnum {
    EXTARG_NONE(0u),
    EXTARG_DEC(1u),
    EXTARG_OPT_DEC(2u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_ext_options_types.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_ext_options_types
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias lwsgs_auth_bitsVar = UIntVarOf<lwsgs_auth_bits>
typealias lwsgs_auth_bits = UInt

val LWSGS_AUTH_LOGGED_IN: lwsgs_auth_bits get() = 1u
val LWSGS_AUTH_ADMIN: lwsgs_auth_bits get() = 2u
val LWSGS_AUTH_VERIFIED: lwsgs_auth_bits get() = 4u
val LWSGS_AUTH_FORGOT_FLOW: lwsgs_auth_bits get() = 8u

enum class lws_gs_event(override val value: UInt) : CEnum {
    LWSGSE_CREATED(0u),
    LWSGSE_DELETED(1u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_gs_event.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_gs_event
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias lws_context_optionsVar = UIntVarOf<lws_context_options>
typealias lws_context_options = UInt

val LWS_SERVER_OPTION_REQUIRE_VALID_OPENSSL_CLIENT_CERT: lws_context_options get() = 4098u
val LWS_SERVER_OPTION_SKIP_SERVER_CANONICAL_NAME: lws_context_options get() = 4u
val LWS_SERVER_OPTION_ALLOW_NON_SSL_ON_SSL_PORT: lws_context_options get() = 4104u
val LWS_SERVER_OPTION_LIBEV: lws_context_options get() = 16u
val LWS_SERVER_OPTION_DISABLE_IPV6: lws_context_options get() = 32u
val LWS_SERVER_OPTION_DISABLE_OS_CA_CERTS: lws_context_options get() = 64u
val LWS_SERVER_OPTION_PEER_CERT_NOT_REQUIRED: lws_context_options get() = 128u
val LWS_SERVER_OPTION_VALIDATE_UTF8: lws_context_options get() = 256u
val LWS_SERVER_OPTION_SSL_ECDH: lws_context_options get() = 4608u
val LWS_SERVER_OPTION_LIBUV: lws_context_options get() = 1024u
val LWS_SERVER_OPTION_REDIRECT_HTTP_TO_HTTPS: lws_context_options get() = 6144u
val LWS_SERVER_OPTION_DO_SSL_GLOBAL_INIT: lws_context_options get() = 4096u
val LWS_SERVER_OPTION_EXPLICIT_VHOSTS: lws_context_options get() = 8192u
val LWS_SERVER_OPTION_UNIX_SOCK: lws_context_options get() = 16384u
val LWS_SERVER_OPTION_STS: lws_context_options get() = 32768u
val LWS_SERVER_OPTION_IPV6_V6ONLY_MODIFY: lws_context_options get() = 65536u
val LWS_SERVER_OPTION_IPV6_V6ONLY_VALUE: lws_context_options get() = 131072u
val LWS_SERVER_OPTION_UV_NO_SIGSEGV_SIGFPE_SPIN: lws_context_options get() = 262144u
val LWS_SERVER_OPTION_JUST_USE_RAW_ORIGIN: lws_context_options get() = 524288u
val LWS_SERVER_OPTION_FALLBACK_TO_RAW: lws_context_options get() = 1048576u
val LWS_SERVER_OPTION_FALLBACK_TO_APPLY_LISTEN_ACCEPT_CONFIG: lws_context_options get() = 1048576u
val LWS_SERVER_OPTION_LIBEVENT: lws_context_options get() = 2097152u
val LWS_SERVER_OPTION_ONLY_RAW: lws_context_options get() = 4194304u
val LWS_SERVER_OPTION_ADOPT_APPLY_LISTEN_ACCEPT_CONFIG: lws_context_options get() = 4194304u
val LWS_SERVER_OPTION_ALLOW_LISTEN_SHARE: lws_context_options get() = 8388608u
val LWS_SERVER_OPTION_CREATE_VHOST_SSL_CTX: lws_context_options get() = 16777216u
val LWS_SERVER_OPTION_SKIP_PROTOCOL_INIT: lws_context_options get() = 33554432u
val LWS_SERVER_OPTION_IGNORE_MISSING_CERT: lws_context_options get() = 67108864u
val LWS_SERVER_OPTION_VHOST_UPG_STRICT_HOST_CHECK: lws_context_options get() = 134217728u
val LWS_SERVER_OPTION_HTTP_HEADERS_SECURITY_BEST_PRACTICES_ENFORCE: lws_context_options get() = 268435456u
val LWS_SERVER_OPTION_ALLOW_HTTP_ON_HTTPS_LISTENER: lws_context_options get() = 536870912u

typealias lws_mount_protocolsVar = UIntVarOf<lws_mount_protocols>
typealias lws_mount_protocols = UInt

val LWSMPRO_HTTP: lws_mount_protocols get() = 0u
val LWSMPRO_HTTPS: lws_mount_protocols get() = 1u
val LWSMPRO_FILE: lws_mount_protocols get() = 2u
val LWSMPRO_CGI: lws_mount_protocols get() = 3u
val LWSMPRO_REDIR_HTTP: lws_mount_protocols get() = 4u
val LWSMPRO_REDIR_HTTPS: lws_mount_protocols get() = 5u
val LWSMPRO_CALLBACK: lws_mount_protocols get() = 6u

typealias lws_client_connect_ssl_connection_flagsVar = UIntVarOf<lws_client_connect_ssl_connection_flags>
typealias lws_client_connect_ssl_connection_flags = UInt

val LCCSCF_USE_SSL: lws_client_connect_ssl_connection_flags get() = 1u
val LCCSCF_ALLOW_SELFSIGNED: lws_client_connect_ssl_connection_flags get() = 2u
val LCCSCF_SKIP_SERVER_CERT_HOSTNAME_CHECK: lws_client_connect_ssl_connection_flags get() = 4u
val LCCSCF_ALLOW_EXPIRED: lws_client_connect_ssl_connection_flags get() = 8u
val LCCSCF_PIPELINE: lws_client_connect_ssl_connection_flags get() = 65536u

typealias http_statusVar = UIntVarOf<http_status>
typealias http_status = UInt

val HTTP_STATUS_CONTINUE: http_status get() = 100u
val HTTP_STATUS_OK: http_status get() = 200u
val HTTP_STATUS_NO_CONTENT: http_status get() = 204u
val HTTP_STATUS_PARTIAL_CONTENT: http_status get() = 206u
val HTTP_STATUS_MOVED_PERMANENTLY: http_status get() = 301u
val HTTP_STATUS_FOUND: http_status get() = 302u
val HTTP_STATUS_SEE_OTHER: http_status get() = 303u
val HTTP_STATUS_NOT_MODIFIED: http_status get() = 304u
val HTTP_STATUS_BAD_REQUEST: http_status get() = 400u
val HTTP_STATUS_UNAUTHORIZED: http_status get() = 401u
val HTTP_STATUS_PAYMENT_REQUIRED: http_status get() = 402u
val HTTP_STATUS_FORBIDDEN: http_status get() = 403u
val HTTP_STATUS_NOT_FOUND: http_status get() = 404u
val HTTP_STATUS_METHOD_NOT_ALLOWED: http_status get() = 405u
val HTTP_STATUS_NOT_ACCEPTABLE: http_status get() = 406u
val HTTP_STATUS_PROXY_AUTH_REQUIRED: http_status get() = 407u
val HTTP_STATUS_REQUEST_TIMEOUT: http_status get() = 408u
val HTTP_STATUS_CONFLICT: http_status get() = 409u
val HTTP_STATUS_GONE: http_status get() = 410u
val HTTP_STATUS_LENGTH_REQUIRED: http_status get() = 411u
val HTTP_STATUS_PRECONDITION_FAILED: http_status get() = 412u
val HTTP_STATUS_REQ_ENTITY_TOO_LARGE: http_status get() = 413u
val HTTP_STATUS_REQ_URI_TOO_LONG: http_status get() = 414u
val HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: http_status get() = 415u
val HTTP_STATUS_REQ_RANGE_NOT_SATISFIABLE: http_status get() = 416u
val HTTP_STATUS_EXPECTATION_FAILED: http_status get() = 417u
val HTTP_STATUS_INTERNAL_SERVER_ERROR: http_status get() = 500u
val HTTP_STATUS_NOT_IMPLEMENTED: http_status get() = 501u
val HTTP_STATUS_BAD_GATEWAY: http_status get() = 502u
val HTTP_STATUS_SERVICE_UNAVAILABLE: http_status get() = 503u
val HTTP_STATUS_GATEWAY_TIMEOUT: http_status get() = 504u
val HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED: http_status get() = 505u

typealias lws_token_indexesVar = UIntVarOf<lws_token_indexes>
typealias lws_token_indexes = UInt

val WSI_TOKEN_GET_URI: lws_token_indexes get() = 0u
val WSI_TOKEN_POST_URI: lws_token_indexes get() = 1u
val WSI_TOKEN_OPTIONS_URI: lws_token_indexes get() = 2u
val WSI_TOKEN_HOST: lws_token_indexes get() = 3u
val WSI_TOKEN_CONNECTION: lws_token_indexes get() = 4u
val WSI_TOKEN_UPGRADE: lws_token_indexes get() = 5u
val WSI_TOKEN_ORIGIN: lws_token_indexes get() = 6u
val WSI_TOKEN_DRAFT: lws_token_indexes get() = 7u
val WSI_TOKEN_CHALLENGE: lws_token_indexes get() = 8u
val WSI_TOKEN_EXTENSIONS: lws_token_indexes get() = 9u
val WSI_TOKEN_KEY1: lws_token_indexes get() = 10u
val WSI_TOKEN_KEY2: lws_token_indexes get() = 11u
val WSI_TOKEN_PROTOCOL: lws_token_indexes get() = 12u
val WSI_TOKEN_ACCEPT: lws_token_indexes get() = 13u
val WSI_TOKEN_NONCE: lws_token_indexes get() = 14u
val WSI_TOKEN_HTTP: lws_token_indexes get() = 15u
val WSI_TOKEN_HTTP2_SETTINGS: lws_token_indexes get() = 16u
val WSI_TOKEN_HTTP_ACCEPT: lws_token_indexes get() = 17u
val WSI_TOKEN_HTTP_AC_REQUEST_HEADERS: lws_token_indexes get() = 18u
val WSI_TOKEN_HTTP_IF_MODIFIED_SINCE: lws_token_indexes get() = 19u
val WSI_TOKEN_HTTP_IF_NONE_MATCH: lws_token_indexes get() = 20u
val WSI_TOKEN_HTTP_ACCEPT_ENCODING: lws_token_indexes get() = 21u
val WSI_TOKEN_HTTP_ACCEPT_LANGUAGE: lws_token_indexes get() = 22u
val WSI_TOKEN_HTTP_PRAGMA: lws_token_indexes get() = 23u
val WSI_TOKEN_HTTP_CACHE_CONTROL: lws_token_indexes get() = 24u
val WSI_TOKEN_HTTP_AUTHORIZATION: lws_token_indexes get() = 25u
val WSI_TOKEN_HTTP_COOKIE: lws_token_indexes get() = 26u
val WSI_TOKEN_HTTP_CONTENT_LENGTH: lws_token_indexes get() = 27u
val WSI_TOKEN_HTTP_CONTENT_TYPE: lws_token_indexes get() = 28u
val WSI_TOKEN_HTTP_DATE: lws_token_indexes get() = 29u
val WSI_TOKEN_HTTP_RANGE: lws_token_indexes get() = 30u
val WSI_TOKEN_HTTP_REFERER: lws_token_indexes get() = 31u
val WSI_TOKEN_KEY: lws_token_indexes get() = 32u
val WSI_TOKEN_VERSION: lws_token_indexes get() = 33u
val WSI_TOKEN_SWORIGIN: lws_token_indexes get() = 34u
val WSI_TOKEN_HTTP_COLON_AUTHORITY: lws_token_indexes get() = 35u
val WSI_TOKEN_HTTP_COLON_METHOD: lws_token_indexes get() = 36u
val WSI_TOKEN_HTTP_COLON_PATH: lws_token_indexes get() = 37u
val WSI_TOKEN_HTTP_COLON_SCHEME: lws_token_indexes get() = 38u
val WSI_TOKEN_HTTP_COLON_STATUS: lws_token_indexes get() = 39u
val WSI_TOKEN_HTTP_ACCEPT_CHARSET: lws_token_indexes get() = 40u
val WSI_TOKEN_HTTP_ACCEPT_RANGES: lws_token_indexes get() = 41u
val WSI_TOKEN_HTTP_ACCESS_CONTROL_ALLOW_ORIGIN: lws_token_indexes get() = 42u
val WSI_TOKEN_HTTP_AGE: lws_token_indexes get() = 43u
val WSI_TOKEN_HTTP_ALLOW: lws_token_indexes get() = 44u
val WSI_TOKEN_HTTP_CONTENT_DISPOSITION: lws_token_indexes get() = 45u
val WSI_TOKEN_HTTP_CONTENT_ENCODING: lws_token_indexes get() = 46u
val WSI_TOKEN_HTTP_CONTENT_LANGUAGE: lws_token_indexes get() = 47u
val WSI_TOKEN_HTTP_CONTENT_LOCATION: lws_token_indexes get() = 48u
val WSI_TOKEN_HTTP_CONTENT_RANGE: lws_token_indexes get() = 49u
val WSI_TOKEN_HTTP_ETAG: lws_token_indexes get() = 50u
val WSI_TOKEN_HTTP_EXPECT: lws_token_indexes get() = 51u
val WSI_TOKEN_HTTP_EXPIRES: lws_token_indexes get() = 52u
val WSI_TOKEN_HTTP_FROM: lws_token_indexes get() = 53u
val WSI_TOKEN_HTTP_IF_MATCH: lws_token_indexes get() = 54u
val WSI_TOKEN_HTTP_IF_RANGE: lws_token_indexes get() = 55u
val WSI_TOKEN_HTTP_IF_UNMODIFIED_SINCE: lws_token_indexes get() = 56u
val WSI_TOKEN_HTTP_LAST_MODIFIED: lws_token_indexes get() = 57u
val WSI_TOKEN_HTTP_LINK: lws_token_indexes get() = 58u
val WSI_TOKEN_HTTP_LOCATION: lws_token_indexes get() = 59u
val WSI_TOKEN_HTTP_MAX_FORWARDS: lws_token_indexes get() = 60u
val WSI_TOKEN_HTTP_PROXY_AUTHENTICATE: lws_token_indexes get() = 61u
val WSI_TOKEN_HTTP_PROXY_AUTHORIZATION: lws_token_indexes get() = 62u
val WSI_TOKEN_HTTP_REFRESH: lws_token_indexes get() = 63u
val WSI_TOKEN_HTTP_RETRY_AFTER: lws_token_indexes get() = 64u
val WSI_TOKEN_HTTP_SERVER: lws_token_indexes get() = 65u
val WSI_TOKEN_HTTP_SET_COOKIE: lws_token_indexes get() = 66u
val WSI_TOKEN_HTTP_STRICT_TRANSPORT_SECURITY: lws_token_indexes get() = 67u
val WSI_TOKEN_HTTP_TRANSFER_ENCODING: lws_token_indexes get() = 68u
val WSI_TOKEN_HTTP_USER_AGENT: lws_token_indexes get() = 69u
val WSI_TOKEN_HTTP_VARY: lws_token_indexes get() = 70u
val WSI_TOKEN_HTTP_VIA: lws_token_indexes get() = 71u
val WSI_TOKEN_HTTP_WWW_AUTHENTICATE: lws_token_indexes get() = 72u
val WSI_TOKEN_PATCH_URI: lws_token_indexes get() = 73u
val WSI_TOKEN_PUT_URI: lws_token_indexes get() = 74u
val WSI_TOKEN_DELETE_URI: lws_token_indexes get() = 75u
val WSI_TOKEN_HTTP_URI_ARGS: lws_token_indexes get() = 76u
val WSI_TOKEN_PROXY: lws_token_indexes get() = 77u
val WSI_TOKEN_HTTP_X_REAL_IP: lws_token_indexes get() = 78u
val WSI_TOKEN_HTTP1_0: lws_token_indexes get() = 79u
val WSI_TOKEN_X_FORWARDED_FOR: lws_token_indexes get() = 80u
val WSI_TOKEN_CONNECT: lws_token_indexes get() = 81u
val WSI_TOKEN_HEAD_URI: lws_token_indexes get() = 82u
val WSI_TOKEN_TE: lws_token_indexes get() = 83u
val WSI_TOKEN_REPLAY_NONCE: lws_token_indexes get() = 84u
val WSI_TOKEN_COLON_PROTOCOL: lws_token_indexes get() = 85u
val WSI_TOKEN_X_AUTH_TOKEN: lws_token_indexes get() = 86u
val _WSI_TOKEN_CLIENT_SENT_PROTOCOLS: lws_token_indexes get() = 87u
val _WSI_TOKEN_CLIENT_PEER_ADDRESS: lws_token_indexes get() = 88u
val _WSI_TOKEN_CLIENT_URI: lws_token_indexes get() = 89u
val _WSI_TOKEN_CLIENT_HOST: lws_token_indexes get() = 90u
val _WSI_TOKEN_CLIENT_ORIGIN: lws_token_indexes get() = 91u
val _WSI_TOKEN_CLIENT_METHOD: lws_token_indexes get() = 92u
val _WSI_TOKEN_CLIENT_IFACE: lws_token_indexes get() = 93u
val _WSI_TOKEN_CLIENT_ALPN: lws_token_indexes get() = 94u
val WSI_TOKEN_COUNT: lws_token_indexes get() = 95u
val WSI_TOKEN_NAME_PART: lws_token_indexes get() = 96u
val WSI_TOKEN_SKIPPING: lws_token_indexes get() = 97u
val WSI_TOKEN_SKIPPING_SAW_CR: lws_token_indexes get() = 98u
val WSI_PARSING_COMPLETE: lws_token_indexes get() = 99u
val WSI_INIT_TOKEN_MUXURL: lws_token_indexes get() = 100u

enum class lws_spa_fileupload_states(override val value: UInt) : CEnum {
    LWS_UFS_CONTENT(0u),
    LWS_UFS_FINAL_CONTENT(1u),
    LWS_UFS_OPEN(2u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_spa_fileupload_states.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_spa_fileupload_states
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias pending_timeoutVar = UIntVarOf<pending_timeout>
typealias pending_timeout = UInt

val NO_PENDING_TIMEOUT: pending_timeout get() = 0u
val PENDING_TIMEOUT_AWAITING_PROXY_RESPONSE: pending_timeout get() = 1u
val PENDING_TIMEOUT_AWAITING_CONNECT_RESPONSE: pending_timeout get() = 2u
val PENDING_TIMEOUT_ESTABLISH_WITH_SERVER: pending_timeout get() = 3u
val PENDING_TIMEOUT_AWAITING_SERVER_RESPONSE: pending_timeout get() = 4u
val PENDING_TIMEOUT_AWAITING_PING: pending_timeout get() = 5u
val PENDING_TIMEOUT_CLOSE_ACK: pending_timeout get() = 6u
val PENDING_TIMEOUT_UNUSED1: pending_timeout get() = 7u
val PENDING_TIMEOUT_SENT_CLIENT_HANDSHAKE: pending_timeout get() = 8u
val PENDING_TIMEOUT_SSL_ACCEPT: pending_timeout get() = 9u
val PENDING_TIMEOUT_HTTP_CONTENT: pending_timeout get() = 10u
val PENDING_TIMEOUT_AWAITING_CLIENT_HS_SEND: pending_timeout get() = 11u
val PENDING_FLUSH_STORED_SEND_BEFORE_CLOSE: pending_timeout get() = 12u
val PENDING_TIMEOUT_SHUTDOWN_FLUSH: pending_timeout get() = 13u
val PENDING_TIMEOUT_CGI: pending_timeout get() = 14u
val PENDING_TIMEOUT_HTTP_KEEPALIVE_IDLE: pending_timeout get() = 15u
val PENDING_TIMEOUT_WS_PONG_CHECK_SEND_PING: pending_timeout get() = 16u
val PENDING_TIMEOUT_WS_PONG_CHECK_GET_PONG: pending_timeout get() = 17u
val PENDING_TIMEOUT_CLIENT_ISSUE_PAYLOAD: pending_timeout get() = 18u
val PENDING_TIMEOUT_AWAITING_SOCKS_GREETING_REPLY: pending_timeout get() = 19u
val PENDING_TIMEOUT_AWAITING_SOCKS_CONNECT_REPLY: pending_timeout get() = 20u
val PENDING_TIMEOUT_AWAITING_SOCKS_AUTH_REPLY: pending_timeout get() = 21u
val PENDING_TIMEOUT_KILLED_BY_SSL_INFO: pending_timeout get() = 22u
val PENDING_TIMEOUT_KILLED_BY_PARENT: pending_timeout get() = 23u
val PENDING_TIMEOUT_CLOSE_SEND: pending_timeout get() = 24u
val PENDING_TIMEOUT_HOLDING_AH: pending_timeout get() = 25u
val PENDING_TIMEOUT_UDP_IDLE: pending_timeout get() = 26u
val PENDING_TIMEOUT_CLIENT_CONN_IDLE: pending_timeout get() = 27u
val PENDING_TIMEOUT_LAGGING: pending_timeout get() = 28u
val PENDING_TIMEOUT_THREADPOOL: pending_timeout get() = 29u
val PENDING_TIMEOUT_THREADPOOL_TASK: pending_timeout get() = 30u
val PENDING_TIMEOUT_KILLED_BY_PROXY_CLIENT_CLOSE: pending_timeout get() = 31u
val PENDING_TIMEOUT_USER_REASON_BASE: pending_timeout get() = 1000u

typealias lws_write_protocolVar = UIntVarOf<lws_write_protocol>
typealias lws_write_protocol = UInt

val LWS_WRITE_TEXT: lws_write_protocol get() = 0u
val LWS_WRITE_BINARY: lws_write_protocol get() = 1u
val LWS_WRITE_CONTINUATION: lws_write_protocol get() = 2u
val LWS_WRITE_HTTP: lws_write_protocol get() = 3u
val LWS_WRITE_PING: lws_write_protocol get() = 5u
val LWS_WRITE_PONG: lws_write_protocol get() = 6u
val LWS_WRITE_HTTP_FINAL: lws_write_protocol get() = 7u
val LWS_WRITE_HTTP_HEADERS: lws_write_protocol get() = 8u
val LWS_WRITE_HTTP_HEADERS_CONTINUATION: lws_write_protocol get() = 9u
val LWS_WRITE_BUFLIST: lws_write_protocol get() = 32u
val LWS_WRITE_NO_FIN: lws_write_protocol get() = 64u
val LWS_WRITE_H2_STREAM_END: lws_write_protocol get() = 128u
val LWS_WRITE_CLIENT_IGNORE_XOR_MASK: lws_write_protocol get() = 128u

typealias lws_adoption_typeVar = UIntVarOf<lws_adoption_type>
typealias lws_adoption_type = UInt

val LWS_ADOPT_RAW_FILE_DESC: lws_adoption_type get() = 0u
val LWS_ADOPT_HTTP: lws_adoption_type get() = 1u
val LWS_ADOPT_SOCKET: lws_adoption_type get() = 2u
val LWS_ADOPT_ALLOW_SSL: lws_adoption_type get() = 4u
val LWS_ADOPT_FLAG_UDP: lws_adoption_type get() = 16u
val LWS_ADOPT_FLAG_RAW_PROXY: lws_adoption_type get() = 32u
val LWS_ADOPT_RAW_SOCKET_UDP: lws_adoption_type get() = 18u

// enum (anonymous at /usr/local/include/libwebsockets/lws-misc.h:605:1):
val LWS_RXFLOW_REASON_USER_BOOL: UInt get() = 1u
val LWS_RXFLOW_REASON_HTTP_RXBUFFER: UInt get() = 64u
val LWS_RXFLOW_REASON_H2_PPS_PENDING: UInt get() = 128u
val LWS_RXFLOW_REASON_APPLIES: UInt get() = 16384u
val LWS_RXFLOW_REASON_APPLIES_ENABLE_BIT: UInt get() = 8192u
val LWS_RXFLOW_REASON_APPLIES_ENABLE: UInt get() = 24576u
val LWS_RXFLOW_REASON_APPLIES_DISABLE: UInt get() = 16384u
val LWS_RXFLOW_REASON_FLAG_PROCESS_NOW: UInt get() = 4096u

enum class lws_tls_cert_info(override val value: UInt) : CEnum {
    LWS_TLS_CERT_INFO_VALIDITY_FROM(0u),
    LWS_TLS_CERT_INFO_VALIDITY_TO(1u),
    LWS_TLS_CERT_INFO_COMMON_NAME(2u),
    LWS_TLS_CERT_INFO_ISSUER_NAME(3u),
    LWS_TLS_CERT_INFO_USAGE(4u),
    LWS_TLS_CERT_INFO_VERIFIED(5u),
    LWS_TLS_CERT_INFO_OPAQUE_PUBLIC_KEY(6u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_tls_cert_info.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_tls_cert_info
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias lws_enum_stdinouterrVar = UIntVarOf<lws_enum_stdinouterr>
typealias lws_enum_stdinouterr = UInt

val LWS_STDIN: lws_enum_stdinouterr get() = 0u
val LWS_STDOUT: lws_enum_stdinouterr get() = 1u
val LWS_STDERR: lws_enum_stdinouterr get() = 2u

enum class lws_cgi_hdr_state(override val value: UInt) : CEnum {
    LCHS_HEADER(0u),
    LCHS_CR1(1u),
    LCHS_LF1(2u),
    LCHS_CR2(3u),
    LCHS_LF2(4u),
    LHCS_RESPONSE(5u),
    LHCS_DUMP_HEADERS(6u),
    LHCS_PAYLOAD(7u),
    LCHS_SINGLE_0A(8u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_cgi_hdr_state.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_cgi_hdr_state
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias lejp_statesVar = UIntVarOf<lejp_states>
typealias lejp_states = UInt

val LEJP_IDLE: lejp_states get() = 0u
val LEJP_MEMBERS: lejp_states get() = 1u
val LEJP_M_P: lejp_states get() = 2u
val LEJP_MP_STRING: lejp_states get() = 67u
val LEJP_MP_STRING_ESC: lejp_states get() = 68u
val LEJP_MP_STRING_ESC_U1: lejp_states get() = 69u
val LEJP_MP_STRING_ESC_U2: lejp_states get() = 70u
val LEJP_MP_STRING_ESC_U3: lejp_states get() = 71u
val LEJP_MP_STRING_ESC_U4: lejp_states get() = 72u
val LEJP_MP_DELIM: lejp_states get() = 9u
val LEJP_MP_VALUE: lejp_states get() = 10u
val LEJP_MP_VALUE_NUM_INT: lejp_states get() = 75u
val LEJP_MP_VALUE_NUM_EXP: lejp_states get() = 76u
val LEJP_MP_VALUE_TOK: lejp_states get() = 77u
val LEJP_MP_COMMA_OR_END: lejp_states get() = 14u
val LEJP_MP_ARRAY_END: lejp_states get() = 15u

typealias lejp_reasonsVar = IntVarOf<lejp_reasons>
typealias lejp_reasons = Int

val LEJP_CONTINUE: lejp_reasons get() = -1
val LEJP_REJECT_IDLE_NO_BRACE: lejp_reasons get() = -2
val LEJP_REJECT_MEMBERS_NO_CLOSE: lejp_reasons get() = -3
val LEJP_REJECT_MP_NO_OPEN_QUOTE: lejp_reasons get() = -4
val LEJP_REJECT_MP_STRING_UNDERRUN: lejp_reasons get() = -5
val LEJP_REJECT_MP_ILLEGAL_CTRL: lejp_reasons get() = -6
val LEJP_REJECT_MP_STRING_ESC_ILLEGAL_ESC: lejp_reasons get() = -7
val LEJP_REJECT_ILLEGAL_HEX: lejp_reasons get() = -8
val LEJP_REJECT_MP_DELIM_MISSING_COLON: lejp_reasons get() = -9
val LEJP_REJECT_MP_DELIM_BAD_VALUE_START: lejp_reasons get() = -10
val LEJP_REJECT_MP_VAL_NUM_INT_NO_FRAC: lejp_reasons get() = -11
val LEJP_REJECT_MP_VAL_NUM_FORMAT: lejp_reasons get() = -12
val LEJP_REJECT_MP_VAL_NUM_EXP_BAD_EXP: lejp_reasons get() = -13
val LEJP_REJECT_MP_VAL_TOK_UNKNOWN: lejp_reasons get() = -14
val LEJP_REJECT_MP_C_OR_E_UNDERF: lejp_reasons get() = -15
val LEJP_REJECT_MP_C_OR_E_NOTARRAY: lejp_reasons get() = -16
val LEJP_REJECT_MP_ARRAY_END_MISSING: lejp_reasons get() = -17
val LEJP_REJECT_STACK_OVERFLOW: lejp_reasons get() = -18
val LEJP_REJECT_MP_DELIM_ISTACK: lejp_reasons get() = -19
val LEJP_REJECT_NUM_TOO_LONG: lejp_reasons get() = -20
val LEJP_REJECT_MP_C_OR_E_NEITHER: lejp_reasons get() = -21
val LEJP_REJECT_UNKNOWN: lejp_reasons get() = -22
val LEJP_REJECT_CALLBACK: lejp_reasons get() = -23

typealias lejp_callbacksVar = UIntVarOf<lejp_callbacks>
typealias lejp_callbacks = UInt

val LEJPCB_CONSTRUCTED: lejp_callbacks get() = 0u
val LEJPCB_DESTRUCTED: lejp_callbacks get() = 1u
val LEJPCB_START: lejp_callbacks get() = 2u
val LEJPCB_COMPLETE: lejp_callbacks get() = 3u
val LEJPCB_FAILED: lejp_callbacks get() = 4u
val LEJPCB_PAIR_NAME: lejp_callbacks get() = 5u
val LEJPCB_VAL_TRUE: lejp_callbacks get() = 70u
val LEJPCB_VAL_FALSE: lejp_callbacks get() = 71u
val LEJPCB_VAL_NULL: lejp_callbacks get() = 72u
val LEJPCB_VAL_NUM_INT: lejp_callbacks get() = 73u
val LEJPCB_VAL_NUM_FLOAT: lejp_callbacks get() = 74u
val LEJPCB_VAL_STR_START: lejp_callbacks get() = 11u
val LEJPCB_VAL_STR_CHUNK: lejp_callbacks get() = 76u
val LEJPCB_VAL_STR_END: lejp_callbacks get() = 77u
val LEJPCB_ARRAY_START: lejp_callbacks get() = 14u
val LEJPCB_ARRAY_END: lejp_callbacks get() = 15u
val LEJPCB_OBJECT_START: lejp_callbacks get() = 16u
val LEJPCB_OBJECT_END: lejp_callbacks get() = 17u

typealias num_flagsVar = UIntVarOf<num_flags>
typealias num_flags = UInt

val LEJP_SEEN_MINUS: num_flags get() = 1u
val LEJP_SEEN_POINT: num_flags get() = 2u
val LEJP_SEEN_POST_POINT: num_flags get() = 4u
val LEJP_SEEN_EXP: num_flags get() = 8u

// enum (anonymous at /usr/local/include/libwebsockets/lws-stats.h:33:1):
val LWSSTATS_C_CONNECTIONS: UInt get() = 0u
val LWSSTATS_C_API_CLOSE: UInt get() = 1u
val LWSSTATS_C_API_READ: UInt get() = 2u
val LWSSTATS_C_API_LWS_WRITE: UInt get() = 3u
val LWSSTATS_C_API_WRITE: UInt get() = 4u
val LWSSTATS_C_WRITE_PARTIALS: UInt get() = 5u
val LWSSTATS_C_WRITEABLE_CB_REQ: UInt get() = 6u
val LWSSTATS_C_WRITEABLE_CB_EFF_REQ: UInt get() = 7u
val LWSSTATS_C_WRITEABLE_CB: UInt get() = 8u
val LWSSTATS_C_SSL_CONNECTIONS_FAILED: UInt get() = 9u
val LWSSTATS_C_SSL_CONNECTIONS_ACCEPTED: UInt get() = 10u
val LWSSTATS_C_SSL_CONNECTIONS_ACCEPT_SPIN: UInt get() = 11u
val LWSSTATS_C_SSL_CONNS_HAD_RX: UInt get() = 12u
val LWSSTATS_C_TIMEOUTS: UInt get() = 13u
val LWSSTATS_C_SERVICE_ENTRY: UInt get() = 14u
val LWSSTATS_B_READ: UInt get() = 15u
val LWSSTATS_B_WRITE: UInt get() = 16u
val LWSSTATS_B_PARTIALS_ACCEPTED_PARTS: UInt get() = 17u
val LWSSTATS_MS_SSL_CONNECTIONS_ACCEPTED_DELAY: UInt get() = 18u
val LWSSTATS_MS_WRITABLE_DELAY: UInt get() = 19u
val LWSSTATS_MS_WORST_WRITABLE_DELAY: UInt get() = 20u
val LWSSTATS_MS_SSL_RX_DELAY: UInt get() = 21u
val LWSSTATS_C_PEER_LIMIT_AH_DENIED: UInt get() = 22u
val LWSSTATS_C_PEER_LIMIT_WSI_DENIED: UInt get() = 23u
val LWSSTATS_SIZE: UInt get() = 24u

enum class lws_threadpool_task_status(override val value: UInt) : CEnum {
    LWS_TP_STATUS_QUEUED(0u),
    LWS_TP_STATUS_RUNNING(1u),
    LWS_TP_STATUS_SYNCING(2u),
    LWS_TP_STATUS_STOPPING(3u),
    LWS_TP_STATUS_FINISHED(4u),
    LWS_TP_STATUS_STOPPED(5u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_threadpool_task_status.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_threadpool_task_status
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias lws_threadpool_task_returnVar = UIntVarOf<lws_threadpool_task_return>
typealias lws_threadpool_task_return = UInt

val LWS_TP_RETURN_CHECKING_IN: lws_threadpool_task_return get() = 0u
val LWS_TP_RETURN_SYNC: lws_threadpool_task_return get() = 1u
val LWS_TP_RETURN_FINISHED: lws_threadpool_task_return get() = 2u
val LWS_TP_RETURN_STOPPED: lws_threadpool_task_return get() = 3u
val LWS_TP_RETURN_FLAG_OUTLIVE: lws_threadpool_task_return get() = 64u

typealias lws_tokenize_elemVar = IntVarOf<lws_tokenize_elem>
typealias lws_tokenize_elem = Int

val LWS_TOKZE_ERRS: lws_tokenize_elem get() = 5
val LWS_TOKZE_ERR_BROKEN_UTF8: lws_tokenize_elem get() = -5
val LWS_TOKZE_ERR_UNTERM_STRING: lws_tokenize_elem get() = -4
val LWS_TOKZE_ERR_MALFORMED_FLOAT: lws_tokenize_elem get() = -3
val LWS_TOKZE_ERR_NUM_ON_LHS: lws_tokenize_elem get() = -2
val LWS_TOKZE_ERR_COMMA_LIST: lws_tokenize_elem get() = -1
val LWS_TOKZE_ENDED: lws_tokenize_elem get() = 0
val LWS_TOKZE_DELIMITER: lws_tokenize_elem get() = 1
val LWS_TOKZE_TOKEN: lws_tokenize_elem get() = 2
val LWS_TOKZE_INTEGER: lws_tokenize_elem get() = 3
val LWS_TOKZE_FLOAT: lws_tokenize_elem get() = 4
val LWS_TOKZE_TOKEN_NAME_EQUALS: lws_tokenize_elem get() = 5
val LWS_TOKZE_TOKEN_NAME_COLON: lws_tokenize_elem get() = 6
val LWS_TOKZE_QUOTED_STRING: lws_tokenize_elem get() = 7

enum class lws_tokenize_delimiter_tracking(override val value: UInt) : CEnum {
    LWSTZ_DT_NEED_FIRST_CONTENT(0u),
    LWSTZ_DT_NEED_DELIM(1u),
    LWSTZ_DT_NEED_NEXT_CONTENT(2u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_tokenize_delimiter_tracking.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_tokenize_delimiter_tracking
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class lws_gencrypto_kty(override val value: UInt) : CEnum {
    LWS_GENCRYPTO_KTY_UNKNOWN(0u),
    LWS_GENCRYPTO_KTY_OCT(1u),
    LWS_GENCRYPTO_KTY_RSA(2u),
    LWS_GENCRYPTO_KTY_EC(3u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_gencrypto_kty.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_gencrypto_kty
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class lws_gencrypto_oct_tok(override val value: UInt) : CEnum {
    LWS_GENCRYPTO_OCT_KEYEL_K(0u),
    LWS_GENCRYPTO_OCT_KEYEL_COUNT(1u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_gencrypto_oct_tok.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_gencrypto_oct_tok
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class lws_gencrypto_rsa_tok(override val value: UInt) : CEnum {
    LWS_GENCRYPTO_RSA_KEYEL_E(0u),
    LWS_GENCRYPTO_RSA_KEYEL_N(1u),
    LWS_GENCRYPTO_RSA_KEYEL_D(2u),
    LWS_GENCRYPTO_RSA_KEYEL_P(3u),
    LWS_GENCRYPTO_RSA_KEYEL_Q(4u),
    LWS_GENCRYPTO_RSA_KEYEL_DP(5u),
    LWS_GENCRYPTO_RSA_KEYEL_DQ(6u),
    LWS_GENCRYPTO_RSA_KEYEL_QI(7u),
    LWS_GENCRYPTO_RSA_KEYEL_COUNT(8u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_gencrypto_rsa_tok.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_gencrypto_rsa_tok
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias lws_gencrypto_ec_tokVar = UIntVarOf<lws_gencrypto_ec_tok>
typealias lws_gencrypto_ec_tok = UInt

val LWS_GENCRYPTO_EC_KEYEL_CRV: lws_gencrypto_ec_tok get() = 0u
val LWS_GENCRYPTO_EC_KEYEL_X: lws_gencrypto_ec_tok get() = 1u
val LWS_GENCRYPTO_EC_KEYEL_D: lws_gencrypto_ec_tok get() = 2u
val LWS_GENCRYPTO_EC_KEYEL_Y: lws_gencrypto_ec_tok get() = 3u
val LWS_GENCRYPTO_EC_KEYEL_COUNT: lws_gencrypto_ec_tok get() = 4u

typealias lws_gencrypto_aes_tokVar = UIntVarOf<lws_gencrypto_aes_tok>
typealias lws_gencrypto_aes_tok = UInt

val LWS_GENCRYPTO_AES_KEYEL_K: lws_gencrypto_aes_tok get() = 0u
val LWS_GENCRYPTO_AES_KEYEL_COUNT: lws_gencrypto_aes_tok get() = 1u

enum class lws_genhash_types(override val value: UInt) : CEnum {
    LWS_GENHASH_TYPE_UNKNOWN(0u),
    LWS_GENHASH_TYPE_SHA1(1u),
    LWS_GENHASH_TYPE_SHA256(2u),
    LWS_GENHASH_TYPE_SHA384(3u),
    LWS_GENHASH_TYPE_SHA512(4u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_genhash_types.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_genhash_types
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class lws_genhmac_types(override val value: UInt) : CEnum {
    LWS_GENHMAC_TYPE_UNKNOWN(0u),
    LWS_GENHMAC_TYPE_SHA256(1u),
    LWS_GENHMAC_TYPE_SHA384(2u),
    LWS_GENHMAC_TYPE_SHA512(3u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_genhmac_types.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_genhmac_types
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class enum_genrsa_mode(override val value: UInt) : CEnum {
    LGRSAM_PKCS1_1_5(0u),
    LGRSAM_PKCS1_OAEP_PSS(1u),
    LGRSAM_COUNT(2u),
    ;
    
    companion object {
        fun byValue(value: UInt) = enum_genrsa_mode.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: enum_genrsa_mode
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class enum_aes_modes(override val value: UInt) : CEnum {
    LWS_GAESM_CBC(0u),
    LWS_GAESM_CFB128(1u),
    LWS_GAESM_CFB8(2u),
    LWS_GAESM_CTR(3u),
    LWS_GAESM_ECB(4u),
    LWS_GAESM_OFB(5u),
    LWS_GAESM_XTS(6u),
    LWS_GAESM_GCM(7u),
    LWS_GAESM_KW(8u),
    ;
    
    companion object {
        fun byValue(value: UInt) = enum_aes_modes.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: enum_aes_modes
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class enum_aes_operation(override val value: UInt) : CEnum {
    LWS_GAESO_ENC(0u),
    LWS_GAESO_DEC(1u),
    ;
    
    companion object {
        fun byValue(value: UInt) = enum_aes_operation.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: enum_aes_operation
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class enum_aes_padding(override val value: UInt) : CEnum {
    LWS_GAESP_NO_PADDING(0u),
    LWS_GAESP_WITH_PADDING(1u),
    ;
    
    companion object {
        fun byValue(value: UInt) = enum_aes_padding.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: enum_aes_padding
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class enum_genec_alg(override val value: UInt) : CEnum {
    LEGENEC_UNKNOWN(0u),
    LEGENEC_ECDH(1u),
    LEGENEC_ECDSA(2u),
    ;
    
    companion object {
        fun byValue(value: UInt) = enum_genec_alg.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: enum_genec_alg
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class enum_lws_dh_side(override val value: UInt) : CEnum {
    LDHS_OURS(0u),
    LDHS_THEIRS(1u),
    ;
    
    companion object {
        fun byValue(value: UInt) = enum_lws_dh_side.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: enum_lws_dh_side
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class enum_jwk_meta_tok(override val value: UInt) : CEnum {
    JWK_META_KTY(0u),
    JWK_META_KID(1u),
    JWK_META_USE(2u),
    JWK_META_KEY_OPS(3u),
    JWK_META_X5C(4u),
    JWK_META_ALG(5u),
    LWS_COUNT_JWK_ELEMENTS(6u),
    ;
    
    companion object {
        fun byValue(value: UInt) = enum_jwk_meta_tok.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: enum_jwk_meta_tok
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class lws_jws_jose_hdr_indexes(override val value: UInt) : CEnum {
    LJJHI_ALG(0u),
    LJJHI_JKU(1u),
    LJJHI_JWK(2u),
    LJJHI_KID(3u),
    LJJHI_X5U(4u),
    LJJHI_X5C(5u),
    LJJHI_X5T(6u),
    LJJHI_X5T_S256(7u),
    LJJHI_TYP(8u),
    LJJHI_CTY(9u),
    LJJHI_CRIT(10u),
    LJJHI_ENC(11u),
    LJJHI_ZIP(12u),
    LJJHI_EPK(13u),
    LJJHI_APU(14u),
    LJJHI_APV(15u),
    LJJHI_IV(16u),
    LJJHI_TAG(17u),
    LJJHI_P2S(18u),
    LJJHI_P2C(19u),
    LWS_COUNT_JOSE_HDR_ELEMENTS(20u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_jws_jose_hdr_indexes.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_jws_jose_hdr_indexes
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

enum class lws_jose_algtype(override val value: UInt) : CEnum {
    LWS_JOSE_ENCTYPE_NONE(0u),
    LWS_JOSE_ENCTYPE_RSASSA_PKCS1_1_5(1u),
    LWS_JOSE_ENCTYPE_RSASSA_PKCS1_OAEP(2u),
    LWS_JOSE_ENCTYPE_RSASSA_PKCS1_PSS(3u),
    LWS_JOSE_ENCTYPE_ECDSA(4u),
    LWS_JOSE_ENCTYPE_ECDHES(5u),
    LWS_JOSE_ENCTYPE_AES_CBC(6u),
    LWS_JOSE_ENCTYPE_AES_CFB128(7u),
    LWS_JOSE_ENCTYPE_AES_CFB8(8u),
    LWS_JOSE_ENCTYPE_AES_CTR(9u),
    LWS_JOSE_ENCTYPE_AES_ECB(10u),
    LWS_JOSE_ENCTYPE_AES_OFB(11u),
    LWS_JOSE_ENCTYPE_AES_XTS(12u),
    LWS_JOSE_ENCTYPE_AES_GCM(13u),
    ;
    
    companion object {
        fun byValue(value: UInt) = lws_jose_algtype.values().find { it.value == value }!!
    }
    
    class Var(rawPtr: NativePtr) : CEnumVar(rawPtr) {
        companion object : Type(UIntVar.size.toInt())
        var value: lws_jose_algtype
            get() = byValue(this.reinterpret<UIntVar>().value)
            set(value) { this.reinterpret<UIntVar>().value = value.value }
    }
}

typealias enum_jws_sig_elementsVar = UIntVarOf<enum_jws_sig_elements>
typealias enum_jws_sig_elements = UInt

val LJWS_JOSE: enum_jws_sig_elements get() = 0u
val LJWS_PYLD: enum_jws_sig_elements get() = 1u
val LJWS_SIG: enum_jws_sig_elements get() = 2u
val LJWS_UHDR: enum_jws_sig_elements get() = 3u
val LJWE_JOSE: enum_jws_sig_elements get() = 0u
val LJWE_EKEY: enum_jws_sig_elements get() = 1u
val LJWE_IV: enum_jws_sig_elements get() = 2u
val LJWE_CTXT: enum_jws_sig_elements get() = 3u
val LJWE_ATAG: enum_jws_sig_elements get() = 4u
val LWS_JWS_MAX_CONCAT_BLOCKS: enum_jws_sig_elements get() = 5u

typealias __locale_tVar = CPointerVarOf<__locale_t>
typealias __locale_t = CPointer<__locale_struct>

typealias locale_tVar = CPointerVarOf<locale_t>
typealias locale_t = __locale_t

typealias _Float32Var = FloatVarOf<_Float32>
typealias _Float32 = Float

typealias _Float64Var = DoubleVarOf<_Float64>
typealias _Float64 = Double

typealias _Float32xVar = DoubleVarOf<_Float32x>
typealias _Float32x = Double

typealias __u_charVar = UByteVarOf<__u_char>
typealias __u_char = UByte

typealias __u_shortVar = UShortVarOf<__u_short>
typealias __u_short = UShort

typealias __u_intVar = UIntVarOf<__u_int>
typealias __u_int = UInt

typealias __u_longVar = ULongVarOf<__u_long>
typealias __u_long = ULong

typealias __int8_tVar = ByteVarOf<__int8_t>
typealias __int8_t = Byte

typealias __uint8_tVar = UByteVarOf<__uint8_t>
typealias __uint8_t = UByte

typealias __int16_tVar = ShortVarOf<__int16_t>
typealias __int16_t = Short

typealias __uint16_tVar = UShortVarOf<__uint16_t>
typealias __uint16_t = UShort

typealias __int32_tVar = IntVarOf<__int32_t>
typealias __int32_t = Int

typealias __uint32_tVar = UIntVarOf<__uint32_t>
typealias __uint32_t = UInt

typealias __int64_tVar = LongVarOf<__int64_t>
typealias __int64_t = Long

typealias __uint64_tVar = ULongVarOf<__uint64_t>
typealias __uint64_t = ULong

typealias __quad_tVar = LongVarOf<__quad_t>
typealias __quad_t = Long

typealias __u_quad_tVar = ULongVarOf<__u_quad_t>
typealias __u_quad_t = ULong

typealias __intmax_tVar = LongVarOf<__intmax_t>
typealias __intmax_t = Long

typealias __uintmax_tVar = ULongVarOf<__uintmax_t>
typealias __uintmax_t = ULong

typealias __dev_tVar = ULongVarOf<__dev_t>
typealias __dev_t = ULong

typealias __uid_tVar = UIntVarOf<__uid_t>
typealias __uid_t = UInt

typealias __gid_tVar = UIntVarOf<__gid_t>
typealias __gid_t = UInt

typealias __ino_tVar = ULongVarOf<__ino_t>
typealias __ino_t = ULong

typealias __ino64_tVar = ULongVarOf<__ino64_t>
typealias __ino64_t = ULong

typealias __mode_tVar = UIntVarOf<__mode_t>
typealias __mode_t = UInt

typealias __nlink_tVar = ULongVarOf<__nlink_t>
typealias __nlink_t = ULong

typealias __off_tVar = LongVarOf<__off_t>
typealias __off_t = Long

typealias __off64_tVar = LongVarOf<__off64_t>
typealias __off64_t = Long

typealias __pid_tVar = IntVarOf<__pid_t>
typealias __pid_t = Int

typealias __clock_tVar = LongVarOf<__clock_t>
typealias __clock_t = Long

typealias __rlim_tVar = ULongVarOf<__rlim_t>
typealias __rlim_t = ULong

typealias __rlim64_tVar = ULongVarOf<__rlim64_t>
typealias __rlim64_t = ULong

typealias __id_tVar = UIntVarOf<__id_t>
typealias __id_t = UInt

typealias __time_tVar = LongVarOf<__time_t>
typealias __time_t = Long

typealias __useconds_tVar = UIntVarOf<__useconds_t>
typealias __useconds_t = UInt

typealias __suseconds_tVar = LongVarOf<__suseconds_t>
typealias __suseconds_t = Long

typealias __daddr_tVar = IntVarOf<__daddr_t>
typealias __daddr_t = Int

typealias __key_tVar = IntVarOf<__key_t>
typealias __key_t = Int

typealias __clockid_tVar = IntVarOf<__clockid_t>
typealias __clockid_t = Int

typealias __timer_tVar = CPointerVarOf<__timer_t>
typealias __timer_t = COpaquePointer

typealias __blksize_tVar = LongVarOf<__blksize_t>
typealias __blksize_t = Long

typealias __blkcnt_tVar = LongVarOf<__blkcnt_t>
typealias __blkcnt_t = Long

typealias __blkcnt64_tVar = LongVarOf<__blkcnt64_t>
typealias __blkcnt64_t = Long

typealias __fsblkcnt_tVar = ULongVarOf<__fsblkcnt_t>
typealias __fsblkcnt_t = ULong

typealias __fsblkcnt64_tVar = ULongVarOf<__fsblkcnt64_t>
typealias __fsblkcnt64_t = ULong

typealias __fsfilcnt_tVar = ULongVarOf<__fsfilcnt_t>
typealias __fsfilcnt_t = ULong

typealias __fsfilcnt64_tVar = ULongVarOf<__fsfilcnt64_t>
typealias __fsfilcnt64_t = ULong

typealias __fsword_tVar = LongVarOf<__fsword_t>
typealias __fsword_t = Long

typealias __ssize_tVar = LongVarOf<__ssize_t>
typealias __ssize_t = Long

typealias __syscall_slong_tVar = LongVarOf<__syscall_slong_t>
typealias __syscall_slong_t = Long

typealias __syscall_ulong_tVar = ULongVarOf<__syscall_ulong_t>
typealias __syscall_ulong_t = ULong

typealias __loff_tVar = LongVarOf<__loff_t>
typealias __loff_t = __off64_t

typealias __caddr_tVar = CPointerVarOf<__caddr_t>
typealias __caddr_t = CPointer<ByteVar>

typealias __intptr_tVar = LongVarOf<__intptr_t>
typealias __intptr_t = Long

typealias __socklen_tVar = UIntVarOf<__socklen_t>
typealias __socklen_t = UInt

typealias __sig_atomic_tVar = IntVarOf<__sig_atomic_t>
typealias __sig_atomic_t = Int

typealias u_charVar = UByteVarOf<u_char>
typealias u_char = __u_char

typealias u_shortVar = UShortVarOf<u_short>
typealias u_short = __u_short

typealias u_intVar = UIntVarOf<u_int>
typealias u_int = __u_int

typealias u_longVar = ULongVarOf<u_long>
typealias u_long = __u_long

typealias quad_tVar = LongVarOf<quad_t>
typealias quad_t = __quad_t

typealias u_quad_tVar = ULongVarOf<u_quad_t>
typealias u_quad_t = __u_quad_t

typealias fsid_t = __fsid_t

typealias loff_tVar = LongVarOf<loff_t>
typealias loff_t = __loff_t

typealias ino_tVar = ULongVarOf<ino_t>
typealias ino_t = __ino_t

typealias dev_tVar = ULongVarOf<dev_t>
typealias dev_t = __dev_t

typealias gid_tVar = UIntVarOf<gid_t>
typealias gid_t = __gid_t

typealias mode_tVar = UIntVarOf<mode_t>
typealias mode_t = __mode_t

typealias nlink_tVar = ULongVarOf<nlink_t>
typealias nlink_t = __nlink_t

typealias uid_tVar = UIntVarOf<uid_t>
typealias uid_t = __uid_t

typealias off_tVar = LongVarOf<off_t>
typealias off_t = __off_t

typealias pid_tVar = IntVarOf<pid_t>
typealias pid_t = __pid_t

typealias id_tVar = UIntVarOf<id_t>
typealias id_t = __id_t

typealias ssize_tVar = LongVarOf<ssize_t>
typealias ssize_t = __ssize_t

typealias daddr_tVar = IntVarOf<daddr_t>
typealias daddr_t = __daddr_t

typealias caddr_tVar = CPointerVarOf<caddr_t>
typealias caddr_t = __caddr_t

typealias key_tVar = IntVarOf<key_t>
typealias key_t = __key_t

typealias clock_tVar = LongVarOf<clock_t>
typealias clock_t = __clock_t

typealias clockid_tVar = IntVarOf<clockid_t>
typealias clockid_t = __clockid_t

typealias time_tVar = LongVarOf<time_t>
typealias time_t = __time_t

typealias timer_tVar = CPointerVarOf<timer_t>
typealias timer_t = __timer_t

typealias ulongVar = ULongVarOf<ulong>
typealias ulong = ULong

typealias ushortVar = UShortVarOf<ushort>
typealias ushort = UShort

typealias uintVar = UIntVarOf<uint>
typealias uint = UInt

typealias int8_tVar = ByteVarOf<int8_t>
typealias int8_t = __int8_t

typealias int16_tVar = ShortVarOf<int16_t>
typealias int16_t = __int16_t

typealias int32_tVar = IntVarOf<int32_t>
typealias int32_t = __int32_t

typealias int64_tVar = LongVarOf<int64_t>
typealias int64_t = __int64_t

typealias u_int8_tVar = UByteVarOf<u_int8_t>
typealias u_int8_t = UByte

typealias u_int16_tVar = UShortVarOf<u_int16_t>
typealias u_int16_t = UShort

typealias u_int32_tVar = UIntVarOf<u_int32_t>
typealias u_int32_t = UInt

typealias u_int64_tVar = ULongVarOf<u_int64_t>
typealias u_int64_t = ULong

typealias register_tVar = LongVarOf<register_t>
typealias register_t = Long

typealias sigset_t = __sigset_t

typealias suseconds_tVar = LongVarOf<suseconds_t>
typealias suseconds_t = __suseconds_t

typealias __fd_maskVar = LongVarOf<__fd_mask>
typealias __fd_mask = Long

typealias fd_maskVar = LongVarOf<fd_mask>
typealias fd_mask = __fd_mask

typealias blksize_tVar = LongVarOf<blksize_t>
typealias blksize_t = __blksize_t

typealias blkcnt_tVar = LongVarOf<blkcnt_t>
typealias blkcnt_t = __blkcnt_t

typealias fsblkcnt_tVar = ULongVarOf<fsblkcnt_t>
typealias fsblkcnt_t = __fsblkcnt_t

typealias fsfilcnt_tVar = ULongVarOf<fsfilcnt_t>
typealias fsfilcnt_t = __fsfilcnt_t

typealias __pthread_list_t = __pthread_internal_list

typealias pthread_tVar = ULongVarOf<pthread_t>
typealias pthread_t = ULong

typealias pthread_key_tVar = UIntVarOf<pthread_key_t>
typealias pthread_key_t = UInt

typealias pthread_once_tVar = IntVarOf<pthread_once_t>
typealias pthread_once_t = Int

typealias pthread_spinlock_tVar = IntVarOf<pthread_spinlock_t>
typealias pthread_spinlock_t = Int

typealias __compar_fn_tVar = CPointerVarOf<__compar_fn_t>
typealias __compar_fn_t = CPointer<CFunction<(COpaquePointer?, COpaquePointer?) -> Int>>

typealias uint8_tVar = UByteVarOf<uint8_t>
typealias uint8_t = __uint8_t

typealias uint16_tVar = UShortVarOf<uint16_t>
typealias uint16_t = __uint16_t

typealias uint32_tVar = UIntVarOf<uint32_t>
typealias uint32_t = __uint32_t

typealias uint64_tVar = ULongVarOf<uint64_t>
typealias uint64_t = __uint64_t

typealias int_least8_tVar = ByteVarOf<int_least8_t>
typealias int_least8_t = Byte

typealias int_least16_tVar = ShortVarOf<int_least16_t>
typealias int_least16_t = Short

typealias int_least32_tVar = IntVarOf<int_least32_t>
typealias int_least32_t = Int

typealias int_least64_tVar = LongVarOf<int_least64_t>
typealias int_least64_t = Long

typealias uint_least8_tVar = UByteVarOf<uint_least8_t>
typealias uint_least8_t = UByte

typealias uint_least16_tVar = UShortVarOf<uint_least16_t>
typealias uint_least16_t = UShort

typealias uint_least32_tVar = UIntVarOf<uint_least32_t>
typealias uint_least32_t = UInt

typealias uint_least64_tVar = ULongVarOf<uint_least64_t>
typealias uint_least64_t = ULong

typealias int_fast8_tVar = ByteVarOf<int_fast8_t>
typealias int_fast8_t = Byte

typealias int_fast16_tVar = LongVarOf<int_fast16_t>
typealias int_fast16_t = Long

typealias int_fast32_tVar = LongVarOf<int_fast32_t>
typealias int_fast32_t = Long

typealias int_fast64_tVar = LongVarOf<int_fast64_t>
typealias int_fast64_t = Long

typealias uint_fast8_tVar = UByteVarOf<uint_fast8_t>
typealias uint_fast8_t = UByte

typealias uint_fast16_tVar = ULongVarOf<uint_fast16_t>
typealias uint_fast16_t = ULong

typealias uint_fast32_tVar = ULongVarOf<uint_fast32_t>
typealias uint_fast32_t = ULong

typealias uint_fast64_tVar = ULongVarOf<uint_fast64_t>
typealias uint_fast64_t = ULong

typealias intptr_tVar = LongVarOf<intptr_t>
typealias intptr_t = Long

typealias uintptr_tVar = ULongVarOf<uintptr_t>
typealias uintptr_t = ULong

typealias intmax_tVar = LongVarOf<intmax_t>
typealias intmax_t = __intmax_t

typealias uintmax_tVar = ULongVarOf<uintmax_t>
typealias uintmax_t = __uintmax_t

typealias useconds_tVar = UIntVarOf<useconds_t>
typealias useconds_t = __useconds_t

typealias socklen_tVar = UIntVarOf<socklen_t>
typealias socklen_t = __socklen_t

typealias __s8Var = ByteVarOf<__s8>
typealias __s8 = Byte

typealias __u8Var = UByteVarOf<__u8>
typealias __u8 = UByte

typealias __s16Var = ShortVarOf<__s16>
typealias __s16 = Short

typealias __u16Var = UShortVarOf<__u16>
typealias __u16 = UShort

typealias __s32Var = IntVarOf<__s32>
typealias __s32 = Int

typealias __u32Var = UIntVarOf<__u32>
typealias __u32 = UInt

typealias __s64Var = LongVarOf<__s64>
typealias __s64 = Long

typealias __u64Var = ULongVarOf<__u64>
typealias __u64 = ULong

typealias __kernel_sighandler_tVar = CPointerVarOf<__kernel_sighandler_t>
typealias __kernel_sighandler_t = CPointer<CFunction<(Int) -> Unit>>

typealias __kernel_key_tVar = IntVarOf<__kernel_key_t>
typealias __kernel_key_t = Int

typealias __kernel_mqd_tVar = IntVarOf<__kernel_mqd_t>
typealias __kernel_mqd_t = Int

typealias __kernel_old_uid_tVar = UShortVarOf<__kernel_old_uid_t>
typealias __kernel_old_uid_t = UShort

typealias __kernel_old_gid_tVar = UShortVarOf<__kernel_old_gid_t>
typealias __kernel_old_gid_t = UShort

typealias __kernel_old_dev_tVar = ULongVarOf<__kernel_old_dev_t>
typealias __kernel_old_dev_t = ULong

typealias __kernel_long_tVar = LongVarOf<__kernel_long_t>
typealias __kernel_long_t = Long

typealias __kernel_ulong_tVar = ULongVarOf<__kernel_ulong_t>
typealias __kernel_ulong_t = ULong

typealias __kernel_ino_tVar = ULongVarOf<__kernel_ino_t>
typealias __kernel_ino_t = __kernel_ulong_t

typealias __kernel_mode_tVar = UIntVarOf<__kernel_mode_t>
typealias __kernel_mode_t = UInt

typealias __kernel_pid_tVar = IntVarOf<__kernel_pid_t>
typealias __kernel_pid_t = Int

typealias __kernel_ipc_pid_tVar = IntVarOf<__kernel_ipc_pid_t>
typealias __kernel_ipc_pid_t = Int

typealias __kernel_uid_tVar = UIntVarOf<__kernel_uid_t>
typealias __kernel_uid_t = UInt

typealias __kernel_gid_tVar = UIntVarOf<__kernel_gid_t>
typealias __kernel_gid_t = UInt

typealias __kernel_suseconds_tVar = LongVarOf<__kernel_suseconds_t>
typealias __kernel_suseconds_t = __kernel_long_t

typealias __kernel_daddr_tVar = IntVarOf<__kernel_daddr_t>
typealias __kernel_daddr_t = Int

typealias __kernel_uid32_tVar = UIntVarOf<__kernel_uid32_t>
typealias __kernel_uid32_t = UInt

typealias __kernel_gid32_tVar = UIntVarOf<__kernel_gid32_t>
typealias __kernel_gid32_t = UInt

typealias __kernel_size_tVar = ULongVarOf<__kernel_size_t>
typealias __kernel_size_t = __kernel_ulong_t

typealias __kernel_ssize_tVar = LongVarOf<__kernel_ssize_t>
typealias __kernel_ssize_t = __kernel_long_t

typealias __kernel_ptrdiff_tVar = LongVarOf<__kernel_ptrdiff_t>
typealias __kernel_ptrdiff_t = __kernel_long_t

typealias __kernel_off_tVar = LongVarOf<__kernel_off_t>
typealias __kernel_off_t = __kernel_long_t

typealias __kernel_loff_tVar = LongVarOf<__kernel_loff_t>
typealias __kernel_loff_t = Long

typealias __kernel_time_tVar = LongVarOf<__kernel_time_t>
typealias __kernel_time_t = __kernel_long_t

typealias __kernel_clock_tVar = LongVarOf<__kernel_clock_t>
typealias __kernel_clock_t = __kernel_long_t

typealias __kernel_timer_tVar = IntVarOf<__kernel_timer_t>
typealias __kernel_timer_t = Int

typealias __kernel_clockid_tVar = IntVarOf<__kernel_clockid_t>
typealias __kernel_clockid_t = Int

typealias __kernel_caddr_tVar = CPointerVarOf<__kernel_caddr_t>
typealias __kernel_caddr_t = CPointer<ByteVar>

typealias __kernel_uid16_tVar = UShortVarOf<__kernel_uid16_t>
typealias __kernel_uid16_t = UShort

typealias __kernel_gid16_tVar = UShortVarOf<__kernel_gid16_t>
typealias __kernel_gid16_t = UShort

typealias __le16Var = UShortVarOf<__le16>
typealias __le16 = __u16

typealias __be16Var = UShortVarOf<__be16>
typealias __be16 = __u16

typealias __le32Var = UIntVarOf<__le32>
typealias __le32 = __u32

typealias __be32Var = UIntVarOf<__be32>
typealias __be32 = __u32

typealias __le64Var = ULongVarOf<__le64>
typealias __le64 = __u64

typealias __be64Var = ULongVarOf<__be64>
typealias __be64 = __u64

typealias __sum16Var = UShortVarOf<__sum16>
typealias __sum16 = __u16

typealias __wsumVar = UIntVarOf<__wsum>
typealias __wsum = __u32

typealias cap_user_header_tVar = CPointerVarOf<cap_user_header_t>
typealias cap_user_header_t = CPointer<__user_cap_header_struct>

typealias cap_user_data_tVar = CPointerVarOf<cap_user_data_t>
typealias cap_user_data_t = CPointer<__user_cap_data_struct>

typealias cap_tVar = CPointerVarOf<cap_t>
typealias cap_t = CPointer<_cap_struct>

typealias cap_value_tVar = IntVarOf<cap_value_t>
typealias cap_value_t = Int

typealias nfds_tVar = ULongVarOf<nfds_t>
typealias nfds_t = ULong

typealias sa_family_tVar = UShortVarOf<sa_family_t>
typealias sa_family_t = UShort

typealias in_addr_tVar = UIntVarOf<in_addr_t>
typealias in_addr_t = uint32_t

typealias in_port_tVar = UShortVarOf<in_port_t>
typealias in_port_t = uint16_t

typealias __timezone_ptr_tVar = CPointerVarOf<__timezone_ptr_t>
typealias __timezone_ptr_t = CPointer<timezone>

typealias __itimer_which_tVar = IntVarOf<__itimer_which_t>
typealias __itimer_which_t = Int

typealias __gwchar_tVar = IntVarOf<__gwchar_t>
typealias __gwchar_t = Int

typealias __FILE = _IO_FILE

typealias FILE = _IO_FILE

typealias __io_read_fn = CFunction<(COpaquePointer?, CPointer<ByteVar>?, size_t) -> __ssize_t>

typealias __io_write_fn = CFunction<(COpaquePointer?, CPointer<ByteVar>?, size_t) -> __ssize_t>

typealias __io_seek_fn = CFunction<(COpaquePointer?, CPointer<__off64_tVar>?, Int) -> Int>

typealias __io_close_fn = CFunction<(COpaquePointer?) -> Int>

typealias va_listVar = CPointerVarOf<va_list>
typealias va_list = __gnuc_va_list

typealias fpos_t = _G_fpos_t

typealias OPENSSL_STACK = stack_st

typealias OPENSSL_sk_compfuncVar = CPointerVarOf<OPENSSL_sk_compfunc>
typealias OPENSSL_sk_compfunc = CPointer<CFunction<(COpaquePointer?, COpaquePointer?) -> Int>>

typealias OPENSSL_sk_freefuncVar = CPointerVarOf<OPENSSL_sk_freefunc>
typealias OPENSSL_sk_freefunc = CPointer<CFunction<(COpaquePointer?) -> Unit>>

typealias OPENSSL_sk_copyfuncVar = CPointerVarOf<OPENSSL_sk_copyfunc>
typealias OPENSSL_sk_copyfunc = CPointer<CFunction<(COpaquePointer?) -> COpaquePointer?>>

typealias OPENSSL_STRINGVar = CPointerVarOf<OPENSSL_STRING>
typealias OPENSSL_STRING = CPointer<ByteVar>

typealias OPENSSL_CSTRINGVar = CPointerVarOf<OPENSSL_CSTRING>
typealias OPENSSL_CSTRING = CPointer<ByteVar>

typealias sk_OPENSSL_STRING_compfuncVar = CPointerVarOf<sk_OPENSSL_STRING_compfunc>
typealias sk_OPENSSL_STRING_compfunc = CPointer<CFunction<(CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<ByteVar>>?) -> Int>>

typealias sk_OPENSSL_STRING_freefuncVar = CPointerVarOf<sk_OPENSSL_STRING_freefunc>
typealias sk_OPENSSL_STRING_freefunc = CPointer<CFunction<(CPointer<ByteVar>?) -> Unit>>

typealias sk_OPENSSL_STRING_copyfuncVar = CPointerVarOf<sk_OPENSSL_STRING_copyfunc>
typealias sk_OPENSSL_STRING_copyfunc = CPointer<CFunction<(CPointer<ByteVar>?) -> CPointer<ByteVar>?>>

typealias sk_OPENSSL_CSTRING_compfuncVar = CPointerVarOf<sk_OPENSSL_CSTRING_compfunc>
typealias sk_OPENSSL_CSTRING_compfunc = CPointer<CFunction<(CPointer<CPointerVar<ByteVar>>?, CPointer<CPointerVar<ByteVar>>?) -> Int>>

typealias sk_OPENSSL_CSTRING_freefuncVar = CPointerVarOf<sk_OPENSSL_CSTRING_freefunc>
typealias sk_OPENSSL_CSTRING_freefunc = CPointer<CFunction<(CPointer<ByteVar>?) -> Unit>>

typealias sk_OPENSSL_CSTRING_copyfuncVar = CPointerVarOf<sk_OPENSSL_CSTRING_copyfunc>
typealias sk_OPENSSL_CSTRING_copyfunc = CPointer<CFunction<(CPointer<ByteVar>?) -> CPointer<ByteVar>?>>

typealias OPENSSL_BLOCKVar = CPointerVarOf<OPENSSL_BLOCK>
typealias OPENSSL_BLOCK = COpaquePointer

typealias sk_OPENSSL_BLOCK_compfuncVar = CPointerVarOf<sk_OPENSSL_BLOCK_compfunc>
typealias sk_OPENSSL_BLOCK_compfunc = CPointer<CFunction<(CPointer<COpaquePointerVar>?, CPointer<COpaquePointerVar>?) -> Int>>

typealias sk_OPENSSL_BLOCK_freefuncVar = CPointerVarOf<sk_OPENSSL_BLOCK_freefunc>
typealias sk_OPENSSL_BLOCK_freefunc = CPointer<CFunction<(COpaquePointer?) -> Unit>>

typealias sk_OPENSSL_BLOCK_copyfuncVar = CPointerVarOf<sk_OPENSSL_BLOCK_copyfunc>
typealias sk_OPENSSL_BLOCK_copyfunc = CPointer<CFunction<(COpaquePointer?) -> COpaquePointer?>>

typealias ASN1_INTEGER = asn1_string_st

typealias ASN1_ENUMERATED = asn1_string_st

typealias ASN1_BIT_STRING = asn1_string_st

typealias ASN1_OCTET_STRING = asn1_string_st

typealias ASN1_PRINTABLESTRING = asn1_string_st

typealias ASN1_T61STRING = asn1_string_st

typealias ASN1_IA5STRING = asn1_string_st

typealias ASN1_GENERALSTRING = asn1_string_st

typealias ASN1_UNIVERSALSTRING = asn1_string_st

typealias ASN1_BMPSTRING = asn1_string_st

typealias ASN1_UTCTIME = asn1_string_st

typealias ASN1_TIME = asn1_string_st

typealias ASN1_GENERALIZEDTIME = asn1_string_st

typealias ASN1_VISIBLESTRING = asn1_string_st

typealias ASN1_UTF8STRING = asn1_string_st

typealias ASN1_STRING = asn1_string_st

typealias ASN1_BOOLEANVar = IntVarOf<ASN1_BOOLEAN>
typealias ASN1_BOOLEAN = Int

typealias ASN1_NULLVar = IntVarOf<ASN1_NULL>
typealias ASN1_NULL = Int

typealias ASN1_OBJECT = asn1_object_st

typealias ASN1_ITEM = ASN1_ITEM_st

typealias ASN1_PCTX = asn1_pctx_st

typealias ASN1_SCTX = asn1_sctx_st

typealias BIO = bio_st

typealias BIGNUM = bignum_st

typealias BN_CTX = bignum_ctx

typealias BN_BLINDING = bn_blinding_st

typealias BN_MONT_CTX = bn_mont_ctx_st

typealias BN_RECP_CTX = bn_recp_ctx_st

typealias BN_GENCB = bn_gencb_st

typealias BUF_MEM = buf_mem_st

typealias EVP_CIPHER = evp_cipher_st

typealias EVP_CIPHER_CTX = evp_cipher_ctx_st

typealias EVP_MD = evp_md_st

typealias EVP_MD_CTX = evp_md_ctx_st

typealias EVP_PKEY = evp_pkey_st

typealias EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st

typealias EVP_PKEY_METHOD = evp_pkey_method_st

typealias EVP_PKEY_CTX = evp_pkey_ctx_st

typealias EVP_ENCODE_CTX = evp_Encode_Ctx_st

typealias HMAC_CTX = hmac_ctx_st

typealias DH = dh_st

typealias DH_METHOD = dh_method

typealias DSA = dsa_st

typealias DSA_METHOD = dsa_method

typealias RSA = rsa_st

typealias RSA_METHOD = rsa_meth_st

typealias EC_KEY = ec_key_st

typealias EC_KEY_METHOD = ec_key_method_st

typealias RAND_METHOD = rand_meth_st

typealias SSL_DANE = ssl_dane_st

typealias X509 = x509_st

typealias ASN1_VALUE = ASN1_VALUE_st

typealias ASN1_TYPE = asn1_type_st

typealias X509_ALGOR = X509_algor_st

typealias X509_CRL = X509_crl_st

typealias X509_CRL_METHOD = x509_crl_method_st

typealias X509_REVOKED = x509_revoked_st

typealias X509_NAME = X509_name_st

typealias X509_PUBKEY = X509_pubkey_st

typealias X509_STORE = x509_store_st

typealias X509_STORE_CTX = x509_store_ctx_st

typealias X509_OBJECT = x509_object_st

typealias X509_LOOKUP = x509_lookup_st

typealias X509_LOOKUP_METHOD = x509_lookup_method_st

typealias X509_VERIFY_PARAM = X509_VERIFY_PARAM_st

typealias PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st

typealias X509V3_CTX = v3_ext_ctx

typealias CONF = conf_st

typealias OPENSSL_INIT_SETTINGS = ossl_init_settings_st

typealias UI = ui_st

typealias UI_METHOD = ui_method_st

typealias ENGINE = engine_st

typealias SSL = ssl_st

typealias SSL_CTX = ssl_ctx_st

typealias COMP_CTX = comp_ctx_st

typealias COMP_METHOD = comp_method_st

typealias X509_POLICY_NODE = X509_POLICY_NODE_st

typealias X509_POLICY_LEVEL = X509_POLICY_LEVEL_st

typealias X509_POLICY_TREE = X509_POLICY_TREE_st

typealias X509_POLICY_CACHE = X509_POLICY_CACHE_st

typealias AUTHORITY_KEYID = AUTHORITY_KEYID_st

typealias DIST_POINT = DIST_POINT_st

typealias ISSUING_DIST_POINT = ISSUING_DIST_POINT_st

typealias NAME_CONSTRAINTS = NAME_CONSTRAINTS_st

typealias CRYPTO_EX_DATA = crypto_ex_data_st

typealias OCSP_REQ_CTX = ocsp_req_ctx_st

typealias OCSP_RESPONSE = ocsp_response_st

typealias OCSP_RESPID = ocsp_responder_id_st

typealias SCT = sct_st

typealias SCT_CTX = sct_ctx_st

typealias CTLOG = ctlog_st

typealias CTLOG_STORE = ctlog_store_st

typealias CT_POLICY_EVAL_CTX = ct_policy_eval_ctx_st

typealias ossl_intmax_tVar = LongVarOf<ossl_intmax_t>
typealias ossl_intmax_t = intmax_t

typealias ossl_uintmax_tVar = ULongVarOf<ossl_uintmax_t>
typealias ossl_uintmax_t = uintmax_t

typealias sk_void_compfuncVar = CPointerVarOf<sk_void_compfunc>
typealias sk_void_compfunc = CPointer<CFunction<(CPointer<COpaquePointerVar>?, CPointer<COpaquePointerVar>?) -> Int>>

typealias sk_void_freefuncVar = CPointerVarOf<sk_void_freefunc>
typealias sk_void_freefunc = CPointer<CFunction<(COpaquePointer?) -> Unit>>

typealias sk_void_copyfuncVar = CPointerVarOf<sk_void_copyfunc>
typealias sk_void_copyfunc = CPointer<CFunction<(COpaquePointer?) -> COpaquePointer?>>

typealias CRYPTO_EX_new = CFunction<(COpaquePointer?, COpaquePointer?, CPointer<CRYPTO_EX_DATA>?, Int, Long, COpaquePointer?) -> Unit>

typealias CRYPTO_EX_free = CFunction<(COpaquePointer?, COpaquePointer?, CPointer<CRYPTO_EX_DATA>?, Int, Long, COpaquePointer?) -> Unit>

typealias CRYPTO_EX_dup = CFunction<(CPointer<CRYPTO_EX_DATA>?, CPointer<CRYPTO_EX_DATA>?, COpaquePointer?, Int, Long, COpaquePointer?) -> Int>

typealias CRYPTO_THREADID = crypto_threadid_st

typealias __cpu_maskVar = ULongVarOf<__cpu_mask>
typealias __cpu_mask = ULong

typealias __jmp_bufVar = CPointerVarOf<__jmp_buf>
typealias __jmp_buf = CArrayPointer<LongVar>

typealias CRYPTO_ONCEVar = IntVarOf<CRYPTO_ONCE>
typealias CRYPTO_ONCE = pthread_once_t

typealias CRYPTO_THREAD_LOCALVar = UIntVarOf<CRYPTO_THREAD_LOCAL>
typealias CRYPTO_THREAD_LOCAL = pthread_key_t

typealias CRYPTO_THREAD_IDVar = ULongVarOf<CRYPTO_THREAD_ID>
typealias CRYPTO_THREAD_ID = pthread_t

typealias BIO_ADDR = bio_addr_st

typealias BIO_ADDRINFO = bio_addrinfo_st

typealias BIO_callback_fnVar = CPointerVarOf<BIO_callback_fn>
typealias BIO_callback_fn = CPointer<CFunction<(CPointer<BIO>?, Int, CPointer<ByteVar>?, Int, Long, Long) -> Long>>

typealias BIO_METHOD = bio_method_st

typealias bio_info_cb = CFunction<(CPointer<BIO>?, Int, CPointer<ByteVar>?, Int, Long, Long) -> Unit>

typealias sk_BIO_compfuncVar = CPointerVarOf<sk_BIO_compfunc>
typealias sk_BIO_compfunc = CPointer<CFunction<(CPointer<CPointerVar<BIO>>?, CPointer<CPointerVar<BIO>>?) -> Int>>

typealias sk_BIO_freefuncVar = CPointerVarOf<sk_BIO_freefunc>
typealias sk_BIO_freefunc = CPointer<CFunction<(CPointer<BIO>?) -> Unit>>

typealias sk_BIO_copyfuncVar = CPointerVarOf<sk_BIO_copyfunc>
typealias sk_BIO_copyfunc = CPointer<CFunction<(CPointer<BIO>?) -> CPointer<BIO>?>>

typealias asn1_ps_func = CFunction<(CPointer<BIO>?, CPointer<CPointerVar<UByteVar>>?, CPointer<IntVar>?, COpaquePointer?) -> Int>

typealias sk_X509_ALGOR_compfuncVar = CPointerVarOf<sk_X509_ALGOR_compfunc>
typealias sk_X509_ALGOR_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_ALGOR>>?, CPointer<CPointerVar<X509_ALGOR>>?) -> Int>>

typealias sk_X509_ALGOR_freefuncVar = CPointerVarOf<sk_X509_ALGOR_freefunc>
typealias sk_X509_ALGOR_freefunc = CPointer<CFunction<(CPointer<X509_ALGOR>?) -> Unit>>

typealias sk_X509_ALGOR_copyfuncVar = CPointerVarOf<sk_X509_ALGOR_copyfunc>
typealias sk_X509_ALGOR_copyfunc = CPointer<CFunction<(CPointer<X509_ALGOR>?) -> CPointer<X509_ALGOR>?>>

typealias ASN1_ENCODING = ASN1_ENCODING_st

typealias ASN1_STRING_TABLE = asn1_string_table_st

typealias sk_ASN1_STRING_TABLE_compfuncVar = CPointerVarOf<sk_ASN1_STRING_TABLE_compfunc>
typealias sk_ASN1_STRING_TABLE_compfunc = CPointer<CFunction<(CPointer<CPointerVar<ASN1_STRING_TABLE>>?, CPointer<CPointerVar<ASN1_STRING_TABLE>>?) -> Int>>

typealias sk_ASN1_STRING_TABLE_freefuncVar = CPointerVarOf<sk_ASN1_STRING_TABLE_freefunc>
typealias sk_ASN1_STRING_TABLE_freefunc = CPointer<CFunction<(CPointer<ASN1_STRING_TABLE>?) -> Unit>>

typealias sk_ASN1_STRING_TABLE_copyfuncVar = CPointerVarOf<sk_ASN1_STRING_TABLE_copyfunc>
typealias sk_ASN1_STRING_TABLE_copyfunc = CPointer<CFunction<(CPointer<ASN1_STRING_TABLE>?) -> CPointer<ASN1_STRING_TABLE>?>>

typealias ASN1_TEMPLATE = ASN1_TEMPLATE_st

typealias ASN1_TLC = ASN1_TLC_st

typealias d2i_of_void = CFunction<(CPointer<COpaquePointerVar>?, CPointer<CPointerVar<UByteVar>>?, Long) -> COpaquePointer?>

typealias i2d_of_void = CFunction<(COpaquePointer?, CPointer<CPointerVar<UByteVar>>?) -> Int>

typealias ASN1_ITEM_EXP = ASN1_ITEM

typealias sk_ASN1_INTEGER_compfuncVar = CPointerVarOf<sk_ASN1_INTEGER_compfunc>
typealias sk_ASN1_INTEGER_compfunc = CPointer<CFunction<(CPointer<CPointerVar<ASN1_INTEGER>>?, CPointer<CPointerVar<ASN1_INTEGER>>?) -> Int>>

typealias sk_ASN1_INTEGER_freefuncVar = CPointerVarOf<sk_ASN1_INTEGER_freefunc>
typealias sk_ASN1_INTEGER_freefunc = CPointer<CFunction<(CPointer<ASN1_INTEGER>?) -> Unit>>

typealias sk_ASN1_INTEGER_copyfuncVar = CPointerVarOf<sk_ASN1_INTEGER_copyfunc>
typealias sk_ASN1_INTEGER_copyfunc = CPointer<CFunction<(CPointer<ASN1_INTEGER>?) -> CPointer<ASN1_INTEGER>?>>

typealias sk_ASN1_GENERALSTRING_compfuncVar = CPointerVarOf<sk_ASN1_GENERALSTRING_compfunc>
typealias sk_ASN1_GENERALSTRING_compfunc = CPointer<CFunction<(CPointer<CPointerVar<ASN1_GENERALSTRING>>?, CPointer<CPointerVar<ASN1_GENERALSTRING>>?) -> Int>>

typealias sk_ASN1_GENERALSTRING_freefuncVar = CPointerVarOf<sk_ASN1_GENERALSTRING_freefunc>
typealias sk_ASN1_GENERALSTRING_freefunc = CPointer<CFunction<(CPointer<ASN1_GENERALSTRING>?) -> Unit>>

typealias sk_ASN1_GENERALSTRING_copyfuncVar = CPointerVarOf<sk_ASN1_GENERALSTRING_copyfunc>
typealias sk_ASN1_GENERALSTRING_copyfunc = CPointer<CFunction<(CPointer<ASN1_GENERALSTRING>?) -> CPointer<ASN1_GENERALSTRING>?>>

typealias sk_ASN1_UTF8STRING_compfuncVar = CPointerVarOf<sk_ASN1_UTF8STRING_compfunc>
typealias sk_ASN1_UTF8STRING_compfunc = CPointer<CFunction<(CPointer<CPointerVar<ASN1_UTF8STRING>>?, CPointer<CPointerVar<ASN1_UTF8STRING>>?) -> Int>>

typealias sk_ASN1_UTF8STRING_freefuncVar = CPointerVarOf<sk_ASN1_UTF8STRING_freefunc>
typealias sk_ASN1_UTF8STRING_freefunc = CPointer<CFunction<(CPointer<ASN1_UTF8STRING>?) -> Unit>>

typealias sk_ASN1_UTF8STRING_copyfuncVar = CPointerVarOf<sk_ASN1_UTF8STRING_copyfunc>
typealias sk_ASN1_UTF8STRING_copyfunc = CPointer<CFunction<(CPointer<ASN1_UTF8STRING>?) -> CPointer<ASN1_UTF8STRING>?>>

typealias sk_ASN1_TYPE_compfuncVar = CPointerVarOf<sk_ASN1_TYPE_compfunc>
typealias sk_ASN1_TYPE_compfunc = CPointer<CFunction<(CPointer<CPointerVar<ASN1_TYPE>>?, CPointer<CPointerVar<ASN1_TYPE>>?) -> Int>>

typealias sk_ASN1_TYPE_freefuncVar = CPointerVarOf<sk_ASN1_TYPE_freefunc>
typealias sk_ASN1_TYPE_freefunc = CPointer<CFunction<(CPointer<ASN1_TYPE>?) -> Unit>>

typealias sk_ASN1_TYPE_copyfuncVar = CPointerVarOf<sk_ASN1_TYPE_copyfunc>
typealias sk_ASN1_TYPE_copyfunc = CPointer<CFunction<(CPointer<ASN1_TYPE>?) -> CPointer<ASN1_TYPE>?>>

typealias ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE

typealias BIT_STRING_BITNAME = BIT_STRING_BITNAME_st

typealias sk_ASN1_OBJECT_compfuncVar = CPointerVarOf<sk_ASN1_OBJECT_compfunc>
typealias sk_ASN1_OBJECT_compfunc = CPointer<CFunction<(CPointer<CPointerVar<ASN1_OBJECT>>?, CPointer<CPointerVar<ASN1_OBJECT>>?) -> Int>>

typealias sk_ASN1_OBJECT_freefuncVar = CPointerVarOf<sk_ASN1_OBJECT_freefunc>
typealias sk_ASN1_OBJECT_freefunc = CPointer<CFunction<(CPointer<ASN1_OBJECT>?) -> Unit>>

typealias sk_ASN1_OBJECT_copyfuncVar = CPointerVarOf<sk_ASN1_OBJECT_copyfunc>
typealias sk_ASN1_OBJECT_copyfunc = CPointer<CFunction<(CPointer<ASN1_OBJECT>?) -> CPointer<ASN1_OBJECT>?>>

typealias OBJ_NAME = obj_name_st

typealias EVP_CIPHER_INFO = evp_cipher_info_st

typealias EVP_PBE_KEYGEN = CFunction<(CPointer<EVP_CIPHER_CTX>?, CPointer<ByteVar>?, Int, CPointer<ASN1_TYPE>?, CPointer<EVP_CIPHER>?, CPointer<EVP_MD>?, Int) -> Int>

typealias EVP_PKEY_gen_cb = CFunction<(CPointer<EVP_PKEY_CTX>?) -> Int>

typealias EC_METHOD = ec_method_st

typealias EC_GROUP = ec_group_st

typealias EC_POINT = ec_point_st

typealias ECPKPARAMETERS = ecpk_parameters_st

typealias ECPARAMETERS = ec_parameters_st

typealias ECDSA_SIG = ECDSA_SIG_st

typealias RSA_PSS_PARAMS = rsa_pss_params_st

typealias RSA_OAEP_PARAMS = rsa_oaep_params_st

typealias DSA_SIG = DSA_SIG_st

typealias SHA_CTX = SHAstate_st

typealias SHA256_CTX = SHA256state_st

typealias SHA512_CTX = SHA512state_st

typealias X509_ALGORS = stack_st_X509_ALGOR

typealias X509_VAL = X509_val_st

typealias X509_SIG = X509_sig_st

typealias X509_NAME_ENTRY = X509_name_entry_st

typealias sk_X509_NAME_ENTRY_compfuncVar = CPointerVarOf<sk_X509_NAME_ENTRY_compfunc>
typealias sk_X509_NAME_ENTRY_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_NAME_ENTRY>>?, CPointer<CPointerVar<X509_NAME_ENTRY>>?) -> Int>>

typealias sk_X509_NAME_ENTRY_freefuncVar = CPointerVarOf<sk_X509_NAME_ENTRY_freefunc>
typealias sk_X509_NAME_ENTRY_freefunc = CPointer<CFunction<(CPointer<X509_NAME_ENTRY>?) -> Unit>>

typealias sk_X509_NAME_ENTRY_copyfuncVar = CPointerVarOf<sk_X509_NAME_ENTRY_copyfunc>
typealias sk_X509_NAME_ENTRY_copyfunc = CPointer<CFunction<(CPointer<X509_NAME_ENTRY>?) -> CPointer<X509_NAME_ENTRY>?>>

typealias sk_X509_NAME_compfuncVar = CPointerVarOf<sk_X509_NAME_compfunc>
typealias sk_X509_NAME_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_NAME>>?, CPointer<CPointerVar<X509_NAME>>?) -> Int>>

typealias sk_X509_NAME_freefuncVar = CPointerVarOf<sk_X509_NAME_freefunc>
typealias sk_X509_NAME_freefunc = CPointer<CFunction<(CPointer<X509_NAME>?) -> Unit>>

typealias sk_X509_NAME_copyfuncVar = CPointerVarOf<sk_X509_NAME_copyfunc>
typealias sk_X509_NAME_copyfunc = CPointer<CFunction<(CPointer<X509_NAME>?) -> CPointer<X509_NAME>?>>

typealias X509_EXTENSION = X509_extension_st

typealias X509_EXTENSIONS = stack_st_X509_EXTENSION

typealias sk_X509_EXTENSION_compfuncVar = CPointerVarOf<sk_X509_EXTENSION_compfunc>
typealias sk_X509_EXTENSION_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_EXTENSION>>?, CPointer<CPointerVar<X509_EXTENSION>>?) -> Int>>

typealias sk_X509_EXTENSION_freefuncVar = CPointerVarOf<sk_X509_EXTENSION_freefunc>
typealias sk_X509_EXTENSION_freefunc = CPointer<CFunction<(CPointer<X509_EXTENSION>?) -> Unit>>

typealias sk_X509_EXTENSION_copyfuncVar = CPointerVarOf<sk_X509_EXTENSION_copyfunc>
typealias sk_X509_EXTENSION_copyfunc = CPointer<CFunction<(CPointer<X509_EXTENSION>?) -> CPointer<X509_EXTENSION>?>>

typealias X509_ATTRIBUTE = x509_attributes_st

typealias sk_X509_ATTRIBUTE_compfuncVar = CPointerVarOf<sk_X509_ATTRIBUTE_compfunc>
typealias sk_X509_ATTRIBUTE_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_ATTRIBUTE>>?, CPointer<CPointerVar<X509_ATTRIBUTE>>?) -> Int>>

typealias sk_X509_ATTRIBUTE_freefuncVar = CPointerVarOf<sk_X509_ATTRIBUTE_freefunc>
typealias sk_X509_ATTRIBUTE_freefunc = CPointer<CFunction<(CPointer<X509_ATTRIBUTE>?) -> Unit>>

typealias sk_X509_ATTRIBUTE_copyfuncVar = CPointerVarOf<sk_X509_ATTRIBUTE_copyfunc>
typealias sk_X509_ATTRIBUTE_copyfunc = CPointer<CFunction<(CPointer<X509_ATTRIBUTE>?) -> CPointer<X509_ATTRIBUTE>?>>

typealias X509_REQ_INFO = X509_req_info_st

typealias X509_REQ = X509_req_st

typealias X509_CERT_AUX = x509_cert_aux_st

typealias X509_CINF = x509_cinf_st

typealias sk_X509_compfuncVar = CPointerVarOf<sk_X509_compfunc>
typealias sk_X509_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509>>?, CPointer<CPointerVar<X509>>?) -> Int>>

typealias sk_X509_freefuncVar = CPointerVarOf<sk_X509_freefunc>
typealias sk_X509_freefunc = CPointer<CFunction<(CPointer<X509>?) -> Unit>>

typealias sk_X509_copyfuncVar = CPointerVarOf<sk_X509_copyfunc>
typealias sk_X509_copyfunc = CPointer<CFunction<(CPointer<X509>?) -> CPointer<X509>?>>

typealias X509_TRUST = x509_trust_st

typealias sk_X509_TRUST_compfuncVar = CPointerVarOf<sk_X509_TRUST_compfunc>
typealias sk_X509_TRUST_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_TRUST>>?, CPointer<CPointerVar<X509_TRUST>>?) -> Int>>

typealias sk_X509_TRUST_freefuncVar = CPointerVarOf<sk_X509_TRUST_freefunc>
typealias sk_X509_TRUST_freefunc = CPointer<CFunction<(CPointer<X509_TRUST>?) -> Unit>>

typealias sk_X509_TRUST_copyfuncVar = CPointerVarOf<sk_X509_TRUST_copyfunc>
typealias sk_X509_TRUST_copyfunc = CPointer<CFunction<(CPointer<X509_TRUST>?) -> CPointer<X509_TRUST>?>>

typealias sk_X509_REVOKED_compfuncVar = CPointerVarOf<sk_X509_REVOKED_compfunc>
typealias sk_X509_REVOKED_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_REVOKED>>?, CPointer<CPointerVar<X509_REVOKED>>?) -> Int>>

typealias sk_X509_REVOKED_freefuncVar = CPointerVarOf<sk_X509_REVOKED_freefunc>
typealias sk_X509_REVOKED_freefunc = CPointer<CFunction<(CPointer<X509_REVOKED>?) -> Unit>>

typealias sk_X509_REVOKED_copyfuncVar = CPointerVarOf<sk_X509_REVOKED_copyfunc>
typealias sk_X509_REVOKED_copyfunc = CPointer<CFunction<(CPointer<X509_REVOKED>?) -> CPointer<X509_REVOKED>?>>

typealias X509_CRL_INFO = X509_crl_info_st

typealias sk_X509_CRL_compfuncVar = CPointerVarOf<sk_X509_CRL_compfunc>
typealias sk_X509_CRL_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_CRL>>?, CPointer<CPointerVar<X509_CRL>>?) -> Int>>

typealias sk_X509_CRL_freefuncVar = CPointerVarOf<sk_X509_CRL_freefunc>
typealias sk_X509_CRL_freefunc = CPointer<CFunction<(CPointer<X509_CRL>?) -> Unit>>

typealias sk_X509_CRL_copyfuncVar = CPointerVarOf<sk_X509_CRL_copyfunc>
typealias sk_X509_CRL_copyfunc = CPointer<CFunction<(CPointer<X509_CRL>?) -> CPointer<X509_CRL>?>>

typealias X509_PKEY = private_key_st

typealias X509_INFO = X509_info_st

typealias sk_X509_INFO_compfuncVar = CPointerVarOf<sk_X509_INFO_compfunc>
typealias sk_X509_INFO_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_INFO>>?, CPointer<CPointerVar<X509_INFO>>?) -> Int>>

typealias sk_X509_INFO_freefuncVar = CPointerVarOf<sk_X509_INFO_freefunc>
typealias sk_X509_INFO_freefunc = CPointer<CFunction<(CPointer<X509_INFO>?) -> Unit>>

typealias sk_X509_INFO_copyfuncVar = CPointerVarOf<sk_X509_INFO_copyfunc>
typealias sk_X509_INFO_copyfunc = CPointer<CFunction<(CPointer<X509_INFO>?) -> CPointer<X509_INFO>?>>

typealias NETSCAPE_SPKAC = Netscape_spkac_st

typealias NETSCAPE_SPKI = Netscape_spki_st

typealias NETSCAPE_CERT_SEQUENCE = Netscape_certificate_sequence

typealias PBEPARAM = PBEPARAM_st

typealias PBE2PARAM = PBE2PARAM_st

typealias PBKDF2PARAM = PBKDF2PARAM_st

typealias OPENSSL_LH_NODE = lhash_node_st

typealias OPENSSL_LH_COMPFUNCVar = CPointerVarOf<OPENSSL_LH_COMPFUNC>
typealias OPENSSL_LH_COMPFUNC = CPointer<CFunction<(COpaquePointer?, COpaquePointer?) -> Int>>

typealias OPENSSL_LH_HASHFUNCVar = CPointerVarOf<OPENSSL_LH_HASHFUNC>
typealias OPENSSL_LH_HASHFUNC = CPointer<CFunction<(COpaquePointer?) -> ULong>>

typealias OPENSSL_LH_DOALL_FUNCVar = CPointerVarOf<OPENSSL_LH_DOALL_FUNC>
typealias OPENSSL_LH_DOALL_FUNC = CPointer<CFunction<(COpaquePointer?) -> Unit>>

typealias OPENSSL_LH_DOALL_FUNCARGVar = CPointerVarOf<OPENSSL_LH_DOALL_FUNCARG>
typealias OPENSSL_LH_DOALL_FUNCARG = CPointer<CFunction<(COpaquePointer?, COpaquePointer?) -> Unit>>

typealias OPENSSL_LHASH = lhash_st

typealias sk_X509_LOOKUP_compfuncVar = CPointerVarOf<sk_X509_LOOKUP_compfunc>
typealias sk_X509_LOOKUP_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_LOOKUP>>?, CPointer<CPointerVar<X509_LOOKUP>>?) -> Int>>

typealias sk_X509_LOOKUP_freefuncVar = CPointerVarOf<sk_X509_LOOKUP_freefunc>
typealias sk_X509_LOOKUP_freefunc = CPointer<CFunction<(CPointer<X509_LOOKUP>?) -> Unit>>

typealias sk_X509_LOOKUP_copyfuncVar = CPointerVarOf<sk_X509_LOOKUP_copyfunc>
typealias sk_X509_LOOKUP_copyfunc = CPointer<CFunction<(CPointer<X509_LOOKUP>?) -> CPointer<X509_LOOKUP>?>>

typealias sk_X509_OBJECT_compfuncVar = CPointerVarOf<sk_X509_OBJECT_compfunc>
typealias sk_X509_OBJECT_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_OBJECT>>?, CPointer<CPointerVar<X509_OBJECT>>?) -> Int>>

typealias sk_X509_OBJECT_freefuncVar = CPointerVarOf<sk_X509_OBJECT_freefunc>
typealias sk_X509_OBJECT_freefunc = CPointer<CFunction<(CPointer<X509_OBJECT>?) -> Unit>>

typealias sk_X509_OBJECT_copyfuncVar = CPointerVarOf<sk_X509_OBJECT_copyfunc>
typealias sk_X509_OBJECT_copyfunc = CPointer<CFunction<(CPointer<X509_OBJECT>?) -> CPointer<X509_OBJECT>?>>

typealias sk_X509_VERIFY_PARAM_compfuncVar = CPointerVarOf<sk_X509_VERIFY_PARAM_compfunc>
typealias sk_X509_VERIFY_PARAM_compfunc = CPointer<CFunction<(CPointer<CPointerVar<X509_VERIFY_PARAM>>?, CPointer<CPointerVar<X509_VERIFY_PARAM>>?) -> Int>>

typealias sk_X509_VERIFY_PARAM_freefuncVar = CPointerVarOf<sk_X509_VERIFY_PARAM_freefunc>
typealias sk_X509_VERIFY_PARAM_freefunc = CPointer<CFunction<(CPointer<X509_VERIFY_PARAM>?) -> Unit>>

typealias sk_X509_VERIFY_PARAM_copyfuncVar = CPointerVarOf<sk_X509_VERIFY_PARAM_copyfunc>
typealias sk_X509_VERIFY_PARAM_copyfunc = CPointer<CFunction<(CPointer<X509_VERIFY_PARAM>?) -> CPointer<X509_VERIFY_PARAM>?>>

typealias X509_STORE_CTX_verify_cbVar = CPointerVarOf<X509_STORE_CTX_verify_cb>
typealias X509_STORE_CTX_verify_cb = CPointer<CFunction<(Int, CPointer<X509_STORE_CTX>?) -> Int>>

typealias X509_STORE_CTX_verify_fnVar = CPointerVarOf<X509_STORE_CTX_verify_fn>
typealias X509_STORE_CTX_verify_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>

typealias X509_STORE_CTX_get_issuer_fnVar = CPointerVarOf<X509_STORE_CTX_get_issuer_fn>
typealias X509_STORE_CTX_get_issuer_fn = CPointer<CFunction<(CPointer<CPointerVar<X509>>?, CPointer<X509_STORE_CTX>?, CPointer<X509>?) -> Int>>

typealias X509_STORE_CTX_check_issued_fnVar = CPointerVarOf<X509_STORE_CTX_check_issued_fn>
typealias X509_STORE_CTX_check_issued_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509>?, CPointer<X509>?) -> Int>>

typealias X509_STORE_CTX_check_revocation_fnVar = CPointerVarOf<X509_STORE_CTX_check_revocation_fn>
typealias X509_STORE_CTX_check_revocation_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>

typealias X509_STORE_CTX_get_crl_fnVar = CPointerVarOf<X509_STORE_CTX_get_crl_fn>
typealias X509_STORE_CTX_get_crl_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<CPointerVar<X509_CRL>>?, CPointer<X509>?) -> Int>>

typealias X509_STORE_CTX_check_crl_fnVar = CPointerVarOf<X509_STORE_CTX_check_crl_fn>
typealias X509_STORE_CTX_check_crl_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_CRL>?) -> Int>>

typealias X509_STORE_CTX_cert_crl_fnVar = CPointerVarOf<X509_STORE_CTX_cert_crl_fn>
typealias X509_STORE_CTX_cert_crl_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_CRL>?, CPointer<X509>?) -> Int>>

typealias X509_STORE_CTX_check_policy_fnVar = CPointerVarOf<X509_STORE_CTX_check_policy_fn>
typealias X509_STORE_CTX_check_policy_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>

typealias X509_STORE_CTX_lookup_certs_fnVar = CPointerVarOf<X509_STORE_CTX_lookup_certs_fn>
typealias X509_STORE_CTX_lookup_certs_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509>?>>

typealias X509_STORE_CTX_lookup_crls_fnVar = CPointerVarOf<X509_STORE_CTX_lookup_crls_fn>
typealias X509_STORE_CTX_lookup_crls_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?, CPointer<X509_NAME>?) -> CPointer<stack_st_X509_CRL>?>>

typealias X509_STORE_CTX_cleanup_fnVar = CPointerVarOf<X509_STORE_CTX_cleanup_fn>
typealias X509_STORE_CTX_cleanup_fn = CPointer<CFunction<(CPointer<X509_STORE_CTX>?) -> Int>>

typealias PKCS7_ISSUER_AND_SERIAL = pkcs7_issuer_and_serial_st

typealias PKCS7_SIGNER_INFO = pkcs7_signer_info_st

typealias sk_PKCS7_SIGNER_INFO_compfuncVar = CPointerVarOf<sk_PKCS7_SIGNER_INFO_compfunc>
typealias sk_PKCS7_SIGNER_INFO_compfunc = CPointer<CFunction<(CPointer<CPointerVar<PKCS7_SIGNER_INFO>>?, CPointer<CPointerVar<PKCS7_SIGNER_INFO>>?) -> Int>>

typealias sk_PKCS7_SIGNER_INFO_freefuncVar = CPointerVarOf<sk_PKCS7_SIGNER_INFO_freefunc>
typealias sk_PKCS7_SIGNER_INFO_freefunc = CPointer<CFunction<(CPointer<PKCS7_SIGNER_INFO>?) -> Unit>>

typealias sk_PKCS7_SIGNER_INFO_copyfuncVar = CPointerVarOf<sk_PKCS7_SIGNER_INFO_copyfunc>
typealias sk_PKCS7_SIGNER_INFO_copyfunc = CPointer<CFunction<(CPointer<PKCS7_SIGNER_INFO>?) -> CPointer<PKCS7_SIGNER_INFO>?>>

typealias PKCS7_RECIP_INFO = pkcs7_recip_info_st

typealias sk_PKCS7_RECIP_INFO_compfuncVar = CPointerVarOf<sk_PKCS7_RECIP_INFO_compfunc>
typealias sk_PKCS7_RECIP_INFO_compfunc = CPointer<CFunction<(CPointer<CPointerVar<PKCS7_RECIP_INFO>>?, CPointer<CPointerVar<PKCS7_RECIP_INFO>>?) -> Int>>

typealias sk_PKCS7_RECIP_INFO_freefuncVar = CPointerVarOf<sk_PKCS7_RECIP_INFO_freefunc>
typealias sk_PKCS7_RECIP_INFO_freefunc = CPointer<CFunction<(CPointer<PKCS7_RECIP_INFO>?) -> Unit>>

typealias sk_PKCS7_RECIP_INFO_copyfuncVar = CPointerVarOf<sk_PKCS7_RECIP_INFO_copyfunc>
typealias sk_PKCS7_RECIP_INFO_copyfunc = CPointer<CFunction<(CPointer<PKCS7_RECIP_INFO>?) -> CPointer<PKCS7_RECIP_INFO>?>>

typealias PKCS7_SIGNED = pkcs7_signed_st

typealias PKCS7_ENC_CONTENT = pkcs7_enc_content_st

typealias PKCS7_ENVELOPE = pkcs7_enveloped_st

typealias PKCS7_SIGN_ENVELOPE = pkcs7_signedandenveloped_st

typealias PKCS7_DIGEST = pkcs7_digest_st

typealias PKCS7_ENCRYPT = pkcs7_encrypted_st

typealias PKCS7 = pkcs7_st

typealias sk_PKCS7_compfuncVar = CPointerVarOf<sk_PKCS7_compfunc>
typealias sk_PKCS7_compfunc = CPointer<CFunction<(CPointer<CPointerVar<PKCS7>>?, CPointer<CPointerVar<PKCS7>>?) -> Int>>

typealias sk_PKCS7_freefuncVar = CPointerVarOf<sk_PKCS7_freefunc>
typealias sk_PKCS7_freefunc = CPointer<CFunction<(CPointer<PKCS7>?) -> Unit>>

typealias sk_PKCS7_copyfuncVar = CPointerVarOf<sk_PKCS7_copyfunc>
typealias sk_PKCS7_copyfunc = CPointer<CFunction<(CPointer<PKCS7>?) -> CPointer<PKCS7>?>>

typealias PEM_USER = pem_recip_st

typealias PEM_CTX = pem_ctx_st

typealias pem_password_cb = CFunction<(CPointer<ByteVar>?, Int, Int, COpaquePointer?) -> Int>

typealias ASYNC_JOB = async_job_st

typealias ASYNC_WAIT_CTX = async_wait_ctx_st

typealias sk_SCT_compfuncVar = CPointerVarOf<sk_SCT_compfunc>
typealias sk_SCT_compfunc = CPointer<CFunction<(CPointer<CPointerVar<SCT>>?, CPointer<CPointerVar<SCT>>?) -> Int>>

typealias sk_SCT_freefuncVar = CPointerVarOf<sk_SCT_freefunc>
typealias sk_SCT_freefunc = CPointer<CFunction<(CPointer<SCT>?) -> Unit>>

typealias sk_SCT_copyfuncVar = CPointerVarOf<sk_SCT_copyfunc>
typealias sk_SCT_copyfunc = CPointer<CFunction<(CPointer<SCT>?) -> CPointer<SCT>?>>

typealias sk_CTLOG_compfuncVar = CPointerVarOf<sk_CTLOG_compfunc>
typealias sk_CTLOG_compfunc = CPointer<CFunction<(CPointer<CPointerVar<CTLOG>>?, CPointer<CPointerVar<CTLOG>>?) -> Int>>

typealias sk_CTLOG_freefuncVar = CPointerVarOf<sk_CTLOG_freefunc>
typealias sk_CTLOG_freefunc = CPointer<CFunction<(CPointer<CTLOG>?) -> Unit>>

typealias sk_CTLOG_copyfuncVar = CPointerVarOf<sk_CTLOG_copyfunc>
typealias sk_CTLOG_copyfunc = CPointer<CFunction<(CPointer<CTLOG>?) -> CPointer<CTLOG>?>>

typealias ssl_crock_stVar = CPointerVarOf<ssl_crock_st>
typealias ssl_crock_st = CPointer<ssl_st>

typealias TLS_SESSION_TICKET_EXT = tls_session_ticket_ext_st

typealias SSL_METHOD = ssl_method_st

typealias SSL_CIPHER = ssl_cipher_st

typealias SSL_SESSION = ssl_session_st

typealias TLS_SIGALGS = tls_sigalgs_st

typealias SSL_CONF_CTX = ssl_conf_ctx_st

typealias SSL_COMP = ssl_comp_st

typealias SRTP_PROTECTION_PROFILE = srtp_protection_profile_st

typealias sk_SRTP_PROTECTION_PROFILE_compfuncVar = CPointerVarOf<sk_SRTP_PROTECTION_PROFILE_compfunc>
typealias sk_SRTP_PROTECTION_PROFILE_compfunc = CPointer<CFunction<(CPointer<CPointerVar<SRTP_PROTECTION_PROFILE>>?, CPointer<CPointerVar<SRTP_PROTECTION_PROFILE>>?) -> Int>>

typealias sk_SRTP_PROTECTION_PROFILE_freefuncVar = CPointerVarOf<sk_SRTP_PROTECTION_PROFILE_freefunc>
typealias sk_SRTP_PROTECTION_PROFILE_freefunc = CPointer<CFunction<(CPointer<SRTP_PROTECTION_PROFILE>?) -> Unit>>

typealias sk_SRTP_PROTECTION_PROFILE_copyfuncVar = CPointerVarOf<sk_SRTP_PROTECTION_PROFILE_copyfunc>
typealias sk_SRTP_PROTECTION_PROFILE_copyfunc = CPointer<CFunction<(CPointer<SRTP_PROTECTION_PROFILE>?) -> CPointer<SRTP_PROTECTION_PROFILE>?>>

typealias tls_session_ticket_ext_cb_fnVar = CPointerVarOf<tls_session_ticket_ext_cb_fn>
typealias tls_session_ticket_ext_cb_fn = CPointer<CFunction<(CPointer<SSL>?, CPointer<UByteVar>?, Int, COpaquePointer?) -> Int>>

typealias tls_session_secret_cb_fnVar = CPointerVarOf<tls_session_secret_cb_fn>
typealias tls_session_secret_cb_fn = CPointer<CFunction<(CPointer<SSL>?, COpaquePointer?, CPointer<IntVar>?, CPointer<stack_st_SSL_CIPHER>?, CPointer<CPointerVar<SSL_CIPHER>>?, COpaquePointer?) -> Int>>

typealias custom_ext_add_cbVar = CPointerVarOf<custom_ext_add_cb>
typealias custom_ext_add_cb = CPointer<CFunction<(CPointer<SSL>?, UInt, CPointer<CPointerVar<UByteVar>>?, CPointer<size_tVar>?, CPointer<IntVar>?, COpaquePointer?) -> Int>>

typealias custom_ext_free_cbVar = CPointerVarOf<custom_ext_free_cb>
typealias custom_ext_free_cb = CPointer<CFunction<(CPointer<SSL>?, UInt, CPointer<UByteVar>?, COpaquePointer?) -> Unit>>

typealias custom_ext_parse_cbVar = CPointerVarOf<custom_ext_parse_cb>
typealias custom_ext_parse_cb = CPointer<CFunction<(CPointer<SSL>?, UInt, CPointer<UByteVar>?, size_t, CPointer<IntVar>?, COpaquePointer?) -> Int>>

typealias SSL_verify_cbVar = CPointerVarOf<SSL_verify_cb>
typealias SSL_verify_cb = CPointer<CFunction<(Int, CPointer<X509_STORE_CTX>?) -> Int>>

typealias GEN_SESSION_CBVar = CPointerVarOf<GEN_SESSION_CB>
typealias GEN_SESSION_CB = CPointer<CFunction<(CPointer<SSL>?, CPointer<UByteVar>?, CPointer<UIntVar>?) -> Int>>

typealias sk_SSL_CIPHER_compfuncVar = CPointerVarOf<sk_SSL_CIPHER_compfunc>
typealias sk_SSL_CIPHER_compfunc = CPointer<CFunction<(CPointer<CPointerVar<SSL_CIPHER>>?, CPointer<CPointerVar<SSL_CIPHER>>?) -> Int>>

typealias sk_SSL_CIPHER_freefuncVar = CPointerVarOf<sk_SSL_CIPHER_freefunc>
typealias sk_SSL_CIPHER_freefunc = CPointer<CFunction<(CPointer<SSL_CIPHER>?) -> Unit>>

typealias sk_SSL_CIPHER_copyfuncVar = CPointerVarOf<sk_SSL_CIPHER_copyfunc>
typealias sk_SSL_CIPHER_copyfunc = CPointer<CFunction<(CPointer<SSL_CIPHER>?) -> CPointer<SSL_CIPHER>?>>

typealias sk_SSL_COMP_compfuncVar = CPointerVarOf<sk_SSL_COMP_compfunc>
typealias sk_SSL_COMP_compfunc = CPointer<CFunction<(CPointer<CPointerVar<SSL_COMP>>?, CPointer<CPointerVar<SSL_COMP>>?) -> Int>>

typealias sk_SSL_COMP_freefuncVar = CPointerVarOf<sk_SSL_COMP_freefunc>
typealias sk_SSL_COMP_freefunc = CPointer<CFunction<(CPointer<SSL_COMP>?) -> Unit>>

typealias sk_SSL_COMP_copyfuncVar = CPointerVarOf<sk_SSL_COMP_copyfunc>
typealias sk_SSL_COMP_copyfunc = CPointer<CFunction<(CPointer<SSL_COMP>?) -> CPointer<SSL_COMP>?>>

typealias ssl_ct_validation_cbVar = CPointerVarOf<ssl_ct_validation_cb>
typealias ssl_ct_validation_cb = CPointer<CFunction<(CPointer<CT_POLICY_EVAL_CTX>?, CPointer<stack_st_SCT>?, COpaquePointer?) -> Int>>

typealias ERR_STATE = err_state_st

typealias ERR_STRING_DATA = ERR_string_data_st

typealias lws_usec_tVar = LongVarOf<lws_usec_t>
typealias lws_usec_t = int64_t

typealias lws_sockfd_typeVar = IntVarOf<lws_sockfd_type>
typealias lws_sockfd_type = Int

typealias lws_filefd_typeVar = IntVarOf<lws_filefd_type>
typealias lws_filefd_type = Int

typealias lws_filepos_tVar = ULongVarOf<lws_filepos_t>
typealias lws_filepos_t = ULong

typealias lws_fileofs_tVar = LongVarOf<lws_fileofs_t>
typealias lws_fileofs_t = Long

typealias lws_fop_flags_tVar = UIntVarOf<lws_fop_flags_t>
typealias lws_fop_flags_t = uint32_t

typealias lws_extension_callback_function = CFunction<(CPointer<lws_context>?, CPointer<lws_extension>?, CPointer<lws>?, lws_extension_callback_reasons, COpaquePointer?, COpaquePointer?, size_t) -> Int>

typealias lws_callback_function = CFunction<(CPointer<lws>?, lws_callback_reasons, COpaquePointer?, COpaquePointer?, size_t) -> Int>

typealias lws_fop_fd_tVar = CPointerVarOf<lws_fop_fd_t>
typealias lws_fop_fd_t = CPointer<lws_fop_fd>

typealias lws_reload_funcVar = CPointerVarOf<lws_reload_func>
typealias lws_reload_func = CPointer<CFunction<() -> Int>>

typealias lws_process_html_state_cbVar = CPointerVarOf<lws_process_html_state_cb>
typealias lws_process_html_state_cb = CPointer<CFunction<(COpaquePointer?, Int) -> CPointer<ByteVar>?>>

typealias lws_spa_fileupload_cbVar = CPointerVarOf<lws_spa_fileupload_cb>
typealias lws_spa_fileupload_cb = CPointer<CFunction<(COpaquePointer?, CPointer<ByteVar>?, CPointer<ByteVar>?, CPointer<ByteVar>?, Int, lws_spa_fileupload_states) -> Int>>

typealias lejp_callbackVar = CPointerVarOf<lejp_callback>
typealias lejp_callback = CPointer<CFunction<(CPointer<lejp_ctx>?, Byte) -> Byte>>

typealias lwsac_cached_file_tVar = CPointerVarOf<lwsac_cached_file_t>
typealias lwsac_cached_file_t = CPointer<UByteVar>

typealias lws_list_ptrVar = CPointerVarOf<lws_list_ptr>
typealias lws_list_ptr = COpaquePointer

typealias lws_list_ptr_sort_func_tVar = CPointerVarOf<lws_list_ptr_sort_func_t>
typealias lws_list_ptr_sort_func_t = CPointer<CFunction<(lws_list_ptr?, lws_list_ptr?) -> Int>>

typealias lws_jwk_key_import_callbackVar = CPointerVarOf<lws_jwk_key_import_callback>
typealias lws_jwk_key_import_callback = CPointer<CFunction<(CPointer<lws_jwk>?, COpaquePointer?) -> Int>>

@SymbolName("libwebsockets_kniBridge0")
private external fun kniBridge0(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge1")
private external fun kniBridge1(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge2")
private external fun kniBridge2(p0: NativePtr, p1: NativePtr, p2: Int, p3: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge3")
private external fun kniBridge3(p0: NativePtr, p1: Int, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4")
private external fun kniBridge4(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge5")
private external fun kniBridge5(p0: NativePtr, p1: Int, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge6")
private external fun kniBridge6(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge7")
private external fun kniBridge7(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge8")
private external fun kniBridge8(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge9")
private external fun kniBridge9(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge10")
private external fun kniBridge10(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge11")
private external fun kniBridge11(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge12")
private external fun kniBridge12(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge13")
private external fun kniBridge13(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge14")
private external fun kniBridge14(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge15")
private external fun kniBridge15(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge16")
private external fun kniBridge16(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge17")
private external fun kniBridge17(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge18")
private external fun kniBridge18(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge19")
private external fun kniBridge19(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge20")
private external fun kniBridge20(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge21")
private external fun kniBridge21(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge22")
private external fun kniBridge22(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge23")
private external fun kniBridge23(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge24")
private external fun kniBridge24(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge25")
private external fun kniBridge25(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge26")
private external fun kniBridge26(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge27")
private external fun kniBridge27(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge28")
private external fun kniBridge28(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge29")
private external fun kniBridge29(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge30")
private external fun kniBridge30(p0: Int, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge31")
private external fun kniBridge31(p0: Int, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge32")
private external fun kniBridge32(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge33")
private external fun kniBridge33(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("libwebsockets_kniBridge34")
private external fun kniBridge34(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge35")
private external fun kniBridge35(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge36")
private external fun kniBridge36(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge37")
private external fun kniBridge37(p0: Int): Int
@SymbolName("libwebsockets_kniBridge38")
private external fun kniBridge38(p0: Long): Int
@SymbolName("libwebsockets_kniBridge39")
private external fun kniBridge39(p0: Long): Int
@SymbolName("libwebsockets_kniBridge40")
private external fun kniBridge40(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge41")
private external fun kniBridge41(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge42")
private external fun kniBridge42(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge43")
private external fun kniBridge43(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge44")
private external fun kniBridge44(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge45")
private external fun kniBridge45(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge46")
private external fun kniBridge46(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge47")
private external fun kniBridge47(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge48")
private external fun kniBridge48(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge49")
private external fun kniBridge49(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge50")
private external fun kniBridge50(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge51")
private external fun kniBridge51(): ULong
@SymbolName("libwebsockets_kniBridge52")
private external fun kniBridge52(p0: NativePtr): Double
@SymbolName("libwebsockets_kniBridge53")
private external fun kniBridge53(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge54")
private external fun kniBridge54(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge55")
private external fun kniBridge55(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge56")
private external fun kniBridge56(p0: NativePtr, p1: NativePtr): Double
@SymbolName("libwebsockets_kniBridge57")
private external fun kniBridge57(p0: NativePtr, p1: NativePtr): Float
@SymbolName("libwebsockets_kniBridge58")
private external fun kniBridge58(p0: NativePtr, p1: NativePtr, p2: Int): Long
@SymbolName("libwebsockets_kniBridge59")
private external fun kniBridge59(p0: NativePtr, p1: NativePtr, p2: Int): ULong
@SymbolName("libwebsockets_kniBridge60")
private external fun kniBridge60(p0: NativePtr, p1: NativePtr, p2: Int): Long
@SymbolName("libwebsockets_kniBridge61")
private external fun kniBridge61(p0: NativePtr, p1: NativePtr, p2: Int): ULong
@SymbolName("libwebsockets_kniBridge62")
private external fun kniBridge62(p0: NativePtr, p1: NativePtr, p2: Int): Long
@SymbolName("libwebsockets_kniBridge63")
private external fun kniBridge63(p0: NativePtr, p1: NativePtr, p2: Int): ULong
@SymbolName("libwebsockets_kniBridge64")
private external fun kniBridge64(p0: Long): NativePtr
@SymbolName("libwebsockets_kniBridge65")
private external fun kniBridge65(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge66")
private external fun kniBridge66(p0: UShort): UShort
@SymbolName("libwebsockets_kniBridge67")
private external fun kniBridge67(p0: UInt): UInt
@SymbolName("libwebsockets_kniBridge68")
private external fun kniBridge68(p0: ULong): ULong
@SymbolName("libwebsockets_kniBridge69")
private external fun kniBridge69(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge70")
private external fun kniBridge70(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge71")
private external fun kniBridge71(p0: ULong): UInt
@SymbolName("libwebsockets_kniBridge72")
private external fun kniBridge72(p0: ULong): UInt
@SymbolName("libwebsockets_kniBridge73")
private external fun kniBridge73(p0: UInt, p1: UInt): ULong
@SymbolName("libwebsockets_kniBridge74")
private external fun kniBridge74(): Long
@SymbolName("libwebsockets_kniBridge75")
private external fun kniBridge75(p0: UInt): Unit
@SymbolName("libwebsockets_kniBridge76")
private external fun kniBridge76(p0: UInt, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge77")
private external fun kniBridge77(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge78")
private external fun kniBridge78(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge79")
private external fun kniBridge79(p0: UInt, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge80")
private external fun kniBridge80(p0: UInt, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge81")
private external fun kniBridge81(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge82")
private external fun kniBridge82(): Int
@SymbolName("libwebsockets_kniBridge83")
private external fun kniBridge83(p0: UInt): Unit
@SymbolName("libwebsockets_kniBridge84")
private external fun kniBridge84(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge85")
private external fun kniBridge85(): Double
@SymbolName("libwebsockets_kniBridge86")
private external fun kniBridge86(p0: NativePtr): Double
@SymbolName("libwebsockets_kniBridge87")
private external fun kniBridge87(): Long
@SymbolName("libwebsockets_kniBridge88")
private external fun kniBridge88(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge89")
private external fun kniBridge89(): Long
@SymbolName("libwebsockets_kniBridge90")
private external fun kniBridge90(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge91")
private external fun kniBridge91(p0: Long): Unit
@SymbolName("libwebsockets_kniBridge92")
private external fun kniBridge92(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge93")
private external fun kniBridge93(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge94")
private external fun kniBridge94(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge95")
private external fun kniBridge95(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge96")
private external fun kniBridge96(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge97")
private external fun kniBridge97(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge98")
private external fun kniBridge98(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge99")
private external fun kniBridge99(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge100")
private external fun kniBridge100(p0: Long, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge101")
private external fun kniBridge101(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge102")
private external fun kniBridge102(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge103")
private external fun kniBridge103(p0: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge104")
private external fun kniBridge104(p0: ULong, p1: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge105")
private external fun kniBridge105(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge106")
private external fun kniBridge106(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge107")
private external fun kniBridge107(p0: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge108")
private external fun kniBridge108(p0: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge109")
private external fun kniBridge109(p0: NativePtr, p1: ULong, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge110")
private external fun kniBridge110(p0: ULong, p1: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge111")
private external fun kniBridge111(): Unit
@SymbolName("libwebsockets_kniBridge112")
private external fun kniBridge112(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge113")
private external fun kniBridge113(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge114")
private external fun kniBridge114(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge115")
private external fun kniBridge115(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge116")
private external fun kniBridge116(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge117")
private external fun kniBridge117(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge118")
private external fun kniBridge118(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge119")
private external fun kniBridge119(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge120")
private external fun kniBridge120(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge121")
private external fun kniBridge121(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge122")
private external fun kniBridge122(): Int
@SymbolName("libwebsockets_kniBridge123")
private external fun kniBridge123(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge124")
private external fun kniBridge124(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge125")
private external fun kniBridge125(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge126")
private external fun kniBridge126(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge127")
private external fun kniBridge127(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge128")
private external fun kniBridge128(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge129")
private external fun kniBridge129(p0: NativePtr, p1: NativePtr, p2: ULong, p3: ULong, p4: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge130")
private external fun kniBridge130(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge131")
private external fun kniBridge131(p0: Int): Int
@SymbolName("libwebsockets_kniBridge132")
private external fun kniBridge132(p0: Long): Long
@SymbolName("libwebsockets_kniBridge133")
private external fun kniBridge133(p0: Long): Long
@SymbolName("libwebsockets_kniBridge134")
private external fun kniBridge134(p0: Int, p1: Int, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge135")
private external fun kniBridge135(p0: Long, p1: Long, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge136")
private external fun kniBridge136(p0: Long, p1: Long, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge137")
private external fun kniBridge137(p0: Double, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge138")
private external fun kniBridge138(p0: Double, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge139")
private external fun kniBridge139(p0: Double, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge140")
private external fun kniBridge140(p0: Double, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: ULong): Int
@SymbolName("libwebsockets_kniBridge141")
private external fun kniBridge141(p0: Double, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: ULong): Int
@SymbolName("libwebsockets_kniBridge142")
private external fun kniBridge142(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge143")
private external fun kniBridge143(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge144")
private external fun kniBridge144(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge145")
private external fun kniBridge145(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge146")
private external fun kniBridge146(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge147")
private external fun kniBridge147(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge148")
private external fun kniBridge148(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge149")
private external fun kniBridge149(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge150")
private external fun kniBridge150(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge151")
private external fun kniBridge151(p0: Int, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge152")
private external fun kniBridge152(p0: Int, p1: Long, p2: Int): Long
@SymbolName("libwebsockets_kniBridge153")
private external fun kniBridge153(p0: Int): Int
@SymbolName("libwebsockets_kniBridge154")
private external fun kniBridge154(p0: Int, p1: NativePtr, p2: ULong): Long
@SymbolName("libwebsockets_kniBridge155")
private external fun kniBridge155(p0: Int, p1: NativePtr, p2: ULong): Long
@SymbolName("libwebsockets_kniBridge156")
private external fun kniBridge156(p0: Int, p1: NativePtr, p2: ULong, p3: Long): Long
@SymbolName("libwebsockets_kniBridge157")
private external fun kniBridge157(p0: Int, p1: NativePtr, p2: ULong, p3: Long): Long
@SymbolName("libwebsockets_kniBridge158")
private external fun kniBridge158(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge159")
private external fun kniBridge159(p0: UInt): UInt
@SymbolName("libwebsockets_kniBridge160")
private external fun kniBridge160(p0: UInt): UInt
@SymbolName("libwebsockets_kniBridge161")
private external fun kniBridge161(p0: UInt, p1: UInt): UInt
@SymbolName("libwebsockets_kniBridge162")
private external fun kniBridge162(p0: UInt): Int
@SymbolName("libwebsockets_kniBridge163")
private external fun kniBridge163(): Int
@SymbolName("libwebsockets_kniBridge164")
private external fun kniBridge164(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge165")
private external fun kniBridge165(p0: Int, p1: UInt, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge166")
private external fun kniBridge166(p0: NativePtr, p1: UInt, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge167")
private external fun kniBridge167(p0: Int, p1: NativePtr, p2: UInt, p3: UInt, p4: Int): Int
@SymbolName("libwebsockets_kniBridge168")
private external fun kniBridge168(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge169")
private external fun kniBridge169(p0: Int): Int
@SymbolName("libwebsockets_kniBridge170")
private external fun kniBridge170(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge171")
private external fun kniBridge171(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge172")
private external fun kniBridge172(p0: Int): Int
@SymbolName("libwebsockets_kniBridge173")
private external fun kniBridge173(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge174")
private external fun kniBridge174(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge175")
private external fun kniBridge175(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge176")
private external fun kniBridge176(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge177")
private external fun kniBridge177(): NativePtr
@SymbolName("libwebsockets_kniBridge178")
private external fun kniBridge178(): NativePtr
@SymbolName("libwebsockets_kniBridge179")
private external fun kniBridge179(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge180")
private external fun kniBridge180(): NativePtr
@SymbolName("libwebsockets_kniBridge181")
private external fun kniBridge181(p0: Int): Int
@SymbolName("libwebsockets_kniBridge182")
private external fun kniBridge182(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge183")
private external fun kniBridge183(p0: NativePtr, p1: Int): Long
@SymbolName("libwebsockets_kniBridge184")
private external fun kniBridge184(p0: Int, p1: Int): Long
@SymbolName("libwebsockets_kniBridge185")
private external fun kniBridge185(p0: Int): Long
@SymbolName("libwebsockets_kniBridge186")
private external fun kniBridge186(p0: Int, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge187")
private external fun kniBridge187(): Int
@SymbolName("libwebsockets_kniBridge188")
private external fun kniBridge188(): Int
@SymbolName("libwebsockets_kniBridge189")
private external fun kniBridge189(): Int
@SymbolName("libwebsockets_kniBridge190")
private external fun kniBridge190(p0: Int): Int
@SymbolName("libwebsockets_kniBridge191")
private external fun kniBridge191(p0: Int): Int
@SymbolName("libwebsockets_kniBridge192")
private external fun kniBridge192(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge193")
private external fun kniBridge193(): Int
@SymbolName("libwebsockets_kniBridge194")
private external fun kniBridge194(): Int
@SymbolName("libwebsockets_kniBridge195")
private external fun kniBridge195(p0: Int): Int
@SymbolName("libwebsockets_kniBridge196")
private external fun kniBridge196(): UInt
@SymbolName("libwebsockets_kniBridge197")
private external fun kniBridge197(): UInt
@SymbolName("libwebsockets_kniBridge198")
private external fun kniBridge198(): UInt
@SymbolName("libwebsockets_kniBridge199")
private external fun kniBridge199(): UInt
@SymbolName("libwebsockets_kniBridge200")
private external fun kniBridge200(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge201")
private external fun kniBridge201(p0: UInt): Int
@SymbolName("libwebsockets_kniBridge202")
private external fun kniBridge202(p0: UInt, p1: UInt): Int
@SymbolName("libwebsockets_kniBridge203")
private external fun kniBridge203(p0: UInt): Int
@SymbolName("libwebsockets_kniBridge204")
private external fun kniBridge204(p0: UInt): Int
@SymbolName("libwebsockets_kniBridge205")
private external fun kniBridge205(p0: UInt, p1: UInt): Int
@SymbolName("libwebsockets_kniBridge206")
private external fun kniBridge206(p0: UInt): Int
@SymbolName("libwebsockets_kniBridge207")
private external fun kniBridge207(): Int
@SymbolName("libwebsockets_kniBridge208")
private external fun kniBridge208(): Int
@SymbolName("libwebsockets_kniBridge209")
private external fun kniBridge209(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge210")
private external fun kniBridge210(p0: Int, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge211")
private external fun kniBridge211(p0: Int): Int
@SymbolName("libwebsockets_kniBridge212")
private external fun kniBridge212(): Int
@SymbolName("libwebsockets_kniBridge213")
private external fun kniBridge213(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge214")
private external fun kniBridge214(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge215")
private external fun kniBridge215(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge216")
private external fun kniBridge216(p0: NativePtr, p1: NativePtr, p2: ULong): Long
@SymbolName("libwebsockets_kniBridge217")
private external fun kniBridge217(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge218")
private external fun kniBridge218(p0: Int, p1: NativePtr, p2: NativePtr, p3: ULong): Long
@SymbolName("libwebsockets_kniBridge219")
private external fun kniBridge219(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge220")
private external fun kniBridge220(p0: Int, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge221")
private external fun kniBridge221(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge222")
private external fun kniBridge222(p0: Int): Int
@SymbolName("libwebsockets_kniBridge223")
private external fun kniBridge223(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge224")
private external fun kniBridge224(): NativePtr
@SymbolName("libwebsockets_kniBridge225")
private external fun kniBridge225(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge226")
private external fun kniBridge226(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge227")
private external fun kniBridge227(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge228")
private external fun kniBridge228(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge229")
private external fun kniBridge229(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge230")
private external fun kniBridge230(p0: Long): Int
@SymbolName("libwebsockets_kniBridge231")
private external fun kniBridge231(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge232")
private external fun kniBridge232(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge233")
private external fun kniBridge233(): Int
@SymbolName("libwebsockets_kniBridge234")
private external fun kniBridge234(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge235")
private external fun kniBridge235(p0: NativePtr, p1: ULong, p2: ULong, p3: UInt): Int
@SymbolName("libwebsockets_kniBridge236")
private external fun kniBridge236(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge237")
private external fun kniBridge237(): NativePtr
@SymbolName("libwebsockets_kniBridge238")
private external fun kniBridge238(): Unit
@SymbolName("libwebsockets_kniBridge239")
private external fun kniBridge239(): Unit
@SymbolName("libwebsockets_kniBridge240")
private external fun kniBridge240(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge241")
private external fun kniBridge241(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge242")
private external fun kniBridge242(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge243")
private external fun kniBridge243(p0: Int): Int
@SymbolName("libwebsockets_kniBridge244")
private external fun kniBridge244(): Long
@SymbolName("libwebsockets_kniBridge245")
private external fun kniBridge245(): Unit
@SymbolName("libwebsockets_kniBridge246")
private external fun kniBridge246(): Int
@SymbolName("libwebsockets_kniBridge247")
private external fun kniBridge247(): Int
@SymbolName("libwebsockets_kniBridge248")
private external fun kniBridge248(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge249")
private external fun kniBridge249(p0: Int, p1: Long): Int
@SymbolName("libwebsockets_kniBridge250")
private external fun kniBridge250(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge251")
private external fun kniBridge251(p0: Long): NativePtr
@SymbolName("libwebsockets_kniBridge252")
private external fun kniBridge252(): NativePtr
@SymbolName("libwebsockets_kniBridge253")
private external fun kniBridge253(p0: Int, p1: Int, p2: Long): Int
@SymbolName("libwebsockets_kniBridge254")
private external fun kniBridge254(p0: Int): Int
@SymbolName("libwebsockets_kniBridge255")
private external fun kniBridge255(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge256")
private external fun kniBridge256(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge257")
private external fun kniBridge257(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge258")
private external fun kniBridge258(): NativePtr
@SymbolName("libwebsockets_kniBridge259")
private external fun kniBridge259(p0: NativePtr, p1: Int, p2: UInt, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge260")
private external fun kniBridge260(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: UInt): Int
@SymbolName("libwebsockets_kniBridge261")
private external fun kniBridge261(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge262")
private external fun kniBridge262(p0: NativePtr, p1: UInt): Int
@SymbolName("libwebsockets_kniBridge263")
private external fun kniBridge263(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge264")
private external fun kniBridge264(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge265")
private external fun kniBridge265(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge266")
private external fun kniBridge266(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge267")
private external fun kniBridge267(): NativePtr
@SymbolName("libwebsockets_kniBridge268")
private external fun kniBridge268(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge269")
private external fun kniBridge269(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge270")
private external fun kniBridge270(p0: Int): Int
@SymbolName("libwebsockets_kniBridge271")
private external fun kniBridge271(p0: Int): Int
@SymbolName("libwebsockets_kniBridge272")
private external fun kniBridge272(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge273")
private external fun kniBridge273(p0: NativePtr, p1: NativePtr, p2: Long): Long
@SymbolName("libwebsockets_kniBridge274")
private external fun kniBridge274(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge275")
private external fun kniBridge275(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge276")
private external fun kniBridge276(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge277")
private external fun kniBridge277(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge278")
private external fun kniBridge278(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge279")
private external fun kniBridge279(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge280")
private external fun kniBridge280(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge281")
private external fun kniBridge281(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge282")
private external fun kniBridge282(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge283")
private external fun kniBridge283(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge284")
private external fun kniBridge284(p0: NativePtr, p1: ULong, p2: Int): Int
@SymbolName("libwebsockets_kniBridge285")
private external fun kniBridge285(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge286")
private external fun kniBridge286(p0: Int, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge287")
private external fun kniBridge287(p0: Int, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge288")
private external fun kniBridge288(p0: Int, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge289")
private external fun kniBridge289(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge290")
private external fun kniBridge290(p0: Int, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge291")
private external fun kniBridge291(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge292")
private external fun kniBridge292(p0: Int, p1: NativePtr, p2: ULong, p3: Int): Long
@SymbolName("libwebsockets_kniBridge293")
private external fun kniBridge293(p0: Int, p1: NativePtr, p2: ULong, p3: Int): Long
@SymbolName("libwebsockets_kniBridge294")
private external fun kniBridge294(p0: Int, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: UInt): Long
@SymbolName("libwebsockets_kniBridge295")
private external fun kniBridge295(p0: Int, p1: NativePtr, p2: ULong, p3: Int, p4: NativePtr, p5: NativePtr): Long
@SymbolName("libwebsockets_kniBridge296")
private external fun kniBridge296(p0: Int, p1: NativePtr, p2: Int): Long
@SymbolName("libwebsockets_kniBridge297")
private external fun kniBridge297(p0: Int, p1: NativePtr, p2: Int): Long
@SymbolName("libwebsockets_kniBridge298")
private external fun kniBridge298(p0: Int, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge299")
private external fun kniBridge299(p0: Int, p1: Int, p2: Int, p3: NativePtr, p4: UInt): Int
@SymbolName("libwebsockets_kniBridge300")
private external fun kniBridge300(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge301")
private external fun kniBridge301(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge302")
private external fun kniBridge302(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge303")
private external fun kniBridge303(p0: Int): Int
@SymbolName("libwebsockets_kniBridge304")
private external fun kniBridge304(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge305")
private external fun kniBridge305(p0: UInt): UInt
@SymbolName("libwebsockets_kniBridge306")
private external fun kniBridge306(p0: UShort): UShort
@SymbolName("libwebsockets_kniBridge307")
private external fun kniBridge307(p0: UInt): UInt
@SymbolName("libwebsockets_kniBridge308")
private external fun kniBridge308(p0: UShort): UShort
@SymbolName("libwebsockets_kniBridge309")
private external fun kniBridge309(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge310")
private external fun kniBridge310(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge311")
private external fun kniBridge311(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge312")
private external fun kniBridge312(): Unit
@SymbolName("libwebsockets_kniBridge313")
private external fun kniBridge313(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge314")
private external fun kniBridge314(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge315")
private external fun kniBridge315(): NativePtr
@SymbolName("libwebsockets_kniBridge316")
private external fun kniBridge316(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge317")
private external fun kniBridge317(p0: Int, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge318")
private external fun kniBridge318(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge319")
private external fun kniBridge319(): NativePtr
@SymbolName("libwebsockets_kniBridge320")
private external fun kniBridge320(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge321")
private external fun kniBridge321(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge322")
private external fun kniBridge322(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge323")
private external fun kniBridge323(): Unit
@SymbolName("libwebsockets_kniBridge324")
private external fun kniBridge324(): NativePtr
@SymbolName("libwebsockets_kniBridge325")
private external fun kniBridge325(p0: NativePtr, p1: UInt, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge326")
private external fun kniBridge326(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge327")
private external fun kniBridge327(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge328")
private external fun kniBridge328(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge329")
private external fun kniBridge329(p0: NativePtr, p1: UInt, p2: Int, p3: NativePtr, p4: NativePtr, p5: ULong, p6: NativePtr, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge330")
private external fun kniBridge330(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge331")
private external fun kniBridge331(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: ULong, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge332")
private external fun kniBridge332(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge333")
private external fun kniBridge333(): Unit
@SymbolName("libwebsockets_kniBridge334")
private external fun kniBridge334(): NativePtr
@SymbolName("libwebsockets_kniBridge335")
private external fun kniBridge335(p0: UInt, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge336")
private external fun kniBridge336(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge337")
private external fun kniBridge337(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge338")
private external fun kniBridge338(p0: UInt, p1: Int, p2: NativePtr, p3: NativePtr, p4: ULong, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge339")
private external fun kniBridge339(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge340")
private external fun kniBridge340(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge341")
private external fun kniBridge341(): Unit
@SymbolName("libwebsockets_kniBridge342")
private external fun kniBridge342(): NativePtr
@SymbolName("libwebsockets_kniBridge343")
private external fun kniBridge343(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge344")
private external fun kniBridge344(p0: Int, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge345")
private external fun kniBridge345(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge346")
private external fun kniBridge346(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge347")
private external fun kniBridge347(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge348")
private external fun kniBridge348(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge349")
private external fun kniBridge349(): Unit
@SymbolName("libwebsockets_kniBridge350")
private external fun kniBridge350(): NativePtr
@SymbolName("libwebsockets_kniBridge351")
private external fun kniBridge351(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge352")
private external fun kniBridge352(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge353")
private external fun kniBridge353(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge354")
private external fun kniBridge354(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge355")
private external fun kniBridge355(p0: Int, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge356")
private external fun kniBridge356(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge357")
private external fun kniBridge357(): Unit
@SymbolName("libwebsockets_kniBridge358")
private external fun kniBridge358(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge359")
private external fun kniBridge359(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge360")
private external fun kniBridge360(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge361")
private external fun kniBridge361(p0: NativePtr, p1: UShort, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge362")
private external fun kniBridge362(p0: NativePtr, p1: UShort, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: UShort): Int
@SymbolName("libwebsockets_kniBridge363")
private external fun kniBridge363(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge364")
private external fun kniBridge364(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: UShort): Int
@SymbolName("libwebsockets_kniBridge365")
private external fun kniBridge365(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge366")
private external fun kniBridge366(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: UShort): Int
@SymbolName("libwebsockets_kniBridge367")
private external fun kniBridge367(p0: UInt, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge368")
private external fun kniBridge368(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: UShort): Int
@SymbolName("libwebsockets_kniBridge369")
private external fun kniBridge369(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge370")
private external fun kniBridge370(p0: NativePtr, p1: UShort): Int
@SymbolName("libwebsockets_kniBridge371")
private external fun kniBridge371(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge372")
private external fun kniBridge372(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge373")
private external fun kniBridge373(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge374")
private external fun kniBridge374(p0: NativePtr, p1: UInt, p2: NativePtr, p3: UInt, p4: NativePtr, p5: UInt, p6: Int): Int
@SymbolName("libwebsockets_kniBridge375")
private external fun kniBridge375(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge376")
private external fun kniBridge376(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge377")
private external fun kniBridge377(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge378")
private external fun kniBridge378(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge379")
private external fun kniBridge379(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge380")
private external fun kniBridge380(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge381")
private external fun kniBridge381(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge382")
private external fun kniBridge382(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge383")
private external fun kniBridge383(p0: Long): Long
@SymbolName("libwebsockets_kniBridge384")
private external fun kniBridge384(p0: Long, p1: Long, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge385")
private external fun kniBridge385(p0: NativePtr, p1: NativePtr, p2: Int): Long
@SymbolName("libwebsockets_kniBridge386")
private external fun kniBridge386(p0: NativePtr, p1: NativePtr, p2: Int): ULong
@SymbolName("libwebsockets_kniBridge387")
private external fun kniBridge387(p0: NativePtr, p1: NativePtr, p2: Int): Long
@SymbolName("libwebsockets_kniBridge388")
private external fun kniBridge388(p0: NativePtr, p1: NativePtr, p2: Int): ULong
@SymbolName("libwebsockets_kniBridge389")
private external fun kniBridge389(): Long
@SymbolName("libwebsockets_kniBridge390")
private external fun kniBridge390(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge391")
private external fun kniBridge391(p0: Long, p1: Long): Double
@SymbolName("libwebsockets_kniBridge392")
private external fun kniBridge392(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge393")
private external fun kniBridge393(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge394")
private external fun kniBridge394(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge395")
private external fun kniBridge395(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge396")
private external fun kniBridge396(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge397")
private external fun kniBridge397(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge398")
private external fun kniBridge398(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge399")
private external fun kniBridge399(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge400")
private external fun kniBridge400(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge401")
private external fun kniBridge401(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge402")
private external fun kniBridge402(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge403")
private external fun kniBridge403(): Unit
@SymbolName("libwebsockets_kniBridge404")
private external fun kniBridge404(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge405")
private external fun kniBridge405(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge406")
private external fun kniBridge406(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge407")
private external fun kniBridge407(p0: Int): Int
@SymbolName("libwebsockets_kniBridge408")
private external fun kniBridge408(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge409")
private external fun kniBridge409(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge410")
private external fun kniBridge410(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge411")
private external fun kniBridge411(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge412")
private external fun kniBridge412(p0: Int, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge413")
private external fun kniBridge413(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge414")
private external fun kniBridge414(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge415")
private external fun kniBridge415(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge416")
private external fun kniBridge416(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge417")
private external fun kniBridge417(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge418")
private external fun kniBridge418(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge419")
private external fun kniBridge419(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge420")
private external fun kniBridge420(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge421")
private external fun kniBridge421(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge422")
private external fun kniBridge422(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge423")
private external fun kniBridge423(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge424")
private external fun kniBridge424(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge425")
private external fun kniBridge425(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge426")
private external fun kniBridge426(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge427")
private external fun kniBridge427(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge428")
private external fun kniBridge428(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge429")
private external fun kniBridge429(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge431")
private external fun kniBridge431(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge432")
private external fun kniBridge432(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge433")
private external fun kniBridge433(p0: NativePtr, p1: Int, p2: Long): Long
@SymbolName("libwebsockets_kniBridge434")
private external fun kniBridge434(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge435")
private external fun kniBridge435(p0: NativePtr, p1: Long, p2: Int, p3: Int): Long
@SymbolName("libwebsockets_kniBridge436")
private external fun kniBridge436(p0: NativePtr, p1: Long, p2: Int): Long
@SymbolName("libwebsockets_kniBridge437")
private external fun kniBridge437(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge438")
private external fun kniBridge438(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge439")
private external fun kniBridge439(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge440")
private external fun kniBridge440(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge441")
private external fun kniBridge441(): NativePtr
@SymbolName("libwebsockets_kniBridge442")
private external fun kniBridge442(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge443")
private external fun kniBridge443(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge444")
private external fun kniBridge444(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge445")
private external fun kniBridge445(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge446")
private external fun kniBridge446(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge447")
private external fun kniBridge447(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge448")
private external fun kniBridge448(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge449")
private external fun kniBridge449(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge450")
private external fun kniBridge450(p0: Int, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge451")
private external fun kniBridge451(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge452")
private external fun kniBridge452(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge453")
private external fun kniBridge453(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge454")
private external fun kniBridge454(p0: NativePtr, p1: NativePtr, p2: Int, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge455")
private external fun kniBridge455(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("libwebsockets_kniBridge456")
private external fun kniBridge456(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge457")
private external fun kniBridge457(): NativePtr
@SymbolName("libwebsockets_kniBridge458")
private external fun kniBridge458(): NativePtr
@SymbolName("libwebsockets_kniBridge459")
private external fun kniBridge459(): NativePtr
@SymbolName("libwebsockets_kniBridge460")
private external fun kniBridge460(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge461")
private external fun kniBridge461(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge462")
private external fun kniBridge462(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge463")
private external fun kniBridge463(): NativePtr
@SymbolName("libwebsockets_kniBridge464")
private external fun kniBridge464(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge465")
private external fun kniBridge465(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge466")
private external fun kniBridge466(): NativePtr
@SymbolName("libwebsockets_kniBridge467")
private external fun kniBridge467(): NativePtr
@SymbolName("libwebsockets_kniBridge468")
private external fun kniBridge468(): NativePtr
@SymbolName("libwebsockets_kniBridge469")
private external fun kniBridge469(): NativePtr
@SymbolName("libwebsockets_kniBridge470")
private external fun kniBridge470(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge471")
private external fun kniBridge471(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge472")
private external fun kniBridge472(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge473")
private external fun kniBridge473(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge474")
private external fun kniBridge474(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge475")
private external fun kniBridge475(): Int
@SymbolName("libwebsockets_kniBridge476")
private external fun kniBridge476(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge477")
private external fun kniBridge477(): Int
@SymbolName("libwebsockets_kniBridge478")
private external fun kniBridge478(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge479")
private external fun kniBridge479(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge480")
private external fun kniBridge480(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge481")
private external fun kniBridge481(p0: Int): Int
@SymbolName("libwebsockets_kniBridge482")
private external fun kniBridge482(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge483")
private external fun kniBridge483(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge484")
private external fun kniBridge484(p0: Int): Int
@SymbolName("libwebsockets_kniBridge485")
private external fun kniBridge485(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge486")
private external fun kniBridge486(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge487")
private external fun kniBridge487(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge488")
private external fun kniBridge488(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Long
@SymbolName("libwebsockets_kniBridge489")
private external fun kniBridge489(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Long
@SymbolName("libwebsockets_kniBridge490")
private external fun kniBridge490(p0: NativePtr, p1: NativePtr, p2: NativePtr): Long
@SymbolName("libwebsockets_kniBridge491")
private external fun kniBridge491(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge492")
private external fun kniBridge492(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge493")
private external fun kniBridge493(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge494")
private external fun kniBridge494(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge495")
private external fun kniBridge495(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge496")
private external fun kniBridge496(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge497")
private external fun kniBridge497(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge498")
private external fun kniBridge498(p0: NativePtr, p1: Long, p2: Int): Int
@SymbolName("libwebsockets_kniBridge499")
private external fun kniBridge499(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge500")
private external fun kniBridge500(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge501")
private external fun kniBridge501(p0: NativePtr, p1: Long, p2: Int): Int
@SymbolName("libwebsockets_kniBridge502")
private external fun kniBridge502(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge503")
private external fun kniBridge503(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge504")
private external fun kniBridge504(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge505")
private external fun kniBridge505(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge506")
private external fun kniBridge506(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge507")
private external fun kniBridge507(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge508")
private external fun kniBridge508(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge509")
private external fun kniBridge509(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge510")
private external fun kniBridge510(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge511")
private external fun kniBridge511(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge512")
private external fun kniBridge512(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge513")
private external fun kniBridge513(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge514")
private external fun kniBridge514(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge515")
private external fun kniBridge515(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge516")
private external fun kniBridge516(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge517")
private external fun kniBridge517(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge518")
private external fun kniBridge518(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge519")
private external fun kniBridge519(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge520")
private external fun kniBridge520(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge521")
private external fun kniBridge521(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge522")
private external fun kniBridge522(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge523")
private external fun kniBridge523(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge524")
private external fun kniBridge524(): NativePtr
@SymbolName("libwebsockets_kniBridge525")
private external fun kniBridge525(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge526")
private external fun kniBridge526(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge527")
private external fun kniBridge527(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge528")
private external fun kniBridge528(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge529")
private external fun kniBridge529(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge530")
private external fun kniBridge530(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge531")
private external fun kniBridge531(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge532")
private external fun kniBridge532(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge533")
private external fun kniBridge533(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge534")
private external fun kniBridge534(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge535")
private external fun kniBridge535(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge536")
private external fun kniBridge536(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge537")
private external fun kniBridge537(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge538")
private external fun kniBridge538(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge539")
private external fun kniBridge539(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge540")
private external fun kniBridge540(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge541")
private external fun kniBridge541(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge542")
private external fun kniBridge542(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge543")
private external fun kniBridge543(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge544")
private external fun kniBridge544(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge545")
private external fun kniBridge545(): NativePtr
@SymbolName("libwebsockets_kniBridge546")
private external fun kniBridge546(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge547")
private external fun kniBridge547(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge548")
private external fun kniBridge548(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge549")
private external fun kniBridge549(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge550")
private external fun kniBridge550(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge551")
private external fun kniBridge551(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge552")
private external fun kniBridge552(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge553")
private external fun kniBridge553(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge554")
private external fun kniBridge554(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge555")
private external fun kniBridge555(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge556")
private external fun kniBridge556(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge557")
private external fun kniBridge557(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge558")
private external fun kniBridge558(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge559")
private external fun kniBridge559(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge560")
private external fun kniBridge560(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge561")
private external fun kniBridge561(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge562")
private external fun kniBridge562(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge563")
private external fun kniBridge563(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge564")
private external fun kniBridge564(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge565")
private external fun kniBridge565(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge566")
private external fun kniBridge566(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge567")
private external fun kniBridge567(): NativePtr
@SymbolName("libwebsockets_kniBridge568")
private external fun kniBridge568(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge569")
private external fun kniBridge569(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge570")
private external fun kniBridge570(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge571")
private external fun kniBridge571(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge572")
private external fun kniBridge572(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge573")
private external fun kniBridge573(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge574")
private external fun kniBridge574(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge575")
private external fun kniBridge575(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge576")
private external fun kniBridge576(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge577")
private external fun kniBridge577(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge578")
private external fun kniBridge578(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge579")
private external fun kniBridge579(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge580")
private external fun kniBridge580(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge581")
private external fun kniBridge581(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge582")
private external fun kniBridge582(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge583")
private external fun kniBridge583(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge584")
private external fun kniBridge584(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge585")
private external fun kniBridge585(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge586")
private external fun kniBridge586(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge587")
private external fun kniBridge587(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge588")
private external fun kniBridge588(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge589")
private external fun kniBridge589(): NativePtr
@SymbolName("libwebsockets_kniBridge590")
private external fun kniBridge590(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge591")
private external fun kniBridge591(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge592")
private external fun kniBridge592(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge593")
private external fun kniBridge593(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge594")
private external fun kniBridge594(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge595")
private external fun kniBridge595(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge596")
private external fun kniBridge596(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge597")
private external fun kniBridge597(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge598")
private external fun kniBridge598(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge599")
private external fun kniBridge599(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge600")
private external fun kniBridge600(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge601")
private external fun kniBridge601(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge602")
private external fun kniBridge602(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge603")
private external fun kniBridge603(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge604")
private external fun kniBridge604(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge605")
private external fun kniBridge605(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge606")
private external fun kniBridge606(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge607")
private external fun kniBridge607(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge608")
private external fun kniBridge608(): NativePtr
@SymbolName("libwebsockets_kniBridge609")
private external fun kniBridge609(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge610")
private external fun kniBridge610(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge611")
private external fun kniBridge611(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge612")
private external fun kniBridge612(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge613")
private external fun kniBridge613(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge614")
private external fun kniBridge614(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge615")
private external fun kniBridge615(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge616")
private external fun kniBridge616(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge617")
private external fun kniBridge617(): NativePtr
@SymbolName("libwebsockets_kniBridge618")
private external fun kniBridge618(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge619")
private external fun kniBridge619(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge620")
private external fun kniBridge620(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge621")
private external fun kniBridge621(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge622")
private external fun kniBridge622(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge623")
private external fun kniBridge623(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge624")
private external fun kniBridge624(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge625")
private external fun kniBridge625(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge626")
private external fun kniBridge626(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge627")
private external fun kniBridge627(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge628")
private external fun kniBridge628(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge629")
private external fun kniBridge629(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge630")
private external fun kniBridge630(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge631")
private external fun kniBridge631(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge632")
private external fun kniBridge632(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge633")
private external fun kniBridge633(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge634")
private external fun kniBridge634(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge635")
private external fun kniBridge635(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge636")
private external fun kniBridge636(p0: Int): Int
@SymbolName("libwebsockets_kniBridge637")
private external fun kniBridge637(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge638")
private external fun kniBridge638(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge639")
private external fun kniBridge639(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge640")
private external fun kniBridge640(p0: NativePtr, p1: Long): NativePtr
@SymbolName("libwebsockets_kniBridge641")
private external fun kniBridge641(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge642")
private external fun kniBridge642(p0: UByte): Int
@SymbolName("libwebsockets_kniBridge643")
private external fun kniBridge643(): ULong
@SymbolName("libwebsockets_kniBridge644")
private external fun kniBridge644(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge645")
private external fun kniBridge645(): Int
@SymbolName("libwebsockets_kniBridge646")
private external fun kniBridge646(p0: Int, p1: Long, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge647")
private external fun kniBridge647(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge648")
private external fun kniBridge648(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge649")
private external fun kniBridge649(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge650")
private external fun kniBridge650(p0: Int, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge651")
private external fun kniBridge651(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge652")
private external fun kniBridge652(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge653")
private external fun kniBridge653(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge654")
private external fun kniBridge654(p0: Int): Int
@SymbolName("libwebsockets_kniBridge655")
private external fun kniBridge655(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge656")
private external fun kniBridge656(p0: ULong, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge657")
private external fun kniBridge657(p0: ULong, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge658")
private external fun kniBridge658(p0: NativePtr, p1: ULong, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge659")
private external fun kniBridge659(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge660")
private external fun kniBridge660(p0: NativePtr, p1: ULong, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge661")
private external fun kniBridge661(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libwebsockets_kniBridge662")
private external fun kniBridge662(p0: NativePtr, p1: ULong, p2: NativePtr, p3: Int): Unit
@SymbolName("libwebsockets_kniBridge663")
private external fun kniBridge663(p0: NativePtr, p1: ULong, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge664")
private external fun kniBridge664(p0: NativePtr, p1: ULong, p2: ULong, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge665")
private external fun kniBridge665(p0: ULong, p1: Int): Int
@SymbolName("libwebsockets_kniBridge666")
private external fun kniBridge666(): Int
@SymbolName("libwebsockets_kniBridge667")
private external fun kniBridge667(p0: ULong, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge668")
private external fun kniBridge668(p0: ULong, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge669")
private external fun kniBridge669(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libwebsockets_kniBridge670")
private external fun kniBridge670(p0: NativePtr, p1: ULong, p2: NativePtr, p3: Int): Unit
@SymbolName("libwebsockets_kniBridge671")
private external fun kniBridge671(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge672")
private external fun kniBridge672(): Int
@SymbolName("libwebsockets_kniBridge673")
private external fun kniBridge673(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge674")
private external fun kniBridge674(): ULong
@SymbolName("libwebsockets_kniBridge675")
private external fun kniBridge675(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge676")
private external fun kniBridge676(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libwebsockets_kniBridge677")
private external fun kniBridge677(): Int
@SymbolName("libwebsockets_kniBridge678")
private external fun kniBridge678(): Int
@SymbolName("libwebsockets_kniBridge679")
private external fun kniBridge679(p0: Int): Int
@SymbolName("libwebsockets_kniBridge680")
private external fun kniBridge680(): Unit
@SymbolName("libwebsockets_kniBridge681")
private external fun kniBridge681(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge682")
private external fun kniBridge682(p0: NativePtr, p1: Int, p2: Long): Int
@SymbolName("libwebsockets_kniBridge683")
private external fun kniBridge683(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge684")
private external fun kniBridge684(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge685")
private external fun kniBridge685(): Unit
@SymbolName("libwebsockets_kniBridge686")
private external fun kniBridge686(p0: ULong, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge687")
private external fun kniBridge687(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge688")
private external fun kniBridge688(): Unit
@SymbolName("libwebsockets_kniBridge689")
private external fun kniBridge689(): NativePtr
@SymbolName("libwebsockets_kniBridge690")
private external fun kniBridge690(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge691")
private external fun kniBridge691(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge692")
private external fun kniBridge692(p0: ULong, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge693")
private external fun kniBridge693(p0: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge694")
private external fun kniBridge694(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge695")
private external fun kniBridge695(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge696")
private external fun kniBridge696(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge697")
private external fun kniBridge697(p0: Int, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge698")
private external fun kniBridge698(p0: Int): Int
@SymbolName("libwebsockets_kniBridge699")
private external fun kniBridge699(): Int
@SymbolName("libwebsockets_kniBridge700")
private external fun kniBridge700(p0: Int): Int
@SymbolName("libwebsockets_kniBridge701")
private external fun kniBridge701(p0: Int): Int
@SymbolName("libwebsockets_kniBridge702")
private external fun kniBridge702(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge703")
private external fun kniBridge703(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge704")
private external fun kniBridge704(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge705")
private external fun kniBridge705(p0: ULong, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge706")
private external fun kniBridge706(p0: ULong): Int
@SymbolName("libwebsockets_kniBridge707")
private external fun kniBridge707(): ULong
@SymbolName("libwebsockets_kniBridge708")
private external fun kniBridge708(p0: ULong, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge709")
private external fun kniBridge709(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge710")
private external fun kniBridge710(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge711")
private external fun kniBridge711(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge712")
private external fun kniBridge712(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge713")
private external fun kniBridge713(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge714")
private external fun kniBridge714(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge715")
private external fun kniBridge715(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge716")
private external fun kniBridge716(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge717")
private external fun kniBridge717(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge718")
private external fun kniBridge718(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge719")
private external fun kniBridge719(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge720")
private external fun kniBridge720(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge721")
private external fun kniBridge721(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge722")
private external fun kniBridge722(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge723")
private external fun kniBridge723(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge724")
private external fun kniBridge724(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge725")
private external fun kniBridge725(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge726")
private external fun kniBridge726(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge727")
private external fun kniBridge727(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge728")
private external fun kniBridge728(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge729")
private external fun kniBridge729(p0: ULong, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge730")
private external fun kniBridge730(p0: ULong, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge731")
private external fun kniBridge731(p0: ULong, p1: Int): Int
@SymbolName("libwebsockets_kniBridge732")
private external fun kniBridge732(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge733")
private external fun kniBridge733(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge734")
private external fun kniBridge734(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge735")
private external fun kniBridge735(p0: ULong): Int
@SymbolName("libwebsockets_kniBridge736")
private external fun kniBridge736(): Unit
@SymbolName("libwebsockets_kniBridge737")
private external fun kniBridge737(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge738")
private external fun kniBridge738(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge739")
private external fun kniBridge739(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge740")
private external fun kniBridge740(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge741")
private external fun kniBridge741(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge742")
private external fun kniBridge742(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge743")
private external fun kniBridge743(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge744")
private external fun kniBridge744(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge745")
private external fun kniBridge745(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge746")
private external fun kniBridge746(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge747")
private external fun kniBridge747(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge748")
private external fun kniBridge748(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge749")
private external fun kniBridge749(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge750")
private external fun kniBridge750(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge751")
private external fun kniBridge751(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge752")
private external fun kniBridge752(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge753")
private external fun kniBridge753(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge754")
private external fun kniBridge754(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge755")
private external fun kniBridge755(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge756")
private external fun kniBridge756(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge757")
private external fun kniBridge757(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge758")
private external fun kniBridge758(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge759")
private external fun kniBridge759(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge760")
private external fun kniBridge760(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge761")
private external fun kniBridge761(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge762")
private external fun kniBridge762(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge763")
private external fun kniBridge763(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge764")
private external fun kniBridge764(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge765")
private external fun kniBridge765(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge766")
private external fun kniBridge766(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge767")
private external fun kniBridge767(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge768")
private external fun kniBridge768(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge769")
private external fun kniBridge769(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge770")
private external fun kniBridge770(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge771")
private external fun kniBridge771(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge772")
private external fun kniBridge772(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge773")
private external fun kniBridge773(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge774")
private external fun kniBridge774(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge775")
private external fun kniBridge775(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge776")
private external fun kniBridge776(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge777")
private external fun kniBridge777(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge778")
private external fun kniBridge778(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge779")
private external fun kniBridge779(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge780")
private external fun kniBridge780(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge781")
private external fun kniBridge781(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge782")
private external fun kniBridge782(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge783")
private external fun kniBridge783(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge784")
private external fun kniBridge784(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge785")
private external fun kniBridge785(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge786")
private external fun kniBridge786(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge787")
private external fun kniBridge787(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge788")
private external fun kniBridge788(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge789")
private external fun kniBridge789(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge790")
private external fun kniBridge790(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge791")
private external fun kniBridge791(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge792")
private external fun kniBridge792(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge793")
private external fun kniBridge793(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge794")
private external fun kniBridge794(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge795")
private external fun kniBridge795(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge796")
private external fun kniBridge796(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge797")
private external fun kniBridge797(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge798")
private external fun kniBridge798(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge799")
private external fun kniBridge799(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge800")
private external fun kniBridge800(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge801")
private external fun kniBridge801(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge802")
private external fun kniBridge802(p0: UInt): Int
@SymbolName("libwebsockets_kniBridge803")
private external fun kniBridge803(p0: UInt): NativePtr
@SymbolName("libwebsockets_kniBridge804")
private external fun kniBridge804(p0: UInt, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge805")
private external fun kniBridge805(p0: ULong, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge806")
private external fun kniBridge806(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge807")
private external fun kniBridge807(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge808")
private external fun kniBridge808(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge809")
private external fun kniBridge809(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge810")
private external fun kniBridge810(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge811")
private external fun kniBridge811(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge812")
private external fun kniBridge812(): ULong
@SymbolName("libwebsockets_kniBridge813")
private external fun kniBridge813(p0: ULong, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge814")
private external fun kniBridge814(): Int
@SymbolName("libwebsockets_kniBridge815")
private external fun kniBridge815(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge816")
private external fun kniBridge816(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge817")
private external fun kniBridge817(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge818")
private external fun kniBridge818(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge819")
private external fun kniBridge819(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge820")
private external fun kniBridge820(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge821")
private external fun kniBridge821(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge822")
private external fun kniBridge822(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge823")
private external fun kniBridge823(): NativePtr
@SymbolName("libwebsockets_kniBridge824")
private external fun kniBridge824(): Int
@SymbolName("libwebsockets_kniBridge825")
private external fun kniBridge825(): Int
@SymbolName("libwebsockets_kniBridge826")
private external fun kniBridge826(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge827")
private external fun kniBridge827(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge828")
private external fun kniBridge828(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge829")
private external fun kniBridge829(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge830")
private external fun kniBridge830(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge831")
private external fun kniBridge831(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge832")
private external fun kniBridge832(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge833")
private external fun kniBridge833(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge834")
private external fun kniBridge834(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge835")
private external fun kniBridge835(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge836")
private external fun kniBridge836(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge837")
private external fun kniBridge837(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge838")
private external fun kniBridge838(): NativePtr
@SymbolName("libwebsockets_kniBridge839")
private external fun kniBridge839(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge840")
private external fun kniBridge840(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge841")
private external fun kniBridge841(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge842")
private external fun kniBridge842(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge843")
private external fun kniBridge843(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge844")
private external fun kniBridge844(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge845")
private external fun kniBridge845(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge846")
private external fun kniBridge846(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge847")
private external fun kniBridge847(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge848")
private external fun kniBridge848(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge849")
private external fun kniBridge849(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge850")
private external fun kniBridge850(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge851")
private external fun kniBridge851(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge852")
private external fun kniBridge852(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge853")
private external fun kniBridge853(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge854")
private external fun kniBridge854(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge855")
private external fun kniBridge855(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge856")
private external fun kniBridge856(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge857")
private external fun kniBridge857(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge858")
private external fun kniBridge858(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge859")
private external fun kniBridge859(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge860")
private external fun kniBridge860(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge861")
private external fun kniBridge861(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge862")
private external fun kniBridge862(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge863")
private external fun kniBridge863(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge864")
private external fun kniBridge864(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge865")
private external fun kniBridge865(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge866")
private external fun kniBridge866(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge867")
private external fun kniBridge867(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge868")
private external fun kniBridge868(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge869")
private external fun kniBridge869(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge870")
private external fun kniBridge870(): NativePtr
@SymbolName("libwebsockets_kniBridge871")
private external fun kniBridge871(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge872")
private external fun kniBridge872(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge873")
private external fun kniBridge873(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge874")
private external fun kniBridge874(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge875")
private external fun kniBridge875(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge876")
private external fun kniBridge876(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge877")
private external fun kniBridge877(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge878")
private external fun kniBridge878(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge879")
private external fun kniBridge879(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge880")
private external fun kniBridge880(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge881")
private external fun kniBridge881(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge882")
private external fun kniBridge882(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge883")
private external fun kniBridge883(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge884")
private external fun kniBridge884(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge885")
private external fun kniBridge885(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge886")
private external fun kniBridge886(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge887")
private external fun kniBridge887(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge888")
private external fun kniBridge888(p0: NativePtr, p1: Int, p2: Long, p3: NativePtr): Long
@SymbolName("libwebsockets_kniBridge889")
private external fun kniBridge889(p0: NativePtr, p1: Int, p2: NativePtr): Long
@SymbolName("libwebsockets_kniBridge890")
private external fun kniBridge890(p0: NativePtr, p1: Int, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge891")
private external fun kniBridge891(p0: NativePtr, p1: Int, p2: Long, p3: Int): Long
@SymbolName("libwebsockets_kniBridge892")
private external fun kniBridge892(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge893")
private external fun kniBridge893(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge894")
private external fun kniBridge894(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge895")
private external fun kniBridge895(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge896")
private external fun kniBridge896(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge897")
private external fun kniBridge897(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge898")
private external fun kniBridge898(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge899")
private external fun kniBridge899(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge900")
private external fun kniBridge900(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge901")
private external fun kniBridge901(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge902")
private external fun kniBridge902(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge903")
private external fun kniBridge903(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge904")
private external fun kniBridge904(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge905")
private external fun kniBridge905(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge906")
private external fun kniBridge906(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Long, p5: Long): Long
@SymbolName("libwebsockets_kniBridge907")
private external fun kniBridge907(): NativePtr
@SymbolName("libwebsockets_kniBridge908")
private external fun kniBridge908(): NativePtr
@SymbolName("libwebsockets_kniBridge909")
private external fun kniBridge909(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge910")
private external fun kniBridge910(): NativePtr
@SymbolName("libwebsockets_kniBridge911")
private external fun kniBridge911(): NativePtr
@SymbolName("libwebsockets_kniBridge912")
private external fun kniBridge912(): NativePtr
@SymbolName("libwebsockets_kniBridge913")
private external fun kniBridge913(): NativePtr
@SymbolName("libwebsockets_kniBridge914")
private external fun kniBridge914(): NativePtr
@SymbolName("libwebsockets_kniBridge915")
private external fun kniBridge915(): NativePtr
@SymbolName("libwebsockets_kniBridge916")
private external fun kniBridge916(): NativePtr
@SymbolName("libwebsockets_kniBridge917")
private external fun kniBridge917(): NativePtr
@SymbolName("libwebsockets_kniBridge918")
private external fun kniBridge918(): NativePtr
@SymbolName("libwebsockets_kniBridge919")
private external fun kniBridge919(): NativePtr
@SymbolName("libwebsockets_kniBridge920")
private external fun kniBridge920(): NativePtr
@SymbolName("libwebsockets_kniBridge921")
private external fun kniBridge921(): NativePtr
@SymbolName("libwebsockets_kniBridge922")
private external fun kniBridge922(p0: Int): Int
@SymbolName("libwebsockets_kniBridge923")
private external fun kniBridge923(p0: Int, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge924")
private external fun kniBridge924(p0: Int): Int
@SymbolName("libwebsockets_kniBridge925")
private external fun kniBridge925(p0: Int): Int
@SymbolName("libwebsockets_kniBridge926")
private external fun kniBridge926(p0: Int): Int
@SymbolName("libwebsockets_kniBridge927")
private external fun kniBridge927(p0: Int): Int
@SymbolName("libwebsockets_kniBridge928")
private external fun kniBridge928(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge929")
private external fun kniBridge929(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int): Int
@SymbolName("libwebsockets_kniBridge930")
private external fun kniBridge930(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge931")
private external fun kniBridge931(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge932")
private external fun kniBridge932(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge933")
private external fun kniBridge933(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge934")
private external fun kniBridge934(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge935")
private external fun kniBridge935(): NativePtr
@SymbolName("libwebsockets_kniBridge936")
private external fun kniBridge936(p0: NativePtr, p1: Int, p2: NativePtr, p3: ULong, p4: UShort): Int
@SymbolName("libwebsockets_kniBridge937")
private external fun kniBridge937(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge938")
private external fun kniBridge938(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge939")
private external fun kniBridge939(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge940")
private external fun kniBridge940(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge941")
private external fun kniBridge941(p0: NativePtr): UShort
@SymbolName("libwebsockets_kniBridge942")
private external fun kniBridge942(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge943")
private external fun kniBridge943(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge944")
private external fun kniBridge944(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge945")
private external fun kniBridge945(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge946")
private external fun kniBridge946(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge947")
private external fun kniBridge947(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge948")
private external fun kniBridge948(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge949")
private external fun kniBridge949(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge950")
private external fun kniBridge950(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge951")
private external fun kniBridge951(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Int
@SymbolName("libwebsockets_kniBridge952")
private external fun kniBridge952(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: Int, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge953")
private external fun kniBridge953(p0: Int): Int
@SymbolName("libwebsockets_kniBridge954")
private external fun kniBridge954(p0: Int, p1: Long, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge955")
private external fun kniBridge955(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge956")
private external fun kniBridge956(): Int
@SymbolName("libwebsockets_kniBridge957")
private external fun kniBridge957(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge958")
private external fun kniBridge958(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge959")
private external fun kniBridge959(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge960")
private external fun kniBridge960(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge961")
private external fun kniBridge961(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge962")
private external fun kniBridge962(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge963")
private external fun kniBridge963(p0: Int, p1: UInt, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge964")
private external fun kniBridge964(p0: Int, p1: Int, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge965")
private external fun kniBridge965(p0: Int, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge966")
private external fun kniBridge966(p0: Int, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge967")
private external fun kniBridge967(p0: Int, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge968")
private external fun kniBridge968(p0: Int): Int
@SymbolName("libwebsockets_kniBridge969")
private external fun kniBridge969(p0: Int, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge970")
private external fun kniBridge970(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge971")
private external fun kniBridge971(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge972")
private external fun kniBridge972(p0: Int, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge973")
private external fun kniBridge973(p0: NativePtr, p1: ULong, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge974")
private external fun kniBridge974(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge975")
private external fun kniBridge975(): NativePtr
@SymbolName("libwebsockets_kniBridge976")
private external fun kniBridge976(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge977")
private external fun kniBridge977(): NativePtr
@SymbolName("libwebsockets_kniBridge978")
private external fun kniBridge978(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge979")
private external fun kniBridge979(p0: Int, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge980")
private external fun kniBridge980(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge981")
private external fun kniBridge981(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge982")
private external fun kniBridge982(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge983")
private external fun kniBridge983(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge984")
private external fun kniBridge984(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge985")
private external fun kniBridge985(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge986")
private external fun kniBridge986(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge987")
private external fun kniBridge987(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge988")
private external fun kniBridge988(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge989")
private external fun kniBridge989(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge990")
private external fun kniBridge990(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge991")
private external fun kniBridge991(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge992")
private external fun kniBridge992(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge993")
private external fun kniBridge993(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge994")
private external fun kniBridge994(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge995")
private external fun kniBridge995(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge996")
private external fun kniBridge996(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge997")
private external fun kniBridge997(): Int
@SymbolName("libwebsockets_kniBridge998")
private external fun kniBridge998(): NativePtr
@SymbolName("libwebsockets_kniBridge999")
private external fun kniBridge999(p0: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge1000")
private external fun kniBridge1000(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1001")
private external fun kniBridge1001(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge1002")
private external fun kniBridge1002(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge1003")
private external fun kniBridge1003(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("libwebsockets_kniBridge1004")
private external fun kniBridge1004(): Int
@SymbolName("libwebsockets_kniBridge1005")
private external fun kniBridge1005(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge1006")
private external fun kniBridge1006(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1007")
private external fun kniBridge1007(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libwebsockets_kniBridge1008")
private external fun kniBridge1008(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1009")
private external fun kniBridge1009(): NativePtr
@SymbolName("libwebsockets_kniBridge1010")
private external fun kniBridge1010(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1011")
private external fun kniBridge1011(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1012")
private external fun kniBridge1012(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1013")
private external fun kniBridge1013(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1014")
private external fun kniBridge1014(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1015")
private external fun kniBridge1015(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1016")
private external fun kniBridge1016(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1017")
private external fun kniBridge1017(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1018")
private external fun kniBridge1018(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1019")
private external fun kniBridge1019(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1020")
private external fun kniBridge1020(): NativePtr
@SymbolName("libwebsockets_kniBridge1021")
private external fun kniBridge1021(): NativePtr
@SymbolName("libwebsockets_kniBridge1022")
private external fun kniBridge1022(): NativePtr
@SymbolName("libwebsockets_kniBridge1023")
private external fun kniBridge1023(): NativePtr
@SymbolName("libwebsockets_kniBridge1024")
private external fun kniBridge1024(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1025")
private external fun kniBridge1025(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1026")
private external fun kniBridge1026(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1027")
private external fun kniBridge1027(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1028")
private external fun kniBridge1028(p0: NativePtr, p1: Int, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1029")
private external fun kniBridge1029(p0: NativePtr, p1: Int, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1030")
private external fun kniBridge1030(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1031")
private external fun kniBridge1031(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1032")
private external fun kniBridge1032(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1033")
private external fun kniBridge1033(p0: ULong): Int
@SymbolName("libwebsockets_kniBridge1034")
private external fun kniBridge1034(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1035")
private external fun kniBridge1035(): NativePtr
@SymbolName("libwebsockets_kniBridge1036")
private external fun kniBridge1036(): NativePtr
@SymbolName("libwebsockets_kniBridge1037")
private external fun kniBridge1037(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1038")
private external fun kniBridge1038(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1039")
private external fun kniBridge1039(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1040")
private external fun kniBridge1040(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1041")
private external fun kniBridge1041(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1042")
private external fun kniBridge1042(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1043")
private external fun kniBridge1043(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1044")
private external fun kniBridge1044(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1045")
private external fun kniBridge1045(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1046")
private external fun kniBridge1046(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1047")
private external fun kniBridge1047(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1048")
private external fun kniBridge1048(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1049")
private external fun kniBridge1049(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1050")
private external fun kniBridge1050(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1051")
private external fun kniBridge1051(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1052")
private external fun kniBridge1052(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1053")
private external fun kniBridge1053(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge1054")
private external fun kniBridge1054(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1055")
private external fun kniBridge1055(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1056")
private external fun kniBridge1056(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1057")
private external fun kniBridge1057(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1058")
private external fun kniBridge1058(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1059")
private external fun kniBridge1059(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1060")
private external fun kniBridge1060(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1061")
private external fun kniBridge1061(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1062")
private external fun kniBridge1062(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1063")
private external fun kniBridge1063(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1064")
private external fun kniBridge1064(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1065")
private external fun kniBridge1065(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1066")
private external fun kniBridge1066(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1067")
private external fun kniBridge1067(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge1068")
private external fun kniBridge1068(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge1069")
private external fun kniBridge1069(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1070")
private external fun kniBridge1070(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1071")
private external fun kniBridge1071(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1072")
private external fun kniBridge1072(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1073")
private external fun kniBridge1073(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1074")
private external fun kniBridge1074(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1075")
private external fun kniBridge1075(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1076")
private external fun kniBridge1076(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1077")
private external fun kniBridge1077(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1078")
private external fun kniBridge1078(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1079")
private external fun kniBridge1079(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1080")
private external fun kniBridge1080(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1081")
private external fun kniBridge1081(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1082")
private external fun kniBridge1082(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1083")
private external fun kniBridge1083(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1084")
private external fun kniBridge1084(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1085")
private external fun kniBridge1085(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1086")
private external fun kniBridge1086(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1087")
private external fun kniBridge1087(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1088")
private external fun kniBridge1088(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1089")
private external fun kniBridge1089(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1090")
private external fun kniBridge1090(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1091")
private external fun kniBridge1091(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1092")
private external fun kniBridge1092(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1093")
private external fun kniBridge1093(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1094")
private external fun kniBridge1094(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1095")
private external fun kniBridge1095(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1096")
private external fun kniBridge1096(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1097")
private external fun kniBridge1097(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1098")
private external fun kniBridge1098(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1099")
private external fun kniBridge1099(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1100")
private external fun kniBridge1100(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1101")
private external fun kniBridge1101(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1102")
private external fun kniBridge1102(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1103")
private external fun kniBridge1103(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1104")
private external fun kniBridge1104(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1105")
private external fun kniBridge1105(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1106")
private external fun kniBridge1106(p0: ULong, p1: NativePtr, p2: NativePtr, p3: Int): Unit
@SymbolName("libwebsockets_kniBridge1107")
private external fun kniBridge1107(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1108")
private external fun kniBridge1108(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1109")
private external fun kniBridge1109(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge1110")
private external fun kniBridge1110(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1111")
private external fun kniBridge1111(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1112")
private external fun kniBridge1112(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1113")
private external fun kniBridge1113(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1114")
private external fun kniBridge1114(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1115")
private external fun kniBridge1115(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1116")
private external fun kniBridge1116(): NativePtr
@SymbolName("libwebsockets_kniBridge1117")
private external fun kniBridge1117(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1118")
private external fun kniBridge1118(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1119")
private external fun kniBridge1119(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1120")
private external fun kniBridge1120(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1121")
private external fun kniBridge1121(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1122")
private external fun kniBridge1122(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1123")
private external fun kniBridge1123(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1124")
private external fun kniBridge1124(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1125")
private external fun kniBridge1125(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1126")
private external fun kniBridge1126(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1127")
private external fun kniBridge1127(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1128")
private external fun kniBridge1128(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1129")
private external fun kniBridge1129(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1130")
private external fun kniBridge1130(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1131")
private external fun kniBridge1131(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1132")
private external fun kniBridge1132(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1133")
private external fun kniBridge1133(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1134")
private external fun kniBridge1134(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1135")
private external fun kniBridge1135(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1136")
private external fun kniBridge1136(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge1137")
private external fun kniBridge1137(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1138")
private external fun kniBridge1138(p0: Int, p1: Int, p2: Int, p3: Int): Unit
@SymbolName("libwebsockets_kniBridge1139")
private external fun kniBridge1139(p0: Int): Int
@SymbolName("libwebsockets_kniBridge1140")
private external fun kniBridge1140(): NativePtr
@SymbolName("libwebsockets_kniBridge1141")
private external fun kniBridge1141(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1142")
private external fun kniBridge1142(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1143")
private external fun kniBridge1143(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1144")
private external fun kniBridge1144(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1145")
private external fun kniBridge1145(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1146")
private external fun kniBridge1146(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1147")
private external fun kniBridge1147(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1148")
private external fun kniBridge1148(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1149")
private external fun kniBridge1149(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1150")
private external fun kniBridge1150(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1151")
private external fun kniBridge1151(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1152")
private external fun kniBridge1152(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1153")
private external fun kniBridge1153(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1154")
private external fun kniBridge1154(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1155")
private external fun kniBridge1155(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1156")
private external fun kniBridge1156(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1157")
private external fun kniBridge1157(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1158")
private external fun kniBridge1158(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1159")
private external fun kniBridge1159(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1160")
private external fun kniBridge1160(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1161")
private external fun kniBridge1161(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1162")
private external fun kniBridge1162(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1163")
private external fun kniBridge1163(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1164")
private external fun kniBridge1164(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1165")
private external fun kniBridge1165(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1166")
private external fun kniBridge1166(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1167")
private external fun kniBridge1167(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1168")
private external fun kniBridge1168(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1169")
private external fun kniBridge1169(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1170")
private external fun kniBridge1170(): NativePtr
@SymbolName("libwebsockets_kniBridge1171")
private external fun kniBridge1171(): NativePtr
@SymbolName("libwebsockets_kniBridge1172")
private external fun kniBridge1172(): NativePtr
@SymbolName("libwebsockets_kniBridge1173")
private external fun kniBridge1173(): NativePtr
@SymbolName("libwebsockets_kniBridge1174")
private external fun kniBridge1174(): NativePtr
@SymbolName("libwebsockets_kniBridge1175")
private external fun kniBridge1175(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1176")
private external fun kniBridge1176(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1177")
private external fun kniBridge1177(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1178")
private external fun kniBridge1178(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1179")
private external fun kniBridge1179(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1180")
private external fun kniBridge1180(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1181")
private external fun kniBridge1181(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1182")
private external fun kniBridge1182(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1183")
private external fun kniBridge1183(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1184")
private external fun kniBridge1184(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1185")
private external fun kniBridge1185(p0: NativePtr, p1: Int, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1186")
private external fun kniBridge1186(): Int
@SymbolName("libwebsockets_kniBridge1187")
private external fun kniBridge1187(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1188")
private external fun kniBridge1188(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1189")
private external fun kniBridge1189(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1190")
private external fun kniBridge1190(): NativePtr
@SymbolName("libwebsockets_kniBridge1191")
private external fun kniBridge1191(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1192")
private external fun kniBridge1192(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1193")
private external fun kniBridge1193(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1194")
private external fun kniBridge1194(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1195")
private external fun kniBridge1195(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1196")
private external fun kniBridge1196(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1197")
private external fun kniBridge1197(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1198")
private external fun kniBridge1198(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1199")
private external fun kniBridge1199(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1200")
private external fun kniBridge1200(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1201")
private external fun kniBridge1201(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1202")
private external fun kniBridge1202(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1203")
private external fun kniBridge1203(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1204")
private external fun kniBridge1204(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1205")
private external fun kniBridge1205(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1206")
private external fun kniBridge1206(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1207")
private external fun kniBridge1207(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1208")
private external fun kniBridge1208(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1209")
private external fun kniBridge1209(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1210")
private external fun kniBridge1210(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1211")
private external fun kniBridge1211(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1212")
private external fun kniBridge1212(): NativePtr
@SymbolName("libwebsockets_kniBridge1213")
private external fun kniBridge1213(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1214")
private external fun kniBridge1214(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1215")
private external fun kniBridge1215(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1216")
private external fun kniBridge1216(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1217")
private external fun kniBridge1217(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1218")
private external fun kniBridge1218(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1219")
private external fun kniBridge1219(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1220")
private external fun kniBridge1220(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1221")
private external fun kniBridge1221(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1222")
private external fun kniBridge1222(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1223")
private external fun kniBridge1223(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1224")
private external fun kniBridge1224(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1225")
private external fun kniBridge1225(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1226")
private external fun kniBridge1226(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1227")
private external fun kniBridge1227(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1228")
private external fun kniBridge1228(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1229")
private external fun kniBridge1229(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1230")
private external fun kniBridge1230(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1231")
private external fun kniBridge1231(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1232")
private external fun kniBridge1232(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1233")
private external fun kniBridge1233(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1234")
private external fun kniBridge1234(): NativePtr
@SymbolName("libwebsockets_kniBridge1235")
private external fun kniBridge1235(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1236")
private external fun kniBridge1236(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1237")
private external fun kniBridge1237(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1238")
private external fun kniBridge1238(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1239")
private external fun kniBridge1239(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1240")
private external fun kniBridge1240(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1241")
private external fun kniBridge1241(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1242")
private external fun kniBridge1242(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1243")
private external fun kniBridge1243(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1244")
private external fun kniBridge1244(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1245")
private external fun kniBridge1245(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1246")
private external fun kniBridge1246(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1247")
private external fun kniBridge1247(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1248")
private external fun kniBridge1248(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1249")
private external fun kniBridge1249(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1250")
private external fun kniBridge1250(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1251")
private external fun kniBridge1251(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1252")
private external fun kniBridge1252(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1253")
private external fun kniBridge1253(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1254")
private external fun kniBridge1254(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1255")
private external fun kniBridge1255(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1256")
private external fun kniBridge1256(): NativePtr
@SymbolName("libwebsockets_kniBridge1257")
private external fun kniBridge1257(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1258")
private external fun kniBridge1258(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1259")
private external fun kniBridge1259(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1260")
private external fun kniBridge1260(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1261")
private external fun kniBridge1261(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1262")
private external fun kniBridge1262(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1263")
private external fun kniBridge1263(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1264")
private external fun kniBridge1264(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1265")
private external fun kniBridge1265(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1266")
private external fun kniBridge1266(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1267")
private external fun kniBridge1267(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1268")
private external fun kniBridge1268(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1269")
private external fun kniBridge1269(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1270")
private external fun kniBridge1270(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1271")
private external fun kniBridge1271(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1272")
private external fun kniBridge1272(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1273")
private external fun kniBridge1273(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1274")
private external fun kniBridge1274(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1275")
private external fun kniBridge1275(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1276")
private external fun kniBridge1276(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1277")
private external fun kniBridge1277(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1278")
private external fun kniBridge1278(): NativePtr
@SymbolName("libwebsockets_kniBridge1279")
private external fun kniBridge1279(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1280")
private external fun kniBridge1280(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1281")
private external fun kniBridge1281(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1282")
private external fun kniBridge1282(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1283")
private external fun kniBridge1283(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1284")
private external fun kniBridge1284(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1285")
private external fun kniBridge1285(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1286")
private external fun kniBridge1286(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1287")
private external fun kniBridge1287(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1288")
private external fun kniBridge1288(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1289")
private external fun kniBridge1289(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1290")
private external fun kniBridge1290(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1291")
private external fun kniBridge1291(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1292")
private external fun kniBridge1292(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1293")
private external fun kniBridge1293(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1294")
private external fun kniBridge1294(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1295")
private external fun kniBridge1295(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1296")
private external fun kniBridge1296(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1297")
private external fun kniBridge1297(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1298")
private external fun kniBridge1298(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1299")
private external fun kniBridge1299(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1300")
private external fun kniBridge1300(): NativePtr
@SymbolName("libwebsockets_kniBridge1301")
private external fun kniBridge1301(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1302")
private external fun kniBridge1302(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1303")
private external fun kniBridge1303(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1304")
private external fun kniBridge1304(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1305")
private external fun kniBridge1305(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1306")
private external fun kniBridge1306(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1307")
private external fun kniBridge1307(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1308")
private external fun kniBridge1308(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1309")
private external fun kniBridge1309(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1310")
private external fun kniBridge1310(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1311")
private external fun kniBridge1311(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1312")
private external fun kniBridge1312(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1313")
private external fun kniBridge1313(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1314")
private external fun kniBridge1314(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1315")
private external fun kniBridge1315(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1316")
private external fun kniBridge1316(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1317")
private external fun kniBridge1317(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1318")
private external fun kniBridge1318(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1319")
private external fun kniBridge1319(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1320")
private external fun kniBridge1320(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1321")
private external fun kniBridge1321(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1322")
private external fun kniBridge1322(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1323")
private external fun kniBridge1323(): NativePtr
@SymbolName("libwebsockets_kniBridge1324")
private external fun kniBridge1324(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1325")
private external fun kniBridge1325(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1326")
private external fun kniBridge1326(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1327")
private external fun kniBridge1327(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1328")
private external fun kniBridge1328(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1329")
private external fun kniBridge1329(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1330")
private external fun kniBridge1330(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1331")
private external fun kniBridge1331(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1332")
private external fun kniBridge1332(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1333")
private external fun kniBridge1333(): NativePtr
@SymbolName("libwebsockets_kniBridge1334")
private external fun kniBridge1334(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1335")
private external fun kniBridge1335(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1336")
private external fun kniBridge1336(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1337")
private external fun kniBridge1337(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1338")
private external fun kniBridge1338(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1339")
private external fun kniBridge1339(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1340")
private external fun kniBridge1340(): NativePtr
@SymbolName("libwebsockets_kniBridge1341")
private external fun kniBridge1341(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1342")
private external fun kniBridge1342(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1343")
private external fun kniBridge1343(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1344")
private external fun kniBridge1344(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1345")
private external fun kniBridge1345(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1346")
private external fun kniBridge1346(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1347")
private external fun kniBridge1347(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1348")
private external fun kniBridge1348(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1349")
private external fun kniBridge1349(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1350")
private external fun kniBridge1350(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1351")
private external fun kniBridge1351(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1352")
private external fun kniBridge1352(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1353")
private external fun kniBridge1353(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1354")
private external fun kniBridge1354(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1355")
private external fun kniBridge1355(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1356")
private external fun kniBridge1356(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1357")
private external fun kniBridge1357(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1358")
private external fun kniBridge1358(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1359")
private external fun kniBridge1359(): NativePtr
@SymbolName("libwebsockets_kniBridge1360")
private external fun kniBridge1360(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1361")
private external fun kniBridge1361(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1362")
private external fun kniBridge1362(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1363")
private external fun kniBridge1363(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1364")
private external fun kniBridge1364(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1365")
private external fun kniBridge1365(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1366")
private external fun kniBridge1366(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1367")
private external fun kniBridge1367(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libwebsockets_kniBridge1368")
private external fun kniBridge1368(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1369")
private external fun kniBridge1369(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge1370")
private external fun kniBridge1370(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1371")
private external fun kniBridge1371(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1372")
private external fun kniBridge1372(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1373")
private external fun kniBridge1373(): NativePtr
@SymbolName("libwebsockets_kniBridge1374")
private external fun kniBridge1374(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1375")
private external fun kniBridge1375(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1376")
private external fun kniBridge1376(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1377")
private external fun kniBridge1377(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1378")
private external fun kniBridge1378(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1379")
private external fun kniBridge1379(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1380")
private external fun kniBridge1380(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1381")
private external fun kniBridge1381(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1382")
private external fun kniBridge1382(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1383")
private external fun kniBridge1383(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1384")
private external fun kniBridge1384(): NativePtr
@SymbolName("libwebsockets_kniBridge1385")
private external fun kniBridge1385(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1386")
private external fun kniBridge1386(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1387")
private external fun kniBridge1387(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1388")
private external fun kniBridge1388(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1389")
private external fun kniBridge1389(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1390")
private external fun kniBridge1390(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1391")
private external fun kniBridge1391(): NativePtr
@SymbolName("libwebsockets_kniBridge1392")
private external fun kniBridge1392(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1393")
private external fun kniBridge1393(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1394")
private external fun kniBridge1394(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1395")
private external fun kniBridge1395(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1396")
private external fun kniBridge1396(p0: NativePtr, p1: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1397")
private external fun kniBridge1397(p0: NativePtr, p1: Long, p2: Int, p3: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1398")
private external fun kniBridge1398(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1399")
private external fun kniBridge1399(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge1400")
private external fun kniBridge1400(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1401")
private external fun kniBridge1401(p0: NativePtr, p1: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1402")
private external fun kniBridge1402(p0: NativePtr, p1: Long, p2: Int, p3: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1403")
private external fun kniBridge1403(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1404")
private external fun kniBridge1404(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1405")
private external fun kniBridge1405(): NativePtr
@SymbolName("libwebsockets_kniBridge1406")
private external fun kniBridge1406(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1407")
private external fun kniBridge1407(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1408")
private external fun kniBridge1408(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1409")
private external fun kniBridge1409(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1410")
private external fun kniBridge1410(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1411")
private external fun kniBridge1411(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1412")
private external fun kniBridge1412(): NativePtr
@SymbolName("libwebsockets_kniBridge1413")
private external fun kniBridge1413(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1414")
private external fun kniBridge1414(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1415")
private external fun kniBridge1415(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1416")
private external fun kniBridge1416(): NativePtr
@SymbolName("libwebsockets_kniBridge1417")
private external fun kniBridge1417(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1418")
private external fun kniBridge1418(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1419")
private external fun kniBridge1419(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1420")
private external fun kniBridge1420(): NativePtr
@SymbolName("libwebsockets_kniBridge1421")
private external fun kniBridge1421(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1422")
private external fun kniBridge1422(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1423")
private external fun kniBridge1423(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1424")
private external fun kniBridge1424(): NativePtr
@SymbolName("libwebsockets_kniBridge1425")
private external fun kniBridge1425(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1426")
private external fun kniBridge1426(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1427")
private external fun kniBridge1427(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1428")
private external fun kniBridge1428(): NativePtr
@SymbolName("libwebsockets_kniBridge1429")
private external fun kniBridge1429(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1430")
private external fun kniBridge1430(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1431")
private external fun kniBridge1431(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1432")
private external fun kniBridge1432(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1433")
private external fun kniBridge1433(p0: NativePtr, p1: Int, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge1434")
private external fun kniBridge1434(): NativePtr
@SymbolName("libwebsockets_kniBridge1435")
private external fun kniBridge1435(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1436")
private external fun kniBridge1436(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1437")
private external fun kniBridge1437(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1438")
private external fun kniBridge1438(): NativePtr
@SymbolName("libwebsockets_kniBridge1439")
private external fun kniBridge1439(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1440")
private external fun kniBridge1440(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1441")
private external fun kniBridge1441(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1442")
private external fun kniBridge1442(): NativePtr
@SymbolName("libwebsockets_kniBridge1443")
private external fun kniBridge1443(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1444")
private external fun kniBridge1444(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1445")
private external fun kniBridge1445(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1446")
private external fun kniBridge1446(): NativePtr
@SymbolName("libwebsockets_kniBridge1447")
private external fun kniBridge1447(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1448")
private external fun kniBridge1448(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1449")
private external fun kniBridge1449(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1450")
private external fun kniBridge1450(): NativePtr
@SymbolName("libwebsockets_kniBridge1451")
private external fun kniBridge1451(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1452")
private external fun kniBridge1452(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1453")
private external fun kniBridge1453(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1454")
private external fun kniBridge1454(): NativePtr
@SymbolName("libwebsockets_kniBridge1455")
private external fun kniBridge1455(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1456")
private external fun kniBridge1456(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1457")
private external fun kniBridge1457(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1458")
private external fun kniBridge1458(): NativePtr
@SymbolName("libwebsockets_kniBridge1459")
private external fun kniBridge1459(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1460")
private external fun kniBridge1460(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1461")
private external fun kniBridge1461(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1462")
private external fun kniBridge1462(): NativePtr
@SymbolName("libwebsockets_kniBridge1463")
private external fun kniBridge1463(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1464")
private external fun kniBridge1464(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1465")
private external fun kniBridge1465(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1466")
private external fun kniBridge1466(): NativePtr
@SymbolName("libwebsockets_kniBridge1467")
private external fun kniBridge1467(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1468")
private external fun kniBridge1468(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1469")
private external fun kniBridge1469(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1470")
private external fun kniBridge1470(): NativePtr
@SymbolName("libwebsockets_kniBridge1471")
private external fun kniBridge1471(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1472")
private external fun kniBridge1472(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1473")
private external fun kniBridge1473(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1474")
private external fun kniBridge1474(p0: NativePtr, p1: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1475")
private external fun kniBridge1475(p0: NativePtr, p1: Long, p2: Int, p3: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1476")
private external fun kniBridge1476(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1477")
private external fun kniBridge1477(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1478")
private external fun kniBridge1478(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1479")
private external fun kniBridge1479(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1480")
private external fun kniBridge1480(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1481")
private external fun kniBridge1481(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1482")
private external fun kniBridge1482(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1483")
private external fun kniBridge1483(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1484")
private external fun kniBridge1484(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1485")
private external fun kniBridge1485(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1486")
private external fun kniBridge1486(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1487")
private external fun kniBridge1487(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1488")
private external fun kniBridge1488(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1489")
private external fun kniBridge1489(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1490")
private external fun kniBridge1490(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge1491")
private external fun kniBridge1491(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1492")
private external fun kniBridge1492(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1493")
private external fun kniBridge1493(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge1494")
private external fun kniBridge1494(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge1495")
private external fun kniBridge1495(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1496")
private external fun kniBridge1496(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1497")
private external fun kniBridge1497(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1498")
private external fun kniBridge1498(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge1499")
private external fun kniBridge1499(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge1500")
private external fun kniBridge1500(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge1501")
private external fun kniBridge1501(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1502")
private external fun kniBridge1502(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1503")
private external fun kniBridge1503(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1504")
private external fun kniBridge1504(p0: Int): ULong
@SymbolName("libwebsockets_kniBridge1505")
private external fun kniBridge1505(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Long): Int
@SymbolName("libwebsockets_kniBridge1506")
private external fun kniBridge1506(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge1507")
private external fun kniBridge1507(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge1508")
private external fun kniBridge1508(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: Int): Unit
@SymbolName("libwebsockets_kniBridge1509")
private external fun kniBridge1509(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1510")
private external fun kniBridge1510(p0: Int, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1511")
private external fun kniBridge1511(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1512")
private external fun kniBridge1512(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1513")
private external fun kniBridge1513(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1514")
private external fun kniBridge1514(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1515")
private external fun kniBridge1515(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1516")
private external fun kniBridge1516(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1517")
private external fun kniBridge1517(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge1518")
private external fun kniBridge1518(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1519")
private external fun kniBridge1519(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1520")
private external fun kniBridge1520(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1521")
private external fun kniBridge1521(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1522")
private external fun kniBridge1522(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1523")
private external fun kniBridge1523(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1524")
private external fun kniBridge1524(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1525")
private external fun kniBridge1525(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1526")
private external fun kniBridge1526(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1527")
private external fun kniBridge1527(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge1528")
private external fun kniBridge1528(p0: NativePtr, p1: NativePtr, p2: ULong, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1529")
private external fun kniBridge1529(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1530")
private external fun kniBridge1530(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1531")
private external fun kniBridge1531(p0: NativePtr, p1: NativePtr, p2: Long, p3: Int, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1532")
private external fun kniBridge1532(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1533")
private external fun kniBridge1533(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1534")
private external fun kniBridge1534(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1535")
private external fun kniBridge1535(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1536")
private external fun kniBridge1536(p0: NativePtr, p1: Long, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1537")
private external fun kniBridge1537(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1538")
private external fun kniBridge1538(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1539")
private external fun kniBridge1539(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1540")
private external fun kniBridge1540(p0: ULong): Unit
@SymbolName("libwebsockets_kniBridge1541")
private external fun kniBridge1541(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1542")
private external fun kniBridge1542(): ULong
@SymbolName("libwebsockets_kniBridge1543")
private external fun kniBridge1543(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge1544")
private external fun kniBridge1544(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: ULong, p5: Long, p6: Long): Int
@SymbolName("libwebsockets_kniBridge1545")
private external fun kniBridge1545(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1546")
private external fun kniBridge1546(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1547")
private external fun kniBridge1547(p0: Int, p1: Long, p2: Long, p3: ULong, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge1548")
private external fun kniBridge1548(): Unit
@SymbolName("libwebsockets_kniBridge1549")
private external fun kniBridge1549(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1550")
private external fun kniBridge1550(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1551")
private external fun kniBridge1551(p0: NativePtr, p1: NativePtr, p2: Long, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1552")
private external fun kniBridge1552(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1553")
private external fun kniBridge1553(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1554")
private external fun kniBridge1554(): Unit
@SymbolName("libwebsockets_kniBridge1555")
private external fun kniBridge1555(): Unit
@SymbolName("libwebsockets_kniBridge1556")
private external fun kniBridge1556(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1557")
private external fun kniBridge1557(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1558")
private external fun kniBridge1558(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1559")
private external fun kniBridge1559(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1560")
private external fun kniBridge1560(): NativePtr
@SymbolName("libwebsockets_kniBridge1561")
private external fun kniBridge1561(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1562")
private external fun kniBridge1562(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1563")
private external fun kniBridge1563(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge1564")
private external fun kniBridge1564(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1565")
private external fun kniBridge1565(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge1566")
private external fun kniBridge1566(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1567")
private external fun kniBridge1567(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge1568")
private external fun kniBridge1568(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1569")
private external fun kniBridge1569(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge1570")
private external fun kniBridge1570(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1571")
private external fun kniBridge1571(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge1572")
private external fun kniBridge1572(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1573")
private external fun kniBridge1573(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1574")
private external fun kniBridge1574(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1575")
private external fun kniBridge1575(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1576")
private external fun kniBridge1576(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1577")
private external fun kniBridge1577(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1578")
private external fun kniBridge1578(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1579")
private external fun kniBridge1579(): NativePtr
@SymbolName("libwebsockets_kniBridge1580")
private external fun kniBridge1580(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1581")
private external fun kniBridge1581(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1582")
private external fun kniBridge1582(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1583")
private external fun kniBridge1583(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: Int, p5: Int, p6: NativePtr, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1584")
private external fun kniBridge1584(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1585")
private external fun kniBridge1585(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1586")
private external fun kniBridge1586(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1587")
private external fun kniBridge1587(): Int
@SymbolName("libwebsockets_kniBridge1588")
private external fun kniBridge1588(): Int
@SymbolName("libwebsockets_kniBridge1589")
private external fun kniBridge1589(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1590")
private external fun kniBridge1590(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1591")
private external fun kniBridge1591(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1592")
private external fun kniBridge1592(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1593")
private external fun kniBridge1593(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge1594")
private external fun kniBridge1594(p0: Int, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1595")
private external fun kniBridge1595(p0: Int, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1596")
private external fun kniBridge1596(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1597")
private external fun kniBridge1597(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1598")
private external fun kniBridge1598(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1599")
private external fun kniBridge1599(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1600")
private external fun kniBridge1600(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1601")
private external fun kniBridge1601(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1602")
private external fun kniBridge1602(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1603")
private external fun kniBridge1603(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1604")
private external fun kniBridge1604(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1605")
private external fun kniBridge1605(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1606")
private external fun kniBridge1606(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1607")
private external fun kniBridge1607(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1608")
private external fun kniBridge1608(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: NativePtr, p5: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1609")
private external fun kniBridge1609(p0: Int): Int
@SymbolName("libwebsockets_kniBridge1610")
private external fun kniBridge1610(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1611")
private external fun kniBridge1611(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1612")
private external fun kniBridge1612(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1613")
private external fun kniBridge1613(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1614")
private external fun kniBridge1614(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1615")
private external fun kniBridge1615(p0: Int, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1616")
private external fun kniBridge1616(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1617")
private external fun kniBridge1617(p0: Int, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1618")
private external fun kniBridge1618(): Unit
@SymbolName("libwebsockets_kniBridge1619")
private external fun kniBridge1619(): Int
@SymbolName("libwebsockets_kniBridge1620")
private external fun kniBridge1620(p0: Int, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1621")
private external fun kniBridge1621(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1622")
private external fun kniBridge1622(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1623")
private external fun kniBridge1623(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1624")
private external fun kniBridge1624(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1625")
private external fun kniBridge1625(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1626")
private external fun kniBridge1626(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1627")
private external fun kniBridge1627(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1628")
private external fun kniBridge1628(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1629")
private external fun kniBridge1629(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1630")
private external fun kniBridge1630(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1631")
private external fun kniBridge1631(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1632")
private external fun kniBridge1632(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1633")
private external fun kniBridge1633(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1634")
private external fun kniBridge1634(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1635")
private external fun kniBridge1635(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1636")
private external fun kniBridge1636(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1637")
private external fun kniBridge1637(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1638")
private external fun kniBridge1638(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1639")
private external fun kniBridge1639(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1640")
private external fun kniBridge1640(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1641")
private external fun kniBridge1641(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1642")
private external fun kniBridge1642(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1643")
private external fun kniBridge1643(p0: Int, p1: Int, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1644")
private external fun kniBridge1644(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1645")
private external fun kniBridge1645(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1646")
private external fun kniBridge1646(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1647")
private external fun kniBridge1647(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge1648")
private external fun kniBridge1648(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1649")
private external fun kniBridge1649(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1650")
private external fun kniBridge1650(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1651")
private external fun kniBridge1651(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1652")
private external fun kniBridge1652(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1653")
private external fun kniBridge1653(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1654")
private external fun kniBridge1654(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1655")
private external fun kniBridge1655(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1656")
private external fun kniBridge1656(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1657")
private external fun kniBridge1657(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1658")
private external fun kniBridge1658(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1659")
private external fun kniBridge1659(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1660")
private external fun kniBridge1660(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1661")
private external fun kniBridge1661(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1662")
private external fun kniBridge1662(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1663")
private external fun kniBridge1663(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1664")
private external fun kniBridge1664(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1665")
private external fun kniBridge1665(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1666")
private external fun kniBridge1666(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1667")
private external fun kniBridge1667(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1668")
private external fun kniBridge1668(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1669")
private external fun kniBridge1669(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1670")
private external fun kniBridge1670(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1671")
private external fun kniBridge1671(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1672")
private external fun kniBridge1672(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1673")
private external fun kniBridge1673(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1674")
private external fun kniBridge1674(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1675")
private external fun kniBridge1675(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1676")
private external fun kniBridge1676(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1677")
private external fun kniBridge1677(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1678")
private external fun kniBridge1678(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1679")
private external fun kniBridge1679(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1680")
private external fun kniBridge1680(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1681")
private external fun kniBridge1681(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1682")
private external fun kniBridge1682(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1683")
private external fun kniBridge1683(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1684")
private external fun kniBridge1684(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1685")
private external fun kniBridge1685(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1686")
private external fun kniBridge1686(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1687")
private external fun kniBridge1687(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1688")
private external fun kniBridge1688(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge1689")
private external fun kniBridge1689(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1690")
private external fun kniBridge1690(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1691")
private external fun kniBridge1691(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1692")
private external fun kniBridge1692(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1693")
private external fun kniBridge1693(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1694")
private external fun kniBridge1694(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Int
@SymbolName("libwebsockets_kniBridge1695")
private external fun kniBridge1695(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1696")
private external fun kniBridge1696(): NativePtr
@SymbolName("libwebsockets_kniBridge1697")
private external fun kniBridge1697(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1698")
private external fun kniBridge1698(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1699")
private external fun kniBridge1699(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1700")
private external fun kniBridge1700(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge1701")
private external fun kniBridge1701(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge1702")
private external fun kniBridge1702(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1703")
private external fun kniBridge1703(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1704")
private external fun kniBridge1704(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge1705")
private external fun kniBridge1705(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1706")
private external fun kniBridge1706(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1707")
private external fun kniBridge1707(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1708")
private external fun kniBridge1708(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1709")
private external fun kniBridge1709(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1710")
private external fun kniBridge1710(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge1711")
private external fun kniBridge1711(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1712")
private external fun kniBridge1712(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1713")
private external fun kniBridge1713(): NativePtr
@SymbolName("libwebsockets_kniBridge1714")
private external fun kniBridge1714(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: Int, p6: NativePtr, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1715")
private external fun kniBridge1715(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge1716")
private external fun kniBridge1716(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge1717")
private external fun kniBridge1717(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1718")
private external fun kniBridge1718(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1719")
private external fun kniBridge1719(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1720")
private external fun kniBridge1720(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1721")
private external fun kniBridge1721(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1722")
private external fun kniBridge1722(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1723")
private external fun kniBridge1723(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1724")
private external fun kniBridge1724(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1725")
private external fun kniBridge1725(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1726")
private external fun kniBridge1726(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1727")
private external fun kniBridge1727(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1728")
private external fun kniBridge1728(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1729")
private external fun kniBridge1729(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge1730")
private external fun kniBridge1730(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1731")
private external fun kniBridge1731(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1732")
private external fun kniBridge1732(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1733")
private external fun kniBridge1733(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1734")
private external fun kniBridge1734(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1735")
private external fun kniBridge1735(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1736")
private external fun kniBridge1736(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1737")
private external fun kniBridge1737(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1738")
private external fun kniBridge1738(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge1739")
private external fun kniBridge1739(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1740")
private external fun kniBridge1740(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1741")
private external fun kniBridge1741(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: Int): Int
@SymbolName("libwebsockets_kniBridge1742")
private external fun kniBridge1742(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1743")
private external fun kniBridge1743(): NativePtr
@SymbolName("libwebsockets_kniBridge1744")
private external fun kniBridge1744(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1745")
private external fun kniBridge1745(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1746")
private external fun kniBridge1746(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1747")
private external fun kniBridge1747(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1748")
private external fun kniBridge1748(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1749")
private external fun kniBridge1749(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1750")
private external fun kniBridge1750(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1751")
private external fun kniBridge1751(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1752")
private external fun kniBridge1752(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1753")
private external fun kniBridge1753(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1754")
private external fun kniBridge1754(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1755")
private external fun kniBridge1755(): NativePtr
@SymbolName("libwebsockets_kniBridge1756")
private external fun kniBridge1756(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1757")
private external fun kniBridge1757(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1758")
private external fun kniBridge1758(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1759")
private external fun kniBridge1759(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1760")
private external fun kniBridge1760(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1761")
private external fun kniBridge1761(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1762")
private external fun kniBridge1762(): NativePtr
@SymbolName("libwebsockets_kniBridge1763")
private external fun kniBridge1763(): NativePtr
@SymbolName("libwebsockets_kniBridge1764")
private external fun kniBridge1764(): NativePtr
@SymbolName("libwebsockets_kniBridge1765")
private external fun kniBridge1765(): NativePtr
@SymbolName("libwebsockets_kniBridge1766")
private external fun kniBridge1766(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge1767")
private external fun kniBridge1767(): NativePtr
@SymbolName("libwebsockets_kniBridge1768")
private external fun kniBridge1768(): NativePtr
@SymbolName("libwebsockets_kniBridge1769")
private external fun kniBridge1769(): NativePtr
@SymbolName("libwebsockets_kniBridge1770")
private external fun kniBridge1770(): NativePtr
@SymbolName("libwebsockets_kniBridge1771")
private external fun kniBridge1771(): NativePtr
@SymbolName("libwebsockets_kniBridge1772")
private external fun kniBridge1772(): NativePtr
@SymbolName("libwebsockets_kniBridge1773")
private external fun kniBridge1773(): NativePtr
@SymbolName("libwebsockets_kniBridge1774")
private external fun kniBridge1774(): NativePtr
@SymbolName("libwebsockets_kniBridge1775")
private external fun kniBridge1775(): NativePtr
@SymbolName("libwebsockets_kniBridge1776")
private external fun kniBridge1776(): NativePtr
@SymbolName("libwebsockets_kniBridge1777")
private external fun kniBridge1777(): NativePtr
@SymbolName("libwebsockets_kniBridge1778")
private external fun kniBridge1778(): NativePtr
@SymbolName("libwebsockets_kniBridge1779")
private external fun kniBridge1779(): NativePtr
@SymbolName("libwebsockets_kniBridge1780")
private external fun kniBridge1780(): NativePtr
@SymbolName("libwebsockets_kniBridge1781")
private external fun kniBridge1781(): NativePtr
@SymbolName("libwebsockets_kniBridge1782")
private external fun kniBridge1782(): NativePtr
@SymbolName("libwebsockets_kniBridge1783")
private external fun kniBridge1783(): NativePtr
@SymbolName("libwebsockets_kniBridge1784")
private external fun kniBridge1784(): NativePtr
@SymbolName("libwebsockets_kniBridge1785")
private external fun kniBridge1785(): NativePtr
@SymbolName("libwebsockets_kniBridge1786")
private external fun kniBridge1786(): NativePtr
@SymbolName("libwebsockets_kniBridge1787")
private external fun kniBridge1787(): NativePtr
@SymbolName("libwebsockets_kniBridge1788")
private external fun kniBridge1788(): NativePtr
@SymbolName("libwebsockets_kniBridge1789")
private external fun kniBridge1789(): NativePtr
@SymbolName("libwebsockets_kniBridge1790")
private external fun kniBridge1790(): NativePtr
@SymbolName("libwebsockets_kniBridge1791")
private external fun kniBridge1791(): NativePtr
@SymbolName("libwebsockets_kniBridge1792")
private external fun kniBridge1792(): NativePtr
@SymbolName("libwebsockets_kniBridge1793")
private external fun kniBridge1793(): NativePtr
@SymbolName("libwebsockets_kniBridge1794")
private external fun kniBridge1794(): NativePtr
@SymbolName("libwebsockets_kniBridge1795")
private external fun kniBridge1795(): NativePtr
@SymbolName("libwebsockets_kniBridge1796")
private external fun kniBridge1796(): NativePtr
@SymbolName("libwebsockets_kniBridge1797")
private external fun kniBridge1797(): NativePtr
@SymbolName("libwebsockets_kniBridge1798")
private external fun kniBridge1798(): NativePtr
@SymbolName("libwebsockets_kniBridge1799")
private external fun kniBridge1799(): NativePtr
@SymbolName("libwebsockets_kniBridge1800")
private external fun kniBridge1800(): NativePtr
@SymbolName("libwebsockets_kniBridge1801")
private external fun kniBridge1801(): NativePtr
@SymbolName("libwebsockets_kniBridge1802")
private external fun kniBridge1802(): NativePtr
@SymbolName("libwebsockets_kniBridge1803")
private external fun kniBridge1803(): NativePtr
@SymbolName("libwebsockets_kniBridge1804")
private external fun kniBridge1804(): NativePtr
@SymbolName("libwebsockets_kniBridge1805")
private external fun kniBridge1805(): NativePtr
@SymbolName("libwebsockets_kniBridge1806")
private external fun kniBridge1806(): NativePtr
@SymbolName("libwebsockets_kniBridge1807")
private external fun kniBridge1807(): NativePtr
@SymbolName("libwebsockets_kniBridge1808")
private external fun kniBridge1808(): NativePtr
@SymbolName("libwebsockets_kniBridge1809")
private external fun kniBridge1809(): NativePtr
@SymbolName("libwebsockets_kniBridge1810")
private external fun kniBridge1810(): NativePtr
@SymbolName("libwebsockets_kniBridge1811")
private external fun kniBridge1811(): NativePtr
@SymbolName("libwebsockets_kniBridge1812")
private external fun kniBridge1812(): NativePtr
@SymbolName("libwebsockets_kniBridge1813")
private external fun kniBridge1813(): NativePtr
@SymbolName("libwebsockets_kniBridge1814")
private external fun kniBridge1814(): NativePtr
@SymbolName("libwebsockets_kniBridge1815")
private external fun kniBridge1815(): NativePtr
@SymbolName("libwebsockets_kniBridge1816")
private external fun kniBridge1816(): NativePtr
@SymbolName("libwebsockets_kniBridge1817")
private external fun kniBridge1817(): NativePtr
@SymbolName("libwebsockets_kniBridge1818")
private external fun kniBridge1818(): NativePtr
@SymbolName("libwebsockets_kniBridge1819")
private external fun kniBridge1819(): NativePtr
@SymbolName("libwebsockets_kniBridge1820")
private external fun kniBridge1820(): NativePtr
@SymbolName("libwebsockets_kniBridge1821")
private external fun kniBridge1821(): NativePtr
@SymbolName("libwebsockets_kniBridge1822")
private external fun kniBridge1822(): NativePtr
@SymbolName("libwebsockets_kniBridge1823")
private external fun kniBridge1823(): NativePtr
@SymbolName("libwebsockets_kniBridge1824")
private external fun kniBridge1824(): NativePtr
@SymbolName("libwebsockets_kniBridge1825")
private external fun kniBridge1825(): NativePtr
@SymbolName("libwebsockets_kniBridge1826")
private external fun kniBridge1826(): NativePtr
@SymbolName("libwebsockets_kniBridge1827")
private external fun kniBridge1827(): NativePtr
@SymbolName("libwebsockets_kniBridge1828")
private external fun kniBridge1828(): NativePtr
@SymbolName("libwebsockets_kniBridge1829")
private external fun kniBridge1829(): NativePtr
@SymbolName("libwebsockets_kniBridge1830")
private external fun kniBridge1830(): NativePtr
@SymbolName("libwebsockets_kniBridge1831")
private external fun kniBridge1831(): NativePtr
@SymbolName("libwebsockets_kniBridge1832")
private external fun kniBridge1832(): NativePtr
@SymbolName("libwebsockets_kniBridge1833")
private external fun kniBridge1833(): NativePtr
@SymbolName("libwebsockets_kniBridge1834")
private external fun kniBridge1834(): NativePtr
@SymbolName("libwebsockets_kniBridge1835")
private external fun kniBridge1835(): NativePtr
@SymbolName("libwebsockets_kniBridge1836")
private external fun kniBridge1836(): NativePtr
@SymbolName("libwebsockets_kniBridge1837")
private external fun kniBridge1837(): NativePtr
@SymbolName("libwebsockets_kniBridge1838")
private external fun kniBridge1838(): NativePtr
@SymbolName("libwebsockets_kniBridge1839")
private external fun kniBridge1839(): NativePtr
@SymbolName("libwebsockets_kniBridge1840")
private external fun kniBridge1840(): NativePtr
@SymbolName("libwebsockets_kniBridge1841")
private external fun kniBridge1841(): NativePtr
@SymbolName("libwebsockets_kniBridge1842")
private external fun kniBridge1842(): NativePtr
@SymbolName("libwebsockets_kniBridge1843")
private external fun kniBridge1843(): NativePtr
@SymbolName("libwebsockets_kniBridge1844")
private external fun kniBridge1844(): NativePtr
@SymbolName("libwebsockets_kniBridge1845")
private external fun kniBridge1845(): NativePtr
@SymbolName("libwebsockets_kniBridge1846")
private external fun kniBridge1846(): NativePtr
@SymbolName("libwebsockets_kniBridge1847")
private external fun kniBridge1847(): NativePtr
@SymbolName("libwebsockets_kniBridge1848")
private external fun kniBridge1848(): NativePtr
@SymbolName("libwebsockets_kniBridge1849")
private external fun kniBridge1849(): NativePtr
@SymbolName("libwebsockets_kniBridge1850")
private external fun kniBridge1850(): NativePtr
@SymbolName("libwebsockets_kniBridge1851")
private external fun kniBridge1851(): NativePtr
@SymbolName("libwebsockets_kniBridge1852")
private external fun kniBridge1852(): NativePtr
@SymbolName("libwebsockets_kniBridge1853")
private external fun kniBridge1853(): NativePtr
@SymbolName("libwebsockets_kniBridge1854")
private external fun kniBridge1854(): NativePtr
@SymbolName("libwebsockets_kniBridge1855")
private external fun kniBridge1855(): NativePtr
@SymbolName("libwebsockets_kniBridge1856")
private external fun kniBridge1856(): NativePtr
@SymbolName("libwebsockets_kniBridge1857")
private external fun kniBridge1857(): NativePtr
@SymbolName("libwebsockets_kniBridge1858")
private external fun kniBridge1858(): NativePtr
@SymbolName("libwebsockets_kniBridge1859")
private external fun kniBridge1859(): NativePtr
@SymbolName("libwebsockets_kniBridge1860")
private external fun kniBridge1860(): NativePtr
@SymbolName("libwebsockets_kniBridge1861")
private external fun kniBridge1861(): NativePtr
@SymbolName("libwebsockets_kniBridge1862")
private external fun kniBridge1862(): NativePtr
@SymbolName("libwebsockets_kniBridge1863")
private external fun kniBridge1863(): NativePtr
@SymbolName("libwebsockets_kniBridge1864")
private external fun kniBridge1864(): NativePtr
@SymbolName("libwebsockets_kniBridge1865")
private external fun kniBridge1865(): NativePtr
@SymbolName("libwebsockets_kniBridge1866")
private external fun kniBridge1866(): NativePtr
@SymbolName("libwebsockets_kniBridge1867")
private external fun kniBridge1867(): NativePtr
@SymbolName("libwebsockets_kniBridge1868")
private external fun kniBridge1868(): NativePtr
@SymbolName("libwebsockets_kniBridge1869")
private external fun kniBridge1869(): NativePtr
@SymbolName("libwebsockets_kniBridge1870")
private external fun kniBridge1870(): NativePtr
@SymbolName("libwebsockets_kniBridge1871")
private external fun kniBridge1871(): NativePtr
@SymbolName("libwebsockets_kniBridge1872")
private external fun kniBridge1872(): NativePtr
@SymbolName("libwebsockets_kniBridge1873")
private external fun kniBridge1873(): NativePtr
@SymbolName("libwebsockets_kniBridge1874")
private external fun kniBridge1874(): NativePtr
@SymbolName("libwebsockets_kniBridge1875")
private external fun kniBridge1875(): NativePtr
@SymbolName("libwebsockets_kniBridge1876")
private external fun kniBridge1876(): NativePtr
@SymbolName("libwebsockets_kniBridge1877")
private external fun kniBridge1877(): NativePtr
@SymbolName("libwebsockets_kniBridge1878")
private external fun kniBridge1878(): NativePtr
@SymbolName("libwebsockets_kniBridge1879")
private external fun kniBridge1879(): NativePtr
@SymbolName("libwebsockets_kniBridge1880")
private external fun kniBridge1880(): NativePtr
@SymbolName("libwebsockets_kniBridge1881")
private external fun kniBridge1881(): NativePtr
@SymbolName("libwebsockets_kniBridge1882")
private external fun kniBridge1882(): NativePtr
@SymbolName("libwebsockets_kniBridge1883")
private external fun kniBridge1883(): NativePtr
@SymbolName("libwebsockets_kniBridge1884")
private external fun kniBridge1884(): NativePtr
@SymbolName("libwebsockets_kniBridge1885")
private external fun kniBridge1885(): NativePtr
@SymbolName("libwebsockets_kniBridge1886")
private external fun kniBridge1886(): NativePtr
@SymbolName("libwebsockets_kniBridge1887")
private external fun kniBridge1887(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1888")
private external fun kniBridge1888(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1889")
private external fun kniBridge1889(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1890")
private external fun kniBridge1890(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1891")
private external fun kniBridge1891(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1892")
private external fun kniBridge1892(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1893")
private external fun kniBridge1893(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1894")
private external fun kniBridge1894(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1895")
private external fun kniBridge1895(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1896")
private external fun kniBridge1896(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1897")
private external fun kniBridge1897(p0: Int): Int
@SymbolName("libwebsockets_kniBridge1898")
private external fun kniBridge1898(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1899")
private external fun kniBridge1899(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1900")
private external fun kniBridge1900(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1901")
private external fun kniBridge1901(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1902")
private external fun kniBridge1902(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1903")
private external fun kniBridge1903(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1904")
private external fun kniBridge1904(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge1905")
private external fun kniBridge1905(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1906")
private external fun kniBridge1906(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1907")
private external fun kniBridge1907(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1908")
private external fun kniBridge1908(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1909")
private external fun kniBridge1909(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1910")
private external fun kniBridge1910(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1911")
private external fun kniBridge1911(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1912")
private external fun kniBridge1912(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1913")
private external fun kniBridge1913(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1914")
private external fun kniBridge1914(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1915")
private external fun kniBridge1915(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1916")
private external fun kniBridge1916(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1917")
private external fun kniBridge1917(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1918")
private external fun kniBridge1918(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1919")
private external fun kniBridge1919(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1920")
private external fun kniBridge1920(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1921")
private external fun kniBridge1921(): NativePtr
@SymbolName("libwebsockets_kniBridge1922")
private external fun kniBridge1922(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1923")
private external fun kniBridge1923(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1924")
private external fun kniBridge1924(p0: Int, p1: NativePtr, p2: NativePtr, p3: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1925")
private external fun kniBridge1925(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1926")
private external fun kniBridge1926(p0: Int, p1: NativePtr, p2: NativePtr, p3: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1927")
private external fun kniBridge1927(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge1928")
private external fun kniBridge1928(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1929")
private external fun kniBridge1929(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1930")
private external fun kniBridge1930(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1931")
private external fun kniBridge1931(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1932")
private external fun kniBridge1932(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1933")
private external fun kniBridge1933(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1934")
private external fun kniBridge1934(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1935")
private external fun kniBridge1935(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1936")
private external fun kniBridge1936(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1937")
private external fun kniBridge1937(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1938")
private external fun kniBridge1938(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge1939")
private external fun kniBridge1939(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge1940")
private external fun kniBridge1940(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1941")
private external fun kniBridge1941(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1942")
private external fun kniBridge1942(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1943")
private external fun kniBridge1943(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1944")
private external fun kniBridge1944(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1945")
private external fun kniBridge1945(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: Int): Int
@SymbolName("libwebsockets_kniBridge1946")
private external fun kniBridge1946(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int, p5: Int, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1947")
private external fun kniBridge1947(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int, p5: NativePtr, p6: Int, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1948")
private external fun kniBridge1948(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: Int): Int
@SymbolName("libwebsockets_kniBridge1949")
private external fun kniBridge1949(p0: NativePtr, p1: ULong, p2: NativePtr, p3: ULong, p4: ULong, p5: ULong, p6: ULong, p7: ULong, p8: NativePtr, p9: ULong): Int
@SymbolName("libwebsockets_kniBridge1950")
private external fun kniBridge1950(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: Int): Int
@SymbolName("libwebsockets_kniBridge1951")
private external fun kniBridge1951(): Unit
@SymbolName("libwebsockets_kniBridge1952")
private external fun kniBridge1952(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge1953")
private external fun kniBridge1953(p0: Int, p1: Int, p2: Int, p3: Int, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1954")
private external fun kniBridge1954(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1955")
private external fun kniBridge1955(p0: Int, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1956")
private external fun kniBridge1956(): Unit
@SymbolName("libwebsockets_kniBridge1957")
private external fun kniBridge1957(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge1958")
private external fun kniBridge1958(): Int
@SymbolName("libwebsockets_kniBridge1959")
private external fun kniBridge1959(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1960")
private external fun kniBridge1960(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1961")
private external fun kniBridge1961(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1962")
private external fun kniBridge1962(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1963")
private external fun kniBridge1963(p0: Int, p1: Int): Int
@SymbolName("libwebsockets_kniBridge1964")
private external fun kniBridge1964(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1965")
private external fun kniBridge1965(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1966")
private external fun kniBridge1966(p0: Int, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1967")
private external fun kniBridge1967(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1968")
private external fun kniBridge1968(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1969")
private external fun kniBridge1969(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1970")
private external fun kniBridge1970(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1971")
private external fun kniBridge1971(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1972")
private external fun kniBridge1972(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1973")
private external fun kniBridge1973(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1974")
private external fun kniBridge1974(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1975")
private external fun kniBridge1975(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1976")
private external fun kniBridge1976(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1977")
private external fun kniBridge1977(p0: Int, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1978")
private external fun kniBridge1978(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1979")
private external fun kniBridge1979(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1980")
private external fun kniBridge1980(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1981")
private external fun kniBridge1981(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1982")
private external fun kniBridge1982(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1983")
private external fun kniBridge1983(p0: Int, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1984")
private external fun kniBridge1984(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1985")
private external fun kniBridge1985(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1986")
private external fun kniBridge1986(p0: NativePtr, p1: Int, p2: Int, p3: Int, p4: Int, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1987")
private external fun kniBridge1987(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1988")
private external fun kniBridge1988(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1989")
private external fun kniBridge1989(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1990")
private external fun kniBridge1990(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge1991")
private external fun kniBridge1991(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libwebsockets_kniBridge1992")
private external fun kniBridge1992(p0: Int, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge1993")
private external fun kniBridge1993(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1994")
private external fun kniBridge1994(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1995")
private external fun kniBridge1995(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1996")
private external fun kniBridge1996(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1997")
private external fun kniBridge1997(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge1998")
private external fun kniBridge1998(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge1999")
private external fun kniBridge1999(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2000")
private external fun kniBridge2000(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge2001")
private external fun kniBridge2001(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2002")
private external fun kniBridge2002(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge2003")
private external fun kniBridge2003(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2004")
private external fun kniBridge2004(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge2005")
private external fun kniBridge2005(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2006")
private external fun kniBridge2006(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge2007")
private external fun kniBridge2007(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2008")
private external fun kniBridge2008(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge2009")
private external fun kniBridge2009(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2010")
private external fun kniBridge2010(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2011")
private external fun kniBridge2011(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2012")
private external fun kniBridge2012(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2013")
private external fun kniBridge2013(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2014")
private external fun kniBridge2014(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2015")
private external fun kniBridge2015(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2016")
private external fun kniBridge2016(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2017")
private external fun kniBridge2017(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2018")
private external fun kniBridge2018(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2019")
private external fun kniBridge2019(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2020")
private external fun kniBridge2020(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2021")
private external fun kniBridge2021(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2022")
private external fun kniBridge2022(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2023")
private external fun kniBridge2023(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2024")
private external fun kniBridge2024(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2025")
private external fun kniBridge2025(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2026")
private external fun kniBridge2026(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2027")
private external fun kniBridge2027(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2028")
private external fun kniBridge2028(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2029")
private external fun kniBridge2029(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2030")
private external fun kniBridge2030(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2031")
private external fun kniBridge2031(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2032")
private external fun kniBridge2032(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2033")
private external fun kniBridge2033(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2034")
private external fun kniBridge2034(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2035")
private external fun kniBridge2035(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2036")
private external fun kniBridge2036(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2037")
private external fun kniBridge2037(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2038")
private external fun kniBridge2038(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2039")
private external fun kniBridge2039(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2040")
private external fun kniBridge2040(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2041")
private external fun kniBridge2041(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2042")
private external fun kniBridge2042(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2043")
private external fun kniBridge2043(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2044")
private external fun kniBridge2044(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2045")
private external fun kniBridge2045(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2046")
private external fun kniBridge2046(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2047")
private external fun kniBridge2047(): Unit
@SymbolName("libwebsockets_kniBridge2048")
private external fun kniBridge2048(): Int
@SymbolName("libwebsockets_kniBridge2049")
private external fun kniBridge2049(): NativePtr
@SymbolName("libwebsockets_kniBridge2050")
private external fun kniBridge2050(): NativePtr
@SymbolName("libwebsockets_kniBridge2051")
private external fun kniBridge2051(): NativePtr
@SymbolName("libwebsockets_kniBridge2052")
private external fun kniBridge2052(): NativePtr
@SymbolName("libwebsockets_kniBridge2053")
private external fun kniBridge2053(): NativePtr
@SymbolName("libwebsockets_kniBridge2054")
private external fun kniBridge2054(): NativePtr
@SymbolName("libwebsockets_kniBridge2055")
private external fun kniBridge2055(): NativePtr
@SymbolName("libwebsockets_kniBridge2056")
private external fun kniBridge2056(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2057")
private external fun kniBridge2057(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2058")
private external fun kniBridge2058(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2059")
private external fun kniBridge2059(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2060")
private external fun kniBridge2060(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2061")
private external fun kniBridge2061(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2062")
private external fun kniBridge2062(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2063")
private external fun kniBridge2063(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2064")
private external fun kniBridge2064(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2065")
private external fun kniBridge2065(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2066")
private external fun kniBridge2066(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2067")
private external fun kniBridge2067(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2068")
private external fun kniBridge2068(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2069")
private external fun kniBridge2069(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2070")
private external fun kniBridge2070(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2071")
private external fun kniBridge2071(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2072")
private external fun kniBridge2072(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2073")
private external fun kniBridge2073(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2074")
private external fun kniBridge2074(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2075")
private external fun kniBridge2075(p0: NativePtr, p1: UInt): Unit
@SymbolName("libwebsockets_kniBridge2076")
private external fun kniBridge2076(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge2077")
private external fun kniBridge2077(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2078")
private external fun kniBridge2078(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2079")
private external fun kniBridge2079(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge2080")
private external fun kniBridge2080(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2081")
private external fun kniBridge2081(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2082")
private external fun kniBridge2082(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2083")
private external fun kniBridge2083(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2084")
private external fun kniBridge2084(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2085")
private external fun kniBridge2085(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2086")
private external fun kniBridge2086(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2087")
private external fun kniBridge2087(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2088")
private external fun kniBridge2088(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2089")
private external fun kniBridge2089(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2090")
private external fun kniBridge2090(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2091")
private external fun kniBridge2091(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2092")
private external fun kniBridge2092(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2093")
private external fun kniBridge2093(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2094")
private external fun kniBridge2094(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2095")
private external fun kniBridge2095(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge2096")
private external fun kniBridge2096(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2097")
private external fun kniBridge2097(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2098")
private external fun kniBridge2098(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2099")
private external fun kniBridge2099(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2100")
private external fun kniBridge2100(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2101")
private external fun kniBridge2101(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2102")
private external fun kniBridge2102(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2103")
private external fun kniBridge2103(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2104")
private external fun kniBridge2104(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2105")
private external fun kniBridge2105(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2106")
private external fun kniBridge2106(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2107")
private external fun kniBridge2107(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2108")
private external fun kniBridge2108(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2109")
private external fun kniBridge2109(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2110")
private external fun kniBridge2110(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2111")
private external fun kniBridge2111(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2112")
private external fun kniBridge2112(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2113")
private external fun kniBridge2113(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: ULong, p5: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2114")
private external fun kniBridge2114(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2115")
private external fun kniBridge2115(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2116")
private external fun kniBridge2116(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2117")
private external fun kniBridge2117(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2118")
private external fun kniBridge2118(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2119")
private external fun kniBridge2119(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2120")
private external fun kniBridge2120(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2121")
private external fun kniBridge2121(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2122")
private external fun kniBridge2122(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2123")
private external fun kniBridge2123(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2124")
private external fun kniBridge2124(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2125")
private external fun kniBridge2125(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2126")
private external fun kniBridge2126(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2127")
private external fun kniBridge2127(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2128")
private external fun kniBridge2128(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2129")
private external fun kniBridge2129(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2130")
private external fun kniBridge2130(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2131")
private external fun kniBridge2131(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2132")
private external fun kniBridge2132(): NativePtr
@SymbolName("libwebsockets_kniBridge2133")
private external fun kniBridge2133(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2134")
private external fun kniBridge2134(): NativePtr
@SymbolName("libwebsockets_kniBridge2135")
private external fun kniBridge2135(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2136")
private external fun kniBridge2136(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2137")
private external fun kniBridge2137(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2138")
private external fun kniBridge2138(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2139")
private external fun kniBridge2139(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2140")
private external fun kniBridge2140(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2141")
private external fun kniBridge2141(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2142")
private external fun kniBridge2142(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2143")
private external fun kniBridge2143(): NativePtr
@SymbolName("libwebsockets_kniBridge2144")
private external fun kniBridge2144(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2145")
private external fun kniBridge2145(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2146")
private external fun kniBridge2146(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2147")
private external fun kniBridge2147(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2148")
private external fun kniBridge2148(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2149")
private external fun kniBridge2149(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2150")
private external fun kniBridge2150(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2151")
private external fun kniBridge2151(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2152")
private external fun kniBridge2152(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2153")
private external fun kniBridge2153(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2154")
private external fun kniBridge2154(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2155")
private external fun kniBridge2155(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2156")
private external fun kniBridge2156(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2157")
private external fun kniBridge2157(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2158")
private external fun kniBridge2158(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge2159")
private external fun kniBridge2159(p0: NativePtr, p1: UInt): Unit
@SymbolName("libwebsockets_kniBridge2160")
private external fun kniBridge2160(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge2161")
private external fun kniBridge2161(p0: NativePtr, p1: UInt): Unit
@SymbolName("libwebsockets_kniBridge2162")
private external fun kniBridge2162(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2163")
private external fun kniBridge2163(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2164")
private external fun kniBridge2164(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2165")
private external fun kniBridge2165(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2166")
private external fun kniBridge2166(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2167")
private external fun kniBridge2167(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2168")
private external fun kniBridge2168(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2169")
private external fun kniBridge2169(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2170")
private external fun kniBridge2170(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2171")
private external fun kniBridge2171(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2172")
private external fun kniBridge2172(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2173")
private external fun kniBridge2173(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge2174")
private external fun kniBridge2174(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2175")
private external fun kniBridge2175(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2176")
private external fun kniBridge2176(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2177")
private external fun kniBridge2177(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2178")
private external fun kniBridge2178(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2179")
private external fun kniBridge2179(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2180")
private external fun kniBridge2180(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2181")
private external fun kniBridge2181(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2182")
private external fun kniBridge2182(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2183")
private external fun kniBridge2183(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2184")
private external fun kniBridge2184(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2185")
private external fun kniBridge2185(): NativePtr
@SymbolName("libwebsockets_kniBridge2186")
private external fun kniBridge2186(): NativePtr
@SymbolName("libwebsockets_kniBridge2187")
private external fun kniBridge2187(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2188")
private external fun kniBridge2188(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2189")
private external fun kniBridge2189(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2190")
private external fun kniBridge2190(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2191")
private external fun kniBridge2191(p0: NativePtr, p1: ULong, p2: NativePtr, p3: ULong, p4: NativePtr, p5: ULong, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2192")
private external fun kniBridge2192(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2193")
private external fun kniBridge2193(): NativePtr
@SymbolName("libwebsockets_kniBridge2194")
private external fun kniBridge2194(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2195")
private external fun kniBridge2195(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2196")
private external fun kniBridge2196(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2197")
private external fun kniBridge2197(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2198")
private external fun kniBridge2198(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2199")
private external fun kniBridge2199(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2200")
private external fun kniBridge2200(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2201")
private external fun kniBridge2201(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2202")
private external fun kniBridge2202(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2203")
private external fun kniBridge2203(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2204")
private external fun kniBridge2204(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2205")
private external fun kniBridge2205(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2206")
private external fun kniBridge2206(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2207")
private external fun kniBridge2207(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2208")
private external fun kniBridge2208(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2209")
private external fun kniBridge2209(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2210")
private external fun kniBridge2210(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2211")
private external fun kniBridge2211(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2212")
private external fun kniBridge2212(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2213")
private external fun kniBridge2213(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2214")
private external fun kniBridge2214(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2215")
private external fun kniBridge2215(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2216")
private external fun kniBridge2216(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2217")
private external fun kniBridge2217(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2218")
private external fun kniBridge2218(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2219")
private external fun kniBridge2219(): Int
@SymbolName("libwebsockets_kniBridge2220")
private external fun kniBridge2220(): NativePtr
@SymbolName("libwebsockets_kniBridge2221")
private external fun kniBridge2221(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2222")
private external fun kniBridge2222(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2223")
private external fun kniBridge2223(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2224")
private external fun kniBridge2224(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2225")
private external fun kniBridge2225(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2226")
private external fun kniBridge2226(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2227")
private external fun kniBridge2227(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2228")
private external fun kniBridge2228(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2229")
private external fun kniBridge2229(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2230")
private external fun kniBridge2230(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2231")
private external fun kniBridge2231(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2232")
private external fun kniBridge2232(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2233")
private external fun kniBridge2233(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2234")
private external fun kniBridge2234(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2235")
private external fun kniBridge2235(p0: Int, p1: ULong, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2236")
private external fun kniBridge2236(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2237")
private external fun kniBridge2237(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: NativePtr, p8: NativePtr, p9: NativePtr, p10: NativePtr, p11: NativePtr, p12: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2238")
private external fun kniBridge2238(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2239")
private external fun kniBridge2239(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2240")
private external fun kniBridge2240(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2241")
private external fun kniBridge2241(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2242")
private external fun kniBridge2242(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2243")
private external fun kniBridge2243(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2244")
private external fun kniBridge2244(p0: Int, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2245")
private external fun kniBridge2245(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2246")
private external fun kniBridge2246(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2247")
private external fun kniBridge2247(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2248")
private external fun kniBridge2248(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2249")
private external fun kniBridge2249(): NativePtr
@SymbolName("libwebsockets_kniBridge2250")
private external fun kniBridge2250(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2251")
private external fun kniBridge2251(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2252")
private external fun kniBridge2252(): NativePtr
@SymbolName("libwebsockets_kniBridge2253")
private external fun kniBridge2253(): NativePtr
@SymbolName("libwebsockets_kniBridge2254")
private external fun kniBridge2254(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2255")
private external fun kniBridge2255(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2256")
private external fun kniBridge2256(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2257")
private external fun kniBridge2257(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2258")
private external fun kniBridge2258(): NativePtr
@SymbolName("libwebsockets_kniBridge2259")
private external fun kniBridge2259(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2260")
private external fun kniBridge2260(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2261")
private external fun kniBridge2261(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2262")
private external fun kniBridge2262(): NativePtr
@SymbolName("libwebsockets_kniBridge2263")
private external fun kniBridge2263(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2264")
private external fun kniBridge2264(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2265")
private external fun kniBridge2265(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2266")
private external fun kniBridge2266(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2267")
private external fun kniBridge2267(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2268")
private external fun kniBridge2268(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2269")
private external fun kniBridge2269(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: UInt, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2270")
private external fun kniBridge2270(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2271")
private external fun kniBridge2271(p0: Int, p1: NativePtr, p2: UInt, p3: NativePtr, p4: UInt, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2272")
private external fun kniBridge2272(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2273")
private external fun kniBridge2273(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2274")
private external fun kniBridge2274(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2275")
private external fun kniBridge2275(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge2276")
private external fun kniBridge2276(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2277")
private external fun kniBridge2277(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge2278")
private external fun kniBridge2278(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2279")
private external fun kniBridge2279(p0: NativePtr, p1: Long, p2: NativePtr, p3: Long, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2280")
private external fun kniBridge2280(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge2281")
private external fun kniBridge2281(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int, p5: NativePtr, p6: Int): Int
@SymbolName("libwebsockets_kniBridge2282")
private external fun kniBridge2282(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: NativePtr, p5: Int, p6: NativePtr, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2283")
private external fun kniBridge2283(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int, p5: NativePtr, p6: Int, p7: NativePtr, p8: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2284")
private external fun kniBridge2284(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge2285")
private external fun kniBridge2285(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2286")
private external fun kniBridge2286(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge2287")
private external fun kniBridge2287(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2288")
private external fun kniBridge2288(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge2289")
private external fun kniBridge2289(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2290")
private external fun kniBridge2290(p0: Int): Int
@SymbolName("libwebsockets_kniBridge2291")
private external fun kniBridge2291(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2292")
private external fun kniBridge2292(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge2293")
private external fun kniBridge2293(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge2294")
private external fun kniBridge2294(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge2295")
private external fun kniBridge2295(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2296")
private external fun kniBridge2296(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2297")
private external fun kniBridge2297(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2298")
private external fun kniBridge2298(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2299")
private external fun kniBridge2299(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2300")
private external fun kniBridge2300(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2301")
private external fun kniBridge2301(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2302")
private external fun kniBridge2302(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2303")
private external fun kniBridge2303(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2304")
private external fun kniBridge2304(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2305")
private external fun kniBridge2305(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2306")
private external fun kniBridge2306(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2307")
private external fun kniBridge2307(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2308")
private external fun kniBridge2308(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2309")
private external fun kniBridge2309(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2310")
private external fun kniBridge2310(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2311")
private external fun kniBridge2311(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2312")
private external fun kniBridge2312(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2313")
private external fun kniBridge2313(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2314")
private external fun kniBridge2314(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2315")
private external fun kniBridge2315(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2316")
private external fun kniBridge2316(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2317")
private external fun kniBridge2317(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2318")
private external fun kniBridge2318(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2319")
private external fun kniBridge2319(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2320")
private external fun kniBridge2320(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2321")
private external fun kniBridge2321(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2322")
private external fun kniBridge2322(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2323")
private external fun kniBridge2323(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2324")
private external fun kniBridge2324(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2325")
private external fun kniBridge2325(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2326")
private external fun kniBridge2326(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2327")
private external fun kniBridge2327(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2328")
private external fun kniBridge2328(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2329")
private external fun kniBridge2329(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2330")
private external fun kniBridge2330(): Int
@SymbolName("libwebsockets_kniBridge2331")
private external fun kniBridge2331(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2332")
private external fun kniBridge2332(): NativePtr
@SymbolName("libwebsockets_kniBridge2333")
private external fun kniBridge2333(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2334")
private external fun kniBridge2334(): NativePtr
@SymbolName("libwebsockets_kniBridge2335")
private external fun kniBridge2335(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2336")
private external fun kniBridge2336(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2337")
private external fun kniBridge2337(): NativePtr
@SymbolName("libwebsockets_kniBridge2338")
private external fun kniBridge2338(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2339")
private external fun kniBridge2339(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2340")
private external fun kniBridge2340(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2341")
private external fun kniBridge2341(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2342")
private external fun kniBridge2342(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2343")
private external fun kniBridge2343(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2344")
private external fun kniBridge2344(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2345")
private external fun kniBridge2345(p0: Int, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2346")
private external fun kniBridge2346(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2347")
private external fun kniBridge2347(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2348")
private external fun kniBridge2348(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2349")
private external fun kniBridge2349(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2350")
private external fun kniBridge2350(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2351")
private external fun kniBridge2351(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2352")
private external fun kniBridge2352(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2353")
private external fun kniBridge2353(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2354")
private external fun kniBridge2354(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2355")
private external fun kniBridge2355(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2356")
private external fun kniBridge2356(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2357")
private external fun kniBridge2357(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2358")
private external fun kniBridge2358(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2359")
private external fun kniBridge2359(): NativePtr
@SymbolName("libwebsockets_kniBridge2360")
private external fun kniBridge2360(): NativePtr
@SymbolName("libwebsockets_kniBridge2361")
private external fun kniBridge2361(): NativePtr
@SymbolName("libwebsockets_kniBridge2362")
private external fun kniBridge2362(p0: NativePtr, p1: ULong, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr, p6: ULong, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2363")
private external fun kniBridge2363(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2364")
private external fun kniBridge2364(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2365")
private external fun kniBridge2365(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2366")
private external fun kniBridge2366(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2367")
private external fun kniBridge2367(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2368")
private external fun kniBridge2368(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2369")
private external fun kniBridge2369(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2370")
private external fun kniBridge2370(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2371")
private external fun kniBridge2371(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge2372")
private external fun kniBridge2372(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge2373")
private external fun kniBridge2373(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2374")
private external fun kniBridge2374(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2375")
private external fun kniBridge2375(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2376")
private external fun kniBridge2376(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2377")
private external fun kniBridge2377(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2378")
private external fun kniBridge2378(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2379")
private external fun kniBridge2379(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2380")
private external fun kniBridge2380(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2381")
private external fun kniBridge2381(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2382")
private external fun kniBridge2382(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2383")
private external fun kniBridge2383(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2384")
private external fun kniBridge2384(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2385")
private external fun kniBridge2385(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2386")
private external fun kniBridge2386(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2387")
private external fun kniBridge2387(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2388")
private external fun kniBridge2388(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2389")
private external fun kniBridge2389(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2390")
private external fun kniBridge2390(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2391")
private external fun kniBridge2391(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2392")
private external fun kniBridge2392(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2393")
private external fun kniBridge2393(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2394")
private external fun kniBridge2394(): Int
@SymbolName("libwebsockets_kniBridge2395")
private external fun kniBridge2395(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2396")
private external fun kniBridge2396(): NativePtr
@SymbolName("libwebsockets_kniBridge2397")
private external fun kniBridge2397(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2398")
private external fun kniBridge2398(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2399")
private external fun kniBridge2399(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2400")
private external fun kniBridge2400(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2401")
private external fun kniBridge2401(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2402")
private external fun kniBridge2402(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2403")
private external fun kniBridge2403(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2404")
private external fun kniBridge2404(): NativePtr
@SymbolName("libwebsockets_kniBridge2405")
private external fun kniBridge2405(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2406")
private external fun kniBridge2406(): NativePtr
@SymbolName("libwebsockets_kniBridge2407")
private external fun kniBridge2407(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2408")
private external fun kniBridge2408(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2409")
private external fun kniBridge2409(): NativePtr
@SymbolName("libwebsockets_kniBridge2410")
private external fun kniBridge2410(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2411")
private external fun kniBridge2411(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2412")
private external fun kniBridge2412(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2413")
private external fun kniBridge2413(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2414")
private external fun kniBridge2414(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2415")
private external fun kniBridge2415(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2416")
private external fun kniBridge2416(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2417")
private external fun kniBridge2417(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2418")
private external fun kniBridge2418(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2419")
private external fun kniBridge2419(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2420")
private external fun kniBridge2420(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2421")
private external fun kniBridge2421(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2422")
private external fun kniBridge2422(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2423")
private external fun kniBridge2423(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge2424")
private external fun kniBridge2424(p0: Int, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2425")
private external fun kniBridge2425(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2426")
private external fun kniBridge2426(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2427")
private external fun kniBridge2427(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2428")
private external fun kniBridge2428(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2429")
private external fun kniBridge2429(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2430")
private external fun kniBridge2430(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2431")
private external fun kniBridge2431(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2432")
private external fun kniBridge2432(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2433")
private external fun kniBridge2433(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2434")
private external fun kniBridge2434(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2435")
private external fun kniBridge2435(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2436")
private external fun kniBridge2436(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2437")
private external fun kniBridge2437(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2438")
private external fun kniBridge2438(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2439")
private external fun kniBridge2439(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2440")
private external fun kniBridge2440(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2441")
private external fun kniBridge2441(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2442")
private external fun kniBridge2442(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2443")
private external fun kniBridge2443(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2444")
private external fun kniBridge2444(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2445")
private external fun kniBridge2445(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2446")
private external fun kniBridge2446(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2447")
private external fun kniBridge2447(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2448")
private external fun kniBridge2448(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2449")
private external fun kniBridge2449(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2450")
private external fun kniBridge2450(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2451")
private external fun kniBridge2451(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2452")
private external fun kniBridge2452(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2453")
private external fun kniBridge2453(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2454")
private external fun kniBridge2454(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2455")
private external fun kniBridge2455(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2456")
private external fun kniBridge2456(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2457")
private external fun kniBridge2457(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2458")
private external fun kniBridge2458(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2459")
private external fun kniBridge2459(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2460")
private external fun kniBridge2460(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2461")
private external fun kniBridge2461(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2462")
private external fun kniBridge2462(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2463")
private external fun kniBridge2463(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2464")
private external fun kniBridge2464(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2465")
private external fun kniBridge2465(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2466")
private external fun kniBridge2466(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2467")
private external fun kniBridge2467(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2468")
private external fun kniBridge2468(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2469")
private external fun kniBridge2469(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2470")
private external fun kniBridge2470(): Int
@SymbolName("libwebsockets_kniBridge2471")
private external fun kniBridge2471(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2472")
private external fun kniBridge2472(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2473")
private external fun kniBridge2473(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2474")
private external fun kniBridge2474(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2475")
private external fun kniBridge2475(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2476")
private external fun kniBridge2476(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2477")
private external fun kniBridge2477(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2478")
private external fun kniBridge2478(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2479")
private external fun kniBridge2479(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2480")
private external fun kniBridge2480(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2481")
private external fun kniBridge2481(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2482")
private external fun kniBridge2482(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2483")
private external fun kniBridge2483(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2484")
private external fun kniBridge2484(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2485")
private external fun kniBridge2485(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2486")
private external fun kniBridge2486(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2487")
private external fun kniBridge2487(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2488")
private external fun kniBridge2488(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2489")
private external fun kniBridge2489(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2490")
private external fun kniBridge2490(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2491")
private external fun kniBridge2491(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2492")
private external fun kniBridge2492(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2493")
private external fun kniBridge2493(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2494")
private external fun kniBridge2494(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2495")
private external fun kniBridge2495(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2496")
private external fun kniBridge2496(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2497")
private external fun kniBridge2497(): NativePtr
@SymbolName("libwebsockets_kniBridge2498")
private external fun kniBridge2498(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2499")
private external fun kniBridge2499(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2500")
private external fun kniBridge2500(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2501")
private external fun kniBridge2501(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2502")
private external fun kniBridge2502(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2503")
private external fun kniBridge2503(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2504")
private external fun kniBridge2504(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2505")
private external fun kniBridge2505(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2506")
private external fun kniBridge2506(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2507")
private external fun kniBridge2507(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2508")
private external fun kniBridge2508(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2509")
private external fun kniBridge2509(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2510")
private external fun kniBridge2510(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2511")
private external fun kniBridge2511(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2512")
private external fun kniBridge2512(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2513")
private external fun kniBridge2513(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2514")
private external fun kniBridge2514(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2515")
private external fun kniBridge2515(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2516")
private external fun kniBridge2516(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2517")
private external fun kniBridge2517(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2518")
private external fun kniBridge2518(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2519")
private external fun kniBridge2519(): NativePtr
@SymbolName("libwebsockets_kniBridge2520")
private external fun kniBridge2520(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2521")
private external fun kniBridge2521(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2522")
private external fun kniBridge2522(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2523")
private external fun kniBridge2523(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2524")
private external fun kniBridge2524(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2525")
private external fun kniBridge2525(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2526")
private external fun kniBridge2526(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2527")
private external fun kniBridge2527(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2528")
private external fun kniBridge2528(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2529")
private external fun kniBridge2529(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2530")
private external fun kniBridge2530(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2531")
private external fun kniBridge2531(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2532")
private external fun kniBridge2532(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2533")
private external fun kniBridge2533(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2534")
private external fun kniBridge2534(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2535")
private external fun kniBridge2535(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2536")
private external fun kniBridge2536(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2537")
private external fun kniBridge2537(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2538")
private external fun kniBridge2538(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2539")
private external fun kniBridge2539(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2540")
private external fun kniBridge2540(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2541")
private external fun kniBridge2541(): NativePtr
@SymbolName("libwebsockets_kniBridge2542")
private external fun kniBridge2542(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2543")
private external fun kniBridge2543(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2544")
private external fun kniBridge2544(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2545")
private external fun kniBridge2545(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2546")
private external fun kniBridge2546(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2547")
private external fun kniBridge2547(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2548")
private external fun kniBridge2548(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2549")
private external fun kniBridge2549(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2550")
private external fun kniBridge2550(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2551")
private external fun kniBridge2551(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2552")
private external fun kniBridge2552(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2553")
private external fun kniBridge2553(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2554")
private external fun kniBridge2554(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2555")
private external fun kniBridge2555(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2556")
private external fun kniBridge2556(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2557")
private external fun kniBridge2557(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2558")
private external fun kniBridge2558(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2559")
private external fun kniBridge2559(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2560")
private external fun kniBridge2560(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2561")
private external fun kniBridge2561(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2562")
private external fun kniBridge2562(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2563")
private external fun kniBridge2563(): NativePtr
@SymbolName("libwebsockets_kniBridge2564")
private external fun kniBridge2564(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2565")
private external fun kniBridge2565(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2566")
private external fun kniBridge2566(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2567")
private external fun kniBridge2567(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2568")
private external fun kniBridge2568(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2569")
private external fun kniBridge2569(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2570")
private external fun kniBridge2570(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2571")
private external fun kniBridge2571(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2572")
private external fun kniBridge2572(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2573")
private external fun kniBridge2573(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2574")
private external fun kniBridge2574(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2575")
private external fun kniBridge2575(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2576")
private external fun kniBridge2576(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2577")
private external fun kniBridge2577(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2578")
private external fun kniBridge2578(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2579")
private external fun kniBridge2579(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2580")
private external fun kniBridge2580(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2581")
private external fun kniBridge2581(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2582")
private external fun kniBridge2582(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2583")
private external fun kniBridge2583(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2584")
private external fun kniBridge2584(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2585")
private external fun kniBridge2585(): NativePtr
@SymbolName("libwebsockets_kniBridge2586")
private external fun kniBridge2586(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2587")
private external fun kniBridge2587(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2588")
private external fun kniBridge2588(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2589")
private external fun kniBridge2589(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2590")
private external fun kniBridge2590(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2591")
private external fun kniBridge2591(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2592")
private external fun kniBridge2592(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2593")
private external fun kniBridge2593(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2594")
private external fun kniBridge2594(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2595")
private external fun kniBridge2595(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2596")
private external fun kniBridge2596(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2597")
private external fun kniBridge2597(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2598")
private external fun kniBridge2598(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2599")
private external fun kniBridge2599(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2600")
private external fun kniBridge2600(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2601")
private external fun kniBridge2601(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2602")
private external fun kniBridge2602(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2603")
private external fun kniBridge2603(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2604")
private external fun kniBridge2604(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2605")
private external fun kniBridge2605(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2606")
private external fun kniBridge2606(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2607")
private external fun kniBridge2607(): NativePtr
@SymbolName("libwebsockets_kniBridge2608")
private external fun kniBridge2608(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2609")
private external fun kniBridge2609(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2610")
private external fun kniBridge2610(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2611")
private external fun kniBridge2611(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2612")
private external fun kniBridge2612(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2613")
private external fun kniBridge2613(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2614")
private external fun kniBridge2614(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2615")
private external fun kniBridge2615(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2616")
private external fun kniBridge2616(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2617")
private external fun kniBridge2617(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2618")
private external fun kniBridge2618(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2619")
private external fun kniBridge2619(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2620")
private external fun kniBridge2620(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2621")
private external fun kniBridge2621(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2622")
private external fun kniBridge2622(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2623")
private external fun kniBridge2623(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2624")
private external fun kniBridge2624(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2625")
private external fun kniBridge2625(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2626")
private external fun kniBridge2626(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2627")
private external fun kniBridge2627(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2628")
private external fun kniBridge2628(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2629")
private external fun kniBridge2629(): NativePtr
@SymbolName("libwebsockets_kniBridge2630")
private external fun kniBridge2630(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2631")
private external fun kniBridge2631(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2632")
private external fun kniBridge2632(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2633")
private external fun kniBridge2633(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2634")
private external fun kniBridge2634(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2635")
private external fun kniBridge2635(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2636")
private external fun kniBridge2636(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2637")
private external fun kniBridge2637(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2638")
private external fun kniBridge2638(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2639")
private external fun kniBridge2639(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2640")
private external fun kniBridge2640(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2641")
private external fun kniBridge2641(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2642")
private external fun kniBridge2642(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2643")
private external fun kniBridge2643(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2644")
private external fun kniBridge2644(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2645")
private external fun kniBridge2645(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2646")
private external fun kniBridge2646(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2647")
private external fun kniBridge2647(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2648")
private external fun kniBridge2648(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2649")
private external fun kniBridge2649(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2650")
private external fun kniBridge2650(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2651")
private external fun kniBridge2651(): NativePtr
@SymbolName("libwebsockets_kniBridge2652")
private external fun kniBridge2652(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2653")
private external fun kniBridge2653(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2654")
private external fun kniBridge2654(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2655")
private external fun kniBridge2655(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2656")
private external fun kniBridge2656(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2657")
private external fun kniBridge2657(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2658")
private external fun kniBridge2658(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2659")
private external fun kniBridge2659(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2660")
private external fun kniBridge2660(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2661")
private external fun kniBridge2661(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2662")
private external fun kniBridge2662(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2663")
private external fun kniBridge2663(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2664")
private external fun kniBridge2664(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2665")
private external fun kniBridge2665(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2666")
private external fun kniBridge2666(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2667")
private external fun kniBridge2667(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2668")
private external fun kniBridge2668(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2669")
private external fun kniBridge2669(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2670")
private external fun kniBridge2670(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2671")
private external fun kniBridge2671(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2672")
private external fun kniBridge2672(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2673")
private external fun kniBridge2673(): NativePtr
@SymbolName("libwebsockets_kniBridge2674")
private external fun kniBridge2674(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2675")
private external fun kniBridge2675(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2676")
private external fun kniBridge2676(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2677")
private external fun kniBridge2677(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2678")
private external fun kniBridge2678(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2679")
private external fun kniBridge2679(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2680")
private external fun kniBridge2680(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2681")
private external fun kniBridge2681(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2682")
private external fun kniBridge2682(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2683")
private external fun kniBridge2683(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2684")
private external fun kniBridge2684(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2685")
private external fun kniBridge2685(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2686")
private external fun kniBridge2686(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2687")
private external fun kniBridge2687(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2688")
private external fun kniBridge2688(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2689")
private external fun kniBridge2689(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2690")
private external fun kniBridge2690(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2691")
private external fun kniBridge2691(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2692")
private external fun kniBridge2692(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2693")
private external fun kniBridge2693(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2694")
private external fun kniBridge2694(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2695")
private external fun kniBridge2695(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2696")
private external fun kniBridge2696(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2697")
private external fun kniBridge2697(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2698")
private external fun kniBridge2698(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2699")
private external fun kniBridge2699(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2700")
private external fun kniBridge2700(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2701")
private external fun kniBridge2701(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2702")
private external fun kniBridge2702(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2703")
private external fun kniBridge2703(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge2704")
private external fun kniBridge2704(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2705")
private external fun kniBridge2705(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2706")
private external fun kniBridge2706(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2707")
private external fun kniBridge2707(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2708")
private external fun kniBridge2708(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2709")
private external fun kniBridge2709(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2710")
private external fun kniBridge2710(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2711")
private external fun kniBridge2711(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2712")
private external fun kniBridge2712(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2713")
private external fun kniBridge2713(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2714")
private external fun kniBridge2714(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2715")
private external fun kniBridge2715(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2716")
private external fun kniBridge2716(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2717")
private external fun kniBridge2717(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2718")
private external fun kniBridge2718(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2719")
private external fun kniBridge2719(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2720")
private external fun kniBridge2720(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2721")
private external fun kniBridge2721(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge2722")
private external fun kniBridge2722(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2723")
private external fun kniBridge2723(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2724")
private external fun kniBridge2724(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2725")
private external fun kniBridge2725(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2726")
private external fun kniBridge2726(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2727")
private external fun kniBridge2727(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2728")
private external fun kniBridge2728(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2729")
private external fun kniBridge2729(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2730")
private external fun kniBridge2730(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2731")
private external fun kniBridge2731(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2732")
private external fun kniBridge2732(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2733")
private external fun kniBridge2733(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2734")
private external fun kniBridge2734(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge2735")
private external fun kniBridge2735(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2736")
private external fun kniBridge2736(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2737")
private external fun kniBridge2737(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2738")
private external fun kniBridge2738(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2739")
private external fun kniBridge2739(): NativePtr
@SymbolName("libwebsockets_kniBridge2740")
private external fun kniBridge2740(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2741")
private external fun kniBridge2741(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2742")
private external fun kniBridge2742(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2743")
private external fun kniBridge2743(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2744")
private external fun kniBridge2744(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2745")
private external fun kniBridge2745(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2746")
private external fun kniBridge2746(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2747")
private external fun kniBridge2747(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2748")
private external fun kniBridge2748(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2749")
private external fun kniBridge2749(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2750")
private external fun kniBridge2750(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2751")
private external fun kniBridge2751(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2752")
private external fun kniBridge2752(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2753")
private external fun kniBridge2753(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2754")
private external fun kniBridge2754(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2755")
private external fun kniBridge2755(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2756")
private external fun kniBridge2756(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2757")
private external fun kniBridge2757(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2758")
private external fun kniBridge2758(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2759")
private external fun kniBridge2759(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2760")
private external fun kniBridge2760(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2761")
private external fun kniBridge2761(): NativePtr
@SymbolName("libwebsockets_kniBridge2762")
private external fun kniBridge2762(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2763")
private external fun kniBridge2763(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2764")
private external fun kniBridge2764(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2765")
private external fun kniBridge2765(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2766")
private external fun kniBridge2766(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2767")
private external fun kniBridge2767(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2768")
private external fun kniBridge2768(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2769")
private external fun kniBridge2769(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2770")
private external fun kniBridge2770(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2771")
private external fun kniBridge2771(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2772")
private external fun kniBridge2772(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2773")
private external fun kniBridge2773(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2774")
private external fun kniBridge2774(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2775")
private external fun kniBridge2775(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2776")
private external fun kniBridge2776(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2777")
private external fun kniBridge2777(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2778")
private external fun kniBridge2778(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2779")
private external fun kniBridge2779(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2780")
private external fun kniBridge2780(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2781")
private external fun kniBridge2781(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2782")
private external fun kniBridge2782(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2783")
private external fun kniBridge2783(): NativePtr
@SymbolName("libwebsockets_kniBridge2784")
private external fun kniBridge2784(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2785")
private external fun kniBridge2785(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2786")
private external fun kniBridge2786(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2787")
private external fun kniBridge2787(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2788")
private external fun kniBridge2788(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2789")
private external fun kniBridge2789(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2790")
private external fun kniBridge2790(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2791")
private external fun kniBridge2791(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2792")
private external fun kniBridge2792(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2793")
private external fun kniBridge2793(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2794")
private external fun kniBridge2794(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2795")
private external fun kniBridge2795(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2796")
private external fun kniBridge2796(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2797")
private external fun kniBridge2797(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2798")
private external fun kniBridge2798(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2799")
private external fun kniBridge2799(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2800")
private external fun kniBridge2800(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2801")
private external fun kniBridge2801(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2802")
private external fun kniBridge2802(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2803")
private external fun kniBridge2803(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2804")
private external fun kniBridge2804(p0: NativePtr, p1: UInt, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2805")
private external fun kniBridge2805(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2806")
private external fun kniBridge2806(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2807")
private external fun kniBridge2807(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2808")
private external fun kniBridge2808(): NativePtr
@SymbolName("libwebsockets_kniBridge2809")
private external fun kniBridge2809(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2810")
private external fun kniBridge2810(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge2811")
private external fun kniBridge2811(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2812")
private external fun kniBridge2812(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2813")
private external fun kniBridge2813(): NativePtr
@SymbolName("libwebsockets_kniBridge2814")
private external fun kniBridge2814(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2815")
private external fun kniBridge2815(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2816")
private external fun kniBridge2816(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2817")
private external fun kniBridge2817(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2818")
private external fun kniBridge2818(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2819")
private external fun kniBridge2819(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2820")
private external fun kniBridge2820(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2821")
private external fun kniBridge2821(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge2822")
private external fun kniBridge2822(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2823")
private external fun kniBridge2823(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2824")
private external fun kniBridge2824(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2825")
private external fun kniBridge2825(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2826")
private external fun kniBridge2826(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2827")
private external fun kniBridge2827(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2828")
private external fun kniBridge2828(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2829")
private external fun kniBridge2829(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2830")
private external fun kniBridge2830(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2831")
private external fun kniBridge2831(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2832")
private external fun kniBridge2832(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2833")
private external fun kniBridge2833(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2834")
private external fun kniBridge2834(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2835")
private external fun kniBridge2835(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2836")
private external fun kniBridge2836(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2837")
private external fun kniBridge2837(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2838")
private external fun kniBridge2838(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2839")
private external fun kniBridge2839(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2840")
private external fun kniBridge2840(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2841")
private external fun kniBridge2841(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2842")
private external fun kniBridge2842(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2843")
private external fun kniBridge2843(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2844")
private external fun kniBridge2844(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2845")
private external fun kniBridge2845(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2846")
private external fun kniBridge2846(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2847")
private external fun kniBridge2847(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2848")
private external fun kniBridge2848(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2849")
private external fun kniBridge2849(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2850")
private external fun kniBridge2850(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2851")
private external fun kniBridge2851(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2852")
private external fun kniBridge2852(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2853")
private external fun kniBridge2853(): NativePtr
@SymbolName("libwebsockets_kniBridge2854")
private external fun kniBridge2854(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2855")
private external fun kniBridge2855(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2856")
private external fun kniBridge2856(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2857")
private external fun kniBridge2857(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2858")
private external fun kniBridge2858(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2859")
private external fun kniBridge2859(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2860")
private external fun kniBridge2860(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2861")
private external fun kniBridge2861(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2862")
private external fun kniBridge2862(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2863")
private external fun kniBridge2863(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2864")
private external fun kniBridge2864(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2865")
private external fun kniBridge2865(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2866")
private external fun kniBridge2866(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2867")
private external fun kniBridge2867(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2868")
private external fun kniBridge2868(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2869")
private external fun kniBridge2869(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2870")
private external fun kniBridge2870(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2871")
private external fun kniBridge2871(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2872")
private external fun kniBridge2872(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2873")
private external fun kniBridge2873(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2874")
private external fun kniBridge2874(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2875")
private external fun kniBridge2875(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2876")
private external fun kniBridge2876(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2877")
private external fun kniBridge2877(): NativePtr
@SymbolName("libwebsockets_kniBridge2878")
private external fun kniBridge2878(): NativePtr
@SymbolName("libwebsockets_kniBridge2879")
private external fun kniBridge2879(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2880")
private external fun kniBridge2880(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2881")
private external fun kniBridge2881(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2882")
private external fun kniBridge2882(p0: NativePtr, p1: UInt, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2883")
private external fun kniBridge2883(p0: NativePtr, p1: Int, p2: NativePtr, p3: Long, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2884")
private external fun kniBridge2884(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2885")
private external fun kniBridge2885(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2886")
private external fun kniBridge2886(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2887")
private external fun kniBridge2887(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2888")
private external fun kniBridge2888(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2889")
private external fun kniBridge2889(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2890")
private external fun kniBridge2890(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2891")
private external fun kniBridge2891(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2892")
private external fun kniBridge2892(p0: NativePtr, p1: UInt, p2: NativePtr, p3: Int, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2893")
private external fun kniBridge2893(p0: NativePtr, p1: UInt, p2: NativePtr, p3: Int, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2894")
private external fun kniBridge2894(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2895")
private external fun kniBridge2895(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2896")
private external fun kniBridge2896(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2897")
private external fun kniBridge2897(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2898")
private external fun kniBridge2898(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2899")
private external fun kniBridge2899(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2900")
private external fun kniBridge2900(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2901")
private external fun kniBridge2901(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2902")
private external fun kniBridge2902(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2903")
private external fun kniBridge2903(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2904")
private external fun kniBridge2904(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2905")
private external fun kniBridge2905(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2906")
private external fun kniBridge2906(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2907")
private external fun kniBridge2907(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2908")
private external fun kniBridge2908(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2909")
private external fun kniBridge2909(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2910")
private external fun kniBridge2910(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2911")
private external fun kniBridge2911(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2912")
private external fun kniBridge2912(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2913")
private external fun kniBridge2913(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2914")
private external fun kniBridge2914(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2915")
private external fun kniBridge2915(p0: NativePtr, p1: Int, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge2916")
private external fun kniBridge2916(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge2917")
private external fun kniBridge2917(p0: NativePtr, p1: ULong, p2: Long): Unit
@SymbolName("libwebsockets_kniBridge2918")
private external fun kniBridge2918(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2919")
private external fun kniBridge2919(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2920")
private external fun kniBridge2920(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2921")
private external fun kniBridge2921(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2922")
private external fun kniBridge2922(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2923")
private external fun kniBridge2923(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2924")
private external fun kniBridge2924(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2925")
private external fun kniBridge2925(): NativePtr
@SymbolName("libwebsockets_kniBridge2926")
private external fun kniBridge2926(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2927")
private external fun kniBridge2927(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2928")
private external fun kniBridge2928(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2929")
private external fun kniBridge2929(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2930")
private external fun kniBridge2930(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge2931")
private external fun kniBridge2931(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge2932")
private external fun kniBridge2932(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge2933")
private external fun kniBridge2933(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2934")
private external fun kniBridge2934(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge2935")
private external fun kniBridge2935(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2936")
private external fun kniBridge2936(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge2937")
private external fun kniBridge2937(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge2938")
private external fun kniBridge2938(p0: NativePtr, p1: Long): Unit
@SymbolName("libwebsockets_kniBridge2939")
private external fun kniBridge2939(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2940")
private external fun kniBridge2940(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2941")
private external fun kniBridge2941(p0: NativePtr, p1: UInt): Int
@SymbolName("libwebsockets_kniBridge2942")
private external fun kniBridge2942(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge2943")
private external fun kniBridge2943(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2944")
private external fun kniBridge2944(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2945")
private external fun kniBridge2945(p0: NativePtr, p1: UInt): Unit
@SymbolName("libwebsockets_kniBridge2946")
private external fun kniBridge2946(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2947")
private external fun kniBridge2947(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2948")
private external fun kniBridge2948(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2949")
private external fun kniBridge2949(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge2950")
private external fun kniBridge2950(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2951")
private external fun kniBridge2951(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2952")
private external fun kniBridge2952(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2953")
private external fun kniBridge2953(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2954")
private external fun kniBridge2954(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2955")
private external fun kniBridge2955(): Int
@SymbolName("libwebsockets_kniBridge2956")
private external fun kniBridge2956(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2957")
private external fun kniBridge2957(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2958")
private external fun kniBridge2958(): Unit
@SymbolName("libwebsockets_kniBridge2959")
private external fun kniBridge2959(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): Int
@SymbolName("libwebsockets_kniBridge2960")
private external fun kniBridge2960(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2961")
private external fun kniBridge2961(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2962")
private external fun kniBridge2962(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2963")
private external fun kniBridge2963(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2964")
private external fun kniBridge2964(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2965")
private external fun kniBridge2965(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2966")
private external fun kniBridge2966(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2967")
private external fun kniBridge2967(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2968")
private external fun kniBridge2968(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2969")
private external fun kniBridge2969(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2970")
private external fun kniBridge2970(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2971")
private external fun kniBridge2971(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2972")
private external fun kniBridge2972(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2973")
private external fun kniBridge2973(): NativePtr
@SymbolName("libwebsockets_kniBridge2974")
private external fun kniBridge2974(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2975")
private external fun kniBridge2975(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2976")
private external fun kniBridge2976(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2977")
private external fun kniBridge2977(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2978")
private external fun kniBridge2978(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2979")
private external fun kniBridge2979(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2980")
private external fun kniBridge2980(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2981")
private external fun kniBridge2981(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2982")
private external fun kniBridge2982(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2983")
private external fun kniBridge2983(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge2984")
private external fun kniBridge2984(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2985")
private external fun kniBridge2985(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2986")
private external fun kniBridge2986(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2987")
private external fun kniBridge2987(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2988")
private external fun kniBridge2988(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2989")
private external fun kniBridge2989(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2990")
private external fun kniBridge2990(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2991")
private external fun kniBridge2991(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2992")
private external fun kniBridge2992(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge2993")
private external fun kniBridge2993(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2994")
private external fun kniBridge2994(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge2995")
private external fun kniBridge2995(): NativePtr
@SymbolName("libwebsockets_kniBridge2996")
private external fun kniBridge2996(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2997")
private external fun kniBridge2997(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge2998")
private external fun kniBridge2998(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge2999")
private external fun kniBridge2999(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3000")
private external fun kniBridge3000(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3001")
private external fun kniBridge3001(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3002")
private external fun kniBridge3002(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3003")
private external fun kniBridge3003(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3004")
private external fun kniBridge3004(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3005")
private external fun kniBridge3005(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3006")
private external fun kniBridge3006(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3007")
private external fun kniBridge3007(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3008")
private external fun kniBridge3008(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3009")
private external fun kniBridge3009(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3010")
private external fun kniBridge3010(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3011")
private external fun kniBridge3011(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3012")
private external fun kniBridge3012(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3013")
private external fun kniBridge3013(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3014")
private external fun kniBridge3014(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3015")
private external fun kniBridge3015(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3016")
private external fun kniBridge3016(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3017")
private external fun kniBridge3017(): NativePtr
@SymbolName("libwebsockets_kniBridge3018")
private external fun kniBridge3018(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3019")
private external fun kniBridge3019(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3020")
private external fun kniBridge3020(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3021")
private external fun kniBridge3021(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3022")
private external fun kniBridge3022(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3023")
private external fun kniBridge3023(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3024")
private external fun kniBridge3024(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3025")
private external fun kniBridge3025(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3026")
private external fun kniBridge3026(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3027")
private external fun kniBridge3027(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3028")
private external fun kniBridge3028(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3029")
private external fun kniBridge3029(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3030")
private external fun kniBridge3030(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3031")
private external fun kniBridge3031(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3032")
private external fun kniBridge3032(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3033")
private external fun kniBridge3033(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3034")
private external fun kniBridge3034(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3035")
private external fun kniBridge3035(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3036")
private external fun kniBridge3036(): NativePtr
@SymbolName("libwebsockets_kniBridge3037")
private external fun kniBridge3037(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3038")
private external fun kniBridge3038(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3039")
private external fun kniBridge3039(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3040")
private external fun kniBridge3040(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3041")
private external fun kniBridge3041(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3042")
private external fun kniBridge3042(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3043")
private external fun kniBridge3043(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3044")
private external fun kniBridge3044(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3045")
private external fun kniBridge3045(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3046")
private external fun kniBridge3046(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge3047")
private external fun kniBridge3047(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge3048")
private external fun kniBridge3048(): NativePtr
@SymbolName("libwebsockets_kniBridge3049")
private external fun kniBridge3049(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3050")
private external fun kniBridge3050(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3051")
private external fun kniBridge3051(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3052")
private external fun kniBridge3052(): NativePtr
@SymbolName("libwebsockets_kniBridge3053")
private external fun kniBridge3053(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3054")
private external fun kniBridge3054(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3055")
private external fun kniBridge3055(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3056")
private external fun kniBridge3056(): NativePtr
@SymbolName("libwebsockets_kniBridge3057")
private external fun kniBridge3057(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3058")
private external fun kniBridge3058(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3059")
private external fun kniBridge3059(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3060")
private external fun kniBridge3060(): NativePtr
@SymbolName("libwebsockets_kniBridge3061")
private external fun kniBridge3061(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3062")
private external fun kniBridge3062(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3063")
private external fun kniBridge3063(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3064")
private external fun kniBridge3064(): NativePtr
@SymbolName("libwebsockets_kniBridge3065")
private external fun kniBridge3065(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3066")
private external fun kniBridge3066(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3067")
private external fun kniBridge3067(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3068")
private external fun kniBridge3068(): NativePtr
@SymbolName("libwebsockets_kniBridge3069")
private external fun kniBridge3069(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3070")
private external fun kniBridge3070(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3071")
private external fun kniBridge3071(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3072")
private external fun kniBridge3072(): NativePtr
@SymbolName("libwebsockets_kniBridge3073")
private external fun kniBridge3073(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3074")
private external fun kniBridge3074(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3075")
private external fun kniBridge3075(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3076")
private external fun kniBridge3076(): NativePtr
@SymbolName("libwebsockets_kniBridge3077")
private external fun kniBridge3077(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3078")
private external fun kniBridge3078(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3079")
private external fun kniBridge3079(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3080")
private external fun kniBridge3080(): NativePtr
@SymbolName("libwebsockets_kniBridge3081")
private external fun kniBridge3081(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3082")
private external fun kniBridge3082(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3083")
private external fun kniBridge3083(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3084")
private external fun kniBridge3084(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3085")
private external fun kniBridge3085(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3086")
private external fun kniBridge3086(p0: NativePtr, p1: Int, p2: Long, p3: NativePtr): Long
@SymbolName("libwebsockets_kniBridge3087")
private external fun kniBridge3087(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge3088")
private external fun kniBridge3088(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3089")
private external fun kniBridge3089(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3090")
private external fun kniBridge3090(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3091")
private external fun kniBridge3091(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3092")
private external fun kniBridge3092(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3093")
private external fun kniBridge3093(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3094")
private external fun kniBridge3094(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3095")
private external fun kniBridge3095(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge3096")
private external fun kniBridge3096(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3097")
private external fun kniBridge3097(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3098")
private external fun kniBridge3098(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3099")
private external fun kniBridge3099(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3100")
private external fun kniBridge3100(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3101")
private external fun kniBridge3101(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3102")
private external fun kniBridge3102(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3103")
private external fun kniBridge3103(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3104")
private external fun kniBridge3104(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3105")
private external fun kniBridge3105(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3106")
private external fun kniBridge3106(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3107")
private external fun kniBridge3107(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3108")
private external fun kniBridge3108(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3109")
private external fun kniBridge3109(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3110")
private external fun kniBridge3110(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3111")
private external fun kniBridge3111(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3112")
private external fun kniBridge3112(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3113")
private external fun kniBridge3113(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3114")
private external fun kniBridge3114(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3115")
private external fun kniBridge3115(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3116")
private external fun kniBridge3116(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3117")
private external fun kniBridge3117(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3118")
private external fun kniBridge3118(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3119")
private external fun kniBridge3119(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3120")
private external fun kniBridge3120(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3121")
private external fun kniBridge3121(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3122")
private external fun kniBridge3122(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3123")
private external fun kniBridge3123(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge3124")
private external fun kniBridge3124(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3125")
private external fun kniBridge3125(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3126")
private external fun kniBridge3126(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3127")
private external fun kniBridge3127(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3128")
private external fun kniBridge3128(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3129")
private external fun kniBridge3129(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3130")
private external fun kniBridge3130(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3131")
private external fun kniBridge3131(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3132")
private external fun kniBridge3132(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3133")
private external fun kniBridge3133(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge3134")
private external fun kniBridge3134(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3135")
private external fun kniBridge3135(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3136")
private external fun kniBridge3136(): Int
@SymbolName("libwebsockets_kniBridge3137")
private external fun kniBridge3137(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3138")
private external fun kniBridge3138(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3139")
private external fun kniBridge3139(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3140")
private external fun kniBridge3140(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3141")
private external fun kniBridge3141(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3142")
private external fun kniBridge3142(p0: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3143")
private external fun kniBridge3143(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3144")
private external fun kniBridge3144(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3145")
private external fun kniBridge3145(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3146")
private external fun kniBridge3146(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3147")
private external fun kniBridge3147(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3148")
private external fun kniBridge3148(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3149")
private external fun kniBridge3149(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3150")
private external fun kniBridge3150(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3151")
private external fun kniBridge3151(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3152")
private external fun kniBridge3152(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3153")
private external fun kniBridge3153(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3154")
private external fun kniBridge3154(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3155")
private external fun kniBridge3155(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3156")
private external fun kniBridge3156(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3157")
private external fun kniBridge3157(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3158")
private external fun kniBridge3158(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3159")
private external fun kniBridge3159(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3160")
private external fun kniBridge3160(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3161")
private external fun kniBridge3161(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3162")
private external fun kniBridge3162(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3163")
private external fun kniBridge3163(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3164")
private external fun kniBridge3164(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3165")
private external fun kniBridge3165(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3166")
private external fun kniBridge3166(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3167")
private external fun kniBridge3167(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3168")
private external fun kniBridge3168(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3169")
private external fun kniBridge3169(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3170")
private external fun kniBridge3170(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3171")
private external fun kniBridge3171(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3172")
private external fun kniBridge3172(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3173")
private external fun kniBridge3173(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3174")
private external fun kniBridge3174(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3175")
private external fun kniBridge3175(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3176")
private external fun kniBridge3176(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3177")
private external fun kniBridge3177(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3178")
private external fun kniBridge3178(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3179")
private external fun kniBridge3179(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3180")
private external fun kniBridge3180(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3181")
private external fun kniBridge3181(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3182")
private external fun kniBridge3182(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3183")
private external fun kniBridge3183(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3184")
private external fun kniBridge3184(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3185")
private external fun kniBridge3185(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3186")
private external fun kniBridge3186(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3187")
private external fun kniBridge3187(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3188")
private external fun kniBridge3188(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3189")
private external fun kniBridge3189(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3190")
private external fun kniBridge3190(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3191")
private external fun kniBridge3191(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3192")
private external fun kniBridge3192(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3193")
private external fun kniBridge3193(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3194")
private external fun kniBridge3194(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3195")
private external fun kniBridge3195(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3196")
private external fun kniBridge3196(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3197")
private external fun kniBridge3197(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3198")
private external fun kniBridge3198(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3199")
private external fun kniBridge3199(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3200")
private external fun kniBridge3200(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3201")
private external fun kniBridge3201(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3202")
private external fun kniBridge3202(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3203")
private external fun kniBridge3203(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3204")
private external fun kniBridge3204(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3205")
private external fun kniBridge3205(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3206")
private external fun kniBridge3206(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3207")
private external fun kniBridge3207(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3208")
private external fun kniBridge3208(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3209")
private external fun kniBridge3209(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3210")
private external fun kniBridge3210(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3211")
private external fun kniBridge3211(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3212")
private external fun kniBridge3212(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3213")
private external fun kniBridge3213(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3214")
private external fun kniBridge3214(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3215")
private external fun kniBridge3215(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3216")
private external fun kniBridge3216(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3217")
private external fun kniBridge3217(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3218")
private external fun kniBridge3218(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3219")
private external fun kniBridge3219(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3220")
private external fun kniBridge3220(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3221")
private external fun kniBridge3221(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3222")
private external fun kniBridge3222(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3223")
private external fun kniBridge3223(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3224")
private external fun kniBridge3224(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3225")
private external fun kniBridge3225(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3226")
private external fun kniBridge3226(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3227")
private external fun kniBridge3227(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3228")
private external fun kniBridge3228(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3229")
private external fun kniBridge3229(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3230")
private external fun kniBridge3230(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3231")
private external fun kniBridge3231(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3232")
private external fun kniBridge3232(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3233")
private external fun kniBridge3233(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3234")
private external fun kniBridge3234(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3235")
private external fun kniBridge3235(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3236")
private external fun kniBridge3236(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3237")
private external fun kniBridge3237(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3238")
private external fun kniBridge3238(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3239")
private external fun kniBridge3239(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3240")
private external fun kniBridge3240(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3241")
private external fun kniBridge3241(p0: NativePtr, p1: Long, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3242")
private external fun kniBridge3242(p0: NativePtr, p1: Int, p2: Long, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3243")
private external fun kniBridge3243(p0: NativePtr, p1: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3244")
private external fun kniBridge3244(): NativePtr
@SymbolName("libwebsockets_kniBridge3245")
private external fun kniBridge3245(): NativePtr
@SymbolName("libwebsockets_kniBridge3246")
private external fun kniBridge3246(): NativePtr
@SymbolName("libwebsockets_kniBridge3247")
private external fun kniBridge3247(): NativePtr
@SymbolName("libwebsockets_kniBridge3248")
private external fun kniBridge3248(): NativePtr
@SymbolName("libwebsockets_kniBridge3249")
private external fun kniBridge3249(): NativePtr
@SymbolName("libwebsockets_kniBridge3250")
private external fun kniBridge3250(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3251")
private external fun kniBridge3251(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3252")
private external fun kniBridge3252(): NativePtr
@SymbolName("libwebsockets_kniBridge3253")
private external fun kniBridge3253(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3254")
private external fun kniBridge3254(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3255")
private external fun kniBridge3255(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3256")
private external fun kniBridge3256(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3257")
private external fun kniBridge3257(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3258")
private external fun kniBridge3258(): NativePtr
@SymbolName("libwebsockets_kniBridge3259")
private external fun kniBridge3259(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3260")
private external fun kniBridge3260(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3261")
private external fun kniBridge3261(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3262")
private external fun kniBridge3262(): NativePtr
@SymbolName("libwebsockets_kniBridge3263")
private external fun kniBridge3263(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3264")
private external fun kniBridge3264(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3265")
private external fun kniBridge3265(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3266")
private external fun kniBridge3266(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3267")
private external fun kniBridge3267(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3268")
private external fun kniBridge3268(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3269")
private external fun kniBridge3269(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3270")
private external fun kniBridge3270(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge3271")
private external fun kniBridge3271(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3272")
private external fun kniBridge3272(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3273")
private external fun kniBridge3273(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3274")
private external fun kniBridge3274(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3275")
private external fun kniBridge3275(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3276")
private external fun kniBridge3276(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3277")
private external fun kniBridge3277(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3278")
private external fun kniBridge3278(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3279")
private external fun kniBridge3279(): NativePtr
@SymbolName("libwebsockets_kniBridge3280")
private external fun kniBridge3280(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3281")
private external fun kniBridge3281(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3282")
private external fun kniBridge3282(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3283")
private external fun kniBridge3283(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3284")
private external fun kniBridge3284(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3285")
private external fun kniBridge3285(): NativePtr
@SymbolName("libwebsockets_kniBridge3286")
private external fun kniBridge3286(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3287")
private external fun kniBridge3287(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3288")
private external fun kniBridge3288(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3289")
private external fun kniBridge3289(): NativePtr
@SymbolName("libwebsockets_kniBridge3290")
private external fun kniBridge3290(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3291")
private external fun kniBridge3291(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3292")
private external fun kniBridge3292(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3293")
private external fun kniBridge3293(): NativePtr
@SymbolName("libwebsockets_kniBridge3294")
private external fun kniBridge3294(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3295")
private external fun kniBridge3295(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3296")
private external fun kniBridge3296(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3297")
private external fun kniBridge3297(p0: Int, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3298")
private external fun kniBridge3298(): NativePtr
@SymbolName("libwebsockets_kniBridge3299")
private external fun kniBridge3299(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3300")
private external fun kniBridge3300(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3301")
private external fun kniBridge3301(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3302")
private external fun kniBridge3302(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3303")
private external fun kniBridge3303(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3304")
private external fun kniBridge3304(): NativePtr
@SymbolName("libwebsockets_kniBridge3305")
private external fun kniBridge3305(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3306")
private external fun kniBridge3306(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3307")
private external fun kniBridge3307(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3308")
private external fun kniBridge3308(): NativePtr
@SymbolName("libwebsockets_kniBridge3309")
private external fun kniBridge3309(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3310")
private external fun kniBridge3310(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3311")
private external fun kniBridge3311(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3312")
private external fun kniBridge3312(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3313")
private external fun kniBridge3313(): NativePtr
@SymbolName("libwebsockets_kniBridge3314")
private external fun kniBridge3314(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3315")
private external fun kniBridge3315(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3316")
private external fun kniBridge3316(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3317")
private external fun kniBridge3317(): NativePtr
@SymbolName("libwebsockets_kniBridge3318")
private external fun kniBridge3318(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3319")
private external fun kniBridge3319(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3320")
private external fun kniBridge3320(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3321")
private external fun kniBridge3321(): NativePtr
@SymbolName("libwebsockets_kniBridge3322")
private external fun kniBridge3322(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3323")
private external fun kniBridge3323(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3324")
private external fun kniBridge3324(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3325")
private external fun kniBridge3325(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3326")
private external fun kniBridge3326(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3327")
private external fun kniBridge3327(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3328")
private external fun kniBridge3328(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3329")
private external fun kniBridge3329(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3330")
private external fun kniBridge3330(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3331")
private external fun kniBridge3331(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3332")
private external fun kniBridge3332(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3333")
private external fun kniBridge3333(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3334")
private external fun kniBridge3334(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3335")
private external fun kniBridge3335(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3336")
private external fun kniBridge3336(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3337")
private external fun kniBridge3337(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3338")
private external fun kniBridge3338(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge3339")
private external fun kniBridge3339(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3340")
private external fun kniBridge3340(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3341")
private external fun kniBridge3341(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3342")
private external fun kniBridge3342(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3343")
private external fun kniBridge3343(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3344")
private external fun kniBridge3344(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3345")
private external fun kniBridge3345(): NativePtr
@SymbolName("libwebsockets_kniBridge3346")
private external fun kniBridge3346(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3347")
private external fun kniBridge3347(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3348")
private external fun kniBridge3348(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3349")
private external fun kniBridge3349(): NativePtr
@SymbolName("libwebsockets_kniBridge3350")
private external fun kniBridge3350(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3351")
private external fun kniBridge3351(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3352")
private external fun kniBridge3352(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3353")
private external fun kniBridge3353(): NativePtr
@SymbolName("libwebsockets_kniBridge3354")
private external fun kniBridge3354(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3355")
private external fun kniBridge3355(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3356")
private external fun kniBridge3356(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3357")
private external fun kniBridge3357(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3358")
private external fun kniBridge3358(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3359")
private external fun kniBridge3359(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3360")
private external fun kniBridge3360(): NativePtr
@SymbolName("libwebsockets_kniBridge3361")
private external fun kniBridge3361(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3362")
private external fun kniBridge3362(): NativePtr
@SymbolName("libwebsockets_kniBridge3363")
private external fun kniBridge3363(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3364")
private external fun kniBridge3364(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3365")
private external fun kniBridge3365(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3366")
private external fun kniBridge3366(): NativePtr
@SymbolName("libwebsockets_kniBridge3367")
private external fun kniBridge3367(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3368")
private external fun kniBridge3368(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3369")
private external fun kniBridge3369(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3370")
private external fun kniBridge3370(): NativePtr
@SymbolName("libwebsockets_kniBridge3371")
private external fun kniBridge3371(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3372")
private external fun kniBridge3372(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3373")
private external fun kniBridge3373(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3374")
private external fun kniBridge3374(): NativePtr
@SymbolName("libwebsockets_kniBridge3375")
private external fun kniBridge3375(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3376")
private external fun kniBridge3376(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3377")
private external fun kniBridge3377(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3378")
private external fun kniBridge3378(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3379")
private external fun kniBridge3379(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3380")
private external fun kniBridge3380(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3381")
private external fun kniBridge3381(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3382")
private external fun kniBridge3382(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3383")
private external fun kniBridge3383(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3384")
private external fun kniBridge3384(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge3385")
private external fun kniBridge3385(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge3386")
private external fun kniBridge3386(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3387")
private external fun kniBridge3387(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3388")
private external fun kniBridge3388(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3389")
private external fun kniBridge3389(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3390")
private external fun kniBridge3390(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3391")
private external fun kniBridge3391(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3392")
private external fun kniBridge3392(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3393")
private external fun kniBridge3393(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3394")
private external fun kniBridge3394(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3395")
private external fun kniBridge3395(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3396")
private external fun kniBridge3396(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3397")
private external fun kniBridge3397(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3398")
private external fun kniBridge3398(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3399")
private external fun kniBridge3399(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3400")
private external fun kniBridge3400(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3401")
private external fun kniBridge3401(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3402")
private external fun kniBridge3402(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3403")
private external fun kniBridge3403(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3404")
private external fun kniBridge3404(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3405")
private external fun kniBridge3405(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3406")
private external fun kniBridge3406(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3407")
private external fun kniBridge3407(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3408")
private external fun kniBridge3408(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3409")
private external fun kniBridge3409(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3410")
private external fun kniBridge3410(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge3411")
private external fun kniBridge3411(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge3412")
private external fun kniBridge3412(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3413")
private external fun kniBridge3413(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3414")
private external fun kniBridge3414(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3415")
private external fun kniBridge3415(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3416")
private external fun kniBridge3416(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3417")
private external fun kniBridge3417(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3418")
private external fun kniBridge3418(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3419")
private external fun kniBridge3419(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3420")
private external fun kniBridge3420(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3421")
private external fun kniBridge3421(p0: Int): Int
@SymbolName("libwebsockets_kniBridge3422")
private external fun kniBridge3422(): NativePtr
@SymbolName("libwebsockets_kniBridge3423")
private external fun kniBridge3423(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3424")
private external fun kniBridge3424(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3425")
private external fun kniBridge3425(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3426")
private external fun kniBridge3426(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3427")
private external fun kniBridge3427(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3428")
private external fun kniBridge3428(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3429")
private external fun kniBridge3429(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3430")
private external fun kniBridge3430(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3431")
private external fun kniBridge3431(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3432")
private external fun kniBridge3432(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3433")
private external fun kniBridge3433(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3434")
private external fun kniBridge3434(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3435")
private external fun kniBridge3435(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3436")
private external fun kniBridge3436(p0: NativePtr, p1: Long): Int
@SymbolName("libwebsockets_kniBridge3437")
private external fun kniBridge3437(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3438")
private external fun kniBridge3438(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3439")
private external fun kniBridge3439(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3440")
private external fun kniBridge3440(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3441")
private external fun kniBridge3441(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3442")
private external fun kniBridge3442(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge3443")
private external fun kniBridge3443(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3444")
private external fun kniBridge3444(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3445")
private external fun kniBridge3445(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3446")
private external fun kniBridge3446(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3447")
private external fun kniBridge3447(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3448")
private external fun kniBridge3448(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3449")
private external fun kniBridge3449(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3450")
private external fun kniBridge3450(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3451")
private external fun kniBridge3451(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3452")
private external fun kniBridge3452(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3453")
private external fun kniBridge3453(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3454")
private external fun kniBridge3454(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3455")
private external fun kniBridge3455(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3456")
private external fun kniBridge3456(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3457")
private external fun kniBridge3457(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3458")
private external fun kniBridge3458(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UInt): NativePtr
@SymbolName("libwebsockets_kniBridge3459")
private external fun kniBridge3459(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3460")
private external fun kniBridge3460(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3461")
private external fun kniBridge3461(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge3462")
private external fun kniBridge3462(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge3463")
private external fun kniBridge3463(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3464")
private external fun kniBridge3464(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3465")
private external fun kniBridge3465(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3466")
private external fun kniBridge3466(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3467")
private external fun kniBridge3467(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3468")
private external fun kniBridge3468(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3469")
private external fun kniBridge3469(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3470")
private external fun kniBridge3470(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3471")
private external fun kniBridge3471(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3472")
private external fun kniBridge3472(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3473")
private external fun kniBridge3473(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3474")
private external fun kniBridge3474(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3475")
private external fun kniBridge3475(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3476")
private external fun kniBridge3476(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3477")
private external fun kniBridge3477(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3478")
private external fun kniBridge3478(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3479")
private external fun kniBridge3479(p0: NativePtr, p1: NativePtr, p2: ULong, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge3480")
private external fun kniBridge3480(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3481")
private external fun kniBridge3481(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3482")
private external fun kniBridge3482(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3483")
private external fun kniBridge3483(p0: NativePtr, p1: NativePtr, p2: Int, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge3484")
private external fun kniBridge3484(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3485")
private external fun kniBridge3485(p0: NativePtr, p1: NativePtr, p2: Int, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge3486")
private external fun kniBridge3486(p0: NativePtr, p1: NativePtr, p2: ULong, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge3487")
private external fun kniBridge3487(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3488")
private external fun kniBridge3488(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3489")
private external fun kniBridge3489(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3490")
private external fun kniBridge3490(p0: NativePtr, p1: NativePtr, p2: ULong, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge3491")
private external fun kniBridge3491(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3492")
private external fun kniBridge3492(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3493")
private external fun kniBridge3493(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge3494")
private external fun kniBridge3494(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge3495")
private external fun kniBridge3495(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3496")
private external fun kniBridge3496(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3497")
private external fun kniBridge3497(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3498")
private external fun kniBridge3498(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3499")
private external fun kniBridge3499(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge3500")
private external fun kniBridge3500(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int, p5: Int, p6: Int): Int
@SymbolName("libwebsockets_kniBridge3501")
private external fun kniBridge3501(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int, p5: Int, p6: Int): Int
@SymbolName("libwebsockets_kniBridge3502")
private external fun kniBridge3502(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3503")
private external fun kniBridge3503(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3504")
private external fun kniBridge3504(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int, p5: Int, p6: Int): Int
@SymbolName("libwebsockets_kniBridge3505")
private external fun kniBridge3505(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3506")
private external fun kniBridge3506(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3507")
private external fun kniBridge3507(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge3508")
private external fun kniBridge3508(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3509")
private external fun kniBridge3509(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3510")
private external fun kniBridge3510(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3511")
private external fun kniBridge3511(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3512")
private external fun kniBridge3512(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3513")
private external fun kniBridge3513(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3514")
private external fun kniBridge3514(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3515")
private external fun kniBridge3515(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3516")
private external fun kniBridge3516(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3517")
private external fun kniBridge3517(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3518")
private external fun kniBridge3518(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3519")
private external fun kniBridge3519(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3520")
private external fun kniBridge3520(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3521")
private external fun kniBridge3521(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3522")
private external fun kniBridge3522(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3523")
private external fun kniBridge3523(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3524")
private external fun kniBridge3524(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3525")
private external fun kniBridge3525(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3526")
private external fun kniBridge3526(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3527")
private external fun kniBridge3527(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge3528")
private external fun kniBridge3528(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3529")
private external fun kniBridge3529(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3530")
private external fun kniBridge3530(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3531")
private external fun kniBridge3531(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3532")
private external fun kniBridge3532(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3533")
private external fun kniBridge3533(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3534")
private external fun kniBridge3534(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3535")
private external fun kniBridge3535(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3536")
private external fun kniBridge3536(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge3537")
private external fun kniBridge3537(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3538")
private external fun kniBridge3538(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3539")
private external fun kniBridge3539(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3540")
private external fun kniBridge3540(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3541")
private external fun kniBridge3541(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3542")
private external fun kniBridge3542(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3543")
private external fun kniBridge3543(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3544")
private external fun kniBridge3544(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3545")
private external fun kniBridge3545(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge3546")
private external fun kniBridge3546(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3547")
private external fun kniBridge3547(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3548")
private external fun kniBridge3548(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3549")
private external fun kniBridge3549(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge3550")
private external fun kniBridge3550(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3551")
private external fun kniBridge3551(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3552")
private external fun kniBridge3552(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3553")
private external fun kniBridge3553(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3554")
private external fun kniBridge3554(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3555")
private external fun kniBridge3555(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3556")
private external fun kniBridge3556(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3557")
private external fun kniBridge3557(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3558")
private external fun kniBridge3558(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3559")
private external fun kniBridge3559(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3560")
private external fun kniBridge3560(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3561")
private external fun kniBridge3561(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3562")
private external fun kniBridge3562(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3563")
private external fun kniBridge3563(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3564")
private external fun kniBridge3564(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3565")
private external fun kniBridge3565(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3566")
private external fun kniBridge3566(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3567")
private external fun kniBridge3567(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3568")
private external fun kniBridge3568(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge3569")
private external fun kniBridge3569(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3570")
private external fun kniBridge3570(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3571")
private external fun kniBridge3571(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3572")
private external fun kniBridge3572(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3573")
private external fun kniBridge3573(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3574")
private external fun kniBridge3574(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3575")
private external fun kniBridge3575(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3576")
private external fun kniBridge3576(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3577")
private external fun kniBridge3577(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3578")
private external fun kniBridge3578(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3579")
private external fun kniBridge3579(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3580")
private external fun kniBridge3580(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3581")
private external fun kniBridge3581(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3582")
private external fun kniBridge3582(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3583")
private external fun kniBridge3583(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3584")
private external fun kniBridge3584(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3585")
private external fun kniBridge3585(): NativePtr
@SymbolName("libwebsockets_kniBridge3586")
private external fun kniBridge3586(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3587")
private external fun kniBridge3587(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3588")
private external fun kniBridge3588(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3589")
private external fun kniBridge3589(): NativePtr
@SymbolName("libwebsockets_kniBridge3590")
private external fun kniBridge3590(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3591")
private external fun kniBridge3591(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3592")
private external fun kniBridge3592(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3593")
private external fun kniBridge3593(): NativePtr
@SymbolName("libwebsockets_kniBridge3594")
private external fun kniBridge3594(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3595")
private external fun kniBridge3595(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3596")
private external fun kniBridge3596(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3597")
private external fun kniBridge3597(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3598")
private external fun kniBridge3598(p0: Int, p1: Int, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3599")
private external fun kniBridge3599(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3600")
private external fun kniBridge3600(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: NativePtr, p5: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3601")
private external fun kniBridge3601(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: ULong, p5: ULong, p6: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge3602")
private external fun kniBridge3602(p0: Int, p1: NativePtr, p2: Int, p3: Int, p4: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3603")
private external fun kniBridge3603(): NativePtr
@SymbolName("libwebsockets_kniBridge3604")
private external fun kniBridge3604(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3605")
private external fun kniBridge3605(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3606")
private external fun kniBridge3606(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3607")
private external fun kniBridge3607(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3608")
private external fun kniBridge3608(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3609")
private external fun kniBridge3609(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: NativePtr, p5: NativePtr, p6: Int): Int
@SymbolName("libwebsockets_kniBridge3610")
private external fun kniBridge3610(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3611")
private external fun kniBridge3611(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3612")
private external fun kniBridge3612(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge3613")
private external fun kniBridge3613(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge3614")
private external fun kniBridge3614(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3615")
private external fun kniBridge3615(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3616")
private external fun kniBridge3616(): Int
@SymbolName("libwebsockets_kniBridge3617")
private external fun kniBridge3617(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3618")
private external fun kniBridge3618(p0: Int): Int
@SymbolName("libwebsockets_kniBridge3619")
private external fun kniBridge3619(p0: Int, p1: Int, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3620")
private external fun kniBridge3620(): Unit
@SymbolName("libwebsockets_kniBridge3621")
private external fun kniBridge3621(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3622")
private external fun kniBridge3622(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3623")
private external fun kniBridge3623(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3624")
private external fun kniBridge3624(): Int
@SymbolName("libwebsockets_kniBridge3625")
private external fun kniBridge3625(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3626")
private external fun kniBridge3626(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3627")
private external fun kniBridge3627(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3628")
private external fun kniBridge3628(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Long): Int
@SymbolName("libwebsockets_kniBridge3629")
private external fun kniBridge3629(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3630")
private external fun kniBridge3630(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3631")
private external fun kniBridge3631(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: Int, p7: NativePtr, p8: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3632")
private external fun kniBridge3632(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3633")
private external fun kniBridge3633(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3634")
private external fun kniBridge3634(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3635")
private external fun kniBridge3635(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Long): Int
@SymbolName("libwebsockets_kniBridge3636")
private external fun kniBridge3636(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3637")
private external fun kniBridge3637(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: Int, p7: NativePtr, p8: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3638")
private external fun kniBridge3638(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3639")
private external fun kniBridge3639(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3640")
private external fun kniBridge3640(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge3641")
private external fun kniBridge3641(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3642")
private external fun kniBridge3642(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3643")
private external fun kniBridge3643(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge3644")
private external fun kniBridge3644(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3645")
private external fun kniBridge3645(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3646")
private external fun kniBridge3646(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3647")
private external fun kniBridge3647(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3648")
private external fun kniBridge3648(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3649")
private external fun kniBridge3649(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3650")
private external fun kniBridge3650(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3651")
private external fun kniBridge3651(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3652")
private external fun kniBridge3652(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3653")
private external fun kniBridge3653(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3654")
private external fun kniBridge3654(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3655")
private external fun kniBridge3655(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3656")
private external fun kniBridge3656(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3657")
private external fun kniBridge3657(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3658")
private external fun kniBridge3658(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3659")
private external fun kniBridge3659(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3660")
private external fun kniBridge3660(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3661")
private external fun kniBridge3661(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3662")
private external fun kniBridge3662(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3663")
private external fun kniBridge3663(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3664")
private external fun kniBridge3664(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3665")
private external fun kniBridge3665(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3666")
private external fun kniBridge3666(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3667")
private external fun kniBridge3667(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3668")
private external fun kniBridge3668(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3669")
private external fun kniBridge3669(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3670")
private external fun kniBridge3670(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3671")
private external fun kniBridge3671(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3672")
private external fun kniBridge3672(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3673")
private external fun kniBridge3673(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3674")
private external fun kniBridge3674(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3675")
private external fun kniBridge3675(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3676")
private external fun kniBridge3676(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3677")
private external fun kniBridge3677(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3678")
private external fun kniBridge3678(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3679")
private external fun kniBridge3679(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3680")
private external fun kniBridge3680(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3681")
private external fun kniBridge3681(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3682")
private external fun kniBridge3682(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3683")
private external fun kniBridge3683(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3684")
private external fun kniBridge3684(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3685")
private external fun kniBridge3685(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3686")
private external fun kniBridge3686(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3687")
private external fun kniBridge3687(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3688")
private external fun kniBridge3688(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3689")
private external fun kniBridge3689(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3690")
private external fun kniBridge3690(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3691")
private external fun kniBridge3691(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3692")
private external fun kniBridge3692(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3693")
private external fun kniBridge3693(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3694")
private external fun kniBridge3694(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3695")
private external fun kniBridge3695(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3696")
private external fun kniBridge3696(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3697")
private external fun kniBridge3697(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3698")
private external fun kniBridge3698(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3699")
private external fun kniBridge3699(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3700")
private external fun kniBridge3700(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3701")
private external fun kniBridge3701(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3702")
private external fun kniBridge3702(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3703")
private external fun kniBridge3703(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3704")
private external fun kniBridge3704(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3705")
private external fun kniBridge3705(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3706")
private external fun kniBridge3706(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3707")
private external fun kniBridge3707(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3708")
private external fun kniBridge3708(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3709")
private external fun kniBridge3709(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3710")
private external fun kniBridge3710(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3711")
private external fun kniBridge3711(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3712")
private external fun kniBridge3712(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3713")
private external fun kniBridge3713(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3714")
private external fun kniBridge3714(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3715")
private external fun kniBridge3715(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3716")
private external fun kniBridge3716(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3717")
private external fun kniBridge3717(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3718")
private external fun kniBridge3718(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3719")
private external fun kniBridge3719(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3720")
private external fun kniBridge3720(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3721")
private external fun kniBridge3721(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3722")
private external fun kniBridge3722(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3723")
private external fun kniBridge3723(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3724")
private external fun kniBridge3724(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3725")
private external fun kniBridge3725(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3726")
private external fun kniBridge3726(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3727")
private external fun kniBridge3727(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3728")
private external fun kniBridge3728(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3729")
private external fun kniBridge3729(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3730")
private external fun kniBridge3730(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3731")
private external fun kniBridge3731(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3732")
private external fun kniBridge3732(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3733")
private external fun kniBridge3733(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3734")
private external fun kniBridge3734(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3735")
private external fun kniBridge3735(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3736")
private external fun kniBridge3736(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3737")
private external fun kniBridge3737(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3738")
private external fun kniBridge3738(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3739")
private external fun kniBridge3739(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3740")
private external fun kniBridge3740(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3741")
private external fun kniBridge3741(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3742")
private external fun kniBridge3742(p0: NativePtr, p1: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3743")
private external fun kniBridge3743(p0: NativePtr, p1: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3744")
private external fun kniBridge3744(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3745")
private external fun kniBridge3745(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3746")
private external fun kniBridge3746(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3747")
private external fun kniBridge3747(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3748")
private external fun kniBridge3748(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3749")
private external fun kniBridge3749(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3750")
private external fun kniBridge3750(): Int
@SymbolName("libwebsockets_kniBridge3751")
private external fun kniBridge3751(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3752")
private external fun kniBridge3752(): NativePtr
@SymbolName("libwebsockets_kniBridge3753")
private external fun kniBridge3753(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3754")
private external fun kniBridge3754(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3755")
private external fun kniBridge3755(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3756")
private external fun kniBridge3756(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3757")
private external fun kniBridge3757(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge3758")
private external fun kniBridge3758(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3759")
private external fun kniBridge3759(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: ULong, p5: NativePtr, p6: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3760")
private external fun kniBridge3760(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3761")
private external fun kniBridge3761(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge3762")
private external fun kniBridge3762(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3763")
private external fun kniBridge3763(p0: ULong, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge3764")
private external fun kniBridge3764(): Unit
@SymbolName("libwebsockets_kniBridge3765")
private external fun kniBridge3765(): NativePtr
@SymbolName("libwebsockets_kniBridge3766")
private external fun kniBridge3766(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3767")
private external fun kniBridge3767(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3768")
private external fun kniBridge3768(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3769")
private external fun kniBridge3769(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3770")
private external fun kniBridge3770(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3771")
private external fun kniBridge3771(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3772")
private external fun kniBridge3772(): Int
@SymbolName("libwebsockets_kniBridge3773")
private external fun kniBridge3773(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: ULong): Int
@SymbolName("libwebsockets_kniBridge3774")
private external fun kniBridge3774(): Int
@SymbolName("libwebsockets_kniBridge3775")
private external fun kniBridge3775(): NativePtr
@SymbolName("libwebsockets_kniBridge3776")
private external fun kniBridge3776(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3777")
private external fun kniBridge3777(): Unit
@SymbolName("libwebsockets_kniBridge3778")
private external fun kniBridge3778(): Unit
@SymbolName("libwebsockets_kniBridge3779")
private external fun kniBridge3779(): Int
@SymbolName("libwebsockets_kniBridge3780")
private external fun kniBridge3780(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3781")
private external fun kniBridge3781(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3782")
private external fun kniBridge3782(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3783")
private external fun kniBridge3783(): NativePtr
@SymbolName("libwebsockets_kniBridge3784")
private external fun kniBridge3784(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3785")
private external fun kniBridge3785(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3786")
private external fun kniBridge3786(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3787")
private external fun kniBridge3787(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3788")
private external fun kniBridge3788(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3789")
private external fun kniBridge3789(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3790")
private external fun kniBridge3790(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3791")
private external fun kniBridge3791(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3792")
private external fun kniBridge3792(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3793")
private external fun kniBridge3793(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3794")
private external fun kniBridge3794(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3795")
private external fun kniBridge3795(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3796")
private external fun kniBridge3796(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3797")
private external fun kniBridge3797(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3798")
private external fun kniBridge3798(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3799")
private external fun kniBridge3799(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3800")
private external fun kniBridge3800(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3801")
private external fun kniBridge3801(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3802")
private external fun kniBridge3802(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3803")
private external fun kniBridge3803(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3804")
private external fun kniBridge3804(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3805")
private external fun kniBridge3805(): NativePtr
@SymbolName("libwebsockets_kniBridge3806")
private external fun kniBridge3806(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3807")
private external fun kniBridge3807(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3808")
private external fun kniBridge3808(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3809")
private external fun kniBridge3809(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3810")
private external fun kniBridge3810(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3811")
private external fun kniBridge3811(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3812")
private external fun kniBridge3812(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3813")
private external fun kniBridge3813(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3814")
private external fun kniBridge3814(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3815")
private external fun kniBridge3815(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3816")
private external fun kniBridge3816(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3817")
private external fun kniBridge3817(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3818")
private external fun kniBridge3818(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3819")
private external fun kniBridge3819(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3820")
private external fun kniBridge3820(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3821")
private external fun kniBridge3821(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3822")
private external fun kniBridge3822(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3823")
private external fun kniBridge3823(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3824")
private external fun kniBridge3824(): NativePtr
@SymbolName("libwebsockets_kniBridge3825")
private external fun kniBridge3825(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3826")
private external fun kniBridge3826(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3827")
private external fun kniBridge3827(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3828")
private external fun kniBridge3828(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3829")
private external fun kniBridge3829(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3830")
private external fun kniBridge3830(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3831")
private external fun kniBridge3831(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3832")
private external fun kniBridge3832(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3833")
private external fun kniBridge3833(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge3834")
private external fun kniBridge3834(): NativePtr
@SymbolName("libwebsockets_kniBridge3835")
private external fun kniBridge3835(p0: UByte, p1: NativePtr, p2: Int, p3: ULong, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3836")
private external fun kniBridge3836(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3837")
private external fun kniBridge3837(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3838")
private external fun kniBridge3838(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3839")
private external fun kniBridge3839(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge3840")
private external fun kniBridge3840(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3841")
private external fun kniBridge3841(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge3842")
private external fun kniBridge3842(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3843")
private external fun kniBridge3843(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge3844")
private external fun kniBridge3844(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge3845")
private external fun kniBridge3845(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3846")
private external fun kniBridge3846(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge3847")
private external fun kniBridge3847(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3848")
private external fun kniBridge3848(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge3849")
private external fun kniBridge3849(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3850")
private external fun kniBridge3850(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("libwebsockets_kniBridge3851")
private external fun kniBridge3851(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge3852")
private external fun kniBridge3852(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3853")
private external fun kniBridge3853(p0: NativePtr, p1: NativePtr, p2: ULong): Unit
@SymbolName("libwebsockets_kniBridge3854")
private external fun kniBridge3854(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge3855")
private external fun kniBridge3855(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge3856")
private external fun kniBridge3856(p0: NativePtr, p1: UInt): Int
@SymbolName("libwebsockets_kniBridge3857")
private external fun kniBridge3857(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3858")
private external fun kniBridge3858(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3859")
private external fun kniBridge3859(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3860")
private external fun kniBridge3860(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge3861")
private external fun kniBridge3861(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3862")
private external fun kniBridge3862(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3863")
private external fun kniBridge3863(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3864")
private external fun kniBridge3864(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge3865")
private external fun kniBridge3865(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3866")
private external fun kniBridge3866(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge3867")
private external fun kniBridge3867(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3868")
private external fun kniBridge3868(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge3869")
private external fun kniBridge3869(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3870")
private external fun kniBridge3870(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3871")
private external fun kniBridge3871(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3872")
private external fun kniBridge3872(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3873")
private external fun kniBridge3873(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3874")
private external fun kniBridge3874(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3875")
private external fun kniBridge3875(): NativePtr
@SymbolName("libwebsockets_kniBridge3876")
private external fun kniBridge3876(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3877")
private external fun kniBridge3877(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge3878")
private external fun kniBridge3878(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3879")
private external fun kniBridge3879(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3880")
private external fun kniBridge3880(): Int
@SymbolName("libwebsockets_kniBridge3881")
private external fun kniBridge3881(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3882")
private external fun kniBridge3882(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3883")
private external fun kniBridge3883(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3884")
private external fun kniBridge3884(): NativePtr
@SymbolName("libwebsockets_kniBridge3885")
private external fun kniBridge3885(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3886")
private external fun kniBridge3886(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3887")
private external fun kniBridge3887(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3888")
private external fun kniBridge3888(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3889")
private external fun kniBridge3889(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3890")
private external fun kniBridge3890(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3891")
private external fun kniBridge3891(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3892")
private external fun kniBridge3892(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3893")
private external fun kniBridge3893(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3894")
private external fun kniBridge3894(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3895")
private external fun kniBridge3895(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3896")
private external fun kniBridge3896(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3897")
private external fun kniBridge3897(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3898")
private external fun kniBridge3898(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3899")
private external fun kniBridge3899(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3900")
private external fun kniBridge3900(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3901")
private external fun kniBridge3901(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3902")
private external fun kniBridge3902(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3903")
private external fun kniBridge3903(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3904")
private external fun kniBridge3904(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge3905")
private external fun kniBridge3905(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge3906")
private external fun kniBridge3906(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge3907")
private external fun kniBridge3907(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge3908")
private external fun kniBridge3908(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge3909")
private external fun kniBridge3909(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3910")
private external fun kniBridge3910(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3911")
private external fun kniBridge3911(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3912")
private external fun kniBridge3912(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3913")
private external fun kniBridge3913(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3914")
private external fun kniBridge3914(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3915")
private external fun kniBridge3915(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3916")
private external fun kniBridge3916(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3917")
private external fun kniBridge3917(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3918")
private external fun kniBridge3918(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3919")
private external fun kniBridge3919(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3920")
private external fun kniBridge3920(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3921")
private external fun kniBridge3921(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3922")
private external fun kniBridge3922(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3923")
private external fun kniBridge3923(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3924")
private external fun kniBridge3924(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3925")
private external fun kniBridge3925(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3926")
private external fun kniBridge3926(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3927")
private external fun kniBridge3927(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3928")
private external fun kniBridge3928(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3929")
private external fun kniBridge3929(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3930")
private external fun kniBridge3930(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3931")
private external fun kniBridge3931(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3932")
private external fun kniBridge3932(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3933")
private external fun kniBridge3933(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3934")
private external fun kniBridge3934(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: UInt): Int
@SymbolName("libwebsockets_kniBridge3935")
private external fun kniBridge3935(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge3936")
private external fun kniBridge3936(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge3937")
private external fun kniBridge3937(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3938")
private external fun kniBridge3938(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3939")
private external fun kniBridge3939(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3940")
private external fun kniBridge3940(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3941")
private external fun kniBridge3941(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3942")
private external fun kniBridge3942(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3943")
private external fun kniBridge3943(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3944")
private external fun kniBridge3944(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3945")
private external fun kniBridge3945(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3946")
private external fun kniBridge3946(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3947")
private external fun kniBridge3947(p0: NativePtr, p1: UInt): Int
@SymbolName("libwebsockets_kniBridge3948")
private external fun kniBridge3948(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3949")
private external fun kniBridge3949(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3950")
private external fun kniBridge3950(p0: UInt): Int
@SymbolName("libwebsockets_kniBridge3951")
private external fun kniBridge3951(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3952")
private external fun kniBridge3952(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3953")
private external fun kniBridge3953(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: ULong, p5: NativePtr, p6: ULong, p7: Int): Int
@SymbolName("libwebsockets_kniBridge3954")
private external fun kniBridge3954(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3955")
private external fun kniBridge3955(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3956")
private external fun kniBridge3956(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3957")
private external fun kniBridge3957(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3958")
private external fun kniBridge3958(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3959")
private external fun kniBridge3959(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3960")
private external fun kniBridge3960(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3961")
private external fun kniBridge3961(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3962")
private external fun kniBridge3962(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3963")
private external fun kniBridge3963(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3964")
private external fun kniBridge3964(): NativePtr
@SymbolName("libwebsockets_kniBridge3965")
private external fun kniBridge3965(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3966")
private external fun kniBridge3966(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3967")
private external fun kniBridge3967(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3968")
private external fun kniBridge3968(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3969")
private external fun kniBridge3969(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3970")
private external fun kniBridge3970(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3971")
private external fun kniBridge3971(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3972")
private external fun kniBridge3972(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3973")
private external fun kniBridge3973(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3974")
private external fun kniBridge3974(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3975")
private external fun kniBridge3975(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3976")
private external fun kniBridge3976(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3977")
private external fun kniBridge3977(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3978")
private external fun kniBridge3978(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3979")
private external fun kniBridge3979(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3980")
private external fun kniBridge3980(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3981")
private external fun kniBridge3981(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3982")
private external fun kniBridge3982(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3983")
private external fun kniBridge3983(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3984")
private external fun kniBridge3984(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3985")
private external fun kniBridge3985(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3986")
private external fun kniBridge3986(): NativePtr
@SymbolName("libwebsockets_kniBridge3987")
private external fun kniBridge3987(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3988")
private external fun kniBridge3988(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3989")
private external fun kniBridge3989(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge3990")
private external fun kniBridge3990(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3991")
private external fun kniBridge3991(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3992")
private external fun kniBridge3992(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3993")
private external fun kniBridge3993(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3994")
private external fun kniBridge3994(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3995")
private external fun kniBridge3995(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge3996")
private external fun kniBridge3996(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge3997")
private external fun kniBridge3997(p0: NativePtr, p1: Int, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge3998")
private external fun kniBridge3998(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge3999")
private external fun kniBridge3999(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4000")
private external fun kniBridge4000(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4001")
private external fun kniBridge4001(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4002")
private external fun kniBridge4002(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4003")
private external fun kniBridge4003(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4004")
private external fun kniBridge4004(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4005")
private external fun kniBridge4005(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4006")
private external fun kniBridge4006(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4007")
private external fun kniBridge4007(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4008")
private external fun kniBridge4008(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4009")
private external fun kniBridge4009(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge4010")
private external fun kniBridge4010(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge4011")
private external fun kniBridge4011(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4012")
private external fun kniBridge4012(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4013")
private external fun kniBridge4013(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4014")
private external fun kniBridge4014(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4015")
private external fun kniBridge4015(): NativePtr
@SymbolName("libwebsockets_kniBridge4016")
private external fun kniBridge4016(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4017")
private external fun kniBridge4017(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4018")
private external fun kniBridge4018(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4019")
private external fun kniBridge4019(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4020")
private external fun kniBridge4020(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4021")
private external fun kniBridge4021(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4022")
private external fun kniBridge4022(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4023")
private external fun kniBridge4023(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4024")
private external fun kniBridge4024(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4025")
private external fun kniBridge4025(p0: NativePtr, p1: Long): Long
@SymbolName("libwebsockets_kniBridge4026")
private external fun kniBridge4026(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4027")
private external fun kniBridge4027(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4028")
private external fun kniBridge4028(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4029")
private external fun kniBridge4029(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4030")
private external fun kniBridge4030(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4031")
private external fun kniBridge4031(p0: NativePtr, p1: Long): Unit
@SymbolName("libwebsockets_kniBridge4032")
private external fun kniBridge4032(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4033")
private external fun kniBridge4033(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4034")
private external fun kniBridge4034(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4035")
private external fun kniBridge4035(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4036")
private external fun kniBridge4036(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge4037")
private external fun kniBridge4037(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4038")
private external fun kniBridge4038(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4039")
private external fun kniBridge4039(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4040")
private external fun kniBridge4040(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4041")
private external fun kniBridge4041(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4042")
private external fun kniBridge4042(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4043")
private external fun kniBridge4043(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4044")
private external fun kniBridge4044(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4045")
private external fun kniBridge4045(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4046")
private external fun kniBridge4046(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4047")
private external fun kniBridge4047(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4048")
private external fun kniBridge4048(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4049")
private external fun kniBridge4049(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4050")
private external fun kniBridge4050(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4051")
private external fun kniBridge4051(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4052")
private external fun kniBridge4052(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4053")
private external fun kniBridge4053(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4054")
private external fun kniBridge4054(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4055")
private external fun kniBridge4055(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4056")
private external fun kniBridge4056(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4057")
private external fun kniBridge4057(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4058")
private external fun kniBridge4058(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4059")
private external fun kniBridge4059(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4060")
private external fun kniBridge4060(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4061")
private external fun kniBridge4061(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4062")
private external fun kniBridge4062(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4063")
private external fun kniBridge4063(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4064")
private external fun kniBridge4064(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4065")
private external fun kniBridge4065(p0: NativePtr, p1: NativePtr, p2: Long): Int
@SymbolName("libwebsockets_kniBridge4066")
private external fun kniBridge4066(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4067")
private external fun kniBridge4067(p0: Int, p1: NativePtr, p2: NativePtr, p3: Long): Int
@SymbolName("libwebsockets_kniBridge4068")
private external fun kniBridge4068(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4069")
private external fun kniBridge4069(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4070")
private external fun kniBridge4070(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge4071")
private external fun kniBridge4071(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4072")
private external fun kniBridge4072(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4073")
private external fun kniBridge4073(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4074")
private external fun kniBridge4074(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4075")
private external fun kniBridge4075(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4076")
private external fun kniBridge4076(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4077")
private external fun kniBridge4077(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4078")
private external fun kniBridge4078(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4079")
private external fun kniBridge4079(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4080")
private external fun kniBridge4080(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4081")
private external fun kniBridge4081(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4082")
private external fun kniBridge4082(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4083")
private external fun kniBridge4083(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4084")
private external fun kniBridge4084(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4085")
private external fun kniBridge4085(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4086")
private external fun kniBridge4086(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4087")
private external fun kniBridge4087(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4088")
private external fun kniBridge4088(p0: NativePtr, p1: Long): Long
@SymbolName("libwebsockets_kniBridge4089")
private external fun kniBridge4089(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4090")
private external fun kniBridge4090(p0: NativePtr, p1: Long): Long
@SymbolName("libwebsockets_kniBridge4091")
private external fun kniBridge4091(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4092")
private external fun kniBridge4092(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4093")
private external fun kniBridge4093(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4094")
private external fun kniBridge4094(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4095")
private external fun kniBridge4095(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4096")
private external fun kniBridge4096(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4097")
private external fun kniBridge4097(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4098")
private external fun kniBridge4098(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4099")
private external fun kniBridge4099(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge4100")
private external fun kniBridge4100(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge4101")
private external fun kniBridge4101(): NativePtr
@SymbolName("libwebsockets_kniBridge4102")
private external fun kniBridge4102(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4103")
private external fun kniBridge4103(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4104")
private external fun kniBridge4104(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge4105")
private external fun kniBridge4105(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4106")
private external fun kniBridge4106(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4107")
private external fun kniBridge4107(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4108")
private external fun kniBridge4108(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4109")
private external fun kniBridge4109(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4110")
private external fun kniBridge4110(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4111")
private external fun kniBridge4111(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4112")
private external fun kniBridge4112(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4113")
private external fun kniBridge4113(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4114")
private external fun kniBridge4114(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4115")
private external fun kniBridge4115(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4116")
private external fun kniBridge4116(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge4117")
private external fun kniBridge4117(p0: NativePtr, p1: NativePtr, p2: Long): NativePtr
@SymbolName("libwebsockets_kniBridge4118")
private external fun kniBridge4118(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4119")
private external fun kniBridge4119(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4120")
private external fun kniBridge4120(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4121")
private external fun kniBridge4121(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4122")
private external fun kniBridge4122(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4123")
private external fun kniBridge4123(p0: NativePtr, p1: Int, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4124")
private external fun kniBridge4124(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4125")
private external fun kniBridge4125(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4126")
private external fun kniBridge4126(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4127")
private external fun kniBridge4127(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4128")
private external fun kniBridge4128(p0: NativePtr, p1: NativePtr, p2: Long): Int
@SymbolName("libwebsockets_kniBridge4129")
private external fun kniBridge4129(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4130")
private external fun kniBridge4130(p0: Int, p1: NativePtr, p2: NativePtr, p3: Long): Int
@SymbolName("libwebsockets_kniBridge4131")
private external fun kniBridge4131(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4132")
private external fun kniBridge4132(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4133")
private external fun kniBridge4133(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4134")
private external fun kniBridge4134(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4135")
private external fun kniBridge4135(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4136")
private external fun kniBridge4136(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4137")
private external fun kniBridge4137(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4138")
private external fun kniBridge4138(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4139")
private external fun kniBridge4139(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4140")
private external fun kniBridge4140(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4141")
private external fun kniBridge4141(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4142")
private external fun kniBridge4142(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4143")
private external fun kniBridge4143(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge4144")
private external fun kniBridge4144(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4145")
private external fun kniBridge4145(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4146")
private external fun kniBridge4146(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4147")
private external fun kniBridge4147(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge4148")
private external fun kniBridge4148(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4149")
private external fun kniBridge4149(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4150")
private external fun kniBridge4150(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4151")
private external fun kniBridge4151(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4152")
private external fun kniBridge4152(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4153")
private external fun kniBridge4153(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4154")
private external fun kniBridge4154(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4155")
private external fun kniBridge4155(p0: NativePtr, p1: UInt): Unit
@SymbolName("libwebsockets_kniBridge4156")
private external fun kniBridge4156(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4157")
private external fun kniBridge4157(p0: NativePtr, p1: NativePtr, p2: UByte, p3: UByte): Int
@SymbolName("libwebsockets_kniBridge4158")
private external fun kniBridge4158(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4159")
private external fun kniBridge4159(p0: NativePtr, p1: UByte, p2: UByte, p3: UByte, p4: NativePtr, p5: ULong): Int
@SymbolName("libwebsockets_kniBridge4160")
private external fun kniBridge4160(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4161")
private external fun kniBridge4161(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4162")
private external fun kniBridge4162(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4163")
private external fun kniBridge4163(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge4164")
private external fun kniBridge4164(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge4165")
private external fun kniBridge4165(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge4166")
private external fun kniBridge4166(p0: NativePtr, p1: ULong): ULong
@SymbolName("libwebsockets_kniBridge4167")
private external fun kniBridge4167(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4168")
private external fun kniBridge4168(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4169")
private external fun kniBridge4169(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4170")
private external fun kniBridge4170(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4171")
private external fun kniBridge4171(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4172")
private external fun kniBridge4172(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4173")
private external fun kniBridge4173(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4174")
private external fun kniBridge4174(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4175")
private external fun kniBridge4175(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4176")
private external fun kniBridge4176(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4177")
private external fun kniBridge4177(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4178")
private external fun kniBridge4178(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4179")
private external fun kniBridge4179(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4180")
private external fun kniBridge4180(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4181")
private external fun kniBridge4181(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4182")
private external fun kniBridge4182(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4183")
private external fun kniBridge4183(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4184")
private external fun kniBridge4184(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4185")
private external fun kniBridge4185(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4186")
private external fun kniBridge4186(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4187")
private external fun kniBridge4187(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4188")
private external fun kniBridge4188(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4189")
private external fun kniBridge4189(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4190")
private external fun kniBridge4190(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4191")
private external fun kniBridge4191(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4192")
private external fun kniBridge4192(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4193")
private external fun kniBridge4193(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4194")
private external fun kniBridge4194(p0: NativePtr, p1: Int, p2: Long, p3: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4195")
private external fun kniBridge4195(p0: NativePtr, p1: Int, p2: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4196")
private external fun kniBridge4196(p0: NativePtr, p1: Int, p2: Long, p3: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4197")
private external fun kniBridge4197(p0: NativePtr, p1: Int, p2: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4198")
private external fun kniBridge4198(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4199")
private external fun kniBridge4199(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4200")
private external fun kniBridge4200(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4201")
private external fun kniBridge4201(): NativePtr
@SymbolName("libwebsockets_kniBridge4202")
private external fun kniBridge4202(): NativePtr
@SymbolName("libwebsockets_kniBridge4203")
private external fun kniBridge4203(): NativePtr
@SymbolName("libwebsockets_kniBridge4204")
private external fun kniBridge4204(): NativePtr
@SymbolName("libwebsockets_kniBridge4205")
private external fun kniBridge4205(): NativePtr
@SymbolName("libwebsockets_kniBridge4206")
private external fun kniBridge4206(): NativePtr
@SymbolName("libwebsockets_kniBridge4207")
private external fun kniBridge4207(): NativePtr
@SymbolName("libwebsockets_kniBridge4208")
private external fun kniBridge4208(): NativePtr
@SymbolName("libwebsockets_kniBridge4209")
private external fun kniBridge4209(): NativePtr
@SymbolName("libwebsockets_kniBridge4210")
private external fun kniBridge4210(): NativePtr
@SymbolName("libwebsockets_kniBridge4211")
private external fun kniBridge4211(): NativePtr
@SymbolName("libwebsockets_kniBridge4212")
private external fun kniBridge4212(): NativePtr
@SymbolName("libwebsockets_kniBridge4213")
private external fun kniBridge4213(): NativePtr
@SymbolName("libwebsockets_kniBridge4214")
private external fun kniBridge4214(): NativePtr
@SymbolName("libwebsockets_kniBridge4215")
private external fun kniBridge4215(): NativePtr
@SymbolName("libwebsockets_kniBridge4216")
private external fun kniBridge4216(): NativePtr
@SymbolName("libwebsockets_kniBridge4217")
private external fun kniBridge4217(): NativePtr
@SymbolName("libwebsockets_kniBridge4218")
private external fun kniBridge4218(): NativePtr
@SymbolName("libwebsockets_kniBridge4219")
private external fun kniBridge4219(): NativePtr
@SymbolName("libwebsockets_kniBridge4220")
private external fun kniBridge4220(): NativePtr
@SymbolName("libwebsockets_kniBridge4221")
private external fun kniBridge4221(): NativePtr
@SymbolName("libwebsockets_kniBridge4222")
private external fun kniBridge4222(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4223")
private external fun kniBridge4223(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4224")
private external fun kniBridge4224(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4225")
private external fun kniBridge4225(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4226")
private external fun kniBridge4226(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4227")
private external fun kniBridge4227(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4228")
private external fun kniBridge4228(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4229")
private external fun kniBridge4229(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4230")
private external fun kniBridge4230(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4231")
private external fun kniBridge4231(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4232")
private external fun kniBridge4232(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4233")
private external fun kniBridge4233(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4234")
private external fun kniBridge4234(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4235")
private external fun kniBridge4235(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4236")
private external fun kniBridge4236(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4237")
private external fun kniBridge4237(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4238")
private external fun kniBridge4238(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4239")
private external fun kniBridge4239(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4240")
private external fun kniBridge4240(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4241")
private external fun kniBridge4241(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4242")
private external fun kniBridge4242(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4243")
private external fun kniBridge4243(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4244")
private external fun kniBridge4244(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4245")
private external fun kniBridge4245(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4246")
private external fun kniBridge4246(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4247")
private external fun kniBridge4247(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4248")
private external fun kniBridge4248(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4249")
private external fun kniBridge4249(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4250")
private external fun kniBridge4250(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4251")
private external fun kniBridge4251(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4252")
private external fun kniBridge4252(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4253")
private external fun kniBridge4253(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4254")
private external fun kniBridge4254(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4255")
private external fun kniBridge4255(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4256")
private external fun kniBridge4256(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4257")
private external fun kniBridge4257(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4258")
private external fun kniBridge4258(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4259")
private external fun kniBridge4259(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4260")
private external fun kniBridge4260(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4261")
private external fun kniBridge4261(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4262")
private external fun kniBridge4262(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4263")
private external fun kniBridge4263(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4264")
private external fun kniBridge4264(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4265")
private external fun kniBridge4265(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4266")
private external fun kniBridge4266(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4267")
private external fun kniBridge4267(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4268")
private external fun kniBridge4268(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4269")
private external fun kniBridge4269(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4270")
private external fun kniBridge4270(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4271")
private external fun kniBridge4271(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4272")
private external fun kniBridge4272(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge4273")
private external fun kniBridge4273(p0: NativePtr, p1: Long): Unit
@SymbolName("libwebsockets_kniBridge4274")
private external fun kniBridge4274(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4275")
private external fun kniBridge4275(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4276")
private external fun kniBridge4276(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge4277")
private external fun kniBridge4277(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge4278")
private external fun kniBridge4278(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge4279")
private external fun kniBridge4279(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4280")
private external fun kniBridge4280(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4281")
private external fun kniBridge4281(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4282")
private external fun kniBridge4282(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4283")
private external fun kniBridge4283(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4284")
private external fun kniBridge4284(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4285")
private external fun kniBridge4285(): Int
@SymbolName("libwebsockets_kniBridge4286")
private external fun kniBridge4286(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge4287")
private external fun kniBridge4287(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge4288")
private external fun kniBridge4288(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4289")
private external fun kniBridge4289(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4290")
private external fun kniBridge4290(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4291")
private external fun kniBridge4291(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4292")
private external fun kniBridge4292(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4293")
private external fun kniBridge4293(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4294")
private external fun kniBridge4294(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4295")
private external fun kniBridge4295(): NativePtr
@SymbolName("libwebsockets_kniBridge4296")
private external fun kniBridge4296(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4297")
private external fun kniBridge4297(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4298")
private external fun kniBridge4298(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4299")
private external fun kniBridge4299(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4300")
private external fun kniBridge4300(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4301")
private external fun kniBridge4301(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4302")
private external fun kniBridge4302(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4303")
private external fun kniBridge4303(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4304")
private external fun kniBridge4304(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4305")
private external fun kniBridge4305(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4306")
private external fun kniBridge4306(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4307")
private external fun kniBridge4307(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4308")
private external fun kniBridge4308(): NativePtr
@SymbolName("libwebsockets_kniBridge4309")
private external fun kniBridge4309(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4310")
private external fun kniBridge4310(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4311")
private external fun kniBridge4311(p0: NativePtr, p1: UInt): UInt
@SymbolName("libwebsockets_kniBridge4312")
private external fun kniBridge4312(p0: NativePtr, p1: UInt): UInt
@SymbolName("libwebsockets_kniBridge4313")
private external fun kniBridge4313(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4314")
private external fun kniBridge4314(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4315")
private external fun kniBridge4315(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4316")
private external fun kniBridge4316(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4317")
private external fun kniBridge4317(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4318")
private external fun kniBridge4318(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4319")
private external fun kniBridge4319(): Unit
@SymbolName("libwebsockets_kniBridge4320")
private external fun kniBridge4320(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4321")
private external fun kniBridge4321(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4322")
private external fun kniBridge4322(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4323")
private external fun kniBridge4323(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4324")
private external fun kniBridge4324(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4325")
private external fun kniBridge4325(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4326")
private external fun kniBridge4326(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4327")
private external fun kniBridge4327(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4328")
private external fun kniBridge4328(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4329")
private external fun kniBridge4329(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4330")
private external fun kniBridge4330(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4331")
private external fun kniBridge4331(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4332")
private external fun kniBridge4332(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4333")
private external fun kniBridge4333(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4334")
private external fun kniBridge4334(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4335")
private external fun kniBridge4335(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4336")
private external fun kniBridge4336(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4337")
private external fun kniBridge4337(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4338")
private external fun kniBridge4338(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4339")
private external fun kniBridge4339(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4340")
private external fun kniBridge4340(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4341")
private external fun kniBridge4341(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4342")
private external fun kniBridge4342(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4343")
private external fun kniBridge4343(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4344")
private external fun kniBridge4344(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4345")
private external fun kniBridge4345(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4346")
private external fun kniBridge4346(p0: ULong, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4347")
private external fun kniBridge4347(): NativePtr
@SymbolName("libwebsockets_kniBridge4348")
private external fun kniBridge4348(): Int
@SymbolName("libwebsockets_kniBridge4349")
private external fun kniBridge4349(): NativePtr
@SymbolName("libwebsockets_kniBridge4350")
private external fun kniBridge4350(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4351")
private external fun kniBridge4351(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4352")
private external fun kniBridge4352(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4353")
private external fun kniBridge4353(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4354")
private external fun kniBridge4354(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4355")
private external fun kniBridge4355(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4356")
private external fun kniBridge4356(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4357")
private external fun kniBridge4357(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4358")
private external fun kniBridge4358(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4359")
private external fun kniBridge4359(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4360")
private external fun kniBridge4360(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4361")
private external fun kniBridge4361(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge4362")
private external fun kniBridge4362(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4363")
private external fun kniBridge4363(p0: Int, p1: Int, p2: Int, p3: NativePtr, p4: Int): Unit
@SymbolName("libwebsockets_kniBridge4364")
private external fun kniBridge4364(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4365")
private external fun kniBridge4365(): ULong
@SymbolName("libwebsockets_kniBridge4366")
private external fun kniBridge4366(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4367")
private external fun kniBridge4367(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4368")
private external fun kniBridge4368(): ULong
@SymbolName("libwebsockets_kniBridge4369")
private external fun kniBridge4369(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4370")
private external fun kniBridge4370(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4371")
private external fun kniBridge4371(): ULong
@SymbolName("libwebsockets_kniBridge4372")
private external fun kniBridge4372(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4373")
private external fun kniBridge4373(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4374")
private external fun kniBridge4374(): Unit
@SymbolName("libwebsockets_kniBridge4375")
private external fun kniBridge4375(p0: ULong, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4376")
private external fun kniBridge4376(p0: ULong, p1: NativePtr, p2: ULong): Unit
@SymbolName("libwebsockets_kniBridge4377")
private external fun kniBridge4377(p0: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4378")
private external fun kniBridge4378(p0: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4379")
private external fun kniBridge4379(p0: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4380")
private external fun kniBridge4380(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4381")
private external fun kniBridge4381(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4382")
private external fun kniBridge4382(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4383")
private external fun kniBridge4383(): NativePtr
@SymbolName("libwebsockets_kniBridge4384")
private external fun kniBridge4384(p0: Int, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4385")
private external fun kniBridge4385(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4386")
private external fun kniBridge4386(p0: Int, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4387")
private external fun kniBridge4387(): Int
@SymbolName("libwebsockets_kniBridge4388")
private external fun kniBridge4388(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4389")
private external fun kniBridge4389(p0: ULong): Unit
@SymbolName("libwebsockets_kniBridge4390")
private external fun kniBridge4390(): NativePtr
@SymbolName("libwebsockets_kniBridge4391")
private external fun kniBridge4391(): Int
@SymbolName("libwebsockets_kniBridge4392")
private external fun kniBridge4392(): Int
@SymbolName("libwebsockets_kniBridge4393")
private external fun kniBridge4393(): Int
@SymbolName("libwebsockets_kniBridge4394")
private external fun kniBridge4394(): NativePtr
@SymbolName("libwebsockets_kniBridge4395")
private external fun kniBridge4395(p0: Int, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4396")
private external fun kniBridge4396(p0: Int, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4397")
private external fun kniBridge4397(p0: Int, p1: NativePtr, p2: ULong): Unit
@SymbolName("libwebsockets_kniBridge4398")
private external fun kniBridge4398(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge4399")
private external fun kniBridge4399(): Int
@SymbolName("libwebsockets_kniBridge4400")
private external fun kniBridge4400(p0: Int, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4401")
private external fun kniBridge4401(p0: Int, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4402")
private external fun kniBridge4402(p0: Int, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4403")
private external fun kniBridge4403(p0: Int, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4404")
private external fun kniBridge4404(p0: Int): Int
@SymbolName("libwebsockets_kniBridge4405")
private external fun kniBridge4405(p0: NativePtr, p1: UInt, p2: NativePtr, p3: ULong): Unit
@SymbolName("libwebsockets_kniBridge4406")
private external fun kniBridge4406(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4407")
private external fun kniBridge4407(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4408")
private external fun kniBridge4408(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4409")
private external fun kniBridge4409(p0: NativePtr): UByte
@SymbolName("libwebsockets_kniBridge4410")
private external fun kniBridge4410(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4411")
private external fun kniBridge4411(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4412")
private external fun kniBridge4412(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4413")
private external fun kniBridge4413(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge4414")
private external fun kniBridge4414(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt, p4: NativePtr, p5: NativePtr, p6: ULong): Int
@SymbolName("libwebsockets_kniBridge4415")
private external fun kniBridge4415(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4416")
private external fun kniBridge4416(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4417")
private external fun kniBridge4417(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4418")
private external fun kniBridge4418(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4419")
private external fun kniBridge4419(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4420")
private external fun kniBridge4420(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4421")
private external fun kniBridge4421(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4422")
private external fun kniBridge4422(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4423")
private external fun kniBridge4423(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4424")
private external fun kniBridge4424(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4425")
private external fun kniBridge4425(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4426")
private external fun kniBridge4426(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4427")
private external fun kniBridge4427(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4428")
private external fun kniBridge4428(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4429")
private external fun kniBridge4429(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4430")
private external fun kniBridge4430(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4431")
private external fun kniBridge4431(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4432")
private external fun kniBridge4432(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4433")
private external fun kniBridge4433(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4434")
private external fun kniBridge4434(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4435")
private external fun kniBridge4435(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4436")
private external fun kniBridge4436(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4437")
private external fun kniBridge4437(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4438")
private external fun kniBridge4438(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4439")
private external fun kniBridge4439(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4440")
private external fun kniBridge4440(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4441")
private external fun kniBridge4441(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4442")
private external fun kniBridge4442(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4443")
private external fun kniBridge4443(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4444")
private external fun kniBridge4444(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4445")
private external fun kniBridge4445(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4446")
private external fun kniBridge4446(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4447")
private external fun kniBridge4447(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge4448")
private external fun kniBridge4448(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4449")
private external fun kniBridge4449(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4450")
private external fun kniBridge4450(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge4451")
private external fun kniBridge4451(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4452")
private external fun kniBridge4452(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4453")
private external fun kniBridge4453(p0: UInt): NativePtr
@SymbolName("libwebsockets_kniBridge4454")
private external fun kniBridge4454(p0: NativePtr, p1: UInt): Int
@SymbolName("libwebsockets_kniBridge4455")
private external fun kniBridge4455(p0: NativePtr, p1: UInt, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4456")
private external fun kniBridge4456(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt): Int
@SymbolName("libwebsockets_kniBridge4457")
private external fun kniBridge4457(p0: NativePtr, p1: NativePtr, p2: Int, p3: UInt, p4: Int): Int
@SymbolName("libwebsockets_kniBridge4458")
private external fun kniBridge4458(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4459")
private external fun kniBridge4459(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4460")
private external fun kniBridge4460(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4461")
private external fun kniBridge4461(p0: NativePtr, p1: UInt, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4462")
private external fun kniBridge4462(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4463")
private external fun kniBridge4463(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4464")
private external fun kniBridge4464(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4465")
private external fun kniBridge4465(p0: NativePtr, p1: UInt, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4466")
private external fun kniBridge4466(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4467")
private external fun kniBridge4467(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4468")
private external fun kniBridge4468(p0: NativePtr, p1: UInt, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4469")
private external fun kniBridge4469(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4470")
private external fun kniBridge4470(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4471")
private external fun kniBridge4471(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Byte): Int
@SymbolName("libwebsockets_kniBridge4472")
private external fun kniBridge4472(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int, p4: NativePtr, p5: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4473")
private external fun kniBridge4473(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4474")
private external fun kniBridge4474(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4475")
private external fun kniBridge4475(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4476")
private external fun kniBridge4476(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4477")
private external fun kniBridge4477(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4478")
private external fun kniBridge4478(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4479")
private external fun kniBridge4479(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4480")
private external fun kniBridge4480(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4481")
private external fun kniBridge4481(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge4482")
private external fun kniBridge4482(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4483")
private external fun kniBridge4483(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4484")
private external fun kniBridge4484(): Int
@SymbolName("libwebsockets_kniBridge4485")
private external fun kniBridge4485(): ULong
@SymbolName("libwebsockets_kniBridge4486")
private external fun kniBridge4486(p0: NativePtr, p1: UInt, p2: Int): Unit
@SymbolName("libwebsockets_kniBridge4487")
private external fun kniBridge4487(p0: NativePtr, p1: Long): Unit
@SymbolName("libwebsockets_kniBridge4488")
private external fun kniBridge4488(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4489")
private external fun kniBridge4489(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4490")
private external fun kniBridge4490(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4491")
private external fun kniBridge4491(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4492")
private external fun kniBridge4492(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4493")
private external fun kniBridge4493(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4494")
private external fun kniBridge4494(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4495")
private external fun kniBridge4495(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4496")
private external fun kniBridge4496(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4497")
private external fun kniBridge4497(p0: NativePtr, p1: NativePtr, p2: ULong, p3: UInt): Int
@SymbolName("libwebsockets_kniBridge4498")
private external fun kniBridge4498(p0: Int, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4499")
private external fun kniBridge4499(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4500")
private external fun kniBridge4500(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4501")
private external fun kniBridge4501(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4502")
private external fun kniBridge4502(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4503")
private external fun kniBridge4503(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4504")
private external fun kniBridge4504(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4505")
private external fun kniBridge4505(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge4506")
private external fun kniBridge4506(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4507")
private external fun kniBridge4507(p0: NativePtr, p1: Int, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4508")
private external fun kniBridge4508(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge4509")
private external fun kniBridge4509(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4510")
private external fun kniBridge4510(p0: NativePtr): Long
@SymbolName("libwebsockets_kniBridge4511")
private external fun kniBridge4511(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4512")
private external fun kniBridge4512(p0: NativePtr, p1: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4513")
private external fun kniBridge4513(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4514")
private external fun kniBridge4514(p0: NativePtr, p1: Int, p2: NativePtr, p3: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4515")
private external fun kniBridge4515(p0: NativePtr, p1: Int, p2: NativePtr, p3: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4516")
private external fun kniBridge4516(p0: NativePtr, p1: Int, p2: Int, p3: NativePtr, p4: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4517")
private external fun kniBridge4517(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4518")
private external fun kniBridge4518(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int, p4: NativePtr, p5: Int): Unit
@SymbolName("libwebsockets_kniBridge4519")
private external fun kniBridge4519(p0: NativePtr, p1: NativePtr, p2: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4520")
private external fun kniBridge4520(p0: Int, p1: NativePtr, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4521")
private external fun kniBridge4521(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4522")
private external fun kniBridge4522(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4523")
private external fun kniBridge4523(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4524")
private external fun kniBridge4524(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4525")
private external fun kniBridge4525(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge4526")
private external fun kniBridge4526(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4527")
private external fun kniBridge4527(p0: NativePtr, p1: ULong): Int
@SymbolName("libwebsockets_kniBridge4528")
private external fun kniBridge4528(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4529")
private external fun kniBridge4529(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4530")
private external fun kniBridge4530(): NativePtr
@SymbolName("libwebsockets_kniBridge4531")
private external fun kniBridge4531(p0: NativePtr, p1: NativePtr, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4532")
private external fun kniBridge4532(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge4533")
private external fun kniBridge4533(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4534")
private external fun kniBridge4534(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4535")
private external fun kniBridge4535(): NativePtr
@SymbolName("libwebsockets_kniBridge4536")
private external fun kniBridge4536(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4537")
private external fun kniBridge4537(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4538")
private external fun kniBridge4538(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4539")
private external fun kniBridge4539(p0: Int, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4540")
private external fun kniBridge4540(): ULong
@SymbolName("libwebsockets_kniBridge4541")
private external fun kniBridge4541(): Long
@SymbolName("libwebsockets_kniBridge4542")
private external fun kniBridge4542(p0: NativePtr, p1: Long, p2: Long): Int
@SymbolName("libwebsockets_kniBridge4543")
private external fun kniBridge4543(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4544")
private external fun kniBridge4544(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4545")
private external fun kniBridge4545(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4546")
private external fun kniBridge4546(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4547")
private external fun kniBridge4547(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4548")
private external fun kniBridge4548(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4549")
private external fun kniBridge4549(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4550")
private external fun kniBridge4550(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4551")
private external fun kniBridge4551(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4552")
private external fun kniBridge4552(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4553")
private external fun kniBridge4553(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4554")
private external fun kniBridge4554(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4555")
private external fun kniBridge4555(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4556")
private external fun kniBridge4556(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4557")
private external fun kniBridge4557(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4558")
private external fun kniBridge4558(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4559")
private external fun kniBridge4559(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4560")
private external fun kniBridge4560(p0: NativePtr, p1: Int): Int
@SymbolName("libwebsockets_kniBridge4561")
private external fun kniBridge4561(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4562")
private external fun kniBridge4562(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4563")
private external fun kniBridge4563(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4564")
private external fun kniBridge4564(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4565")
private external fun kniBridge4565(): NativePtr
@SymbolName("libwebsockets_kniBridge4566")
private external fun kniBridge4566(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4567")
private external fun kniBridge4567(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge4568")
private external fun kniBridge4568(p0: ULong, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4569")
private external fun kniBridge4569(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4570")
private external fun kniBridge4570(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4571")
private external fun kniBridge4571(p0: NativePtr, p1: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4572")
private external fun kniBridge4572(p0: NativePtr, p1: NativePtr, p2: ULong): ULong
@SymbolName("libwebsockets_kniBridge4573")
private external fun kniBridge4573(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): ULong
@SymbolName("libwebsockets_kniBridge4574")
private external fun kniBridge4574(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4575")
private external fun kniBridge4575(p0: NativePtr, p1: UInt): Unit
@SymbolName("libwebsockets_kniBridge4576")
private external fun kniBridge4576(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge4577")
private external fun kniBridge4577(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4578")
private external fun kniBridge4578(p0: NativePtr, p1: ULong): Unit
@SymbolName("libwebsockets_kniBridge4579")
private external fun kniBridge4579(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4580")
private external fun kniBridge4580(p0: NativePtr, p1: ULong, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4581")
private external fun kniBridge4581(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4582")
private external fun kniBridge4582(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4583")
private external fun kniBridge4583(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4584")
private external fun kniBridge4584(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4585")
private external fun kniBridge4585(p0: NativePtr, p1: UInt, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4586")
private external fun kniBridge4586(p0: NativePtr, p1: UInt, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4587")
private external fun kniBridge4587(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4588")
private external fun kniBridge4588(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4589")
private external fun kniBridge4589(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong, p5: NativePtr, p6: ULong): Int
@SymbolName("libwebsockets_kniBridge4590")
private external fun kniBridge4590(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4591")
private external fun kniBridge4591(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4592")
private external fun kniBridge4592(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4593")
private external fun kniBridge4593(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4594")
private external fun kniBridge4594(p0: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge4595")
private external fun kniBridge4595(p0: NativePtr, p1: Long): Long
@SymbolName("libwebsockets_kniBridge4596")
private external fun kniBridge4596(p0: NativePtr, p1: Long): Long
@SymbolName("libwebsockets_kniBridge4597")
private external fun kniBridge4597(p0: NativePtr, p1: NativePtr, p2: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4598")
private external fun kniBridge4598(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4599")
private external fun kniBridge4599(p0: NativePtr, p1: Long): Long
@SymbolName("libwebsockets_kniBridge4600")
private external fun kniBridge4600(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4601")
private external fun kniBridge4601(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4602")
private external fun kniBridge4602(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4603")
private external fun kniBridge4603(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4604")
private external fun kniBridge4604(p0: NativePtr, p1: Long): Long
@SymbolName("libwebsockets_kniBridge4605")
private external fun kniBridge4605(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4606")
private external fun kniBridge4606(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4607")
private external fun kniBridge4607(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4608")
private external fun kniBridge4608(p0: NativePtr, p1: Byte): Byte
@SymbolName("libwebsockets_kniBridge4609")
private external fun kniBridge4609(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: UByte): Unit
@SymbolName("libwebsockets_kniBridge4610")
private external fun kniBridge4610(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4611")
private external fun kniBridge4611(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4612")
private external fun kniBridge4612(p0: NativePtr, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4613")
private external fun kniBridge4613(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4614")
private external fun kniBridge4614(p0: NativePtr, p1: Int, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4615")
private external fun kniBridge4615(p0: NativePtr, p1: Int): ULong
@SymbolName("libwebsockets_kniBridge4616")
private external fun kniBridge4616(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4617")
private external fun kniBridge4617(): NativePtr
@SymbolName("libwebsockets_kniBridge4618")
private external fun kniBridge4618(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4619")
private external fun kniBridge4619(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4620")
private external fun kniBridge4620(): NativePtr
@SymbolName("libwebsockets_kniBridge4621")
private external fun kniBridge4621(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4622")
private external fun kniBridge4622(p0: NativePtr, p1: NativePtr, p2: NativePtr): UInt
@SymbolName("libwebsockets_kniBridge4623")
private external fun kniBridge4623(p0: NativePtr, p1: Int): Unit
@SymbolName("libwebsockets_kniBridge4624")
private external fun kniBridge4624(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4625")
private external fun kniBridge4625(p0: NativePtr, p1: NativePtr, p2: Int): Unit
@SymbolName("libwebsockets_kniBridge4626")
private external fun kniBridge4626(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4627")
private external fun kniBridge4627(p0: NativePtr, p1: NativePtr, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4628")
private external fun kniBridge4628(p0: NativePtr, p1: NativePtr, p2: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4629")
private external fun kniBridge4629(p0: NativePtr, p1: ULong, p2: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4630")
private external fun kniBridge4630(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4631")
private external fun kniBridge4631(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4632")
private external fun kniBridge4632(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4633")
private external fun kniBridge4633(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4634")
private external fun kniBridge4634(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4635")
private external fun kniBridge4635(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4636")
private external fun kniBridge4636(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4637")
private external fun kniBridge4637(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4638")
private external fun kniBridge4638(): ULong
@SymbolName("libwebsockets_kniBridge4639")
private external fun kniBridge4639(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4640")
private external fun kniBridge4640(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4641")
private external fun kniBridge4641(p0: ULong): ULong
@SymbolName("libwebsockets_kniBridge4642")
private external fun kniBridge4642(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4643")
private external fun kniBridge4643(p0: NativePtr): ULong
@SymbolName("libwebsockets_kniBridge4644")
private external fun kniBridge4644(p0: Int): NativePtr
@SymbolName("libwebsockets_kniBridge4645")
private external fun kniBridge4645(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4646")
private external fun kniBridge4646(p0: NativePtr, p1: NativePtr, p2: Int, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4647")
private external fun kniBridge4647(p0: NativePtr, p1: UInt, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4648")
private external fun kniBridge4648(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4649")
private external fun kniBridge4649(p0: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4650")
private external fun kniBridge4650(p0: NativePtr, p1: NativePtr): NativePtr
@SymbolName("libwebsockets_kniBridge4651")
private external fun kniBridge4651(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4652")
private external fun kniBridge4652(p0: NativePtr, p1: ULong): NativePtr
@SymbolName("libwebsockets_kniBridge4653")
private external fun kniBridge4653(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4654")
private external fun kniBridge4654(p0: NativePtr, p1: Int, p2: Int): Int
@SymbolName("libwebsockets_kniBridge4655")
private external fun kniBridge4655(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int, p6: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4656")
private external fun kniBridge4656(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4657")
private external fun kniBridge4657(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4658")
private external fun kniBridge4658(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4659")
private external fun kniBridge4659(p0: UInt): ULong
@SymbolName("libwebsockets_kniBridge4660")
private external fun kniBridge4660(p0: UInt): ULong
@SymbolName("libwebsockets_kniBridge4661")
private external fun kniBridge4661(p0: NativePtr, p1: UInt): Int
@SymbolName("libwebsockets_kniBridge4662")
private external fun kniBridge4662(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge4663")
private external fun kniBridge4663(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4664")
private external fun kniBridge4664(p0: NativePtr, p1: UInt, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4665")
private external fun kniBridge4665(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge4666")
private external fun kniBridge4666(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4667")
private external fun kniBridge4667(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: UInt): Int
@SymbolName("libwebsockets_kniBridge4668")
private external fun kniBridge4668(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4669")
private external fun kniBridge4669(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge4670")
private external fun kniBridge4670(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4671")
private external fun kniBridge4671(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4672")
private external fun kniBridge4672(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge4673")
private external fun kniBridge4673(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge4674")
private external fun kniBridge4674(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge4675")
private external fun kniBridge4675(p0: NativePtr, p1: NativePtr, p2: UInt, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge4676")
private external fun kniBridge4676(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4677")
private external fun kniBridge4677(p0: NativePtr, p1: Int, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4678")
private external fun kniBridge4678(p0: NativePtr, p1: UInt, p2: UInt, p3: NativePtr, p4: UInt, p5: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4679")
private external fun kniBridge4679(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge4680")
private external fun kniBridge4680(p0: NativePtr, p1: NativePtr, p2: ULong, p3: NativePtr, p4: NativePtr, p5: NativePtr, p6: NativePtr, p7: Int): Int
@SymbolName("libwebsockets_kniBridge4681")
private external fun kniBridge4681(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4682")
private external fun kniBridge4682(p0: NativePtr, p1: NativePtr, p2: UInt): Int
@SymbolName("libwebsockets_kniBridge4683")
private external fun kniBridge4683(p0: NativePtr, p1: UInt, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4684")
private external fun kniBridge4684(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4685")
private external fun kniBridge4685(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4686")
private external fun kniBridge4686(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4687")
private external fun kniBridge4687(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: ULong): Int
@SymbolName("libwebsockets_kniBridge4688")
private external fun kniBridge4688(p0: NativePtr, p1: NativePtr, p2: UInt, p3: Int, p4: NativePtr, p5: ULong): Int
@SymbolName("libwebsockets_kniBridge4689")
private external fun kniBridge4689(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4690")
private external fun kniBridge4690(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4691")
private external fun kniBridge4691(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4692")
private external fun kniBridge4692(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: ULong): Int
@SymbolName("libwebsockets_kniBridge4693")
private external fun kniBridge4693(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4694")
private external fun kniBridge4694(p0: NativePtr, p1: Int, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4695")
private external fun kniBridge4695(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4696")
private external fun kniBridge4696(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4697")
private external fun kniBridge4697(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4698")
private external fun kniBridge4698(p0: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4699")
private external fun kniBridge4699(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4700")
private external fun kniBridge4700(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4701")
private external fun kniBridge4701(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4702")
private external fun kniBridge4702(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4703")
private external fun kniBridge4703(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4704")
private external fun kniBridge4704(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge4705")
private external fun kniBridge4705(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge4706")
private external fun kniBridge4706(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4707")
private external fun kniBridge4707(p0: NativePtr, p1: NativePtr, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4708")
private external fun kniBridge4708(p0: NativePtr, p1: ULong, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4709")
private external fun kniBridge4709(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4710")
private external fun kniBridge4710(p0: NativePtr, p1: Int, p2: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4711")
private external fun kniBridge4711(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4712")
private external fun kniBridge4712(p0: NativePtr, p1: NativePtr, p2: ULong): Int
@SymbolName("libwebsockets_kniBridge4713")
private external fun kniBridge4713(p0: NativePtr, p1: Int, p2: NativePtr, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge4714")
private external fun kniBridge4714(p0: NativePtr, p1: ULong, p2: NativePtr, p3: ULong): Int
@SymbolName("libwebsockets_kniBridge4715")
private external fun kniBridge4715(p0: NativePtr, p1: ULong, p2: Int, p3: NativePtr, p4: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4716")
private external fun kniBridge4716(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: ULong, p4: NativePtr, p5: NativePtr, p6: ULong, p7: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4717")
private external fun kniBridge4717(p0: ULong, p1: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4718")
private external fun kniBridge4718(p0: NativePtr, p1: NativePtr): Int
@SymbolName("libwebsockets_kniBridge4719")
private external fun kniBridge4719(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: NativePtr, p4: Int): Int
@SymbolName("libwebsockets_kniBridge4720")
private external fun kniBridge4720(p0: NativePtr, p1: NativePtr, p2: Int, p3: NativePtr, p4: NativePtr, p5: Int): Int
@SymbolName("libwebsockets_kniBridge4721")
private external fun kniBridge4721(p0: NativePtr, p1: NativePtr, p2: NativePtr, p3: Int): Int
@SymbolName("libwebsockets_kniBridge4722")
private external fun kniBridge4722(): ULong
@SymbolName("libwebsockets_kniBridge4723")
private external fun kniBridge4723(): Int
@SymbolName("libwebsockets_kniBridge4724")
private external fun kniBridge4724(): NativePtr
@SymbolName("libwebsockets_kniBridge4725")
private external fun kniBridge4725(): NativePtr
@SymbolName("libwebsockets_kniBridge4726")
private external fun kniBridge4726(): NativePtr
@SymbolName("libwebsockets_kniBridge4727")
private external fun kniBridge4727(): NativePtr
@SymbolName("libwebsockets_kniBridge4728")
private external fun kniBridge4728(): NativePtr
@SymbolName("libwebsockets_kniBridge4729")
private external fun kniBridge4729(): NativePtr
@SymbolName("libwebsockets_kniBridge4730")
private external fun kniBridge4730(): NativePtr
@SymbolName("libwebsockets_kniBridge4731")
private external fun kniBridge4731(): NativePtr
@SymbolName("libwebsockets_kniBridge4732")
private external fun kniBridge4732(): NativePtr
@SymbolName("libwebsockets_kniBridge4733")
private external fun kniBridge4733(): NativePtr
@SymbolName("libwebsockets_kniBridge4734")
private external fun kniBridge4734(): NativePtr
@SymbolName("libwebsockets_kniBridge4735")
private external fun kniBridge4735(): NativePtr
@SymbolName("libwebsockets_kniBridge4736")
private external fun kniBridge4736(): NativePtr
@SymbolName("libwebsockets_kniBridge4737")
private external fun kniBridge4737(): NativePtr
@SymbolName("libwebsockets_kniBridge4738")
private external fun kniBridge4738(): NativePtr
@SymbolName("libwebsockets_kniBridge4739")
private external fun kniBridge4739(): NativePtr
@SymbolName("libwebsockets_kniBridge4740")
private external fun kniBridge4740(): NativePtr
@SymbolName("libwebsockets_kniBridge4741")
private external fun kniBridge4741(): NativePtr
@SymbolName("libwebsockets_kniBridge4742")
private external fun kniBridge4742(): NativePtr
@SymbolName("libwebsockets_kniBridge4743")
private external fun kniBridge4743(): NativePtr
@SymbolName("libwebsockets_kniBridge4744")
private external fun kniBridge4744(): NativePtr
@SymbolName("libwebsockets_kniBridge4745")
private external fun kniBridge4745(): NativePtr
@SymbolName("libwebsockets_kniBridge4746")
private external fun kniBridge4746(): NativePtr
@SymbolName("libwebsockets_kniBridge4747")
private external fun kniBridge4747(): NativePtr
@SymbolName("libwebsockets_kniBridge4748")
private external fun kniBridge4748(): NativePtr
@SymbolName("libwebsockets_kniBridge4749")
private external fun kniBridge4749(): NativePtr
@SymbolName("libwebsockets_kniBridge4750")
private external fun kniBridge4750(): NativePtr
@SymbolName("libwebsockets_kniBridge4751")
private external fun kniBridge4751(): NativePtr
@SymbolName("libwebsockets_kniBridge4752")
private external fun kniBridge4752(): NativePtr
@SymbolName("libwebsockets_kniBridge4753")
private external fun kniBridge4753(): NativePtr
@SymbolName("libwebsockets_kniBridge4754")
private external fun kniBridge4754(): NativePtr
@SymbolName("libwebsockets_kniBridge4755")
private external fun kniBridge4755(): NativePtr
@SymbolName("libwebsockets_kniBridge4756")
private external fun kniBridge4756(): NativePtr
@SymbolName("libwebsockets_kniBridge4757")
private external fun kniBridge4757(): NativePtr
@SymbolName("libwebsockets_kniBridge4758")
private external fun kniBridge4758(): NativePtr
@SymbolName("libwebsockets_kniBridge4759")
private external fun kniBridge4759(): NativePtr
@SymbolName("libwebsockets_kniBridge4760")
private external fun kniBridge4760(): NativePtr
@SymbolName("libwebsockets_kniBridge4761")
private external fun kniBridge4761(): NativePtr
@SymbolName("libwebsockets_kniBridge4762")
private external fun kniBridge4762(): NativePtr
@SymbolName("libwebsockets_kniBridge4763")
private external fun kniBridge4763(): NativePtr
@SymbolName("libwebsockets_kniBridge4764")
private external fun kniBridge4764(): NativePtr
@SymbolName("libwebsockets_kniBridge4765")
private external fun kniBridge4765(): NativePtr
@SymbolName("libwebsockets_kniBridge4766")
private external fun kniBridge4766(): NativePtr
@SymbolName("libwebsockets_kniBridge4767")
private external fun kniBridge4767(): NativePtr
@SymbolName("libwebsockets_kniBridge4768")
private external fun kniBridge4768(): NativePtr
@SymbolName("libwebsockets_kniBridge4769")
private external fun kniBridge4769(): NativePtr
@SymbolName("libwebsockets_kniBridge4770")
private external fun kniBridge4770(): NativePtr
@SymbolName("libwebsockets_kniBridge4771")
private external fun kniBridge4771(): NativePtr
@SymbolName("libwebsockets_kniBridge4772")
private external fun kniBridge4772(): NativePtr
@SymbolName("libwebsockets_kniBridge4773")
private external fun kniBridge4773(): NativePtr
@SymbolName("libwebsockets_kniBridge4774")
private external fun kniBridge4774(): NativePtr
@SymbolName("libwebsockets_kniBridge4775")
private external fun kniBridge4775(): NativePtr
@SymbolName("libwebsockets_kniBridge4776")
private external fun kniBridge4776(): NativePtr
@SymbolName("libwebsockets_kniBridge4777")
private external fun kniBridge4777(): NativePtr
@SymbolName("libwebsockets_kniBridge4778")
private external fun kniBridge4778(): NativePtr
@SymbolName("libwebsockets_kniBridge4779")
private external fun kniBridge4779(): NativePtr
@SymbolName("libwebsockets_kniBridge4780")
private external fun kniBridge4780(): NativePtr
@SymbolName("libwebsockets_kniBridge4781")
private external fun kniBridge4781(): NativePtr
@SymbolName("libwebsockets_kniBridge4782")
private external fun kniBridge4782(): NativePtr
@SymbolName("libwebsockets_kniBridge4783")
private external fun kniBridge4783(): NativePtr
@SymbolName("libwebsockets_kniBridge4784")
private external fun kniBridge4784(): NativePtr
@SymbolName("libwebsockets_kniBridge4785")
private external fun kniBridge4785(): NativePtr
@SymbolName("libwebsockets_kniBridge4786")
private external fun kniBridge4786(): NativePtr
@SymbolName("libwebsockets_kniBridge4787")
private external fun kniBridge4787(): NativePtr
@SymbolName("libwebsockets_kniBridge4788")
private external fun kniBridge4788(): NativePtr
@SymbolName("libwebsockets_kniBridge4789")
private external fun kniBridge4789(): NativePtr
@SymbolName("libwebsockets_kniBridge4790")
private external fun kniBridge4790(): NativePtr
@SymbolName("libwebsockets_kniBridge4791")
private external fun kniBridge4791(): NativePtr
@SymbolName("libwebsockets_kniBridge4792")
private external fun kniBridge4792(): NativePtr
@SymbolName("libwebsockets_kniBridge4793")
private external fun kniBridge4793(): NativePtr
@SymbolName("libwebsockets_kniBridge4794")
private external fun kniBridge4794(): NativePtr
@SymbolName("libwebsockets_kniBridge4795")
private external fun kniBridge4795(): NativePtr
@SymbolName("libwebsockets_kniBridge4796")
private external fun kniBridge4796(): NativePtr
@SymbolName("libwebsockets_kniBridge4797")
private external fun kniBridge4797(): NativePtr
@SymbolName("libwebsockets_kniBridge4798")
private external fun kniBridge4798(): NativePtr
@SymbolName("libwebsockets_kniBridge4799")
private external fun kniBridge4799(): NativePtr
@SymbolName("libwebsockets_kniBridge4800")
private external fun kniBridge4800(): NativePtr
@SymbolName("libwebsockets_kniBridge4801")
private external fun kniBridge4801(): NativePtr
@SymbolName("libwebsockets_kniBridge4802")
private external fun kniBridge4802(): NativePtr
@SymbolName("libwebsockets_kniBridge4803")
private external fun kniBridge4803(): NativePtr
@SymbolName("libwebsockets_kniBridge4804")
private external fun kniBridge4804(): NativePtr
@SymbolName("libwebsockets_kniBridge4805")
private external fun kniBridge4805(): NativePtr
@SymbolName("libwebsockets_kniBridge4806")
private external fun kniBridge4806(): NativePtr
@SymbolName("libwebsockets_kniBridge4807")
private external fun kniBridge4807(): Int
@SymbolName("libwebsockets_kniBridge4808")
private external fun kniBridge4808(): NativePtr
@SymbolName("libwebsockets_kniBridge4809")
private external fun kniBridge4809(): NativePtr
@SymbolName("libwebsockets_kniBridge4810")
private external fun kniBridge4810(): NativePtr
@SymbolName("libwebsockets_kniBridge4811")
private external fun kniBridge4811(): NativePtr
@SymbolName("libwebsockets_kniBridge4812")
private external fun kniBridge4812(): NativePtr
@SymbolName("libwebsockets_kniBridge4813")
private external fun kniBridge4813(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4814")
private external fun kniBridge4814(): NativePtr
@SymbolName("libwebsockets_kniBridge4815")
private external fun kniBridge4815(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4816")
private external fun kniBridge4816(): Int
@SymbolName("libwebsockets_kniBridge4817")
private external fun kniBridge4817(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge4818")
private external fun kniBridge4818(): Int
@SymbolName("libwebsockets_kniBridge4819")
private external fun kniBridge4819(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge4820")
private external fun kniBridge4820(): Int
@SymbolName("libwebsockets_kniBridge4821")
private external fun kniBridge4821(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge4822")
private external fun kniBridge4822(): NativePtr
@SymbolName("libwebsockets_kniBridge4823")
private external fun kniBridge4823(): NativePtr
@SymbolName("libwebsockets_kniBridge4824")
private external fun kniBridge4824(): NativePtr
@SymbolName("libwebsockets_kniBridge4825")
private external fun kniBridge4825(): Int
@SymbolName("libwebsockets_kniBridge4826")
private external fun kniBridge4826(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge4827")
private external fun kniBridge4827(): Long
@SymbolName("libwebsockets_kniBridge4828")
private external fun kniBridge4828(p0: Long): Unit
@SymbolName("libwebsockets_kniBridge4829")
private external fun kniBridge4829(): NativePtr
@SymbolName("libwebsockets_kniBridge4830")
private external fun kniBridge4830(): Int
@SymbolName("libwebsockets_kniBridge4831")
private external fun kniBridge4831(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge4832")
private external fun kniBridge4832(): Long
@SymbolName("libwebsockets_kniBridge4833")
private external fun kniBridge4833(p0: Long): Unit
@SymbolName("libwebsockets_kniBridge4834")
private external fun kniBridge4834(): NativePtr
@SymbolName("libwebsockets_kniBridge4835")
private external fun kniBridge4835(): NativePtr
@SymbolName("libwebsockets_kniBridge4836")
private external fun kniBridge4836(): NativePtr
@SymbolName("libwebsockets_kniBridge4837")
private external fun kniBridge4837(): NativePtr
@SymbolName("libwebsockets_kniBridge4838")
private external fun kniBridge4838(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4839")
private external fun kniBridge4839(): NativePtr
@SymbolName("libwebsockets_kniBridge4840")
private external fun kniBridge4840(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4841")
private external fun kniBridge4841(): NativePtr
@SymbolName("libwebsockets_kniBridge4842")
private external fun kniBridge4842(p0: NativePtr): Unit
@SymbolName("libwebsockets_kniBridge4843")
private external fun kniBridge4843(): Int
@SymbolName("libwebsockets_kniBridge4844")
private external fun kniBridge4844(p0: Int): Unit
@SymbolName("libwebsockets_kniBridge4845")
private external fun kniBridge4845(): NativePtr
@SymbolName("libwebsockets_kniBridge4846")
private external fun kniBridge4846(): NativePtr
@SymbolName("libwebsockets_kniBridge4847")
private external fun kniBridge4847(): NativePtr
@SymbolName("libwebsockets_kniBridge4848")
private external fun kniBridge4848(): NativePtr
@SymbolName("libwebsockets_kniBridge4849")
private external fun kniBridge4849(): NativePtr
@SymbolName("libwebsockets_kniBridge4850")
private external fun kniBridge4850(): NativePtr
@SymbolName("libwebsockets_kniBridge4851")
private external fun kniBridge4851(): NativePtr
@SymbolName("libwebsockets_kniBridge4852")
private external fun kniBridge4852(): NativePtr
@SymbolName("libwebsockets_kniBridge4853")
private external fun kniBridge4853(): NativePtr
@SymbolName("libwebsockets_kniBridge4854")
private external fun kniBridge4854(): NativePtr
@SymbolName("libwebsockets_kniBridge4855")
private external fun kniBridge4855(): NativePtr
@SymbolName("libwebsockets_kniBridge4856")
private external fun kniBridge4856(): NativePtr
@SymbolName("libwebsockets_kniBridge4857")
private external fun kniBridge4857(): NativePtr
@SymbolName("libwebsockets_kniBridge4858")
private external fun kniBridge4858(): NativePtr
@SymbolName("libwebsockets_kniBridge4859")
private external fun kniBridge4859(): NativePtr
@SymbolName("libwebsockets_kniBridge4860")
private external fun kniBridge4860(): NativePtr
@SymbolName("libwebsockets_kniBridge4861")
private external fun kniBridge4861(): NativePtr
@SymbolName("libwebsockets_kniBridge4862")
private external fun kniBridge4862(): NativePtr
@SymbolName("libwebsockets_kniBridge4863")
private external fun kniBridge4863(): NativePtr
@SymbolName("libwebsockets_kniBridge4864")
private external fun kniBridge4864(): NativePtr
@SymbolName("libwebsockets_kniBridge4865")
private external fun kniBridge4865(): NativePtr
@SymbolName("libwebsockets_kniBridge4866")
private external fun kniBridge4866(): NativePtr
@SymbolName("libwebsockets_kniBridge4867")
private external fun kniBridge4867(): NativePtr
@SymbolName("libwebsockets_kniBridge4868")
private external fun kniBridge4868(): NativePtr
@SymbolName("libwebsockets_kniBridge4869")
private external fun kniBridge4869(): NativePtr
@SymbolName("libwebsockets_kniBridge4870")
private external fun kniBridge4870(): NativePtr
@SymbolName("libwebsockets_kniBridge4871")
private external fun kniBridge4871(): NativePtr
@SymbolName("libwebsockets_kniBridge4872")
private external fun kniBridge4872(): NativePtr
@SymbolName("libwebsockets_kniBridge4873")
private external fun kniBridge4873(): NativePtr
@SymbolName("libwebsockets_kniBridge4874")
private external fun kniBridge4874(): NativePtr
@SymbolName("libwebsockets_kniBridge4875")
private external fun kniBridge4875(): NativePtr
@SymbolName("libwebsockets_kniBridge4876")
private external fun kniBridge4876(): NativePtr
@SymbolName("libwebsockets_kniBridge4877")
private external fun kniBridge4877(): NativePtr
@SymbolName("libwebsockets_kniBridge4878")
private external fun kniBridge4878(): NativePtr
@SymbolName("libwebsockets_kniBridge4879")
private external fun kniBridge4879(): NativePtr
@SymbolName("libwebsockets_kniBridge4880")
private external fun kniBridge4880(): NativePtr
@SymbolName("libwebsockets_kniBridge4881")
private external fun kniBridge4881(): NativePtr
@SymbolName("libwebsockets_kniBridge4882")
private external fun kniBridge4882(): NativePtr
@SymbolName("libwebsockets_kniBridge4883")
private external fun kniBridge4883(): NativePtr
@SymbolName("libwebsockets_kniBridge4884")
private external fun kniBridge4884(): NativePtr
@SymbolName("libwebsockets_kniBridge4885")
private external fun kniBridge4885(): NativePtr
@SymbolName("libwebsockets_kniBridge4886")
private external fun kniBridge4886(): NativePtr
@SymbolName("libwebsockets_kniBridge4887")
private external fun kniBridge4887(): NativePtr
@SymbolName("libwebsockets_kniBridge4888")
private external fun kniBridge4888(): NativePtr
@SymbolName("libwebsockets_kniBridge4889")
private external fun kniBridge4889(): NativePtr
@SymbolName("libwebsockets_kniBridge4890")
private external fun kniBridge4890(): NativePtr
@SymbolName("libwebsockets_kniBridge4891")
private external fun kniBridge4891(): NativePtr
@SymbolName("libwebsockets_kniBridge4892")
private external fun kniBridge4892(): NativePtr
@SymbolName("libwebsockets_kniBridge4893")
private external fun kniBridge4893(): NativePtr
@SymbolName("libwebsockets_kniBridge4894")
private external fun kniBridge4894(): NativePtr
@SymbolName("libwebsockets_kniBridge4895")
private external fun kniBridge4895(): NativePtr
@SymbolName("libwebsockets_kniBridge4896")
private external fun kniBridge4896(): NativePtr
@SymbolName("libwebsockets_kniBridge4897")
private external fun kniBridge4897(): NativePtr
@SymbolName("libwebsockets_kniBridge4898")
private external fun kniBridge4898(): NativePtr
@SymbolName("libwebsockets_kniBridge4899")
private external fun kniBridge4899(): NativePtr
@SymbolName("libwebsockets_kniBridge4900")
private external fun kniBridge4900(): NativePtr
@SymbolName("libwebsockets_kniBridge4901")
private external fun kniBridge4901(): NativePtr
@SymbolName("libwebsockets_kniBridge4902")
private external fun kniBridge4902(): NativePtr
@SymbolName("libwebsockets_kniBridge4903")
private external fun kniBridge4903(): NativePtr
@SymbolName("libwebsockets_kniBridge4904")
private external fun kniBridge4904(): NativePtr
@SymbolName("libwebsockets_kniBridge4905")
private external fun kniBridge4905(): NativePtr
@SymbolName("libwebsockets_kniBridge4906")
private external fun kniBridge4906(): NativePtr
@SymbolName("libwebsockets_kniBridge4907")
private external fun kniBridge4907(): NativePtr
@SymbolName("libwebsockets_kniBridge4908")
private external fun kniBridge4908(): NativePtr
@SymbolName("libwebsockets_kniBridge4909")
private external fun kniBridge4909(): NativePtr
@SymbolName("libwebsockets_kniBridge4910")
private external fun kniBridge4910(): NativePtr
@SymbolName("libwebsockets_kniBridge4911")
private external fun kniBridge4911(): NativePtr
@SymbolName("libwebsockets_kniBridge4912")
private external fun kniBridge4912(): NativePtr
@SymbolName("libwebsockets_kniBridge4913")
private external fun kniBridge4913(): NativePtr
@SymbolName("libwebsockets_kniBridge4914")
private external fun kniBridge4914(): NativePtr
@SymbolName("libwebsockets_kniBridge4915")
private external fun kniBridge4915(): NativePtr
